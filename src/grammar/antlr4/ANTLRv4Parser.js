// @ts-nocheck

// Generated from ANTLRv4Parser.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ANTLRv4ParserListener = require('./ANTLRv4ParserListener').ANTLRv4ParserListener;
var grammarFileName = "ANTLRv4Parser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003?\u0286\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0003\u0002\u0007\u0002\u0084\n\u0002\f\u0002\u000e\u0002\u0087",
    "\u000b\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u008b\n\u0002\f\u0002",
    "\u000e\u0002\u008e\u000b\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u0092",
    "\n\u0002\f\u0002\u000e\u0002\u0095\u000b\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00a2\n\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00a9",
    "\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0007\u0006\u00b0\n\u0006\f\u0006\u000e\u0006\u00b3\u000b\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\b\u0003\b\u0003\b\u0007\b\u00be\n\b\f\b\u000e\b\u00c1\u000b\b\u0003",
    "\b\u0003\b\u0003\b\u0005\b\u00c6\n\b\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0007\t\u00cc\n\t\f\t\u000e\t\u00cf\u000b\t\u0003\t\u0003\t\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00d8\n\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0005\u000b\u00dd\n\u000b\u0003\u000b\u0003\u000b",
    "\u0003\f\u0003\f\u0003\f\u0005\f\u00e4\n\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\r\u0007\r\u00eb\n\r\f\r\u000e\r\u00ee\u000b\r\u0003\r\u0005",
    "\r\u00f1\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u00f7\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u00ff\n\u000f\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u0103\n\u0010\f\u0010\u000e\u0010\u0106\u000b\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0007\u0011\u010c\n\u0011",
    "\f\u0011\u000e\u0011\u010f\u000b\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u0117\n\u0012",
    "\f\u0012\u000e\u0012\u011a\u000b\u0012\u0003\u0013\u0007\u0013\u011d",
    "\n\u0013\f\u0013\u000e\u0013\u0120\u000b\u0013\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u0124\n\u0014\u0003\u0015\u0007\u0015\u0127\n\u0015\f\u0015",
    "\u000e\u0015\u012a\u000b\u0015\u0003\u0015\u0005\u0015\u012d\n\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u0131\n\u0015\u0003\u0015\u0005",
    "\u0015\u0134\n\u0015\u0003\u0015\u0005\u0015\u0137\n\u0015\u0003\u0015",
    "\u0005\u0015\u013a\n\u0015\u0003\u0015\u0007\u0015\u013d\n\u0015\f\u0015",
    "\u000e\u0015\u0140\u000b\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0007\u0016\u0148\n\u0016\f\u0016\u000e",
    "\u0016\u014b\u000b\u0016\u0003\u0016\u0005\u0016\u014e\n\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u0159\n\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0007\u001b\u0162\n\u001b\f\u001b\u000e\u001b\u0165\u000b\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0006\u001e\u016f\n\u001e\r\u001e\u000e\u001e\u0170",
    "\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003!\u0003!\u0003!\u0007!\u017a",
    "\n!\f!\u000e!\u017d\u000b!\u0003\"\u0003\"\u0003\"\u0005\"\u0182\n\"",
    "\u0003#\u0007#\u0185\n#\f#\u000e#\u0188\u000b#\u0003#\u0005#\u018b\n",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003%\u0003%\u0003",
    "%\u0007%\u0197\n%\f%\u000e%\u019a\u000b%\u0003&\u0003&\u0005&\u019e",
    "\n&\u0003&\u0005&\u01a1\n&\u0003\'\u0006\'\u01a4\n\'\r\'\u000e\'\u01a5",
    "\u0003(\u0003(\u0005(\u01aa\n(\u0003(\u0003(\u0005(\u01ae\n(\u0003(",
    "\u0003(\u0005(\u01b2\n(\u0003(\u0003(\u0005(\u01b6\n(\u0005(\u01b8\n",
    "(\u0003)\u0003)\u0003)\u0003)\u0005)\u01be\n)\u0003*\u0003*\u0003*\u0003",
    "*\u0003+\u0003+\u0003+\u0003+\u0007+\u01c8\n+\f+\u000e+\u01cb\u000b",
    "+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u01d3\n,\u0003-\u0003",
    "-\u0005-\u01d7\n-\u0003.\u0003.\u0005.\u01db\n.\u0003/\u0003/\u0003",
    "/\u0007/\u01e0\n/\f/\u000e/\u01e3\u000b/\u00030\u00050\u01e6\n0\u0003",
    "0\u00060\u01e9\n0\r0\u000e0\u01ea\u00030\u00050\u01ee\n0\u00031\u0003",
    "1\u00031\u00051\u01f3\n1\u00031\u00031\u00031\u00051\u01f8\n1\u0003",
    "1\u00031\u00031\u00051\u01fd\n1\u00051\u01ff\n1\u00032\u00032\u0003",
    "2\u00032\u00052\u0205\n2\u00033\u00033\u00053\u0209\n3\u00034\u0003",
    "4\u00035\u00035\u00055\u020f\n5\u00035\u00035\u00055\u0213\n5\u0003",
    "5\u00035\u00055\u0217\n5\u00055\u0219\n5\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u0221\n6\u00056\u0223\n6\u00037\u00037\u0003",
    "7\u00037\u00037\u00057\u022a\n7\u00057\u022c\n7\u00038\u00038\u0003",
    "8\u00038\u00058\u0232\n8\u00039\u00039\u00039\u00039\u00079\u0238\n",
    "9\f9\u000e9\u023b\u000b9\u00039\u00039\u0003:\u0003:\u0005:\u0241\n",
    ":\u0003:\u0003:\u0005:\u0245\n:\u0003:\u0003:\u0005:\u0249\n:\u0003",
    ";\u0003;\u0005;\u024d\n;\u0003;\u0007;\u0250\n;\f;\u000e;\u0253\u000b",
    ";\u0003;\u0005;\u0256\n;\u0003;\u0003;\u0003;\u0003<\u0003<\u0005<\u025d",
    "\n<\u0003<\u0005<\u0260\n<\u0003=\u0003=\u0003=\u0003=\u0003>\u0003",
    ">\u0005>\u0268\n>\u0003>\u0003>\u0005>\u026c\n>\u0005>\u026e\n>\u0003",
    "?\u0003?\u0003?\u0003?\u0007?\u0274\n?\f?\u000e?\u0277\u000b?\u0003",
    "?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0280\n@\u0005@\u0282",
    "\n@\u0003A\u0003A\u0003A\u0002\u0002B\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0002\u0005\u0004\u0002\u0012",
    "\u0012\u0016\u0018\u0004\u0002**--\u0003\u0002\u0003\u0004\u0002\u02ad",
    "\u0002\u0085\u0003\u0002\u0002\u0002\u0004\u0098\u0003\u0002\u0002\u0002",
    "\u0006\u00a1\u0003\u0002\u0002\u0002\b\u00a8\u0003\u0002\u0002\u0002",
    "\n\u00aa\u0003\u0002\u0002\u0002\f\u00b6\u0003\u0002\u0002\u0002\u000e",
    "\u00c5\u0003\u0002\u0002\u0002\u0010\u00c7\u0003\u0002\u0002\u0002\u0012",
    "\u00d7\u0003\u0002\u0002\u0002\u0014\u00d9\u0003\u0002\u0002\u0002\u0016",
    "\u00e0\u0003\u0002\u0002\u0002\u0018\u00e7\u0003\u0002\u0002\u0002\u001a",
    "\u00f2\u0003\u0002\u0002\u0002\u001c\u00fe\u0003\u0002\u0002\u0002\u001e",
    "\u0100\u0003\u0002\u0002\u0002 \u0109\u0003\u0002\u0002\u0002\"\u0112",
    "\u0003\u0002\u0002\u0002$\u011e\u0003\u0002\u0002\u0002&\u0123\u0003",
    "\u0002\u0002\u0002(\u0128\u0003\u0002\u0002\u0002*\u0149\u0003\u0002",
    "\u0002\u0002,\u014f\u0003\u0002\u0002\u0002.\u0153\u0003\u0002\u0002",
    "\u00020\u0158\u0003\u0002\u0002\u00022\u015a\u0003\u0002\u0002\u0002",
    "4\u015d\u0003\u0002\u0002\u00026\u0166\u0003\u0002\u0002\u00028\u0169",
    "\u0003\u0002\u0002\u0002:\u016e\u0003\u0002\u0002\u0002<\u0172\u0003",
    "\u0002\u0002\u0002>\u0174\u0003\u0002\u0002\u0002@\u0176\u0003\u0002",
    "\u0002\u0002B\u017e\u0003\u0002\u0002\u0002D\u0186\u0003\u0002\u0002",
    "\u0002F\u0191\u0003\u0002\u0002\u0002H\u0193\u0003\u0002\u0002\u0002",
    "J\u01a0\u0003\u0002\u0002\u0002L\u01a3\u0003\u0002\u0002\u0002N\u01b7",
    "\u0003\u0002\u0002\u0002P\u01b9\u0003\u0002\u0002\u0002R\u01bf\u0003",
    "\u0002\u0002\u0002T\u01c3\u0003\u0002\u0002\u0002V\u01d2\u0003\u0002",
    "\u0002\u0002X\u01d6\u0003\u0002\u0002\u0002Z\u01da\u0003\u0002\u0002",
    "\u0002\\\u01dc\u0003\u0002\u0002\u0002^\u01ed\u0003\u0002\u0002\u0002",
    "`\u01fe\u0003\u0002\u0002\u0002b\u0200\u0003\u0002\u0002\u0002d\u0206",
    "\u0003\u0002\u0002\u0002f\u020a\u0003\u0002\u0002\u0002h\u0218\u0003",
    "\u0002\u0002\u0002j\u0222\u0003\u0002\u0002\u0002l\u022b\u0003\u0002",
    "\u0002\u0002n\u0231\u0003\u0002\u0002\u0002p\u0233\u0003\u0002\u0002",
    "\u0002r\u0248\u0003\u0002\u0002\u0002t\u024a\u0003\u0002\u0002\u0002",
    "v\u025a\u0003\u0002\u0002\u0002x\u0261\u0003\u0002\u0002\u0002z\u026d",
    "\u0003\u0002\u0002\u0002|\u026f\u0003\u0002\u0002\u0002~\u0281\u0003",
    "\u0002\u0002\u0002\u0080\u0283\u0003\u0002\u0002\u0002\u0082\u0084\u0007",
    "\u0006\u0002\u0002\u0083\u0082\u0003\u0002\u0002\u0002\u0084\u0087\u0003",
    "\u0002\u0002\u0002\u0085\u0083\u0003\u0002\u0002\u0002\u0085\u0086\u0003",
    "\u0002\u0002\u0002\u0086\u0088\u0003\u0002\u0002\u0002\u0087\u0085\u0003",
    "\u0002\u0002\u0002\u0088\u008c\u0005\u0004\u0003\u0002\u0089\u008b\u0005",
    "\b\u0005\u0002\u008a\u0089\u0003\u0002\u0002\u0002\u008b\u008e\u0003",
    "\u0002\u0002\u0002\u008c\u008a\u0003\u0002\u0002\u0002\u008c\u008d\u0003",
    "\u0002\u0002\u0002\u008d\u008f\u0003\u0002\u0002\u0002\u008e\u008c\u0003",
    "\u0002\u0002\u0002\u008f\u0093\u0005$\u0013\u0002\u0090\u0092\u0005",
    "\"\u0012\u0002\u0091\u0090\u0003\u0002\u0002\u0002\u0092\u0095\u0003",
    "\u0002\u0002\u0002\u0093\u0091\u0003\u0002\u0002\u0002\u0093\u0094\u0003",
    "\u0002\u0002\u0002\u0094\u0096\u0003\u0002\u0002\u0002\u0095\u0093\u0003",
    "\u0002\u0002\u0002\u0096\u0097\u0007\u0002\u0002\u0003\u0097\u0003\u0003",
    "\u0002\u0002\u0002\u0098\u0099\u0005\u0006\u0004\u0002\u0099\u009a\u0005",
    "\u0080A\u0002\u009a\u009b\u0007\"\u0002\u0002\u009b\u0005\u0003\u0002",
    "\u0002\u0002\u009c\u009d\u0007\u0013\u0002\u0002\u009d\u00a2\u0007\u0015",
    "\u0002\u0002\u009e\u009f\u0007\u0014\u0002\u0002\u009f\u00a2\u0007\u0015",
    "\u0002\u0002\u00a0\u00a2\u0007\u0015\u0002\u0002\u00a1\u009c\u0003\u0002",
    "\u0002\u0002\u00a1\u009e\u0003\u0002\u0002\u0002\u00a1\u00a0\u0003\u0002",
    "\u0002\u0002\u00a2\u0007\u0003\u0002\u0002\u0002\u00a3\u00a9\u0005\n",
    "\u0006\u0002\u00a4\u00a9\u0005\u0010\t\u0002\u00a5\u00a9\u0005\u0014",
    "\u000b\u0002\u00a6\u00a9\u0005\u0016\f\u0002\u00a7\u00a9\u0005\u001a",
    "\u000e\u0002\u00a8\u00a3\u0003\u0002\u0002\u0002\u00a8\u00a4\u0003\u0002",
    "\u0002\u0002\u00a8\u00a5\u0003\u0002\u0002\u0002\u00a8\u00a6\u0003\u0002",
    "\u0002\u0002\u00a8\u00a7\u0003\u0002\u0002\u0002\u00a9\t\u0003\u0002",
    "\u0002\u0002\u00aa\u00ab\u0007\u000e\u0002\u0002\u00ab\u00b1\u0007%",
    "\u0002\u0002\u00ac\u00ad\u0005\f\u0007\u0002\u00ad\u00ae\u0007\"\u0002",
    "\u0002\u00ae\u00b0\u0003\u0002\u0002\u0002\u00af\u00ac\u0003\u0002\u0002",
    "\u0002\u00b0\u00b3\u0003\u0002\u0002\u0002\u00b1\u00af\u0003\u0002\u0002",
    "\u0002\u00b1\u00b2\u0003\u0002\u0002\u0002\u00b2\u00b4\u0003\u0002\u0002",
    "\u0002\u00b3\u00b1\u0003\u0002\u0002\u0002\u00b4\u00b5\u0007&\u0002",
    "\u0002\u00b5\u000b\u0003\u0002\u0002\u0002\u00b6\u00b7\u0005\u0080A",
    "\u0002\u00b7\u00b8\u0007*\u0002\u0002\u00b8\u00b9\u0005\u000e\b\u0002",
    "\u00b9\r\u0003\u0002\u0002\u0002\u00ba\u00bf\u0005\u0080A\u0002\u00bb",
    "\u00bc\u00072\u0002\u0002\u00bc\u00be\u0005\u0080A\u0002\u00bd\u00bb",
    "\u0003\u0002\u0002\u0002\u00be\u00c1\u0003\u0002\u0002\u0002\u00bf\u00bd",
    "\u0003\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c6",
    "\u0003\u0002\u0002\u0002\u00c1\u00bf\u0003\u0002\u0002\u0002\u00c2\u00c6",
    "\u0007\n\u0002\u0002\u00c3\u00c6\u0005\u001e\u0010\u0002\u00c4\u00c6",
    "\u0007\t\u0002\u0002\u00c5\u00ba\u0003\u0002\u0002\u0002\u00c5\u00c2",
    "\u0003\u0002\u0002\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002\u00c5\u00c4",
    "\u0003\u0002\u0002\u0002\u00c6\u000f\u0003\u0002\u0002\u0002\u00c7\u00c8",
    "\u0007\u0011\u0002\u0002\u00c8\u00cd\u0005\u0012\n\u0002\u00c9\u00ca",
    "\u0007!\u0002\u0002\u00ca\u00cc\u0005\u0012\n\u0002\u00cb\u00c9\u0003",
    "\u0002\u0002\u0002\u00cc\u00cf\u0003\u0002\u0002\u0002\u00cd\u00cb\u0003",
    "\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002\u00ce\u00d0\u0003",
    "\u0002\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002\u00d0\u00d1\u0007",
    "\"\u0002\u0002\u00d1\u0011\u0003\u0002\u0002\u0002\u00d2\u00d3\u0005",
    "\u0080A\u0002\u00d3\u00d4\u0007*\u0002\u0002\u00d4\u00d5\u0005\u0080",
    "A\u0002\u00d5\u00d8\u0003\u0002\u0002\u0002\u00d6\u00d8\u0005\u0080",
    "A\u0002\u00d7\u00d2\u0003\u0002\u0002\u0002\u00d7\u00d6\u0003\u0002",
    "\u0002\u0002\u00d8\u0013\u0003\u0002\u0002\u0002\u00d9\u00da\u0007\u000f",
    "\u0002\u0002\u00da\u00dc\u0007%\u0002\u0002\u00db\u00dd\u0005\u0018",
    "\r\u0002\u00dc\u00db\u0003\u0002\u0002\u0002\u00dc\u00dd\u0003\u0002",
    "\u0002\u0002\u00dd\u00de\u0003\u0002\u0002\u0002\u00de\u00df\u0007&",
    "\u0002\u0002\u00df\u0015\u0003\u0002\u0002\u0002\u00e0\u00e1\u0007\u0010",
    "\u0002\u0002\u00e1\u00e3\u0007%\u0002\u0002\u00e2\u00e4\u0005\u0018",
    "\r\u0002\u00e3\u00e2\u0003\u0002\u0002\u0002\u00e3\u00e4\u0003\u0002",
    "\u0002\u0002\u00e4\u00e5\u0003\u0002\u0002\u0002\u00e5\u00e6\u0007&",
    "\u0002\u0002\u00e6\u0017\u0003\u0002\u0002\u0002\u00e7\u00ec\u0005\u0080",
    "A\u0002\u00e8\u00e9\u0007!\u0002\u0002\u00e9\u00eb\u0005\u0080A\u0002",
    "\u00ea\u00e8\u0003\u0002\u0002\u0002\u00eb\u00ee\u0003\u0002\u0002\u0002",
    "\u00ec\u00ea\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002",
    "\u00ed\u00f0\u0003\u0002\u0002\u0002\u00ee\u00ec\u0003\u0002\u0002\u0002",
    "\u00ef\u00f1\u0007!\u0002\u0002\u00f0\u00ef\u0003\u0002\u0002\u0002",
    "\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1\u0019\u0003\u0002\u0002\u0002",
    "\u00f2\u00f6\u00073\u0002\u0002\u00f3\u00f4\u0005\u001c\u000f\u0002",
    "\u00f4\u00f5\u0007 \u0002\u0002\u00f5\u00f7\u0003\u0002\u0002\u0002",
    "\u00f6\u00f3\u0003\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002",
    "\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00f9\u0005\u0080A\u0002",
    "\u00f9\u00fa\u0005\u001e\u0010\u0002\u00fa\u001b\u0003\u0002\u0002\u0002",
    "\u00fb\u00ff\u0005\u0080A\u0002\u00fc\u00ff\u0007\u0013\u0002\u0002",
    "\u00fd\u00ff\u0007\u0014\u0002\u0002\u00fe\u00fb\u0003\u0002\u0002\u0002",
    "\u00fe\u00fc\u0003\u0002\u0002\u0002\u00fe\u00fd\u0003\u0002\u0002\u0002",
    "\u00ff\u001d\u0003\u0002\u0002\u0002\u0100\u0104\u0007\r\u0002\u0002",
    "\u0101\u0103\u0007>\u0002\u0002\u0102\u0101\u0003\u0002\u0002\u0002",
    "\u0103\u0106\u0003\u0002\u0002\u0002\u0104\u0102\u0003\u0002\u0002\u0002",
    "\u0104\u0105\u0003\u0002\u0002\u0002\u0105\u0107\u0003\u0002\u0002\u0002",
    "\u0106\u0104\u0003\u0002\u0002\u0002\u0107\u0108\u0007<\u0002\u0002",
    "\u0108\u001f\u0003\u0002\u0002\u0002\u0109\u010d\u0007\f\u0002\u0002",
    "\u010a\u010c\u0007;\u0002\u0002\u010b\u010a\u0003\u0002\u0002\u0002",
    "\u010c\u010f\u0003\u0002\u0002\u0002\u010d\u010b\u0003\u0002\u0002\u0002",
    "\u010d\u010e\u0003\u0002\u0002\u0002\u010e\u0110\u0003\u0002\u0002\u0002",
    "\u010f\u010d\u0003\u0002\u0002\u0002\u0110\u0111\u00079\u0002\u0002",
    "\u0111!\u0003\u0002\u0002\u0002\u0112\u0113\u0007\u001e\u0002\u0002",
    "\u0113\u0114\u0005\u0080A\u0002\u0114\u0118\u0007\"\u0002\u0002\u0115",
    "\u0117\u0005D#\u0002\u0116\u0115\u0003\u0002\u0002\u0002\u0117\u011a",
    "\u0003\u0002\u0002\u0002\u0118\u0116\u0003\u0002\u0002\u0002\u0118\u0119",
    "\u0003\u0002\u0002\u0002\u0119#\u0003\u0002\u0002\u0002\u011a\u0118",
    "\u0003\u0002\u0002\u0002\u011b\u011d\u0005&\u0014\u0002\u011c\u011b",
    "\u0003\u0002\u0002\u0002\u011d\u0120\u0003\u0002\u0002\u0002\u011e\u011c",
    "\u0003\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002\u0002\u011f%",
    "\u0003\u0002\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0121\u0124",
    "\u0005(\u0015\u0002\u0122\u0124\u0005D#\u0002\u0123\u0121\u0003\u0002",
    "\u0002\u0002\u0123\u0122\u0003\u0002\u0002\u0002\u0124\'\u0003\u0002",
    "\u0002\u0002\u0125\u0127\u0007\u0006\u0002\u0002\u0126\u0125\u0003\u0002",
    "\u0002\u0002\u0127\u012a\u0003\u0002\u0002\u0002\u0128\u0126\u0003\u0002",
    "\u0002\u0002\u0128\u0129\u0003\u0002\u0002\u0002\u0129\u012c\u0003\u0002",
    "\u0002\u0002\u012a\u0128\u0003\u0002\u0002\u0002\u012b\u012d\u0005:",
    "\u001e\u0002\u012c\u012b\u0003\u0002\u0002\u0002\u012c\u012d\u0003\u0002",
    "\u0002\u0002\u012d\u012e\u0003\u0002\u0002\u0002\u012e\u0130\u0007\u0004",
    "\u0002\u0002\u012f\u0131\u0005 \u0011\u0002\u0130\u012f\u0003\u0002",
    "\u0002\u0002\u0130\u0131\u0003\u0002\u0002\u0002\u0131\u0133\u0003\u0002",
    "\u0002\u0002\u0132\u0134\u00052\u001a\u0002\u0133\u0132\u0003\u0002",
    "\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002\u0134\u0136\u0003\u0002",
    "\u0002\u0002\u0135\u0137\u00054\u001b\u0002\u0136\u0135\u0003\u0002",
    "\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u0139\u0003\u0002",
    "\u0002\u0002\u0138\u013a\u00056\u001c\u0002\u0139\u0138\u0003\u0002",
    "\u0002\u0002\u0139\u013a\u0003\u0002\u0002\u0002\u013a\u013e\u0003\u0002",
    "\u0002\u0002\u013b\u013d\u00050\u0019\u0002\u013c\u013b\u0003\u0002",
    "\u0002\u0002\u013d\u0140\u0003\u0002\u0002\u0002\u013e\u013c\u0003\u0002",
    "\u0002\u0002\u013e\u013f\u0003\u0002\u0002\u0002\u013f\u0141\u0003\u0002",
    "\u0002\u0002\u0140\u013e\u0003\u0002\u0002\u0002\u0141\u0142\u0007\u001f",
    "\u0002\u0002\u0142\u0143\u0005> \u0002\u0143\u0144\u0007\"\u0002\u0002",
    "\u0144\u0145\u0005*\u0016\u0002\u0145)\u0003\u0002\u0002\u0002\u0146",
    "\u0148\u0005,\u0017\u0002\u0147\u0146\u0003\u0002\u0002\u0002\u0148",
    "\u014b\u0003\u0002\u0002\u0002\u0149\u0147\u0003\u0002\u0002\u0002\u0149",
    "\u014a\u0003\u0002\u0002\u0002\u014a\u014d\u0003\u0002\u0002\u0002\u014b",
    "\u0149\u0003\u0002\u0002\u0002\u014c\u014e\u0005.\u0018\u0002\u014d",
    "\u014c\u0003\u0002\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e",
    "+\u0003\u0002\u0002\u0002\u014f\u0150\u0007\u001c\u0002\u0002\u0150",
    "\u0151\u0005 \u0011\u0002\u0151\u0152\u0005\u001e\u0010\u0002\u0152",
    "-\u0003\u0002\u0002\u0002\u0153\u0154\u0007\u001d\u0002\u0002\u0154",
    "\u0155\u0005\u001e\u0010\u0002\u0155/\u0003\u0002\u0002\u0002\u0156",
    "\u0159\u0005\n\u0006\u0002\u0157\u0159\u00058\u001d\u0002\u0158\u0156",
    "\u0003\u0002\u0002\u0002\u0158\u0157\u0003\u0002\u0002\u0002\u01591",
    "\u0003\u0002\u0002\u0002\u015a\u015b\u0007\u0019\u0002\u0002\u015b\u015c",
    "\u0005 \u0011\u0002\u015c3\u0003\u0002\u0002\u0002\u015d\u015e\u0007",
    "\u001b\u0002\u0002\u015e\u0163\u0005\u0080A\u0002\u015f\u0160\u0007",
    "!\u0002\u0002\u0160\u0162\u0005\u0080A\u0002\u0161\u015f\u0003\u0002",
    "\u0002\u0002\u0162\u0165\u0003\u0002\u0002\u0002\u0163\u0161\u0003\u0002",
    "\u0002\u0002\u0163\u0164\u0003\u0002\u0002\u0002\u01645\u0003\u0002",
    "\u0002\u0002\u0165\u0163\u0003\u0002\u0002\u0002\u0166\u0167\u0007\u001a",
    "\u0002\u0002\u0167\u0168\u0005 \u0011\u0002\u01687\u0003\u0002\u0002",
    "\u0002\u0169\u016a\u00073\u0002\u0002\u016a\u016b\u0005\u0080A\u0002",
    "\u016b\u016c\u0005\u001e\u0010\u0002\u016c9\u0003\u0002\u0002\u0002",
    "\u016d\u016f\u0005<\u001f\u0002\u016e\u016d\u0003\u0002\u0002\u0002",
    "\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u016e\u0003\u0002\u0002\u0002",
    "\u0170\u0171\u0003\u0002\u0002\u0002\u0171;\u0003\u0002\u0002\u0002",
    "\u0172\u0173\t\u0002\u0002\u0002\u0173=\u0003\u0002\u0002\u0002\u0174",
    "\u0175\u0005@!\u0002\u0175?\u0003\u0002\u0002\u0002\u0176\u017b\u0005",
    "B\"\u0002\u0177\u0178\u0007/\u0002\u0002\u0178\u017a\u0005B\"\u0002",
    "\u0179\u0177\u0003\u0002\u0002\u0002\u017a\u017d\u0003\u0002\u0002\u0002",
    "\u017b\u0179\u0003\u0002\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002",
    "\u017cA\u0003\u0002\u0002\u0002\u017d\u017b\u0003\u0002\u0002\u0002",
    "\u017e\u0181\u0005^0\u0002\u017f\u0180\u00074\u0002\u0002\u0180\u0182",
    "\u0005\u0080A\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0181\u0182",
    "\u0003\u0002\u0002\u0002\u0182C\u0003\u0002\u0002\u0002\u0183\u0185",
    "\u0007\u0006\u0002\u0002\u0184\u0183\u0003\u0002\u0002\u0002\u0185\u0188",
    "\u0003\u0002\u0002\u0002\u0186\u0184\u0003\u0002\u0002\u0002\u0186\u0187",
    "\u0003\u0002\u0002\u0002\u0187\u018a\u0003\u0002\u0002\u0002\u0188\u0186",
    "\u0003\u0002\u0002\u0002\u0189\u018b\u0007\u0012\u0002\u0002\u018a\u0189",
    "\u0003\u0002\u0002\u0002\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u018c",
    "\u0003\u0002\u0002\u0002\u018c\u018d\u0007\u0003\u0002\u0002\u018d\u018e",
    "\u0007\u001f\u0002\u0002\u018e\u018f\u0005F$\u0002\u018f\u0190\u0007",
    "\"\u0002\u0002\u0190E\u0003\u0002\u0002\u0002\u0191\u0192\u0005H%\u0002",
    "\u0192G\u0003\u0002\u0002\u0002\u0193\u0198\u0005J&\u0002\u0194\u0195",
    "\u0007/\u0002\u0002\u0195\u0197\u0005J&\u0002\u0196\u0194\u0003\u0002",
    "\u0002\u0002\u0197\u019a\u0003\u0002\u0002\u0002\u0198\u0196\u0003\u0002",
    "\u0002\u0002\u0198\u0199\u0003\u0002\u0002\u0002\u0199I\u0003\u0002",
    "\u0002\u0002\u019a\u0198\u0003\u0002\u0002\u0002\u019b\u019d\u0005L",
    "\'\u0002\u019c\u019e\u0005T+\u0002\u019d\u019c\u0003\u0002\u0002\u0002",
    "\u019d\u019e\u0003\u0002\u0002\u0002\u019e\u01a1\u0003\u0002\u0002\u0002",
    "\u019f\u01a1\u0003\u0002\u0002\u0002\u01a0\u019b\u0003\u0002\u0002\u0002",
    "\u01a0\u019f\u0003\u0002\u0002\u0002\u01a1K\u0003\u0002\u0002\u0002",
    "\u01a2\u01a4\u0005N(\u0002\u01a3\u01a2\u0003\u0002\u0002\u0002\u01a4",
    "\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a3\u0003\u0002\u0002\u0002\u01a5",
    "\u01a6\u0003\u0002\u0002\u0002\u01a6M\u0003\u0002\u0002\u0002\u01a7",
    "\u01a9\u0005P)\u0002\u01a8\u01aa\u0005h5\u0002\u01a9\u01a8\u0003\u0002",
    "\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa\u01b8\u0003\u0002",
    "\u0002\u0002\u01ab\u01ad\u0005j6\u0002\u01ac\u01ae\u0005h5\u0002\u01ad",
    "\u01ac\u0003\u0002\u0002\u0002\u01ad\u01ae\u0003\u0002\u0002\u0002\u01ae",
    "\u01b8\u0003\u0002\u0002\u0002\u01af\u01b1\u0005R*\u0002\u01b0\u01b2",
    "\u0005h5\u0002\u01b1\u01b0\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003",
    "\u0002\u0002\u0002\u01b2\u01b8\u0003\u0002\u0002\u0002\u01b3\u01b5\u0005",
    "\u001e\u0010\u0002\u01b4\u01b6\u0007+\u0002\u0002\u01b5\u01b4\u0003",
    "\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002\u01b6\u01b8\u0003",
    "\u0002\u0002\u0002\u01b7\u01a7\u0003\u0002\u0002\u0002\u01b7\u01ab\u0003",
    "\u0002\u0002\u0002\u01b7\u01af\u0003\u0002\u0002\u0002\u01b7\u01b3\u0003",
    "\u0002\u0002\u0002\u01b8O\u0003\u0002\u0002\u0002\u01b9\u01ba\u0005",
    "\u0080A\u0002\u01ba\u01bd\t\u0003\u0002\u0002\u01bb\u01be\u0005j6\u0002",
    "\u01bc\u01be\u0005R*\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd",
    "\u01bc\u0003\u0002\u0002\u0002\u01beQ\u0003\u0002\u0002\u0002\u01bf",
    "\u01c0\u0007#\u0002\u0002\u01c0\u01c1\u0005H%\u0002\u01c1\u01c2\u0007",
    "$\u0002\u0002\u01c2S\u0003\u0002\u0002\u0002\u01c3\u01c4\u0007\'\u0002",
    "\u0002\u01c4\u01c9\u0005V,\u0002\u01c5\u01c6\u0007!\u0002\u0002\u01c6",
    "\u01c8\u0005V,\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002\u01c8\u01cb",
    "\u0003\u0002\u0002\u0002\u01c9\u01c7\u0003\u0002\u0002\u0002\u01c9\u01ca",
    "\u0003\u0002\u0002\u0002\u01caU\u0003\u0002\u0002\u0002\u01cb\u01c9",
    "\u0003\u0002\u0002\u0002\u01cc\u01cd\u0005X-\u0002\u01cd\u01ce\u0007",
    "#\u0002\u0002\u01ce\u01cf\u0005Z.\u0002\u01cf\u01d0\u0007$\u0002\u0002",
    "\u01d0\u01d3\u0003\u0002\u0002\u0002\u01d1\u01d3\u0005X-\u0002\u01d2",
    "\u01cc\u0003\u0002\u0002\u0002\u01d2\u01d1\u0003\u0002\u0002\u0002\u01d3",
    "W\u0003\u0002\u0002\u0002\u01d4\u01d7\u0005\u0080A\u0002\u01d5\u01d7",
    "\u0007\u001e\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d6\u01d5",
    "\u0003\u0002\u0002\u0002\u01d7Y\u0003\u0002\u0002\u0002\u01d8\u01db",
    "\u0005\u0080A\u0002\u01d9\u01db\u0007\t\u0002\u0002\u01da\u01d8\u0003",
    "\u0002\u0002\u0002\u01da\u01d9\u0003\u0002\u0002\u0002\u01db[\u0003",
    "\u0002\u0002\u0002\u01dc\u01e1\u0005^0\u0002\u01dd\u01de\u0007/\u0002",
    "\u0002\u01de\u01e0\u0005^0\u0002\u01df\u01dd\u0003\u0002\u0002\u0002",
    "\u01e0\u01e3\u0003\u0002\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002",
    "\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2]\u0003\u0002\u0002\u0002",
    "\u01e3\u01e1\u0003\u0002\u0002\u0002\u01e4\u01e6\u0005|?\u0002\u01e5",
    "\u01e4\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6",
    "\u01e8\u0003\u0002\u0002\u0002\u01e7\u01e9\u0005`1\u0002\u01e8\u01e7",
    "\u0003\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01e8",
    "\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb\u01ee",
    "\u0003\u0002\u0002\u0002\u01ec\u01ee\u0003\u0002\u0002\u0002\u01ed\u01e5",
    "\u0003\u0002\u0002\u0002\u01ed\u01ec\u0003\u0002\u0002\u0002\u01ee_",
    "\u0003\u0002\u0002\u0002\u01ef\u01f2\u0005b2\u0002\u01f0\u01f3\u0005",
    "h5\u0002\u01f1\u01f3\u0003\u0002\u0002\u0002\u01f2\u01f0\u0003\u0002",
    "\u0002\u0002\u01f2\u01f1\u0003\u0002\u0002\u0002\u01f3\u01ff\u0003\u0002",
    "\u0002\u0002\u01f4\u01f7\u0005l7\u0002\u01f5\u01f8\u0005h5\u0002\u01f6",
    "\u01f8\u0003\u0002\u0002\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f7",
    "\u01f6\u0003\u0002\u0002\u0002\u01f8\u01ff\u0003\u0002\u0002\u0002\u01f9",
    "\u01ff\u0005d3\u0002\u01fa\u01fc\u0005\u001e\u0010\u0002\u01fb\u01fd",
    "\u0007+\u0002\u0002\u01fc\u01fb\u0003\u0002\u0002\u0002\u01fc\u01fd",
    "\u0003\u0002\u0002\u0002\u01fd\u01ff\u0003\u0002\u0002\u0002\u01fe\u01ef",
    "\u0003\u0002\u0002\u0002\u01fe\u01f4\u0003\u0002\u0002\u0002\u01fe\u01f9",
    "\u0003\u0002\u0002\u0002\u01fe\u01fa\u0003\u0002\u0002\u0002\u01ffa",
    "\u0003\u0002\u0002\u0002\u0200\u0201\u0005\u0080A\u0002\u0201\u0204",
    "\t\u0003\u0002\u0002\u0202\u0205\u0005l7\u0002\u0203\u0205\u0005t;\u0002",
    "\u0204\u0202\u0003\u0002\u0002\u0002\u0204\u0203\u0003\u0002\u0002\u0002",
    "\u0205c\u0003\u0002\u0002\u0002\u0206\u0208\u0005t;\u0002\u0207\u0209",
    "\u0005f4\u0002\u0208\u0207\u0003\u0002\u0002\u0002\u0208\u0209\u0003",
    "\u0002\u0002\u0002\u0209e\u0003\u0002\u0002\u0002\u020a\u020b\u0005",
    "h5\u0002\u020bg\u0003\u0002\u0002\u0002\u020c\u020e\u0007+\u0002\u0002",
    "\u020d\u020f\u0007+\u0002\u0002\u020e\u020d\u0003\u0002\u0002\u0002",
    "\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0219\u0003\u0002\u0002\u0002",
    "\u0210\u0212\u0007,\u0002\u0002\u0211\u0213\u0007+\u0002\u0002\u0212",
    "\u0211\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213",
    "\u0219\u0003\u0002\u0002\u0002\u0214\u0216\u0007.\u0002\u0002\u0215",
    "\u0217\u0007+\u0002\u0002\u0216\u0215\u0003\u0002\u0002\u0002\u0216",
    "\u0217\u0003\u0002\u0002\u0002\u0217\u0219\u0003\u0002\u0002\u0002\u0218",
    "\u020c\u0003\u0002\u0002\u0002\u0218\u0210\u0003\u0002\u0002\u0002\u0218",
    "\u0214\u0003\u0002\u0002\u0002\u0219i\u0003\u0002\u0002\u0002\u021a",
    "\u0223\u0005x=\u0002\u021b\u0223\u0005z>\u0002\u021c\u0223\u0005n8\u0002",
    "\u021d\u0223\u0007\u0005\u0002\u0002\u021e\u0220\u00072\u0002\u0002",
    "\u021f\u0221\u0005|?\u0002\u0220\u021f\u0003\u0002\u0002\u0002\u0220",
    "\u0221\u0003\u0002\u0002\u0002\u0221\u0223\u0003\u0002\u0002\u0002\u0222",
    "\u021a\u0003\u0002\u0002\u0002\u0222\u021b\u0003\u0002\u0002\u0002\u0222",
    "\u021c\u0003\u0002\u0002\u0002\u0222\u021d\u0003\u0002\u0002\u0002\u0222",
    "\u021e\u0003\u0002\u0002\u0002\u0223k\u0003\u0002\u0002\u0002\u0224",
    "\u022c\u0005z>\u0002\u0225\u022c\u0005v<\u0002\u0226\u022c\u0005n8\u0002",
    "\u0227\u0229\u00072\u0002\u0002\u0228\u022a\u0005|?\u0002\u0229\u0228",
    "\u0003\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u022c",
    "\u0003\u0002\u0002\u0002\u022b\u0224\u0003\u0002\u0002\u0002\u022b\u0225",
    "\u0003\u0002\u0002\u0002\u022b\u0226\u0003\u0002\u0002\u0002\u022b\u0227",
    "\u0003\u0002\u0002\u0002\u022cm\u0003\u0002\u0002\u0002\u022d\u022e",
    "\u00075\u0002\u0002\u022e\u0232\u0005r:\u0002\u022f\u0230\u00075\u0002",
    "\u0002\u0230\u0232\u0005p9\u0002\u0231\u022d\u0003\u0002\u0002\u0002",
    "\u0231\u022f\u0003\u0002\u0002\u0002\u0232o\u0003\u0002\u0002\u0002",
    "\u0233\u0234\u0007#\u0002\u0002\u0234\u0239\u0005r:\u0002\u0235\u0236",
    "\u0007/\u0002\u0002\u0236\u0238\u0005r:\u0002\u0237\u0235\u0003\u0002",
    "\u0002\u0002\u0238\u023b\u0003\u0002\u0002\u0002\u0239\u0237\u0003\u0002",
    "\u0002\u0002\u0239\u023a\u0003\u0002\u0002\u0002\u023a\u023c\u0003\u0002",
    "\u0002\u0002\u023b\u0239\u0003\u0002\u0002\u0002\u023c\u023d\u0007$",
    "\u0002\u0002\u023dq\u0003\u0002\u0002\u0002\u023e\u0240\u0007\u0003",
    "\u0002\u0002\u023f\u0241\u0005|?\u0002\u0240\u023f\u0003\u0002\u0002",
    "\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241\u0249\u0003\u0002\u0002",
    "\u0002\u0242\u0244\u0007\n\u0002\u0002\u0243\u0245\u0005|?\u0002\u0244",
    "\u0243\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245",
    "\u0249\u0003\u0002\u0002\u0002\u0246\u0249\u0005x=\u0002\u0247\u0249",
    "\u0007\u0005\u0002\u0002\u0248\u023e\u0003\u0002\u0002\u0002\u0248\u0242",
    "\u0003\u0002\u0002\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0248\u0247",
    "\u0003\u0002\u0002\u0002\u0249s\u0003\u0002\u0002\u0002\u024a\u0255",
    "\u0007#\u0002\u0002\u024b\u024d\u0005\n\u0006\u0002\u024c\u024b\u0003",
    "\u0002\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002\u024d\u0251\u0003",
    "\u0002\u0002\u0002\u024e\u0250\u00058\u001d\u0002\u024f\u024e\u0003",
    "\u0002\u0002\u0002\u0250\u0253\u0003\u0002\u0002\u0002\u0251\u024f\u0003",
    "\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0254\u0003",
    "\u0002\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0254\u0256\u0007",
    "\u001f\u0002\u0002\u0255\u024c\u0003\u0002\u0002\u0002\u0255\u0256\u0003",
    "\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0258\u0005",
    "\\/\u0002\u0258\u0259\u0007$\u0002\u0002\u0259u\u0003\u0002\u0002\u0002",
    "\u025a\u025c\u0007\u0004\u0002\u0002\u025b\u025d\u0005 \u0011\u0002",
    "\u025c\u025b\u0003\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002",
    "\u025d\u025f\u0003\u0002\u0002\u0002\u025e\u0260\u0005|?\u0002\u025f",
    "\u025e\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002\u0002\u0002\u0260",
    "w\u0003\u0002\u0002\u0002\u0261\u0262\u0007\n\u0002\u0002\u0262\u0263",
    "\u00071\u0002\u0002\u0263\u0264\u0007\n\u0002\u0002\u0264y\u0003\u0002",
    "\u0002\u0002\u0265\u0267\u0007\u0003\u0002\u0002\u0266\u0268\u0005|",
    "?\u0002\u0267\u0266\u0003\u0002\u0002\u0002\u0267\u0268\u0003\u0002",
    "\u0002\u0002\u0268\u026e\u0003\u0002\u0002\u0002\u0269\u026b\u0007\n",
    "\u0002\u0002\u026a\u026c\u0005|?\u0002\u026b\u026a\u0003\u0002\u0002",
    "\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u026e\u0003\u0002\u0002",
    "\u0002\u026d\u0265\u0003\u0002\u0002\u0002\u026d\u0269\u0003\u0002\u0002",
    "\u0002\u026e{\u0003\u0002\u0002\u0002\u026f\u0270\u0007(\u0002\u0002",
    "\u0270\u0275\u0005~@\u0002\u0271\u0272\u0007!\u0002\u0002\u0272\u0274",
    "\u0005~@\u0002\u0273\u0271\u0003\u0002\u0002\u0002\u0274\u0277\u0003",
    "\u0002\u0002\u0002\u0275\u0273\u0003\u0002\u0002\u0002\u0275\u0276\u0003",
    "\u0002\u0002\u0002\u0276\u0278\u0003\u0002\u0002\u0002\u0277\u0275\u0003",
    "\u0002\u0002\u0002\u0278\u0279\u0007)\u0002\u0002\u0279}\u0003\u0002",
    "\u0002\u0002\u027a\u0282\u0005\u0080A\u0002\u027b\u027c\u0005\u0080",
    "A\u0002\u027c\u027f\u0007*\u0002\u0002\u027d\u0280\u0005\u0080A\u0002",
    "\u027e\u0280\u0007\n\u0002\u0002\u027f\u027d\u0003\u0002\u0002\u0002",
    "\u027f\u027e\u0003\u0002\u0002\u0002\u0280\u0282\u0003\u0002\u0002\u0002",
    "\u0281\u027a\u0003\u0002\u0002\u0002\u0281\u027b\u0003\u0002\u0002\u0002",
    "\u0282\u007f\u0003\u0002\u0002\u0002\u0283\u0284\t\u0004\u0002\u0002",
    "\u0284\u0081\u0003\u0002\u0002\u0002W\u0085\u008c\u0093\u00a1\u00a8",
    "\u00b1\u00bf\u00c5\u00cd\u00d7\u00dc\u00e3\u00ec\u00f0\u00f6\u00fe\u0104",
    "\u010d\u0118\u011e\u0123\u0128\u012c\u0130\u0133\u0136\u0139\u013e\u0149",
    "\u014d\u0158\u0163\u0170\u017b\u0181\u0186\u018a\u0198\u019d\u01a0\u01a5",
    "\u01a9\u01ad\u01b1\u01b5\u01b7\u01bd\u01c9\u01d2\u01d6\u01da\u01e1\u01e5",
    "\u01ea\u01ed\u01f2\u01f7\u01fc\u01fe\u0204\u0208\u020e\u0212\u0216\u0218",
    "\u0220\u0222\u0229\u022b\u0231\u0239\u0240\u0244\u0248\u024c\u0251\u0255",
    "\u025c\u025f\u0267\u026b\u026d\u0275\u027f\u0281"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, "'options'", "'tokens'", "'channels'", 
                     "'import'", "'fragment'", "'lexer'", "'parser'", "'grammar'", 
                     "'protected'", "'public'", "'private'", "'returns'", 
                     "'locals'", "'throws'", "'catch'", "'finally'", "'mode'" ];

var symbolicNames = [ null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "DOC_COMMENT", 
                      "BLOCK_COMMENT", "LINE_COMMENT", "INT", "STRING_LITERAL", 
                      "UNTERMINATED_STRING_LITERAL", "BEGIN_ARGUMENT", "BEGIN_ACTION", 
                      "OPTIONS", "TOKENS", "CHANNELS", "IMPORT", "FRAGMENT", 
                      "LEXER", "PARSER", "GRAMMAR", "PROTECTED", "PUBLIC", 
                      "PRIVATE", "RETURNS", "LOCALS", "THROWS", "CATCH", 
                      "FINALLY", "MODE", "COLON", "COLONCOLON", "COMMA", 
                      "SEMI", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RARROW", 
                      "LT", "GT", "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", 
                      "PLUS", "OR", "DOLLAR", "RANGE", "DOT", "AT", "POUND", 
                      "NOT", "ID", "WS", "ERRCHAR", "END_ARGUMENT", "UNTERMINATED_ARGUMENT", 
                      "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
                      "ACTION_CONTENT", "UNTERMINATED_CHAR_SET" ];

var ruleNames =  [ "grammarSpec", "grammarDecl", "grammarType", "prequelConstruct", 
                   "optionsSpec", "option", "optionValue", "delegateGrammars", 
                   "delegateGrammar", "tokensSpec", "channelsSpec", "idList", 
                   "action_", "actionScopeName", "actionBlock", "argActionBlock", 
                   "modeSpec", "rules", "ruleSpec", "parserRuleSpec", "exceptionGroup", 
                   "exceptionHandler", "finallyClause", "rulePrequel", "ruleReturns", 
                   "throwsSpec", "localsSpec", "ruleAction", "ruleModifiers", 
                   "ruleModifier", "ruleBlock", "ruleAltList", "labeledAlt", 
                   "lexerRuleSpec", "lexerRuleBlock", "lexerAltList", "lexerAlt", 
                   "lexerElements", "lexerElement", "labeledLexerElement", 
                   "lexerBlock", "lexerCommands", "lexerCommand", "lexerCommandName", 
                   "lexerCommandExpr", "altList", "alternative", "element", 
                   "labeledElement", "ebnf", "blockSuffix", "ebnfSuffix", 
                   "lexerAtom", "atom", "notSet", "blockSet", "setElement", 
                   "block", "ruleref", "characterRange", "terminal", "elementOptions", 
                   "elementOption", "identifier" ];

function ANTLRv4Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ANTLRv4Parser.prototype = Object.create(antlr4.Parser.prototype);
ANTLRv4Parser.prototype.constructor = ANTLRv4Parser;

Object.defineProperty(ANTLRv4Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ANTLRv4Parser.EOF = antlr4.Token.EOF;
ANTLRv4Parser.TOKEN_REF = 1;
ANTLRv4Parser.RULE_REF = 2;
ANTLRv4Parser.LEXER_CHAR_SET = 3;
ANTLRv4Parser.DOC_COMMENT = 4;
ANTLRv4Parser.BLOCK_COMMENT = 5;
ANTLRv4Parser.LINE_COMMENT = 6;
ANTLRv4Parser.INT = 7;
ANTLRv4Parser.STRING_LITERAL = 8;
ANTLRv4Parser.UNTERMINATED_STRING_LITERAL = 9;
ANTLRv4Parser.BEGIN_ARGUMENT = 10;
ANTLRv4Parser.BEGIN_ACTION = 11;
ANTLRv4Parser.OPTIONS = 12;
ANTLRv4Parser.TOKENS = 13;
ANTLRv4Parser.CHANNELS = 14;
ANTLRv4Parser.IMPORT = 15;
ANTLRv4Parser.FRAGMENT = 16;
ANTLRv4Parser.LEXER = 17;
ANTLRv4Parser.PARSER = 18;
ANTLRv4Parser.GRAMMAR = 19;
ANTLRv4Parser.PROTECTED = 20;
ANTLRv4Parser.PUBLIC = 21;
ANTLRv4Parser.PRIVATE = 22;
ANTLRv4Parser.RETURNS = 23;
ANTLRv4Parser.LOCALS = 24;
ANTLRv4Parser.THROWS = 25;
ANTLRv4Parser.CATCH = 26;
ANTLRv4Parser.FINALLY = 27;
ANTLRv4Parser.MODE = 28;
ANTLRv4Parser.COLON = 29;
ANTLRv4Parser.COLONCOLON = 30;
ANTLRv4Parser.COMMA = 31;
ANTLRv4Parser.SEMI = 32;
ANTLRv4Parser.LPAREN = 33;
ANTLRv4Parser.RPAREN = 34;
ANTLRv4Parser.LBRACE = 35;
ANTLRv4Parser.RBRACE = 36;
ANTLRv4Parser.RARROW = 37;
ANTLRv4Parser.LT = 38;
ANTLRv4Parser.GT = 39;
ANTLRv4Parser.ASSIGN = 40;
ANTLRv4Parser.QUESTION = 41;
ANTLRv4Parser.STAR = 42;
ANTLRv4Parser.PLUS_ASSIGN = 43;
ANTLRv4Parser.PLUS = 44;
ANTLRv4Parser.OR = 45;
ANTLRv4Parser.DOLLAR = 46;
ANTLRv4Parser.RANGE = 47;
ANTLRv4Parser.DOT = 48;
ANTLRv4Parser.AT = 49;
ANTLRv4Parser.POUND = 50;
ANTLRv4Parser.NOT = 51;
ANTLRv4Parser.ID = 52;
ANTLRv4Parser.WS = 53;
ANTLRv4Parser.ERRCHAR = 54;
ANTLRv4Parser.END_ARGUMENT = 55;
ANTLRv4Parser.UNTERMINATED_ARGUMENT = 56;
ANTLRv4Parser.ARGUMENT_CONTENT = 57;
ANTLRv4Parser.END_ACTION = 58;
ANTLRv4Parser.UNTERMINATED_ACTION = 59;
ANTLRv4Parser.ACTION_CONTENT = 60;
ANTLRv4Parser.UNTERMINATED_CHAR_SET = 61;

ANTLRv4Parser.RULE_grammarSpec = 0;
ANTLRv4Parser.RULE_grammarDecl = 1;
ANTLRv4Parser.RULE_grammarType = 2;
ANTLRv4Parser.RULE_prequelConstruct = 3;
ANTLRv4Parser.RULE_optionsSpec = 4;
ANTLRv4Parser.RULE_option = 5;
ANTLRv4Parser.RULE_optionValue = 6;
ANTLRv4Parser.RULE_delegateGrammars = 7;
ANTLRv4Parser.RULE_delegateGrammar = 8;
ANTLRv4Parser.RULE_tokensSpec = 9;
ANTLRv4Parser.RULE_channelsSpec = 10;
ANTLRv4Parser.RULE_idList = 11;
ANTLRv4Parser.RULE_action_ = 12;
ANTLRv4Parser.RULE_actionScopeName = 13;
ANTLRv4Parser.RULE_actionBlock = 14;
ANTLRv4Parser.RULE_argActionBlock = 15;
ANTLRv4Parser.RULE_modeSpec = 16;
ANTLRv4Parser.RULE_rules = 17;
ANTLRv4Parser.RULE_ruleSpec = 18;
ANTLRv4Parser.RULE_parserRuleSpec = 19;
ANTLRv4Parser.RULE_exceptionGroup = 20;
ANTLRv4Parser.RULE_exceptionHandler = 21;
ANTLRv4Parser.RULE_finallyClause = 22;
ANTLRv4Parser.RULE_rulePrequel = 23;
ANTLRv4Parser.RULE_ruleReturns = 24;
ANTLRv4Parser.RULE_throwsSpec = 25;
ANTLRv4Parser.RULE_localsSpec = 26;
ANTLRv4Parser.RULE_ruleAction = 27;
ANTLRv4Parser.RULE_ruleModifiers = 28;
ANTLRv4Parser.RULE_ruleModifier = 29;
ANTLRv4Parser.RULE_ruleBlock = 30;
ANTLRv4Parser.RULE_ruleAltList = 31;
ANTLRv4Parser.RULE_labeledAlt = 32;
ANTLRv4Parser.RULE_lexerRuleSpec = 33;
ANTLRv4Parser.RULE_lexerRuleBlock = 34;
ANTLRv4Parser.RULE_lexerAltList = 35;
ANTLRv4Parser.RULE_lexerAlt = 36;
ANTLRv4Parser.RULE_lexerElements = 37;
ANTLRv4Parser.RULE_lexerElement = 38;
ANTLRv4Parser.RULE_labeledLexerElement = 39;
ANTLRv4Parser.RULE_lexerBlock = 40;
ANTLRv4Parser.RULE_lexerCommands = 41;
ANTLRv4Parser.RULE_lexerCommand = 42;
ANTLRv4Parser.RULE_lexerCommandName = 43;
ANTLRv4Parser.RULE_lexerCommandExpr = 44;
ANTLRv4Parser.RULE_altList = 45;
ANTLRv4Parser.RULE_alternative = 46;
ANTLRv4Parser.RULE_element = 47;
ANTLRv4Parser.RULE_labeledElement = 48;
ANTLRv4Parser.RULE_ebnf = 49;
ANTLRv4Parser.RULE_blockSuffix = 50;
ANTLRv4Parser.RULE_ebnfSuffix = 51;
ANTLRv4Parser.RULE_lexerAtom = 52;
ANTLRv4Parser.RULE_atom = 53;
ANTLRv4Parser.RULE_notSet = 54;
ANTLRv4Parser.RULE_blockSet = 55;
ANTLRv4Parser.RULE_setElement = 56;
ANTLRv4Parser.RULE_block = 57;
ANTLRv4Parser.RULE_ruleref = 58;
ANTLRv4Parser.RULE_characterRange = 59;
ANTLRv4Parser.RULE_terminal = 60;
ANTLRv4Parser.RULE_elementOptions = 61;
ANTLRv4Parser.RULE_elementOption = 62;
ANTLRv4Parser.RULE_identifier = 63;


function GrammarSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_grammarSpec;
    return this;
}

GrammarSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrammarSpecContext.prototype.constructor = GrammarSpecContext;

GrammarSpecContext.prototype.grammarDecl = function() {
    return this.getTypedRuleContext(GrammarDeclContext,0);
};

GrammarSpecContext.prototype.rules = function() {
    return this.getTypedRuleContext(RulesContext,0);
};

GrammarSpecContext.prototype.EOF = function() {
    return this.getToken(ANTLRv4Parser.EOF, 0);
};

GrammarSpecContext.prototype.DOC_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.DOC_COMMENT);
    } else {
        return this.getToken(ANTLRv4Parser.DOC_COMMENT, i);
    }
};


GrammarSpecContext.prototype.prequelConstruct = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrequelConstructContext);
    } else {
        return this.getTypedRuleContext(PrequelConstructContext,i);
    }
};

GrammarSpecContext.prototype.modeSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModeSpecContext);
    } else {
        return this.getTypedRuleContext(ModeSpecContext,i);
    }
};

GrammarSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterGrammarSpec(this);
	}
};

GrammarSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitGrammarSpec(this);
	}
};




ANTLRv4Parser.GrammarSpecContext = GrammarSpecContext;

ANTLRv4Parser.prototype.grammarSpec = function() {

    var localctx = new GrammarSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ANTLRv4Parser.RULE_grammarSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 131;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.DOC_COMMENT) {
            this.state = 128;
            this.match(ANTLRv4Parser.DOC_COMMENT);
            this.state = 133;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 134;
        this.grammarDecl();
        this.state = 138;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ANTLRv4Parser.OPTIONS) | (1 << ANTLRv4Parser.TOKENS) | (1 << ANTLRv4Parser.CHANNELS) | (1 << ANTLRv4Parser.IMPORT))) !== 0) || _la===ANTLRv4Parser.AT) {
            this.state = 135;
            this.prequelConstruct();
            this.state = 140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 141;
        this.rules();
        this.state = 145;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.MODE) {
            this.state = 142;
            this.modeSpec();
            this.state = 147;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 148;
        this.match(ANTLRv4Parser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrammarDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_grammarDecl;
    return this;
}

GrammarDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrammarDeclContext.prototype.constructor = GrammarDeclContext;

GrammarDeclContext.prototype.grammarType = function() {
    return this.getTypedRuleContext(GrammarTypeContext,0);
};

GrammarDeclContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GrammarDeclContext.prototype.SEMI = function() {
    return this.getToken(ANTLRv4Parser.SEMI, 0);
};

GrammarDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterGrammarDecl(this);
	}
};

GrammarDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitGrammarDecl(this);
	}
};




ANTLRv4Parser.GrammarDeclContext = GrammarDeclContext;

ANTLRv4Parser.prototype.grammarDecl = function() {

    var localctx = new GrammarDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ANTLRv4Parser.RULE_grammarDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 150;
        this.grammarType();
        this.state = 151;
        this.identifier();
        this.state = 152;
        this.match(ANTLRv4Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrammarTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_grammarType;
    return this;
}

GrammarTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrammarTypeContext.prototype.constructor = GrammarTypeContext;

GrammarTypeContext.prototype.LEXER = function() {
    return this.getToken(ANTLRv4Parser.LEXER, 0);
};

GrammarTypeContext.prototype.GRAMMAR = function() {
    return this.getToken(ANTLRv4Parser.GRAMMAR, 0);
};

GrammarTypeContext.prototype.PARSER = function() {
    return this.getToken(ANTLRv4Parser.PARSER, 0);
};

GrammarTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterGrammarType(this);
	}
};

GrammarTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitGrammarType(this);
	}
};




ANTLRv4Parser.GrammarTypeContext = GrammarTypeContext;

ANTLRv4Parser.prototype.grammarType = function() {

    var localctx = new GrammarTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ANTLRv4Parser.RULE_grammarType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 159;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.LEXER:
            this.state = 154;
            this.match(ANTLRv4Parser.LEXER);
            this.state = 155;
            this.match(ANTLRv4Parser.GRAMMAR);
            break;
        case ANTLRv4Parser.PARSER:
            this.state = 156;
            this.match(ANTLRv4Parser.PARSER);
            this.state = 157;
            this.match(ANTLRv4Parser.GRAMMAR);
            break;
        case ANTLRv4Parser.GRAMMAR:
            this.state = 158;
            this.match(ANTLRv4Parser.GRAMMAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrequelConstructContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_prequelConstruct;
    return this;
}

PrequelConstructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrequelConstructContext.prototype.constructor = PrequelConstructContext;

PrequelConstructContext.prototype.optionsSpec = function() {
    return this.getTypedRuleContext(OptionsSpecContext,0);
};

PrequelConstructContext.prototype.delegateGrammars = function() {
    return this.getTypedRuleContext(DelegateGrammarsContext,0);
};

PrequelConstructContext.prototype.tokensSpec = function() {
    return this.getTypedRuleContext(TokensSpecContext,0);
};

PrequelConstructContext.prototype.channelsSpec = function() {
    return this.getTypedRuleContext(ChannelsSpecContext,0);
};

PrequelConstructContext.prototype.action_ = function() {
    return this.getTypedRuleContext(Action_Context,0);
};

PrequelConstructContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterPrequelConstruct(this);
	}
};

PrequelConstructContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitPrequelConstruct(this);
	}
};




ANTLRv4Parser.PrequelConstructContext = PrequelConstructContext;

ANTLRv4Parser.prototype.prequelConstruct = function() {

    var localctx = new PrequelConstructContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ANTLRv4Parser.RULE_prequelConstruct);
    try {
        this.state = 166;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.OPTIONS:
            this.enterOuterAlt(localctx, 1);
            this.state = 161;
            this.optionsSpec();
            break;
        case ANTLRv4Parser.IMPORT:
            this.enterOuterAlt(localctx, 2);
            this.state = 162;
            this.delegateGrammars();
            break;
        case ANTLRv4Parser.TOKENS:
            this.enterOuterAlt(localctx, 3);
            this.state = 163;
            this.tokensSpec();
            break;
        case ANTLRv4Parser.CHANNELS:
            this.enterOuterAlt(localctx, 4);
            this.state = 164;
            this.channelsSpec();
            break;
        case ANTLRv4Parser.AT:
            this.enterOuterAlt(localctx, 5);
            this.state = 165;
            this.action_();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionsSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_optionsSpec;
    return this;
}

OptionsSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionsSpecContext.prototype.constructor = OptionsSpecContext;

OptionsSpecContext.prototype.OPTIONS = function() {
    return this.getToken(ANTLRv4Parser.OPTIONS, 0);
};

OptionsSpecContext.prototype.LBRACE = function() {
    return this.getToken(ANTLRv4Parser.LBRACE, 0);
};

OptionsSpecContext.prototype.RBRACE = function() {
    return this.getToken(ANTLRv4Parser.RBRACE, 0);
};

OptionsSpecContext.prototype.option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionContext);
    } else {
        return this.getTypedRuleContext(OptionContext,i);
    }
};

OptionsSpecContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.SEMI);
    } else {
        return this.getToken(ANTLRv4Parser.SEMI, i);
    }
};


OptionsSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterOptionsSpec(this);
	}
};

OptionsSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitOptionsSpec(this);
	}
};




ANTLRv4Parser.OptionsSpecContext = OptionsSpecContext;

ANTLRv4Parser.prototype.optionsSpec = function() {

    var localctx = new OptionsSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ANTLRv4Parser.RULE_optionsSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 168;
        this.match(ANTLRv4Parser.OPTIONS);
        this.state = 169;
        this.match(ANTLRv4Parser.LBRACE);
        this.state = 175;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.TOKEN_REF || _la===ANTLRv4Parser.RULE_REF) {
            this.state = 170;
            this.option();
            this.state = 171;
            this.match(ANTLRv4Parser.SEMI);
            this.state = 177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 178;
        this.match(ANTLRv4Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_option;
    return this;
}

OptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionContext.prototype.constructor = OptionContext;

OptionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

OptionContext.prototype.ASSIGN = function() {
    return this.getToken(ANTLRv4Parser.ASSIGN, 0);
};

OptionContext.prototype.optionValue = function() {
    return this.getTypedRuleContext(OptionValueContext,0);
};

OptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterOption(this);
	}
};

OptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitOption(this);
	}
};




ANTLRv4Parser.OptionContext = OptionContext;

ANTLRv4Parser.prototype.option = function() {

    var localctx = new OptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ANTLRv4Parser.RULE_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 180;
        this.identifier();
        this.state = 181;
        this.match(ANTLRv4Parser.ASSIGN);
        this.state = 182;
        this.optionValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_optionValue;
    return this;
}

OptionValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionValueContext.prototype.constructor = OptionValueContext;

OptionValueContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

OptionValueContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.DOT);
    } else {
        return this.getToken(ANTLRv4Parser.DOT, i);
    }
};


OptionValueContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ANTLRv4Parser.STRING_LITERAL, 0);
};

OptionValueContext.prototype.actionBlock = function() {
    return this.getTypedRuleContext(ActionBlockContext,0);
};

OptionValueContext.prototype.INT = function() {
    return this.getToken(ANTLRv4Parser.INT, 0);
};

OptionValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterOptionValue(this);
	}
};

OptionValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitOptionValue(this);
	}
};




ANTLRv4Parser.OptionValueContext = OptionValueContext;

ANTLRv4Parser.prototype.optionValue = function() {

    var localctx = new OptionValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ANTLRv4Parser.RULE_optionValue);
    var _la = 0; // Token type
    try {
        this.state = 195;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
        case ANTLRv4Parser.RULE_REF:
            this.enterOuterAlt(localctx, 1);
            this.state = 184;
            this.identifier();
            this.state = 189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ANTLRv4Parser.DOT) {
                this.state = 185;
                this.match(ANTLRv4Parser.DOT);
                this.state = 186;
                this.identifier();
                this.state = 191;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case ANTLRv4Parser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 192;
            this.match(ANTLRv4Parser.STRING_LITERAL);
            break;
        case ANTLRv4Parser.BEGIN_ACTION:
            this.enterOuterAlt(localctx, 3);
            this.state = 193;
            this.actionBlock();
            break;
        case ANTLRv4Parser.INT:
            this.enterOuterAlt(localctx, 4);
            this.state = 194;
            this.match(ANTLRv4Parser.INT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DelegateGrammarsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_delegateGrammars;
    return this;
}

DelegateGrammarsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DelegateGrammarsContext.prototype.constructor = DelegateGrammarsContext;

DelegateGrammarsContext.prototype.IMPORT = function() {
    return this.getToken(ANTLRv4Parser.IMPORT, 0);
};

DelegateGrammarsContext.prototype.delegateGrammar = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DelegateGrammarContext);
    } else {
        return this.getTypedRuleContext(DelegateGrammarContext,i);
    }
};

DelegateGrammarsContext.prototype.SEMI = function() {
    return this.getToken(ANTLRv4Parser.SEMI, 0);
};

DelegateGrammarsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.COMMA);
    } else {
        return this.getToken(ANTLRv4Parser.COMMA, i);
    }
};


DelegateGrammarsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterDelegateGrammars(this);
	}
};

DelegateGrammarsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitDelegateGrammars(this);
	}
};




ANTLRv4Parser.DelegateGrammarsContext = DelegateGrammarsContext;

ANTLRv4Parser.prototype.delegateGrammars = function() {

    var localctx = new DelegateGrammarsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ANTLRv4Parser.RULE_delegateGrammars);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 197;
        this.match(ANTLRv4Parser.IMPORT);
        this.state = 198;
        this.delegateGrammar();
        this.state = 203;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.COMMA) {
            this.state = 199;
            this.match(ANTLRv4Parser.COMMA);
            this.state = 200;
            this.delegateGrammar();
            this.state = 205;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 206;
        this.match(ANTLRv4Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DelegateGrammarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_delegateGrammar;
    return this;
}

DelegateGrammarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DelegateGrammarContext.prototype.constructor = DelegateGrammarContext;

DelegateGrammarContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

DelegateGrammarContext.prototype.ASSIGN = function() {
    return this.getToken(ANTLRv4Parser.ASSIGN, 0);
};

DelegateGrammarContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterDelegateGrammar(this);
	}
};

DelegateGrammarContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitDelegateGrammar(this);
	}
};




ANTLRv4Parser.DelegateGrammarContext = DelegateGrammarContext;

ANTLRv4Parser.prototype.delegateGrammar = function() {

    var localctx = new DelegateGrammarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ANTLRv4Parser.RULE_delegateGrammar);
    try {
        this.state = 213;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 208;
            this.identifier();
            this.state = 209;
            this.match(ANTLRv4Parser.ASSIGN);
            this.state = 210;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 212;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TokensSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_tokensSpec;
    return this;
}

TokensSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TokensSpecContext.prototype.constructor = TokensSpecContext;

TokensSpecContext.prototype.TOKENS = function() {
    return this.getToken(ANTLRv4Parser.TOKENS, 0);
};

TokensSpecContext.prototype.LBRACE = function() {
    return this.getToken(ANTLRv4Parser.LBRACE, 0);
};

TokensSpecContext.prototype.RBRACE = function() {
    return this.getToken(ANTLRv4Parser.RBRACE, 0);
};

TokensSpecContext.prototype.idList = function() {
    return this.getTypedRuleContext(IdListContext,0);
};

TokensSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterTokensSpec(this);
	}
};

TokensSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitTokensSpec(this);
	}
};




ANTLRv4Parser.TokensSpecContext = TokensSpecContext;

ANTLRv4Parser.prototype.tokensSpec = function() {

    var localctx = new TokensSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ANTLRv4Parser.RULE_tokensSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 215;
        this.match(ANTLRv4Parser.TOKENS);
        this.state = 216;
        this.match(ANTLRv4Parser.LBRACE);
        this.state = 218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.TOKEN_REF || _la===ANTLRv4Parser.RULE_REF) {
            this.state = 217;
            this.idList();
        }

        this.state = 220;
        this.match(ANTLRv4Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChannelsSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_channelsSpec;
    return this;
}

ChannelsSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChannelsSpecContext.prototype.constructor = ChannelsSpecContext;

ChannelsSpecContext.prototype.CHANNELS = function() {
    return this.getToken(ANTLRv4Parser.CHANNELS, 0);
};

ChannelsSpecContext.prototype.LBRACE = function() {
    return this.getToken(ANTLRv4Parser.LBRACE, 0);
};

ChannelsSpecContext.prototype.RBRACE = function() {
    return this.getToken(ANTLRv4Parser.RBRACE, 0);
};

ChannelsSpecContext.prototype.idList = function() {
    return this.getTypedRuleContext(IdListContext,0);
};

ChannelsSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterChannelsSpec(this);
	}
};

ChannelsSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitChannelsSpec(this);
	}
};




ANTLRv4Parser.ChannelsSpecContext = ChannelsSpecContext;

ANTLRv4Parser.prototype.channelsSpec = function() {

    var localctx = new ChannelsSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ANTLRv4Parser.RULE_channelsSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 222;
        this.match(ANTLRv4Parser.CHANNELS);
        this.state = 223;
        this.match(ANTLRv4Parser.LBRACE);
        this.state = 225;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.TOKEN_REF || _la===ANTLRv4Parser.RULE_REF) {
            this.state = 224;
            this.idList();
        }

        this.state = 227;
        this.match(ANTLRv4Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_idList;
    return this;
}

IdListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdListContext.prototype.constructor = IdListContext;

IdListContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.COMMA);
    } else {
        return this.getToken(ANTLRv4Parser.COMMA, i);
    }
};


IdListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterIdList(this);
	}
};

IdListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitIdList(this);
	}
};




ANTLRv4Parser.IdListContext = IdListContext;

ANTLRv4Parser.prototype.idList = function() {

    var localctx = new IdListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ANTLRv4Parser.RULE_idList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 229;
        this.identifier();
        this.state = 234;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 230;
                this.match(ANTLRv4Parser.COMMA);
                this.state = 231;
                this.identifier(); 
            }
            this.state = 236;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
        }

        this.state = 238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.COMMA) {
            this.state = 237;
            this.match(ANTLRv4Parser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Action_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_action_;
    return this;
}

Action_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Action_Context.prototype.constructor = Action_Context;

Action_Context.prototype.AT = function() {
    return this.getToken(ANTLRv4Parser.AT, 0);
};

Action_Context.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Action_Context.prototype.actionBlock = function() {
    return this.getTypedRuleContext(ActionBlockContext,0);
};

Action_Context.prototype.actionScopeName = function() {
    return this.getTypedRuleContext(ActionScopeNameContext,0);
};

Action_Context.prototype.COLONCOLON = function() {
    return this.getToken(ANTLRv4Parser.COLONCOLON, 0);
};

Action_Context.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterAction_(this);
	}
};

Action_Context.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitAction_(this);
	}
};




ANTLRv4Parser.Action_Context = Action_Context;

ANTLRv4Parser.prototype.action_ = function() {

    var localctx = new Action_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ANTLRv4Parser.RULE_action_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 240;
        this.match(ANTLRv4Parser.AT);
        this.state = 244;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        if(la_===1) {
            this.state = 241;
            this.actionScopeName();
            this.state = 242;
            this.match(ANTLRv4Parser.COLONCOLON);

        }
        this.state = 246;
        this.identifier();
        this.state = 247;
        this.actionBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActionScopeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_actionScopeName;
    return this;
}

ActionScopeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionScopeNameContext.prototype.constructor = ActionScopeNameContext;

ActionScopeNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ActionScopeNameContext.prototype.LEXER = function() {
    return this.getToken(ANTLRv4Parser.LEXER, 0);
};

ActionScopeNameContext.prototype.PARSER = function() {
    return this.getToken(ANTLRv4Parser.PARSER, 0);
};

ActionScopeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterActionScopeName(this);
	}
};

ActionScopeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitActionScopeName(this);
	}
};




ANTLRv4Parser.ActionScopeNameContext = ActionScopeNameContext;

ANTLRv4Parser.prototype.actionScopeName = function() {

    var localctx = new ActionScopeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ANTLRv4Parser.RULE_actionScopeName);
    try {
        this.state = 252;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
        case ANTLRv4Parser.RULE_REF:
            this.enterOuterAlt(localctx, 1);
            this.state = 249;
            this.identifier();
            break;
        case ANTLRv4Parser.LEXER:
            this.enterOuterAlt(localctx, 2);
            this.state = 250;
            this.match(ANTLRv4Parser.LEXER);
            break;
        case ANTLRv4Parser.PARSER:
            this.enterOuterAlt(localctx, 3);
            this.state = 251;
            this.match(ANTLRv4Parser.PARSER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActionBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_actionBlock;
    return this;
}

ActionBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionBlockContext.prototype.constructor = ActionBlockContext;

ActionBlockContext.prototype.BEGIN_ACTION = function() {
    return this.getToken(ANTLRv4Parser.BEGIN_ACTION, 0);
};

ActionBlockContext.prototype.END_ACTION = function() {
    return this.getToken(ANTLRv4Parser.END_ACTION, 0);
};

ActionBlockContext.prototype.ACTION_CONTENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.ACTION_CONTENT);
    } else {
        return this.getToken(ANTLRv4Parser.ACTION_CONTENT, i);
    }
};


ActionBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterActionBlock(this);
	}
};

ActionBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitActionBlock(this);
	}
};




ANTLRv4Parser.ActionBlockContext = ActionBlockContext;

ANTLRv4Parser.prototype.actionBlock = function() {

    var localctx = new ActionBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ANTLRv4Parser.RULE_actionBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        this.match(ANTLRv4Parser.BEGIN_ACTION);
        this.state = 258;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.ACTION_CONTENT) {
            this.state = 255;
            this.match(ANTLRv4Parser.ACTION_CONTENT);
            this.state = 260;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 261;
        this.match(ANTLRv4Parser.END_ACTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgActionBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_argActionBlock;
    return this;
}

ArgActionBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgActionBlockContext.prototype.constructor = ArgActionBlockContext;

ArgActionBlockContext.prototype.BEGIN_ARGUMENT = function() {
    return this.getToken(ANTLRv4Parser.BEGIN_ARGUMENT, 0);
};

ArgActionBlockContext.prototype.END_ARGUMENT = function() {
    return this.getToken(ANTLRv4Parser.END_ARGUMENT, 0);
};

ArgActionBlockContext.prototype.ARGUMENT_CONTENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.ARGUMENT_CONTENT);
    } else {
        return this.getToken(ANTLRv4Parser.ARGUMENT_CONTENT, i);
    }
};


ArgActionBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterArgActionBlock(this);
	}
};

ArgActionBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitArgActionBlock(this);
	}
};




ANTLRv4Parser.ArgActionBlockContext = ArgActionBlockContext;

ANTLRv4Parser.prototype.argActionBlock = function() {

    var localctx = new ArgActionBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ANTLRv4Parser.RULE_argActionBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 263;
        this.match(ANTLRv4Parser.BEGIN_ARGUMENT);
        this.state = 267;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.ARGUMENT_CONTENT) {
            this.state = 264;
            this.match(ANTLRv4Parser.ARGUMENT_CONTENT);
            this.state = 269;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 270;
        this.match(ANTLRv4Parser.END_ARGUMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModeSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_modeSpec;
    return this;
}

ModeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModeSpecContext.prototype.constructor = ModeSpecContext;

ModeSpecContext.prototype.MODE = function() {
    return this.getToken(ANTLRv4Parser.MODE, 0);
};

ModeSpecContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ModeSpecContext.prototype.SEMI = function() {
    return this.getToken(ANTLRv4Parser.SEMI, 0);
};

ModeSpecContext.prototype.lexerRuleSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexerRuleSpecContext);
    } else {
        return this.getTypedRuleContext(LexerRuleSpecContext,i);
    }
};

ModeSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterModeSpec(this);
	}
};

ModeSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitModeSpec(this);
	}
};




ANTLRv4Parser.ModeSpecContext = ModeSpecContext;

ANTLRv4Parser.prototype.modeSpec = function() {

    var localctx = new ModeSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ANTLRv4Parser.RULE_modeSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 272;
        this.match(ANTLRv4Parser.MODE);
        this.state = 273;
        this.identifier();
        this.state = 274;
        this.match(ANTLRv4Parser.SEMI);
        this.state = 278;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ANTLRv4Parser.TOKEN_REF) | (1 << ANTLRv4Parser.DOC_COMMENT) | (1 << ANTLRv4Parser.FRAGMENT))) !== 0)) {
            this.state = 275;
            this.lexerRuleSpec();
            this.state = 280;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RulesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_rules;
    return this;
}

RulesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulesContext.prototype.constructor = RulesContext;

RulesContext.prototype.ruleSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RuleSpecContext);
    } else {
        return this.getTypedRuleContext(RuleSpecContext,i);
    }
};

RulesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRules(this);
	}
};

RulesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRules(this);
	}
};




ANTLRv4Parser.RulesContext = RulesContext;

ANTLRv4Parser.prototype.rules = function() {

    var localctx = new RulesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ANTLRv4Parser.RULE_rules);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ANTLRv4Parser.TOKEN_REF) | (1 << ANTLRv4Parser.RULE_REF) | (1 << ANTLRv4Parser.DOC_COMMENT) | (1 << ANTLRv4Parser.FRAGMENT) | (1 << ANTLRv4Parser.PROTECTED) | (1 << ANTLRv4Parser.PUBLIC) | (1 << ANTLRv4Parser.PRIVATE))) !== 0)) {
            this.state = 281;
            this.ruleSpec();
            this.state = 286;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ruleSpec;
    return this;
}

RuleSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleSpecContext.prototype.constructor = RuleSpecContext;

RuleSpecContext.prototype.parserRuleSpec = function() {
    return this.getTypedRuleContext(ParserRuleSpecContext,0);
};

RuleSpecContext.prototype.lexerRuleSpec = function() {
    return this.getTypedRuleContext(LexerRuleSpecContext,0);
};

RuleSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRuleSpec(this);
	}
};

RuleSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRuleSpec(this);
	}
};




ANTLRv4Parser.RuleSpecContext = RuleSpecContext;

ANTLRv4Parser.prototype.ruleSpec = function() {

    var localctx = new RuleSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ANTLRv4Parser.RULE_ruleSpec);
    try {
        this.state = 289;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 287;
            this.parserRuleSpec();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 288;
            this.lexerRuleSpec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParserRuleSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_parserRuleSpec;
    return this;
}

ParserRuleSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParserRuleSpecContext.prototype.constructor = ParserRuleSpecContext;

ParserRuleSpecContext.prototype.RULE_REF = function() {
    return this.getToken(ANTLRv4Parser.RULE_REF, 0);
};

ParserRuleSpecContext.prototype.COLON = function() {
    return this.getToken(ANTLRv4Parser.COLON, 0);
};

ParserRuleSpecContext.prototype.ruleBlock = function() {
    return this.getTypedRuleContext(RuleBlockContext,0);
};

ParserRuleSpecContext.prototype.SEMI = function() {
    return this.getToken(ANTLRv4Parser.SEMI, 0);
};

ParserRuleSpecContext.prototype.exceptionGroup = function() {
    return this.getTypedRuleContext(ExceptionGroupContext,0);
};

ParserRuleSpecContext.prototype.DOC_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.DOC_COMMENT);
    } else {
        return this.getToken(ANTLRv4Parser.DOC_COMMENT, i);
    }
};


ParserRuleSpecContext.prototype.ruleModifiers = function() {
    return this.getTypedRuleContext(RuleModifiersContext,0);
};

ParserRuleSpecContext.prototype.argActionBlock = function() {
    return this.getTypedRuleContext(ArgActionBlockContext,0);
};

ParserRuleSpecContext.prototype.ruleReturns = function() {
    return this.getTypedRuleContext(RuleReturnsContext,0);
};

ParserRuleSpecContext.prototype.throwsSpec = function() {
    return this.getTypedRuleContext(ThrowsSpecContext,0);
};

ParserRuleSpecContext.prototype.localsSpec = function() {
    return this.getTypedRuleContext(LocalsSpecContext,0);
};

ParserRuleSpecContext.prototype.rulePrequel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RulePrequelContext);
    } else {
        return this.getTypedRuleContext(RulePrequelContext,i);
    }
};

ParserRuleSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterParserRuleSpec(this);
	}
};

ParserRuleSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitParserRuleSpec(this);
	}
};




ANTLRv4Parser.ParserRuleSpecContext = ParserRuleSpecContext;

ANTLRv4Parser.prototype.parserRuleSpec = function() {

    var localctx = new ParserRuleSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ANTLRv4Parser.RULE_parserRuleSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.DOC_COMMENT) {
            this.state = 291;
            this.match(ANTLRv4Parser.DOC_COMMENT);
            this.state = 296;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 298;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ANTLRv4Parser.FRAGMENT) | (1 << ANTLRv4Parser.PROTECTED) | (1 << ANTLRv4Parser.PUBLIC) | (1 << ANTLRv4Parser.PRIVATE))) !== 0)) {
            this.state = 297;
            this.ruleModifiers();
        }

        this.state = 300;
        this.match(ANTLRv4Parser.RULE_REF);
        this.state = 302;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.BEGIN_ARGUMENT) {
            this.state = 301;
            this.argActionBlock();
        }

        this.state = 305;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.RETURNS) {
            this.state = 304;
            this.ruleReturns();
        }

        this.state = 308;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.THROWS) {
            this.state = 307;
            this.throwsSpec();
        }

        this.state = 311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.LOCALS) {
            this.state = 310;
            this.localsSpec();
        }

        this.state = 316;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.OPTIONS || _la===ANTLRv4Parser.AT) {
            this.state = 313;
            this.rulePrequel();
            this.state = 318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 319;
        this.match(ANTLRv4Parser.COLON);
        this.state = 320;
        this.ruleBlock();
        this.state = 321;
        this.match(ANTLRv4Parser.SEMI);
        this.state = 322;
        this.exceptionGroup();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptionGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_exceptionGroup;
    return this;
}

ExceptionGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionGroupContext.prototype.constructor = ExceptionGroupContext;

ExceptionGroupContext.prototype.exceptionHandler = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExceptionHandlerContext);
    } else {
        return this.getTypedRuleContext(ExceptionHandlerContext,i);
    }
};

ExceptionGroupContext.prototype.finallyClause = function() {
    return this.getTypedRuleContext(FinallyClauseContext,0);
};

ExceptionGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterExceptionGroup(this);
	}
};

ExceptionGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitExceptionGroup(this);
	}
};




ANTLRv4Parser.ExceptionGroupContext = ExceptionGroupContext;

ANTLRv4Parser.prototype.exceptionGroup = function() {

    var localctx = new ExceptionGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ANTLRv4Parser.RULE_exceptionGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.CATCH) {
            this.state = 324;
            this.exceptionHandler();
            this.state = 329;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.FINALLY) {
            this.state = 330;
            this.finallyClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptionHandlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_exceptionHandler;
    return this;
}

ExceptionHandlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionHandlerContext.prototype.constructor = ExceptionHandlerContext;

ExceptionHandlerContext.prototype.CATCH = function() {
    return this.getToken(ANTLRv4Parser.CATCH, 0);
};

ExceptionHandlerContext.prototype.argActionBlock = function() {
    return this.getTypedRuleContext(ArgActionBlockContext,0);
};

ExceptionHandlerContext.prototype.actionBlock = function() {
    return this.getTypedRuleContext(ActionBlockContext,0);
};

ExceptionHandlerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterExceptionHandler(this);
	}
};

ExceptionHandlerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitExceptionHandler(this);
	}
};




ANTLRv4Parser.ExceptionHandlerContext = ExceptionHandlerContext;

ANTLRv4Parser.prototype.exceptionHandler = function() {

    var localctx = new ExceptionHandlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ANTLRv4Parser.RULE_exceptionHandler);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.match(ANTLRv4Parser.CATCH);
        this.state = 334;
        this.argActionBlock();
        this.state = 335;
        this.actionBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FinallyClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_finallyClause;
    return this;
}

FinallyClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyClauseContext.prototype.constructor = FinallyClauseContext;

FinallyClauseContext.prototype.FINALLY = function() {
    return this.getToken(ANTLRv4Parser.FINALLY, 0);
};

FinallyClauseContext.prototype.actionBlock = function() {
    return this.getTypedRuleContext(ActionBlockContext,0);
};

FinallyClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterFinallyClause(this);
	}
};

FinallyClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitFinallyClause(this);
	}
};




ANTLRv4Parser.FinallyClauseContext = FinallyClauseContext;

ANTLRv4Parser.prototype.finallyClause = function() {

    var localctx = new FinallyClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ANTLRv4Parser.RULE_finallyClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this.match(ANTLRv4Parser.FINALLY);
        this.state = 338;
        this.actionBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RulePrequelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_rulePrequel;
    return this;
}

RulePrequelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulePrequelContext.prototype.constructor = RulePrequelContext;

RulePrequelContext.prototype.optionsSpec = function() {
    return this.getTypedRuleContext(OptionsSpecContext,0);
};

RulePrequelContext.prototype.ruleAction = function() {
    return this.getTypedRuleContext(RuleActionContext,0);
};

RulePrequelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRulePrequel(this);
	}
};

RulePrequelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRulePrequel(this);
	}
};




ANTLRv4Parser.RulePrequelContext = RulePrequelContext;

ANTLRv4Parser.prototype.rulePrequel = function() {

    var localctx = new RulePrequelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ANTLRv4Parser.RULE_rulePrequel);
    try {
        this.state = 342;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.OPTIONS:
            this.enterOuterAlt(localctx, 1);
            this.state = 340;
            this.optionsSpec();
            break;
        case ANTLRv4Parser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 341;
            this.ruleAction();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleReturnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ruleReturns;
    return this;
}

RuleReturnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleReturnsContext.prototype.constructor = RuleReturnsContext;

RuleReturnsContext.prototype.RETURNS = function() {
    return this.getToken(ANTLRv4Parser.RETURNS, 0);
};

RuleReturnsContext.prototype.argActionBlock = function() {
    return this.getTypedRuleContext(ArgActionBlockContext,0);
};

RuleReturnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRuleReturns(this);
	}
};

RuleReturnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRuleReturns(this);
	}
};




ANTLRv4Parser.RuleReturnsContext = RuleReturnsContext;

ANTLRv4Parser.prototype.ruleReturns = function() {

    var localctx = new RuleReturnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ANTLRv4Parser.RULE_ruleReturns);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.match(ANTLRv4Parser.RETURNS);
        this.state = 345;
        this.argActionBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThrowsSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_throwsSpec;
    return this;
}

ThrowsSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowsSpecContext.prototype.constructor = ThrowsSpecContext;

ThrowsSpecContext.prototype.THROWS = function() {
    return this.getToken(ANTLRv4Parser.THROWS, 0);
};

ThrowsSpecContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ThrowsSpecContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.COMMA);
    } else {
        return this.getToken(ANTLRv4Parser.COMMA, i);
    }
};


ThrowsSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterThrowsSpec(this);
	}
};

ThrowsSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitThrowsSpec(this);
	}
};




ANTLRv4Parser.ThrowsSpecContext = ThrowsSpecContext;

ANTLRv4Parser.prototype.throwsSpec = function() {

    var localctx = new ThrowsSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ANTLRv4Parser.RULE_throwsSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 347;
        this.match(ANTLRv4Parser.THROWS);
        this.state = 348;
        this.identifier();
        this.state = 353;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.COMMA) {
            this.state = 349;
            this.match(ANTLRv4Parser.COMMA);
            this.state = 350;
            this.identifier();
            this.state = 355;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LocalsSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_localsSpec;
    return this;
}

LocalsSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalsSpecContext.prototype.constructor = LocalsSpecContext;

LocalsSpecContext.prototype.LOCALS = function() {
    return this.getToken(ANTLRv4Parser.LOCALS, 0);
};

LocalsSpecContext.prototype.argActionBlock = function() {
    return this.getTypedRuleContext(ArgActionBlockContext,0);
};

LocalsSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLocalsSpec(this);
	}
};

LocalsSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLocalsSpec(this);
	}
};




ANTLRv4Parser.LocalsSpecContext = LocalsSpecContext;

ANTLRv4Parser.prototype.localsSpec = function() {

    var localctx = new LocalsSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ANTLRv4Parser.RULE_localsSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 356;
        this.match(ANTLRv4Parser.LOCALS);
        this.state = 357;
        this.argActionBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ruleAction;
    return this;
}

RuleActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleActionContext.prototype.constructor = RuleActionContext;

RuleActionContext.prototype.AT = function() {
    return this.getToken(ANTLRv4Parser.AT, 0);
};

RuleActionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

RuleActionContext.prototype.actionBlock = function() {
    return this.getTypedRuleContext(ActionBlockContext,0);
};

RuleActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRuleAction(this);
	}
};

RuleActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRuleAction(this);
	}
};




ANTLRv4Parser.RuleActionContext = RuleActionContext;

ANTLRv4Parser.prototype.ruleAction = function() {

    var localctx = new RuleActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ANTLRv4Parser.RULE_ruleAction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 359;
        this.match(ANTLRv4Parser.AT);
        this.state = 360;
        this.identifier();
        this.state = 361;
        this.actionBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ruleModifiers;
    return this;
}

RuleModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleModifiersContext.prototype.constructor = RuleModifiersContext;

RuleModifiersContext.prototype.ruleModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RuleModifierContext);
    } else {
        return this.getTypedRuleContext(RuleModifierContext,i);
    }
};

RuleModifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRuleModifiers(this);
	}
};

RuleModifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRuleModifiers(this);
	}
};




ANTLRv4Parser.RuleModifiersContext = RuleModifiersContext;

ANTLRv4Parser.prototype.ruleModifiers = function() {

    var localctx = new RuleModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ANTLRv4Parser.RULE_ruleModifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 364; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 363;
            this.ruleModifier();
            this.state = 366; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ANTLRv4Parser.FRAGMENT) | (1 << ANTLRv4Parser.PROTECTED) | (1 << ANTLRv4Parser.PUBLIC) | (1 << ANTLRv4Parser.PRIVATE))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ruleModifier;
    return this;
}

RuleModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleModifierContext.prototype.constructor = RuleModifierContext;

RuleModifierContext.prototype.PUBLIC = function() {
    return this.getToken(ANTLRv4Parser.PUBLIC, 0);
};

RuleModifierContext.prototype.PRIVATE = function() {
    return this.getToken(ANTLRv4Parser.PRIVATE, 0);
};

RuleModifierContext.prototype.PROTECTED = function() {
    return this.getToken(ANTLRv4Parser.PROTECTED, 0);
};

RuleModifierContext.prototype.FRAGMENT = function() {
    return this.getToken(ANTLRv4Parser.FRAGMENT, 0);
};

RuleModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRuleModifier(this);
	}
};

RuleModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRuleModifier(this);
	}
};




ANTLRv4Parser.RuleModifierContext = RuleModifierContext;

ANTLRv4Parser.prototype.ruleModifier = function() {

    var localctx = new RuleModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ANTLRv4Parser.RULE_ruleModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ANTLRv4Parser.FRAGMENT) | (1 << ANTLRv4Parser.PROTECTED) | (1 << ANTLRv4Parser.PUBLIC) | (1 << ANTLRv4Parser.PRIVATE))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ruleBlock;
    return this;
}

RuleBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleBlockContext.prototype.constructor = RuleBlockContext;

RuleBlockContext.prototype.ruleAltList = function() {
    return this.getTypedRuleContext(RuleAltListContext,0);
};

RuleBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRuleBlock(this);
	}
};

RuleBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRuleBlock(this);
	}
};




ANTLRv4Parser.RuleBlockContext = RuleBlockContext;

ANTLRv4Parser.prototype.ruleBlock = function() {

    var localctx = new RuleBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ANTLRv4Parser.RULE_ruleBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.ruleAltList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleAltListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ruleAltList;
    return this;
}

RuleAltListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleAltListContext.prototype.constructor = RuleAltListContext;

RuleAltListContext.prototype.labeledAlt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabeledAltContext);
    } else {
        return this.getTypedRuleContext(LabeledAltContext,i);
    }
};

RuleAltListContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.OR);
    } else {
        return this.getToken(ANTLRv4Parser.OR, i);
    }
};


RuleAltListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRuleAltList(this);
	}
};

RuleAltListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRuleAltList(this);
	}
};




ANTLRv4Parser.RuleAltListContext = RuleAltListContext;

ANTLRv4Parser.prototype.ruleAltList = function() {

    var localctx = new RuleAltListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ANTLRv4Parser.RULE_ruleAltList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 372;
        this.labeledAlt();
        this.state = 377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.OR) {
            this.state = 373;
            this.match(ANTLRv4Parser.OR);
            this.state = 374;
            this.labeledAlt();
            this.state = 379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabeledAltContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_labeledAlt;
    return this;
}

LabeledAltContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledAltContext.prototype.constructor = LabeledAltContext;

LabeledAltContext.prototype.alternative = function() {
    return this.getTypedRuleContext(AlternativeContext,0);
};

LabeledAltContext.prototype.POUND = function() {
    return this.getToken(ANTLRv4Parser.POUND, 0);
};

LabeledAltContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabeledAltContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLabeledAlt(this);
	}
};

LabeledAltContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLabeledAlt(this);
	}
};




ANTLRv4Parser.LabeledAltContext = LabeledAltContext;

ANTLRv4Parser.prototype.labeledAlt = function() {

    var localctx = new LabeledAltContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ANTLRv4Parser.RULE_labeledAlt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 380;
        this.alternative();
        this.state = 383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.POUND) {
            this.state = 381;
            this.match(ANTLRv4Parser.POUND);
            this.state = 382;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerRuleSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerRuleSpec;
    return this;
}

LexerRuleSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerRuleSpecContext.prototype.constructor = LexerRuleSpecContext;

LexerRuleSpecContext.prototype.TOKEN_REF = function() {
    return this.getToken(ANTLRv4Parser.TOKEN_REF, 0);
};

LexerRuleSpecContext.prototype.COLON = function() {
    return this.getToken(ANTLRv4Parser.COLON, 0);
};

LexerRuleSpecContext.prototype.lexerRuleBlock = function() {
    return this.getTypedRuleContext(LexerRuleBlockContext,0);
};

LexerRuleSpecContext.prototype.SEMI = function() {
    return this.getToken(ANTLRv4Parser.SEMI, 0);
};

LexerRuleSpecContext.prototype.DOC_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.DOC_COMMENT);
    } else {
        return this.getToken(ANTLRv4Parser.DOC_COMMENT, i);
    }
};


LexerRuleSpecContext.prototype.FRAGMENT = function() {
    return this.getToken(ANTLRv4Parser.FRAGMENT, 0);
};

LexerRuleSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerRuleSpec(this);
	}
};

LexerRuleSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerRuleSpec(this);
	}
};




ANTLRv4Parser.LexerRuleSpecContext = LexerRuleSpecContext;

ANTLRv4Parser.prototype.lexerRuleSpec = function() {

    var localctx = new LexerRuleSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ANTLRv4Parser.RULE_lexerRuleSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.DOC_COMMENT) {
            this.state = 385;
            this.match(ANTLRv4Parser.DOC_COMMENT);
            this.state = 390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 392;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.FRAGMENT) {
            this.state = 391;
            this.match(ANTLRv4Parser.FRAGMENT);
        }

        this.state = 394;
        this.match(ANTLRv4Parser.TOKEN_REF);
        this.state = 395;
        this.match(ANTLRv4Parser.COLON);
        this.state = 396;
        this.lexerRuleBlock();
        this.state = 397;
        this.match(ANTLRv4Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerRuleBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerRuleBlock;
    return this;
}

LexerRuleBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerRuleBlockContext.prototype.constructor = LexerRuleBlockContext;

LexerRuleBlockContext.prototype.lexerAltList = function() {
    return this.getTypedRuleContext(LexerAltListContext,0);
};

LexerRuleBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerRuleBlock(this);
	}
};

LexerRuleBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerRuleBlock(this);
	}
};




ANTLRv4Parser.LexerRuleBlockContext = LexerRuleBlockContext;

ANTLRv4Parser.prototype.lexerRuleBlock = function() {

    var localctx = new LexerRuleBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ANTLRv4Parser.RULE_lexerRuleBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 399;
        this.lexerAltList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerAltListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerAltList;
    return this;
}

LexerAltListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerAltListContext.prototype.constructor = LexerAltListContext;

LexerAltListContext.prototype.lexerAlt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexerAltContext);
    } else {
        return this.getTypedRuleContext(LexerAltContext,i);
    }
};

LexerAltListContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.OR);
    } else {
        return this.getToken(ANTLRv4Parser.OR, i);
    }
};


LexerAltListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerAltList(this);
	}
};

LexerAltListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerAltList(this);
	}
};




ANTLRv4Parser.LexerAltListContext = LexerAltListContext;

ANTLRv4Parser.prototype.lexerAltList = function() {

    var localctx = new LexerAltListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ANTLRv4Parser.RULE_lexerAltList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 401;
        this.lexerAlt();
        this.state = 406;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.OR) {
            this.state = 402;
            this.match(ANTLRv4Parser.OR);
            this.state = 403;
            this.lexerAlt();
            this.state = 408;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerAltContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerAlt;
    return this;
}

LexerAltContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerAltContext.prototype.constructor = LexerAltContext;

LexerAltContext.prototype.lexerElements = function() {
    return this.getTypedRuleContext(LexerElementsContext,0);
};

LexerAltContext.prototype.lexerCommands = function() {
    return this.getTypedRuleContext(LexerCommandsContext,0);
};

LexerAltContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerAlt(this);
	}
};

LexerAltContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerAlt(this);
	}
};




ANTLRv4Parser.LexerAltContext = LexerAltContext;

ANTLRv4Parser.prototype.lexerAlt = function() {

    var localctx = new LexerAltContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ANTLRv4Parser.RULE_lexerAlt);
    var _la = 0; // Token type
    try {
        this.state = 414;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
        case ANTLRv4Parser.RULE_REF:
        case ANTLRv4Parser.LEXER_CHAR_SET:
        case ANTLRv4Parser.STRING_LITERAL:
        case ANTLRv4Parser.BEGIN_ACTION:
        case ANTLRv4Parser.LPAREN:
        case ANTLRv4Parser.DOT:
        case ANTLRv4Parser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 409;
            this.lexerElements();
            this.state = 411;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.RARROW) {
                this.state = 410;
                this.lexerCommands();
            }

            break;
        case ANTLRv4Parser.SEMI:
        case ANTLRv4Parser.RPAREN:
        case ANTLRv4Parser.OR:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerElements;
    return this;
}

LexerElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerElementsContext.prototype.constructor = LexerElementsContext;

LexerElementsContext.prototype.lexerElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexerElementContext);
    } else {
        return this.getTypedRuleContext(LexerElementContext,i);
    }
};

LexerElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerElements(this);
	}
};

LexerElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerElements(this);
	}
};




ANTLRv4Parser.LexerElementsContext = LexerElementsContext;

ANTLRv4Parser.prototype.lexerElements = function() {

    var localctx = new LexerElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ANTLRv4Parser.RULE_lexerElements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 416;
            this.lexerElement();
            this.state = 419; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ANTLRv4Parser.TOKEN_REF) | (1 << ANTLRv4Parser.RULE_REF) | (1 << ANTLRv4Parser.LEXER_CHAR_SET) | (1 << ANTLRv4Parser.STRING_LITERAL) | (1 << ANTLRv4Parser.BEGIN_ACTION))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ANTLRv4Parser.LPAREN - 33)) | (1 << (ANTLRv4Parser.DOT - 33)) | (1 << (ANTLRv4Parser.NOT - 33)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerElement;
    return this;
}

LexerElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerElementContext.prototype.constructor = LexerElementContext;

LexerElementContext.prototype.labeledLexerElement = function() {
    return this.getTypedRuleContext(LabeledLexerElementContext,0);
};

LexerElementContext.prototype.ebnfSuffix = function() {
    return this.getTypedRuleContext(EbnfSuffixContext,0);
};

LexerElementContext.prototype.lexerAtom = function() {
    return this.getTypedRuleContext(LexerAtomContext,0);
};

LexerElementContext.prototype.lexerBlock = function() {
    return this.getTypedRuleContext(LexerBlockContext,0);
};

LexerElementContext.prototype.actionBlock = function() {
    return this.getTypedRuleContext(ActionBlockContext,0);
};

LexerElementContext.prototype.QUESTION = function() {
    return this.getToken(ANTLRv4Parser.QUESTION, 0);
};

LexerElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerElement(this);
	}
};

LexerElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerElement(this);
	}
};




ANTLRv4Parser.LexerElementContext = LexerElementContext;

ANTLRv4Parser.prototype.lexerElement = function() {

    var localctx = new LexerElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ANTLRv4Parser.RULE_lexerElement);
    var _la = 0; // Token type
    try {
        this.state = 437;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 421;
            this.labeledLexerElement();
            this.state = 423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (ANTLRv4Parser.QUESTION - 41)) | (1 << (ANTLRv4Parser.STAR - 41)) | (1 << (ANTLRv4Parser.PLUS - 41)))) !== 0)) {
                this.state = 422;
                this.ebnfSuffix();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 425;
            this.lexerAtom();
            this.state = 427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (ANTLRv4Parser.QUESTION - 41)) | (1 << (ANTLRv4Parser.STAR - 41)) | (1 << (ANTLRv4Parser.PLUS - 41)))) !== 0)) {
                this.state = 426;
                this.ebnfSuffix();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 429;
            this.lexerBlock();
            this.state = 431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (ANTLRv4Parser.QUESTION - 41)) | (1 << (ANTLRv4Parser.STAR - 41)) | (1 << (ANTLRv4Parser.PLUS - 41)))) !== 0)) {
                this.state = 430;
                this.ebnfSuffix();
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 433;
            this.actionBlock();
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.QUESTION) {
                this.state = 434;
                this.match(ANTLRv4Parser.QUESTION);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabeledLexerElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_labeledLexerElement;
    return this;
}

LabeledLexerElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledLexerElementContext.prototype.constructor = LabeledLexerElementContext;

LabeledLexerElementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabeledLexerElementContext.prototype.ASSIGN = function() {
    return this.getToken(ANTLRv4Parser.ASSIGN, 0);
};

LabeledLexerElementContext.prototype.PLUS_ASSIGN = function() {
    return this.getToken(ANTLRv4Parser.PLUS_ASSIGN, 0);
};

LabeledLexerElementContext.prototype.lexerAtom = function() {
    return this.getTypedRuleContext(LexerAtomContext,0);
};

LabeledLexerElementContext.prototype.lexerBlock = function() {
    return this.getTypedRuleContext(LexerBlockContext,0);
};

LabeledLexerElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLabeledLexerElement(this);
	}
};

LabeledLexerElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLabeledLexerElement(this);
	}
};




ANTLRv4Parser.LabeledLexerElementContext = LabeledLexerElementContext;

ANTLRv4Parser.prototype.labeledLexerElement = function() {

    var localctx = new LabeledLexerElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ANTLRv4Parser.RULE_labeledLexerElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 439;
        this.identifier();
        this.state = 440;
        _la = this._input.LA(1);
        if(!(_la===ANTLRv4Parser.ASSIGN || _la===ANTLRv4Parser.PLUS_ASSIGN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 443;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
        case ANTLRv4Parser.LEXER_CHAR_SET:
        case ANTLRv4Parser.STRING_LITERAL:
        case ANTLRv4Parser.DOT:
        case ANTLRv4Parser.NOT:
            this.state = 441;
            this.lexerAtom();
            break;
        case ANTLRv4Parser.LPAREN:
            this.state = 442;
            this.lexerBlock();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerBlock;
    return this;
}

LexerBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerBlockContext.prototype.constructor = LexerBlockContext;

LexerBlockContext.prototype.LPAREN = function() {
    return this.getToken(ANTLRv4Parser.LPAREN, 0);
};

LexerBlockContext.prototype.lexerAltList = function() {
    return this.getTypedRuleContext(LexerAltListContext,0);
};

LexerBlockContext.prototype.RPAREN = function() {
    return this.getToken(ANTLRv4Parser.RPAREN, 0);
};

LexerBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerBlock(this);
	}
};

LexerBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerBlock(this);
	}
};




ANTLRv4Parser.LexerBlockContext = LexerBlockContext;

ANTLRv4Parser.prototype.lexerBlock = function() {

    var localctx = new LexerBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ANTLRv4Parser.RULE_lexerBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this.match(ANTLRv4Parser.LPAREN);
        this.state = 446;
        this.lexerAltList();
        this.state = 447;
        this.match(ANTLRv4Parser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerCommandsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerCommands;
    return this;
}

LexerCommandsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerCommandsContext.prototype.constructor = LexerCommandsContext;

LexerCommandsContext.prototype.RARROW = function() {
    return this.getToken(ANTLRv4Parser.RARROW, 0);
};

LexerCommandsContext.prototype.lexerCommand = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexerCommandContext);
    } else {
        return this.getTypedRuleContext(LexerCommandContext,i);
    }
};

LexerCommandsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.COMMA);
    } else {
        return this.getToken(ANTLRv4Parser.COMMA, i);
    }
};


LexerCommandsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerCommands(this);
	}
};

LexerCommandsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerCommands(this);
	}
};




ANTLRv4Parser.LexerCommandsContext = LexerCommandsContext;

ANTLRv4Parser.prototype.lexerCommands = function() {

    var localctx = new LexerCommandsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ANTLRv4Parser.RULE_lexerCommands);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 449;
        this.match(ANTLRv4Parser.RARROW);
        this.state = 450;
        this.lexerCommand();
        this.state = 455;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.COMMA) {
            this.state = 451;
            this.match(ANTLRv4Parser.COMMA);
            this.state = 452;
            this.lexerCommand();
            this.state = 457;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerCommand;
    return this;
}

LexerCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerCommandContext.prototype.constructor = LexerCommandContext;

LexerCommandContext.prototype.lexerCommandName = function() {
    return this.getTypedRuleContext(LexerCommandNameContext,0);
};

LexerCommandContext.prototype.LPAREN = function() {
    return this.getToken(ANTLRv4Parser.LPAREN, 0);
};

LexerCommandContext.prototype.lexerCommandExpr = function() {
    return this.getTypedRuleContext(LexerCommandExprContext,0);
};

LexerCommandContext.prototype.RPAREN = function() {
    return this.getToken(ANTLRv4Parser.RPAREN, 0);
};

LexerCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerCommand(this);
	}
};

LexerCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerCommand(this);
	}
};




ANTLRv4Parser.LexerCommandContext = LexerCommandContext;

ANTLRv4Parser.prototype.lexerCommand = function() {

    var localctx = new LexerCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ANTLRv4Parser.RULE_lexerCommand);
    try {
        this.state = 464;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 458;
            this.lexerCommandName();
            this.state = 459;
            this.match(ANTLRv4Parser.LPAREN);
            this.state = 460;
            this.lexerCommandExpr();
            this.state = 461;
            this.match(ANTLRv4Parser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 463;
            this.lexerCommandName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerCommandNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerCommandName;
    return this;
}

LexerCommandNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerCommandNameContext.prototype.constructor = LexerCommandNameContext;

LexerCommandNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LexerCommandNameContext.prototype.MODE = function() {
    return this.getToken(ANTLRv4Parser.MODE, 0);
};

LexerCommandNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerCommandName(this);
	}
};

LexerCommandNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerCommandName(this);
	}
};




ANTLRv4Parser.LexerCommandNameContext = LexerCommandNameContext;

ANTLRv4Parser.prototype.lexerCommandName = function() {

    var localctx = new LexerCommandNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ANTLRv4Parser.RULE_lexerCommandName);
    try {
        this.state = 468;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
        case ANTLRv4Parser.RULE_REF:
            this.enterOuterAlt(localctx, 1);
            this.state = 466;
            this.identifier();
            break;
        case ANTLRv4Parser.MODE:
            this.enterOuterAlt(localctx, 2);
            this.state = 467;
            this.match(ANTLRv4Parser.MODE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerCommandExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerCommandExpr;
    return this;
}

LexerCommandExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerCommandExprContext.prototype.constructor = LexerCommandExprContext;

LexerCommandExprContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LexerCommandExprContext.prototype.INT = function() {
    return this.getToken(ANTLRv4Parser.INT, 0);
};

LexerCommandExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerCommandExpr(this);
	}
};

LexerCommandExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerCommandExpr(this);
	}
};




ANTLRv4Parser.LexerCommandExprContext = LexerCommandExprContext;

ANTLRv4Parser.prototype.lexerCommandExpr = function() {

    var localctx = new LexerCommandExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ANTLRv4Parser.RULE_lexerCommandExpr);
    try {
        this.state = 472;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
        case ANTLRv4Parser.RULE_REF:
            this.enterOuterAlt(localctx, 1);
            this.state = 470;
            this.identifier();
            break;
        case ANTLRv4Parser.INT:
            this.enterOuterAlt(localctx, 2);
            this.state = 471;
            this.match(ANTLRv4Parser.INT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AltListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_altList;
    return this;
}

AltListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AltListContext.prototype.constructor = AltListContext;

AltListContext.prototype.alternative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlternativeContext);
    } else {
        return this.getTypedRuleContext(AlternativeContext,i);
    }
};

AltListContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.OR);
    } else {
        return this.getToken(ANTLRv4Parser.OR, i);
    }
};


AltListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterAltList(this);
	}
};

AltListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitAltList(this);
	}
};




ANTLRv4Parser.AltListContext = AltListContext;

ANTLRv4Parser.prototype.altList = function() {

    var localctx = new AltListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ANTLRv4Parser.RULE_altList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 474;
        this.alternative();
        this.state = 479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.OR) {
            this.state = 475;
            this.match(ANTLRv4Parser.OR);
            this.state = 476;
            this.alternative();
            this.state = 481;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_alternative;
    return this;
}

AlternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlternativeContext.prototype.constructor = AlternativeContext;

AlternativeContext.prototype.elementOptions = function() {
    return this.getTypedRuleContext(ElementOptionsContext,0);
};

AlternativeContext.prototype.element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementContext);
    } else {
        return this.getTypedRuleContext(ElementContext,i);
    }
};

AlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterAlternative(this);
	}
};

AlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitAlternative(this);
	}
};




ANTLRv4Parser.AlternativeContext = AlternativeContext;

ANTLRv4Parser.prototype.alternative = function() {

    var localctx = new AlternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ANTLRv4Parser.RULE_alternative);
    var _la = 0; // Token type
    try {
        this.state = 491;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
        case ANTLRv4Parser.RULE_REF:
        case ANTLRv4Parser.STRING_LITERAL:
        case ANTLRv4Parser.BEGIN_ACTION:
        case ANTLRv4Parser.LPAREN:
        case ANTLRv4Parser.LT:
        case ANTLRv4Parser.DOT:
        case ANTLRv4Parser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 483;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.LT) {
                this.state = 482;
                this.elementOptions();
            }

            this.state = 486; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 485;
                this.element();
                this.state = 488; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ANTLRv4Parser.TOKEN_REF) | (1 << ANTLRv4Parser.RULE_REF) | (1 << ANTLRv4Parser.STRING_LITERAL) | (1 << ANTLRv4Parser.BEGIN_ACTION))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ANTLRv4Parser.LPAREN - 33)) | (1 << (ANTLRv4Parser.DOT - 33)) | (1 << (ANTLRv4Parser.NOT - 33)))) !== 0));
            break;
        case ANTLRv4Parser.SEMI:
        case ANTLRv4Parser.RPAREN:
        case ANTLRv4Parser.OR:
        case ANTLRv4Parser.POUND:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_element;
    return this;
}

ElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementContext.prototype.constructor = ElementContext;

ElementContext.prototype.labeledElement = function() {
    return this.getTypedRuleContext(LabeledElementContext,0);
};

ElementContext.prototype.ebnfSuffix = function() {
    return this.getTypedRuleContext(EbnfSuffixContext,0);
};

ElementContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

ElementContext.prototype.ebnf = function() {
    return this.getTypedRuleContext(EbnfContext,0);
};

ElementContext.prototype.actionBlock = function() {
    return this.getTypedRuleContext(ActionBlockContext,0);
};

ElementContext.prototype.QUESTION = function() {
    return this.getToken(ANTLRv4Parser.QUESTION, 0);
};

ElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterElement(this);
	}
};

ElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitElement(this);
	}
};




ANTLRv4Parser.ElementContext = ElementContext;

ANTLRv4Parser.prototype.element = function() {

    var localctx = new ElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ANTLRv4Parser.RULE_element);
    var _la = 0; // Token type
    try {
        this.state = 508;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 493;
            this.labeledElement();
            this.state = 496;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ANTLRv4Parser.QUESTION:
            case ANTLRv4Parser.STAR:
            case ANTLRv4Parser.PLUS:
                this.state = 494;
                this.ebnfSuffix();
                break;
            case ANTLRv4Parser.TOKEN_REF:
            case ANTLRv4Parser.RULE_REF:
            case ANTLRv4Parser.STRING_LITERAL:
            case ANTLRv4Parser.BEGIN_ACTION:
            case ANTLRv4Parser.SEMI:
            case ANTLRv4Parser.LPAREN:
            case ANTLRv4Parser.RPAREN:
            case ANTLRv4Parser.OR:
            case ANTLRv4Parser.DOT:
            case ANTLRv4Parser.POUND:
            case ANTLRv4Parser.NOT:
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 498;
            this.atom();
            this.state = 501;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ANTLRv4Parser.QUESTION:
            case ANTLRv4Parser.STAR:
            case ANTLRv4Parser.PLUS:
                this.state = 499;
                this.ebnfSuffix();
                break;
            case ANTLRv4Parser.TOKEN_REF:
            case ANTLRv4Parser.RULE_REF:
            case ANTLRv4Parser.STRING_LITERAL:
            case ANTLRv4Parser.BEGIN_ACTION:
            case ANTLRv4Parser.SEMI:
            case ANTLRv4Parser.LPAREN:
            case ANTLRv4Parser.RPAREN:
            case ANTLRv4Parser.OR:
            case ANTLRv4Parser.DOT:
            case ANTLRv4Parser.POUND:
            case ANTLRv4Parser.NOT:
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 503;
            this.ebnf();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 504;
            this.actionBlock();
            this.state = 506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.QUESTION) {
                this.state = 505;
                this.match(ANTLRv4Parser.QUESTION);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabeledElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_labeledElement;
    return this;
}

LabeledElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledElementContext.prototype.constructor = LabeledElementContext;

LabeledElementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabeledElementContext.prototype.ASSIGN = function() {
    return this.getToken(ANTLRv4Parser.ASSIGN, 0);
};

LabeledElementContext.prototype.PLUS_ASSIGN = function() {
    return this.getToken(ANTLRv4Parser.PLUS_ASSIGN, 0);
};

LabeledElementContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

LabeledElementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

LabeledElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLabeledElement(this);
	}
};

LabeledElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLabeledElement(this);
	}
};




ANTLRv4Parser.LabeledElementContext = LabeledElementContext;

ANTLRv4Parser.prototype.labeledElement = function() {

    var localctx = new LabeledElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ANTLRv4Parser.RULE_labeledElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 510;
        this.identifier();
        this.state = 511;
        _la = this._input.LA(1);
        if(!(_la===ANTLRv4Parser.ASSIGN || _la===ANTLRv4Parser.PLUS_ASSIGN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 514;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
        case ANTLRv4Parser.RULE_REF:
        case ANTLRv4Parser.STRING_LITERAL:
        case ANTLRv4Parser.DOT:
        case ANTLRv4Parser.NOT:
            this.state = 512;
            this.atom();
            break;
        case ANTLRv4Parser.LPAREN:
            this.state = 513;
            this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EbnfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ebnf;
    return this;
}

EbnfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EbnfContext.prototype.constructor = EbnfContext;

EbnfContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

EbnfContext.prototype.blockSuffix = function() {
    return this.getTypedRuleContext(BlockSuffixContext,0);
};

EbnfContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterEbnf(this);
	}
};

EbnfContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitEbnf(this);
	}
};




ANTLRv4Parser.EbnfContext = EbnfContext;

ANTLRv4Parser.prototype.ebnf = function() {

    var localctx = new EbnfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ANTLRv4Parser.RULE_ebnf);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 516;
        this.block();
        this.state = 518;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (ANTLRv4Parser.QUESTION - 41)) | (1 << (ANTLRv4Parser.STAR - 41)) | (1 << (ANTLRv4Parser.PLUS - 41)))) !== 0)) {
            this.state = 517;
            this.blockSuffix();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_blockSuffix;
    return this;
}

BlockSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockSuffixContext.prototype.constructor = BlockSuffixContext;

BlockSuffixContext.prototype.ebnfSuffix = function() {
    return this.getTypedRuleContext(EbnfSuffixContext,0);
};

BlockSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterBlockSuffix(this);
	}
};

BlockSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitBlockSuffix(this);
	}
};




ANTLRv4Parser.BlockSuffixContext = BlockSuffixContext;

ANTLRv4Parser.prototype.blockSuffix = function() {

    var localctx = new BlockSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ANTLRv4Parser.RULE_blockSuffix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 520;
        this.ebnfSuffix();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EbnfSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ebnfSuffix;
    return this;
}

EbnfSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EbnfSuffixContext.prototype.constructor = EbnfSuffixContext;

EbnfSuffixContext.prototype.QUESTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.QUESTION);
    } else {
        return this.getToken(ANTLRv4Parser.QUESTION, i);
    }
};


EbnfSuffixContext.prototype.STAR = function() {
    return this.getToken(ANTLRv4Parser.STAR, 0);
};

EbnfSuffixContext.prototype.PLUS = function() {
    return this.getToken(ANTLRv4Parser.PLUS, 0);
};

EbnfSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterEbnfSuffix(this);
	}
};

EbnfSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitEbnfSuffix(this);
	}
};




ANTLRv4Parser.EbnfSuffixContext = EbnfSuffixContext;

ANTLRv4Parser.prototype.ebnfSuffix = function() {

    var localctx = new EbnfSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ANTLRv4Parser.RULE_ebnfSuffix);
    var _la = 0; // Token type
    try {
        this.state = 534;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.QUESTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 522;
            this.match(ANTLRv4Parser.QUESTION);
            this.state = 524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.QUESTION) {
                this.state = 523;
                this.match(ANTLRv4Parser.QUESTION);
            }

            break;
        case ANTLRv4Parser.STAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 526;
            this.match(ANTLRv4Parser.STAR);
            this.state = 528;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.QUESTION) {
                this.state = 527;
                this.match(ANTLRv4Parser.QUESTION);
            }

            break;
        case ANTLRv4Parser.PLUS:
            this.enterOuterAlt(localctx, 3);
            this.state = 530;
            this.match(ANTLRv4Parser.PLUS);
            this.state = 532;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.QUESTION) {
                this.state = 531;
                this.match(ANTLRv4Parser.QUESTION);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LexerAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_lexerAtom;
    return this;
}

LexerAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexerAtomContext.prototype.constructor = LexerAtomContext;

LexerAtomContext.prototype.characterRange = function() {
    return this.getTypedRuleContext(CharacterRangeContext,0);
};

LexerAtomContext.prototype.terminal = function() {
    return this.getTypedRuleContext(TerminalContext,0);
};

LexerAtomContext.prototype.notSet = function() {
    return this.getTypedRuleContext(NotSetContext,0);
};

LexerAtomContext.prototype.LEXER_CHAR_SET = function() {
    return this.getToken(ANTLRv4Parser.LEXER_CHAR_SET, 0);
};

LexerAtomContext.prototype.DOT = function() {
    return this.getToken(ANTLRv4Parser.DOT, 0);
};

LexerAtomContext.prototype.elementOptions = function() {
    return this.getTypedRuleContext(ElementOptionsContext,0);
};

LexerAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterLexerAtom(this);
	}
};

LexerAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitLexerAtom(this);
	}
};




ANTLRv4Parser.LexerAtomContext = LexerAtomContext;

ANTLRv4Parser.prototype.lexerAtom = function() {

    var localctx = new LexerAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ANTLRv4Parser.RULE_lexerAtom);
    var _la = 0; // Token type
    try {
        this.state = 544;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 536;
            this.characterRange();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 537;
            this.terminal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 538;
            this.notSet();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 539;
            this.match(ANTLRv4Parser.LEXER_CHAR_SET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 540;
            this.match(ANTLRv4Parser.DOT);
            this.state = 542;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.LT) {
                this.state = 541;
                this.elementOptions();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.terminal = function() {
    return this.getTypedRuleContext(TerminalContext,0);
};

AtomContext.prototype.ruleref = function() {
    return this.getTypedRuleContext(RulerefContext,0);
};

AtomContext.prototype.notSet = function() {
    return this.getTypedRuleContext(NotSetContext,0);
};

AtomContext.prototype.DOT = function() {
    return this.getToken(ANTLRv4Parser.DOT, 0);
};

AtomContext.prototype.elementOptions = function() {
    return this.getTypedRuleContext(ElementOptionsContext,0);
};

AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitAtom(this);
	}
};




ANTLRv4Parser.AtomContext = AtomContext;

ANTLRv4Parser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ANTLRv4Parser.RULE_atom);
    var _la = 0; // Token type
    try {
        this.state = 553;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
        case ANTLRv4Parser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 546;
            this.terminal();
            break;
        case ANTLRv4Parser.RULE_REF:
            this.enterOuterAlt(localctx, 2);
            this.state = 547;
            this.ruleref();
            break;
        case ANTLRv4Parser.NOT:
            this.enterOuterAlt(localctx, 3);
            this.state = 548;
            this.notSet();
            break;
        case ANTLRv4Parser.DOT:
            this.enterOuterAlt(localctx, 4);
            this.state = 549;
            this.match(ANTLRv4Parser.DOT);
            this.state = 551;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.LT) {
                this.state = 550;
                this.elementOptions();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NotSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_notSet;
    return this;
}

NotSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotSetContext.prototype.constructor = NotSetContext;

NotSetContext.prototype.NOT = function() {
    return this.getToken(ANTLRv4Parser.NOT, 0);
};

NotSetContext.prototype.setElement = function() {
    return this.getTypedRuleContext(SetElementContext,0);
};

NotSetContext.prototype.blockSet = function() {
    return this.getTypedRuleContext(BlockSetContext,0);
};

NotSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterNotSet(this);
	}
};

NotSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitNotSet(this);
	}
};




ANTLRv4Parser.NotSetContext = NotSetContext;

ANTLRv4Parser.prototype.notSet = function() {

    var localctx = new NotSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ANTLRv4Parser.RULE_notSet);
    try {
        this.state = 559;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 555;
            this.match(ANTLRv4Parser.NOT);
            this.state = 556;
            this.setElement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 557;
            this.match(ANTLRv4Parser.NOT);
            this.state = 558;
            this.blockSet();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_blockSet;
    return this;
}

BlockSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockSetContext.prototype.constructor = BlockSetContext;

BlockSetContext.prototype.LPAREN = function() {
    return this.getToken(ANTLRv4Parser.LPAREN, 0);
};

BlockSetContext.prototype.setElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SetElementContext);
    } else {
        return this.getTypedRuleContext(SetElementContext,i);
    }
};

BlockSetContext.prototype.RPAREN = function() {
    return this.getToken(ANTLRv4Parser.RPAREN, 0);
};

BlockSetContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.OR);
    } else {
        return this.getToken(ANTLRv4Parser.OR, i);
    }
};


BlockSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterBlockSet(this);
	}
};

BlockSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitBlockSet(this);
	}
};




ANTLRv4Parser.BlockSetContext = BlockSetContext;

ANTLRv4Parser.prototype.blockSet = function() {

    var localctx = new BlockSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ANTLRv4Parser.RULE_blockSet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 561;
        this.match(ANTLRv4Parser.LPAREN);
        this.state = 562;
        this.setElement();
        this.state = 567;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.OR) {
            this.state = 563;
            this.match(ANTLRv4Parser.OR);
            this.state = 564;
            this.setElement();
            this.state = 569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 570;
        this.match(ANTLRv4Parser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_setElement;
    return this;
}

SetElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetElementContext.prototype.constructor = SetElementContext;

SetElementContext.prototype.TOKEN_REF = function() {
    return this.getToken(ANTLRv4Parser.TOKEN_REF, 0);
};

SetElementContext.prototype.elementOptions = function() {
    return this.getTypedRuleContext(ElementOptionsContext,0);
};

SetElementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ANTLRv4Parser.STRING_LITERAL, 0);
};

SetElementContext.prototype.characterRange = function() {
    return this.getTypedRuleContext(CharacterRangeContext,0);
};

SetElementContext.prototype.LEXER_CHAR_SET = function() {
    return this.getToken(ANTLRv4Parser.LEXER_CHAR_SET, 0);
};

SetElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterSetElement(this);
	}
};

SetElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitSetElement(this);
	}
};




ANTLRv4Parser.SetElementContext = SetElementContext;

ANTLRv4Parser.prototype.setElement = function() {

    var localctx = new SetElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ANTLRv4Parser.RULE_setElement);
    var _la = 0; // Token type
    try {
        this.state = 582;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 572;
            this.match(ANTLRv4Parser.TOKEN_REF);
            this.state = 574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.LT) {
                this.state = 573;
                this.elementOptions();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 576;
            this.match(ANTLRv4Parser.STRING_LITERAL);
            this.state = 578;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.LT) {
                this.state = 577;
                this.elementOptions();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 580;
            this.characterRange();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 581;
            this.match(ANTLRv4Parser.LEXER_CHAR_SET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.LPAREN = function() {
    return this.getToken(ANTLRv4Parser.LPAREN, 0);
};

BlockContext.prototype.altList = function() {
    return this.getTypedRuleContext(AltListContext,0);
};

BlockContext.prototype.RPAREN = function() {
    return this.getToken(ANTLRv4Parser.RPAREN, 0);
};

BlockContext.prototype.COLON = function() {
    return this.getToken(ANTLRv4Parser.COLON, 0);
};

BlockContext.prototype.optionsSpec = function() {
    return this.getTypedRuleContext(OptionsSpecContext,0);
};

BlockContext.prototype.ruleAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RuleActionContext);
    } else {
        return this.getTypedRuleContext(RuleActionContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitBlock(this);
	}
};




ANTLRv4Parser.BlockContext = BlockContext;

ANTLRv4Parser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ANTLRv4Parser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 584;
        this.match(ANTLRv4Parser.LPAREN);
        this.state = 595;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.OPTIONS || _la===ANTLRv4Parser.COLON || _la===ANTLRv4Parser.AT) {
            this.state = 586;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.OPTIONS) {
                this.state = 585;
                this.optionsSpec();
            }

            this.state = 591;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ANTLRv4Parser.AT) {
                this.state = 588;
                this.ruleAction();
                this.state = 593;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 594;
            this.match(ANTLRv4Parser.COLON);
        }

        this.state = 597;
        this.altList();
        this.state = 598;
        this.match(ANTLRv4Parser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RulerefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_ruleref;
    return this;
}

RulerefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulerefContext.prototype.constructor = RulerefContext;

RulerefContext.prototype.RULE_REF = function() {
    return this.getToken(ANTLRv4Parser.RULE_REF, 0);
};

RulerefContext.prototype.argActionBlock = function() {
    return this.getTypedRuleContext(ArgActionBlockContext,0);
};

RulerefContext.prototype.elementOptions = function() {
    return this.getTypedRuleContext(ElementOptionsContext,0);
};

RulerefContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterRuleref(this);
	}
};

RulerefContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitRuleref(this);
	}
};




ANTLRv4Parser.RulerefContext = RulerefContext;

ANTLRv4Parser.prototype.ruleref = function() {

    var localctx = new RulerefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ANTLRv4Parser.RULE_ruleref);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.match(ANTLRv4Parser.RULE_REF);
        this.state = 602;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.BEGIN_ARGUMENT) {
            this.state = 601;
            this.argActionBlock();
        }

        this.state = 605;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ANTLRv4Parser.LT) {
            this.state = 604;
            this.elementOptions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CharacterRangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_characterRange;
    return this;
}

CharacterRangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharacterRangeContext.prototype.constructor = CharacterRangeContext;

CharacterRangeContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.STRING_LITERAL);
    } else {
        return this.getToken(ANTLRv4Parser.STRING_LITERAL, i);
    }
};


CharacterRangeContext.prototype.RANGE = function() {
    return this.getToken(ANTLRv4Parser.RANGE, 0);
};

CharacterRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterCharacterRange(this);
	}
};

CharacterRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitCharacterRange(this);
	}
};




ANTLRv4Parser.CharacterRangeContext = CharacterRangeContext;

ANTLRv4Parser.prototype.characterRange = function() {

    var localctx = new CharacterRangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ANTLRv4Parser.RULE_characterRange);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this.match(ANTLRv4Parser.STRING_LITERAL);
        this.state = 608;
        this.match(ANTLRv4Parser.RANGE);
        this.state = 609;
        this.match(ANTLRv4Parser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TerminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_terminal;
    return this;
}

TerminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TerminalContext.prototype.constructor = TerminalContext;

TerminalContext.prototype.TOKEN_REF = function() {
    return this.getToken(ANTLRv4Parser.TOKEN_REF, 0);
};

TerminalContext.prototype.elementOptions = function() {
    return this.getTypedRuleContext(ElementOptionsContext,0);
};

TerminalContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ANTLRv4Parser.STRING_LITERAL, 0);
};

TerminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterTerminal(this);
	}
};

TerminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitTerminal(this);
	}
};




ANTLRv4Parser.TerminalContext = TerminalContext;

ANTLRv4Parser.prototype.terminal = function() {

    var localctx = new TerminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ANTLRv4Parser.RULE_terminal);
    var _la = 0; // Token type
    try {
        this.state = 619;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ANTLRv4Parser.TOKEN_REF:
            this.enterOuterAlt(localctx, 1);
            this.state = 611;
            this.match(ANTLRv4Parser.TOKEN_REF);
            this.state = 613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.LT) {
                this.state = 612;
                this.elementOptions();
            }

            break;
        case ANTLRv4Parser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 615;
            this.match(ANTLRv4Parser.STRING_LITERAL);
            this.state = 617;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ANTLRv4Parser.LT) {
                this.state = 616;
                this.elementOptions();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_elementOptions;
    return this;
}

ElementOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementOptionsContext.prototype.constructor = ElementOptionsContext;

ElementOptionsContext.prototype.LT = function() {
    return this.getToken(ANTLRv4Parser.LT, 0);
};

ElementOptionsContext.prototype.elementOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementOptionContext);
    } else {
        return this.getTypedRuleContext(ElementOptionContext,i);
    }
};

ElementOptionsContext.prototype.GT = function() {
    return this.getToken(ANTLRv4Parser.GT, 0);
};

ElementOptionsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ANTLRv4Parser.COMMA);
    } else {
        return this.getToken(ANTLRv4Parser.COMMA, i);
    }
};


ElementOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterElementOptions(this);
	}
};

ElementOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitElementOptions(this);
	}
};




ANTLRv4Parser.ElementOptionsContext = ElementOptionsContext;

ANTLRv4Parser.prototype.elementOptions = function() {

    var localctx = new ElementOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ANTLRv4Parser.RULE_elementOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.match(ANTLRv4Parser.LT);
        this.state = 622;
        this.elementOption();
        this.state = 627;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ANTLRv4Parser.COMMA) {
            this.state = 623;
            this.match(ANTLRv4Parser.COMMA);
            this.state = 624;
            this.elementOption();
            this.state = 629;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 630;
        this.match(ANTLRv4Parser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_elementOption;
    return this;
}

ElementOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementOptionContext.prototype.constructor = ElementOptionContext;

ElementOptionContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ElementOptionContext.prototype.ASSIGN = function() {
    return this.getToken(ANTLRv4Parser.ASSIGN, 0);
};

ElementOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ANTLRv4Parser.STRING_LITERAL, 0);
};

ElementOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterElementOption(this);
	}
};

ElementOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitElementOption(this);
	}
};




ANTLRv4Parser.ElementOptionContext = ElementOptionContext;

ANTLRv4Parser.prototype.elementOption = function() {

    var localctx = new ElementOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ANTLRv4Parser.RULE_elementOption);
    try {
        this.state = 639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 632;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 633;
            this.identifier();
            this.state = 634;
            this.match(ANTLRv4Parser.ASSIGN);
            this.state = 637;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ANTLRv4Parser.TOKEN_REF:
            case ANTLRv4Parser.RULE_REF:
                this.state = 635;
                this.identifier();
                break;
            case ANTLRv4Parser.STRING_LITERAL:
                this.state = 636;
                this.match(ANTLRv4Parser.STRING_LITERAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ANTLRv4Parser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.RULE_REF = function() {
    return this.getToken(ANTLRv4Parser.RULE_REF, 0);
};

IdentifierContext.prototype.TOKEN_REF = function() {
    return this.getToken(ANTLRv4Parser.TOKEN_REF, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ANTLRv4ParserListener ) {
        listener.exitIdentifier(this);
	}
};




ANTLRv4Parser.IdentifierContext = IdentifierContext;

ANTLRv4Parser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ANTLRv4Parser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        _la = this._input.LA(1);
        if(!(_la===ANTLRv4Parser.TOKEN_REF || _la===ANTLRv4Parser.RULE_REF)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.ANTLRv4Parser = ANTLRv4Parser;
