// @ts-nocheck
// Generated from KotlinParser.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var KotlinParserListener = require('./KotlinParserListener').KotlinParserListener;
var grammarFileName = "KotlinParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00ac\u0a50\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0003",
    "\u0002\u0007\u0002\u0128\n\u0002\f\u0002\u000e\u0002\u012b\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0007\u0002\u012f\n\u0002\f\u0002\u000e\u0002",
    "\u0132\u000b\u0002\u0003\u0002\u0003\u0002\u0006\u0002\u0136\n\u0002",
    "\r\u0002\u000e\u0002\u0137\u0003\u0002\u0005\u0002\u013b\n\u0002\u0007",
    "\u0002\u013d\n\u0002\f\u0002\u000e\u0002\u0140\u000b\u0002\u0005\u0002",
    "\u0142\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0007\u0003\u0147",
    "\n\u0003\f\u0003\u000e\u0003\u014a\u000b\u0003\u0003\u0003\u0003\u0003",
    "\u0007\u0003\u014e\n\u0003\f\u0003\u000e\u0003\u0151\u000b\u0003\u0003",
    "\u0003\u0003\u0003\u0006\u0003\u0155\n\u0003\r\u0003\u000e\u0003\u0156",
    "\u0003\u0003\u0005\u0003\u015a\n\u0003\u0007\u0003\u015c\n\u0003\f\u0003",
    "\u000e\u0003\u015f\u000b\u0003\u0005\u0003\u0161\n\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0005\u0004\u0166\n\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0005\u0006\u0005\u016c\n\u0005\r\u0005\u000e",
    "\u0005\u016d\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0006\u0006",
    "\u0174\n\u0006\r\u0006\u000e\u0006\u0175\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u017b\n\u0006\u0003\u0006\u0005\u0006\u017e\n\u0006",
    "\u0006\u0006\u0180\n\u0006\r\u0006\u000e\u0006\u0181\u0003\u0007\u0005",
    "\u0007\u0185\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u018a\n\u0007\u0005\u0007\u018c\n\u0007\u0003\b\u0007\b\u018f\n\b\f",
    "\b\u000e\b\u0192\u000b\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u0199\n\t\u0003\t\u0005\t\u019c\n\t\u0003\n\u0003\n\u0003\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u01a6",
    "\n\u000b\u0003\f\u0005\f\u01a9\n\f\u0003\f\u0003\f\u0007\f\u01ad\n\f",
    "\f\f\u000e\f\u01b0\u000b\f\u0003\f\u0003\f\u0007\f\u01b4\n\f\f\f\u000e",
    "\f\u01b7\u000b\f\u0003\f\u0005\f\u01ba\n\f\u0003\f\u0007\f\u01bd\n\f",
    "\f\f\u000e\f\u01c0\u000b\f\u0003\f\u0005\f\u01c3\n\f\u0003\f\u0007\f",
    "\u01c6\n\f\f\f\u000e\f\u01c9\u000b\f\u0003\f\u0003\f\u0007\f\u01cd\n",
    "\f\f\f\u000e\f\u01d0\u000b\f\u0003\f\u0005\f\u01d3\n\f\u0003\f\u0007",
    "\f\u01d6\n\f\f\f\u000e\f\u01d9\u000b\f\u0003\f\u0005\f\u01dc\n\f\u0003",
    "\f\u0007\f\u01df\n\f\f\f\u000e\f\u01e2\u000b\f\u0003\f\u0003\f\u0007",
    "\f\u01e6\n\f\f\f\u000e\f\u01e9\u000b\f\u0003\f\u0005\f\u01ec\n\f\u0003",
    "\r\u0005\r\u01ef\n\r\u0003\r\u0003\r\u0007\r\u01f3\n\r\f\r\u000e\r\u01f6",
    "\u000b\r\u0005\r\u01f8\n\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0007\u000e\u0200\n\u000e\f\u000e\u000e\u000e\u0203",
    "\u000b\u000e\u0005\u000e\u0205\n\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0005\u000f\u020a\n\u000f\u0003\u000f\u0005\u000f\u020d\n\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u0214\n\u000f\u0003\u0010\u0007\u0010\u0217\n\u0010\f\u0010\u000e\u0010",
    "\u021a\u000b\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u021e\n\u0010",
    "\f\u0010\u000e\u0010\u0221\u000b\u0010\u0003\u0010\u0003\u0010\u0007",
    "\u0010\u0225\n\u0010\f\u0010\u000e\u0010\u0228\u000b\u0010\u0003\u0010",
    "\u0007\u0010\u022b\n\u0010\f\u0010\u000e\u0010\u022e\u000b\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0233\n\u0011\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0007\u0013\u023a\n",
    "\u0013\f\u0013\u000e\u0013\u023d\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0007\u0013\u0241\n\u0013\f\u0013\u000e\u0013\u0244\u000b\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0007\u0014\u024a\n\u0014",
    "\f\u0014\u000e\u0014\u024d\u000b\u0014\u0003\u0014\u0007\u0014\u0250",
    "\n\u0014\f\u0014\u000e\u0014\u0253\u000b\u0014\u0003\u0014\u0007\u0014",
    "\u0256\n\u0014\f\u0014\u000e\u0014\u0259\u000b\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0265\n\u0015\u0003\u0015",
    "\u0007\u0015\u0268\n\u0015\f\u0015\u000e\u0015\u026b\u000b\u0015\u0003",
    "\u0016\u0003\u0016\u0007\u0016\u026f\n\u0016\f\u0016\u000e\u0016\u0272",
    "\u000b\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0005\u0017\u0277\n",
    "\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u027b\n\u0017\f\u0017\u000e",
    "\u0017\u027e\u000b\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u0282\n",
    "\u0017\f\u0017\u000e\u0017\u0285\u000b\u0017\u0003\u0017\u0003\u0017",
    "\u0007\u0017\u0289\n\u0017\f\u0017\u000e\u0017\u028c\u000b\u0017\u0003",
    "\u0017\u0005\u0017\u028f\n\u0017\u0003\u0017\u0007\u0017\u0292\n\u0017",
    "\f\u0017\u000e\u0017\u0295\u000b\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0007\u0018\u029b\n\u0018\f\u0018\u000e\u0018\u029e",
    "\u000b\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u02a3\n",
    "\u0018\f\u0018\u000e\u0018\u02a6\u000b\u0018\u0003\u0018\u0005\u0018",
    "\u02a9\n\u0018\u0003\u0019\u0003\u0019\u0007\u0019\u02ad\n\u0019\f\u0019",
    "\u000e\u0019\u02b0\u000b\u0019\u0003\u0019\u0005\u0019\u02b3\n\u0019",
    "\u0003\u0019\u0007\u0019\u02b6\n\u0019\f\u0019\u000e\u0019\u02b9\u000b",
    "\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u02bd\n\u0019\f\u0019\u000e",
    "\u0019\u02c0\u000b\u0019\u0003\u0019\u0007\u0019\u02c3\n\u0019\f\u0019",
    "\u000e\u0019\u02c6\u000b\u0019\u0005\u0019\u02c8\n\u0019\u0003\u0019",
    "\u0007\u0019\u02cb\n\u0019\f\u0019\u000e\u0019\u02ce\u000b\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0007\u001a\u02d4\n\u001a",
    "\f\u001a\u000e\u001a\u02d7\u000b\u001a\u0006\u001a\u02d9\n\u001a\r\u001a",
    "\u000e\u001a\u02da\u0003\u001a\u0005\u001a\u02de\n\u001a\u0003\u001b",
    "\u0003\u001b\u0007\u001b\u02e2\n\u001b\f\u001b\u000e\u001b\u02e5\u000b",
    "\u001b\u0003\u001b\u0005\u001b\u02e8\n\u001b\u0003\u001b\u0007\u001b",
    "\u02eb\n\u001b\f\u001b\u000e\u001b\u02ee\u000b\u001b\u0003\u001b\u0005",
    "\u001b\u02f1\n\u001b\u0003\u001b\u0007\u001b\u02f4\n\u001b\f\u001b\u000e",
    "\u001b\u02f7\u000b\u001b\u0003\u001b\u0005\u001b\u02fa\n\u001b\u0003",
    "\u001c\u0005\u001c\u02fd\n\u001c\u0003\u001c\u0003\u001c\u0007\u001c",
    "\u0301\n\u001c\f\u001c\u000e\u001c\u0304\u000b\u001c\u0003\u001c\u0003",
    "\u001c\u0007\u001c\u0308\n\u001c\f\u001c\u000e\u001c\u030b\u000b\u001c",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u030f\n\u001c\u0003\u001c\u0007",
    "\u001c\u0312\n\u001c\f\u001c\u000e\u001c\u0315\u000b\u001c\u0003\u001c",
    "\u0005\u001c\u0318\n\u001c\u0003\u001c\u0007\u001c\u031b\n\u001c\f\u001c",
    "\u000e\u001c\u031e\u000b\u001c\u0003\u001c\u0005\u001c\u0321\n\u001c",
    "\u0003\u001c\u0007\u001c\u0324\n\u001c\f\u001c\u000e\u001c\u0327\u000b",
    "\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u032b\n\u001c\f\u001c\u000e",
    "\u001c\u032e\u000b\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0332\n",
    "\u001c\f\u001c\u000e\u001c\u0335\u000b\u001c\u0003\u001c\u0005\u001c",
    "\u0338\n\u001c\u0003\u001c\u0007\u001c\u033b\n\u001c\f\u001c\u000e\u001c",
    "\u033e\u000b\u001c\u0003\u001c\u0005\u001c\u0341\n\u001c\u0003\u001c",
    "\u0007\u001c\u0344\n\u001c\f\u001c\u000e\u001c\u0347\u000b\u001c\u0003",
    "\u001c\u0005\u001c\u034a\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0007\u001d\u0350\n\u001d\f\u001d\u000e\u001d\u0353\u000b",
    "\u001d\u0005\u001d\u0355\n\u001d\u0003\u001d\u0003\u001d\u0003\u001e",
    "\u0005\u001e\u035a\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u035f\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003 \u0003 \u0003 \u0007 \u0368\n \f \u000e \u036b\u000b \u0003 ",
    "\u0005 \u036e\n \u0003!\u0005!\u0371\n!\u0003!\u0003!\u0007!\u0375\n",
    "!\f!\u000e!\u0378\u000b!\u0003!\u0003!\u0007!\u037c\n!\f!\u000e!\u037f",
    "\u000b!\u0003!\u0005!\u0382\n!\u0003!\u0007!\u0385\n!\f!\u000e!\u0388",
    "\u000b!\u0003!\u0003!\u0007!\u038c\n!\f!\u000e!\u038f\u000b!\u0003!",
    "\u0005!\u0392\n!\u0003!\u0007!\u0395\n!\f!\u000e!\u0398\u000b!\u0003",
    "!\u0005!\u039b\n!\u0003\"\u0005\"\u039e\n\"\u0003\"\u0003\"\u0007\"",
    "\u03a2\n\"\f\"\u000e\"\u03a5\u000b\"\u0003\"\u0005\"\u03a8\n\"\u0003",
    "\"\u0003\"\u0007\"\u03ac\n\"\f\"\u000e\"\u03af\u000b\"\u0003\"\u0005",
    "\"\u03b2\n\"\u0003\"\u0007\"\u03b5\n\"\f\"\u000e\"\u03b8\u000b\"\u0003",
    "\"\u0003\"\u0007\"\u03bc\n\"\f\"\u000e\"\u03bf\u000b\"\u0003\"\u0005",
    "\"\u03c2\n\"\u0003\"\u0007\"\u03c5\n\"\f\"\u000e\"\u03c8\u000b\"\u0003",
    "\"\u0005\"\u03cb\n\"\u0003#\u0005#\u03ce\n#\u0003#\u0003#\u0007#\u03d2",
    "\n#\f#\u000e#\u03d5\u000b#\u0003#\u0005#\u03d8\n#\u0003#\u0007#\u03db",
    "\n#\f#\u000e#\u03de\u000b#\u0003#\u0003#\u0007#\u03e2\n#\f#\u000e#\u03e5",
    "\u000b#\u0003#\u0003#\u0005#\u03e9\n#\u0003#\u0007#\u03ec\n#\f#\u000e",
    "#\u03ef\u000b#\u0003#\u0003#\u0005#\u03f3\n#\u0003#\u0007#\u03f6\n#",
    "\f#\u000e#\u03f9\u000b#\u0003#\u0005#\u03fc\n#\u0003#\u0007#\u03ff\n",
    "#\f#\u000e#\u0402\u000b#\u0003#\u0003#\u0007#\u0406\n#\f#\u000e#\u0409",
    "\u000b#\u0003#\u0005#\u040c\n#\u0003#\u0003#\u0003#\u0003#\u0005#\u0412",
    "\n#\u0003#\u0003#\u0003#\u0003#\u0005#\u0418\n#\u0005#\u041a\n#\u0003",
    "$\u0003$\u0003$\u0003$\u0007$\u0420\n$\f$\u000e$\u0423\u000b$\u0003",
    "$\u0003$\u0003%\u0003%\u0003%\u0005%\u042a\n%\u0003&\u0005&\u042d\n",
    "&\u0003&\u0003&\u0005&\u0431\n&\u0003&\u0003&\u0007&\u0435\n&\f&\u000e",
    "&\u0438\u000b&\u0003&\u0003&\u0003&\u0007&\u043d\n&\f&\u000e&\u0440",
    "\u000b&\u0003&\u0003&\u0007&\u0444\n&\f&\u000e&\u0447\u000b&\u0003&",
    "\u0005&\u044a\n&\u0003&\u0007&\u044d\n&\f&\u000e&\u0450\u000b&\u0003",
    "&\u0003&\u0003&\u0007&\u0455\n&\f&\u000e&\u0458\u000b&\u0003&\u0005",
    "&\u045b\n&\u0005&\u045d\n&\u0003\'\u0005\'\u0460\n\'\u0003\'\u0003\'",
    "\u0005\'\u0464\n\'\u0003\'\u0003\'\u0007\'\u0468\n\'\f\'\u000e\'\u046b",
    "\u000b\'\u0003\'\u0003\'\u0003\'\u0007\'\u0470\n\'\f\'\u000e\'\u0473",
    "\u000b\'\u0003\'\u0003\'\u0005\'\u0477\n\'\u0003\'\u0003\'\u0007\'\u047b",
    "\n\'\f\'\u000e\'\u047e\u000b\'\u0003\'\u0003\'\u0005\'\u0482\n\'\u0003",
    "(\u0005(\u0485\n(\u0003(\u0003(\u0007(\u0489\n(\f(\u000e(\u048c\u000b",
    "(\u0003(\u0003(\u0007(\u0490\n(\f(\u000e(\u0493\u000b(\u0003(\u0005",
    "(\u0496\n(\u0003(\u0007(\u0499\n(\f(\u000e(\u049c\u000b(\u0003(\u0003",
    "(\u0007(\u04a0\n(\f(\u000e(\u04a3\u000b(\u0003(\u0003(\u0003)\u0003",
    ")\u0007)\u04a9\n)\f)\u000e)\u04ac\u000b)\u0003)\u0003)\u0007)\u04b0",
    "\n)\f)\u000e)\u04b3\u000b)\u0003)\u0003)\u0007)\u04b7\n)\f)\u000e)\u04ba",
    "\u000b)\u0003)\u0007)\u04bd\n)\f)\u000e)\u04c0\u000b)\u0003)\u0007)",
    "\u04c3\n)\f)\u000e)\u04c6\u000b)\u0003)\u0003)\u0003*\u0005*\u04cb\n",
    "*\u0003*\u0007*\u04ce\n*\f*\u000e*\u04d1\u000b*\u0003*\u0003*\u0007",
    "*\u04d5\n*\f*\u000e*\u04d8\u000b*\u0003*\u0003*\u0007*\u04dc\n*\f*\u000e",
    "*\u04df\u000b*\u0003*\u0005*\u04e2\n*\u0003+\u0005+\u04e5\n+\u0003+",
    "\u0003+\u0003+\u0003+\u0005+\u04eb\n+\u0003,\u0003,\u0003,\u0007,\u04f0",
    "\n,\f,\u000e,\u04f3\u000b,\u0006,\u04f5\n,\r,\u000e,\u04f6\u0003-\u0003",
    "-\u0003-\u0003-\u0003.\u0003.\u0005.\u04ff\n.\u0003.\u0007.\u0502\n",
    ".\f.\u000e.\u0505\u000b.\u0003.\u0006.\u0508\n.\r.\u000e.\u0509\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u0512\n/\u00030\u00030\u0007",
    "0\u0516\n0\f0\u000e0\u0519\u000b0\u00030\u00030\u00070\u051d\n0\f0\u000e",
    "0\u0520\u000b0\u00050\u0522\n0\u00030\u00030\u00070\u0526\n0\f0\u000e",
    "0\u0529\u000b0\u00030\u00030\u00070\u052d\n0\f0\u000e0\u0530\u000b0",
    "\u00030\u00030\u00031\u00031\u00031\u00051\u0537\n1\u00032\u00032\u0007",
    "2\u053b\n2\f2\u000e2\u053e\u000b2\u00032\u00032\u00072\u0542\n2\f2\u000e",
    "2\u0545\u000b2\u00032\u00072\u0548\n2\f2\u000e2\u054b\u000b2\u00033",
    "\u00033\u00073\u054f\n3\f3\u000e3\u0552\u000b3\u00033\u00053\u0555\n",
    "3\u00034\u00034\u00034\u00054\u055a\n4\u00034\u00034\u00034\u00054\u055f",
    "\n4\u00074\u0561\n4\f4\u000e4\u0564\u000b4\u00034\u00034\u00035\u0003",
    "5\u00075\u056a\n5\f5\u000e5\u056d\u000b5\u00035\u00035\u00075\u0571",
    "\n5\f5\u000e5\u0574\u000b5\u00035\u00035\u00075\u0578\n5\f5\u000e5\u057b",
    "\u000b5\u00035\u00075\u057e\n5\f5\u000e5\u0581\u000b5\u00036\u00076",
    "\u0584\n6\f6\u000e6\u0587\u000b6\u00036\u00036\u00076\u058b\n6\f6\u000e",
    "6\u058e\u000b6\u00036\u00036\u00076\u0592\n6\f6\u000e6\u0595\u000b6",
    "\u00036\u00036\u00037\u00037\u00037\u00037\u00038\u00078\u059e\n8\f",
    "8\u000e8\u05a1\u000b8\u00038\u00038\u00068\u05a5\n8\r8\u000e8\u05a6",
    "\u00038\u00058\u05aa\n8\u00078\u05ac\n8\f8\u000e8\u05af\u000b8\u0005",
    "8\u05b1\n8\u00039\u00039\u00059\u05b5\n9\u0003:\u0007:\u05b8\n:\f:\u000e",
    ":\u05bb\u000b:\u0003:\u0007:\u05be\n:\f:\u000e:\u05c1\u000b:\u0003:",
    "\u0003:\u0003;\u0007;\u05c6\n;\f;\u000e;\u05c9\u000b;\u0003;\u0003;",
    "\u0003;\u0003;\u0005;\u05cf\n;\u0003<\u0003<\u0003<\u0003<\u0007<\u05d5",
    "\n<\f<\u000e<\u05d8\u000b<\u0003=\u0003=\u0007=\u05dc\n=\f=\u000e=\u05df",
    "\u000b=\u0003=\u0003=\u0007=\u05e3\n=\f=\u000e=\u05e6\u000b=\u0003=",
    "\u0007=\u05e9\n=\f=\u000e=\u05ec\u000b=\u0003>\u0003>\u0007>\u05f0\n",
    ">\f>\u000e>\u05f3\u000b>\u0003>\u0003>\u0007>\u05f7\n>\f>\u000e>\u05fa",
    "\u000b>\u0003>\u0007>\u05fd\n>\f>\u000e>\u0600\u000b>\u0003?\u0003?",
    "\u0003?\u0007?\u0605\n?\f?\u000e?\u0608\u000b?\u0003?\u0003?\u0007?",
    "\u060c\n?\f?\u000e?\u060f\u000b?\u0003@\u0003@\u0003@\u0007@\u0614\n",
    "@\f@\u000e@\u0617\u000b@\u0003@\u0003@\u0005@\u061b\n@\u0003A\u0003",
    "A\u0003A\u0007A\u0620\nA\fA\u000eA\u0623\u000bA\u0003A\u0003A\u0006",
    "A\u0627\nA\rA\u000eA\u0628\u0003A\u0003A\u0007A\u062d\nA\fA\u000eA\u0630",
    "\u000bA\u0003A\u0003A\u0005A\u0634\nA\u0003B\u0003B\u0007B\u0638\nB",
    "\fB\u000eB\u063b\u000bB\u0003B\u0003B\u0007B\u063f\nB\fB\u000eB\u0642",
    "\u000bB\u0003B\u0007B\u0645\nB\fB\u000eB\u0648\u000bB\u0003C\u0003C",
    "\u0003C\u0007C\u064d\nC\fC\u000eC\u0650\u000bC\u0003C\u0003C\u0007C",
    "\u0654\nC\fC\u000eC\u0657\u000bC\u0003D\u0003D\u0003D\u0007D\u065c\n",
    "D\fD\u000eD\u065f\u000bD\u0003D\u0007D\u0662\nD\fD\u000eD\u0665\u000b",
    "D\u0003E\u0003E\u0003E\u0007E\u066a\nE\fE\u000eE\u066d\u000bE\u0003",
    "E\u0003E\u0007E\u0671\nE\fE\u000eE\u0674\u000bE\u0003F\u0003F\u0003",
    "F\u0007F\u0679\nF\fF\u000eF\u067c\u000bF\u0003F\u0003F\u0007F\u0680",
    "\nF\fF\u000eF\u0683\u000bF\u0003G\u0003G\u0007G\u0687\nG\fG\u000eG\u068a",
    "\u000bG\u0003G\u0003G\u0003G\u0007G\u068f\nG\fG\u000eG\u0692\u000bG",
    "\u0003H\u0007H\u0695\nH\fH\u000eH\u0698\u000bH\u0003H\u0003H\u0003I",
    "\u0003I\u0005I\u069e\nI\u0003I\u0007I\u06a1\nI\fI\u000eI\u06a4\u000b",
    "I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0005J\u06b2\nJ\u0003K\u0003K\u0003K\u0003K\u0003L\u0003",
    "L\u0005L\u06ba\nL\u0003L\u0007L\u06bd\nL\fL\u000eL\u06c0\u000bL\u0003",
    "L\u0003L\u0007L\u06c4\nL\fL\u000eL\u06c7\u000bL\u0003L\u0006L\u06ca",
    "\nL\rL\u000eL\u06cb\u0005L\u06ce\nL\u0003M\u0007M\u06d1\nM\fM\u000e",
    "M\u06d4\u000bM\u0003M\u0005M\u06d7\nM\u0003M\u0007M\u06da\nM\fM\u000e",
    "M\u06dd\u000bM\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0007N\u06e5",
    "\nN\fN\u000eN\u06e8\u000bN\u0005N\u06ea\nN\u0003N\u0003N\u0003O\u0003",
    "O\u0003O\u0003O\u0007O\u06f2\nO\fO\u000eO\u06f5\u000bO\u0005O\u06f7",
    "\nO\u0003O\u0003O\u0003P\u0003P\u0007P\u06fd\nP\fP\u000eP\u0700\u000b",
    "P\u0003P\u0003P\u0007P\u0704\nP\fP\u000eP\u0707\u000bP\u0003P\u0003",
    "P\u0007P\u070b\nP\fP\u000eP\u070e\u000bP\u0003P\u0007P\u0711\nP\fP\u000e",
    "P\u0714\u000bP\u0003P\u0003P\u0003Q\u0005Q\u0719\nQ\u0003Q\u0003Q\u0005",
    "Q\u071d\nQ\u0003R\u0006R\u0720\nR\rR\u000eR\u0721\u0003S\u0003S\u0007",
    "S\u0726\nS\fS\u000eS\u0729\u000bS\u0003S\u0003S\u0007S\u072d\nS\fS\u000e",
    "S\u0730\u000bS\u0005S\u0732\nS\u0003S\u0005S\u0735\nS\u0003S\u0007S",
    "\u0738\nS\fS\u000eS\u073b\u000bS\u0003S\u0003S\u0003T\u0003T\u0003T",
    "\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0005T\u0748\nT\u0003U\u0003",
    "U\u0005U\u074c\nU\u0003V\u0003V\u0003V\u0007V\u0751\nV\fV\u000eV\u0754",
    "\u000bV\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003W\u0007W\u075d",
    "\nW\fW\u000eW\u0760\u000bW\u0003W\u0003W\u0003X\u0003X\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003[\u0003\\\u0007",
    "\\\u0771\n\\\f\\\u000e\\\u0774\u000b\\\u0003\\\u0003\\\u0007\\\u0778",
    "\n\\\f\\\u000e\\\u077b\u000b\\\u0003\\\u0003\\\u0007\\\u077f\n\\\f\\",
    "\u000e\\\u0782\u000b\\\u0003\\\u0003\\\u0003\\\u0003\\\u0007\\\u0788",
    "\n\\\f\\\u000e\\\u078b\u000b\\\u0003\\\u0003\\\u0007\\\u078f\n\\\f\\",
    "\u000e\\\u0792\u000b\\\u0003\\\u0003\\\u0007\\\u0796\n\\\f\\\u000e\\",
    "\u0799\u000b\\\u0003\\\u0003\\\u0007\\\u079d\n\\\f\\\u000e\\\u07a0\u000b",
    "\\\u0003\\\u0003\\\u0005\\\u07a4\n\\\u0003]\u0005]\u07a7\n]\u0003]\u0007",
    "]\u07aa\n]\f]\u000e]\u07ad\u000b]\u0003]\u0003]\u0007]\u07b1\n]\f]\u000e",
    "]\u07b4\u000b]\u0003]\u0007]\u07b7\n]\f]\u000e]\u07ba\u000b]\u0003^",
    "\u0003^\u0003^\u0007^\u07bf\n^\f^\u000e^\u07c2\u000b^\u0003^\u0003^",
    "\u0007^\u07c6\n^\f^\u000e^\u07c9\u000b^\u0003^\u0005^\u07cc\n^\u0005",
    "^\u07ce\n^\u0003_\u0003_\u0007_\u07d2\n_\f_\u000e_\u07d5\u000b_\u0003",
    "_\u0003_\u0007_\u07d9\n_\f_\u000e_\u07dc\u000b_\u0003_\u0005_\u07df",
    "\n_\u0003_\u0007_\u07e2\n_\f_\u000e_\u07e5\u000b_\u0003_\u0003_\u0003",
    "`\u0003`\u0005`\u07eb\n`\u0003`\u0003`\u0007`\u07ef\n`\f`\u000e`\u07f2",
    "\u000b`\u0003`\u0003`\u0003a\u0003a\u0005a\u07f8\na\u0003b\u0003b\u0003",
    "b\u0007b\u07fd\nb\fb\u000eb\u0800\u000bb\u0003b\u0003b\u0007b\u0804",
    "\nb\fb\u000eb\u0807\u000bb\u0003b\u0003b\u0005b\u080b\nb\u0003b\u0005",
    "b\u080e\nb\u0003c\u0003c\u0005c\u0812\nc\u0003d\u0003d\u0007d\u0816",
    "\nd\fd\u000ed\u0819\u000bd\u0003d\u0003d\u0003d\u0003d\u0007d\u081f",
    "\nd\fd\u000ed\u0822\u000bd\u0003d\u0005d\u0825\nd\u0003d\u0005d\u0828",
    "\nd\u0003d\u0007d\u082b\nd\fd\u000ed\u082e\u000bd\u0003d\u0003d\u0007",
    "d\u0832\nd\fd\u000ed\u0835\u000bd\u0003d\u0005d\u0838\nd\u0005d\u083a",
    "\nd\u0003e\u0003e\u0005e\u083e\ne\u0003f\u0003f\u0007f\u0842\nf\ff\u000e",
    "f\u0845\u000bf\u0003f\u0003f\u0003f\u0003f\u0005f\u084b\nf\u0003f\u0007",
    "f\u084e\nf\ff\u000ef\u0851\u000bf\u0003f\u0003f\u0007f\u0855\nf\ff\u000e",
    "f\u0858\u000bf\u0003f\u0003f\u0007f\u085c\nf\ff\u000ef\u085f\u000bf",
    "\u0007f\u0861\nf\ff\u000ef\u0864\u000bf\u0003f\u0007f\u0867\nf\ff\u000e",
    "f\u086a\u000bf\u0003f\u0003f\u0003g\u0003g\u0007g\u0870\ng\fg\u000e",
    "g\u0873\u000bg\u0003g\u0003g\u0007g\u0877\ng\fg\u000eg\u087a\u000bg",
    "\u0003g\u0007g\u087d\ng\fg\u000eg\u0880\u000bg\u0003g\u0007g\u0883\n",
    "g\fg\u000eg\u0886\u000bg\u0003g\u0003g\u0007g\u088a\ng\fg\u000eg\u088d",
    "\u000bg\u0003g\u0003g\u0005g\u0891\ng\u0003g\u0003g\u0007g\u0895\ng",
    "\fg\u000eg\u0898\u000bg\u0003g\u0003g\u0007g\u089c\ng\fg\u000eg\u089f",
    "\u000bg\u0003g\u0005g\u08a2\ng\u0003h\u0003h\u0003h\u0005h\u08a7\nh",
    "\u0003i\u0003i\u0007i\u08ab\ni\fi\u000ei\u08ae\u000bi\u0003i\u0003i",
    "\u0003j\u0003j\u0007j\u08b4\nj\fj\u000ej\u08b7\u000bj\u0003j\u0003j",
    "\u0003k\u0003k\u0007k\u08bd\nk\fk\u000ek\u08c0\u000bk\u0003k\u0003k",
    "\u0007k\u08c4\nk\fk\u000ek\u08c7\u000bk\u0003k\u0007k\u08ca\nk\fk\u000e",
    "k\u08cd\u000bk\u0003k\u0007k\u08d0\nk\fk\u000ek\u08d3\u000bk\u0003k",
    "\u0005k\u08d6\nk\u0003l\u0003l\u0007l\u08da\nl\fl\u000el\u08dd\u000b",
    "l\u0003l\u0003l\u0007l\u08e1\nl\fl\u000el\u08e4\u000bl\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0007l\u08eb\nl\fl\u000el\u08ee\u000bl\u0003",
    "l\u0003l\u0003m\u0003m\u0007m\u08f4\nm\fm\u000em\u08f7\u000bm\u0003",
    "m\u0003m\u0003n\u0003n\u0003n\u0005n\u08fe\nn\u0003o\u0003o\u0007o\u0902",
    "\no\fo\u000eo\u0905\u000bo\u0003o\u0003o\u0007o\u0909\no\fo\u000eo\u090c",
    "\u000bo\u0003o\u0003o\u0005o\u0910\no\u0003o\u0003o\u0003o\u0003o\u0007",
    "o\u0916\no\fo\u000eo\u0919\u000bo\u0003o\u0005o\u091c\no\u0003p\u0003",
    "p\u0007p\u0920\np\fp\u000ep\u0923\u000bp\u0003p\u0003p\u0003p\u0003",
    "p\u0007p\u0929\np\fp\u000ep\u092c\u000bp\u0003p\u0005p\u092f\np\u0003",
    "q\u0003q\u0007q\u0933\nq\fq\u000eq\u0936\u000bq\u0003q\u0005q\u0939",
    "\nq\u0003q\u0007q\u093c\nq\fq\u000eq\u093f\u000bq\u0003q\u0003q\u0007",
    "q\u0943\nq\fq\u000eq\u0946\u000bq\u0003q\u0003q\u0003q\u0003q\u0003",
    "r\u0003r\u0007r\u094e\nr\fr\u000er\u0951\u000br\u0003r\u0003r\u0003",
    "r\u0005r\u0956\nr\u0003r\u0003r\u0003r\u0003r\u0005r\u095c\nr\u0003",
    "s\u0003s\u0003s\u0007s\u0961\ns\fs\u000es\u0964\u000bs\u0007s\u0966",
    "\ns\fs\u000es\u0969\u000bs\u0005s\u096b\ns\u0003s\u0007s\u096e\ns\f",
    "s\u000es\u0971\u000bs\u0003s\u0003s\u0007s\u0975\ns\fs\u000es\u0978",
    "\u000bs\u0003s\u0003s\u0005s\u097c\ns\u0003t\u0003t\u0003u\u0003u\u0003",
    "v\u0003v\u0003w\u0003w\u0003x\u0003x\u0003y\u0003y\u0003z\u0003z\u0003",
    "{\u0003{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0005|\u0995",
    "\n|\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0007}\u099e\n",
    "}\f}\u000e}\u09a1\u000b}\u0003}\u0003}\u0003}\u0005}\u09a6\n}\u0003",
    "~\u0003~\u0003~\u0005~\u09ab\n~\u0003\u007f\u0003\u007f\u0006\u007f",
    "\u09af\n\u007f\r\u007f\u000e\u007f\u09b0\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0005\u0080\u09bc\n\u0080\u0003\u0080\u0007\u0080\u09bf\n\u0080",
    "\f\u0080\u000e\u0080\u09c2\u000b\u0080\u0003\u0081\u0003\u0081\u0003",
    "\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003",
    "\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003",
    "\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0007",
    "\u008a\u09d8\n\u008a\f\u008a\u000e\u008a\u09db\u000b\u008a\u0003\u008b",
    "\u0003\u008b\u0005\u008b\u09df\n\u008b\u0003\u008b\u0007\u008b\u09e2",
    "\n\u008b\f\u008b\u000e\u008b\u09e5\u000b\u008b\u0003\u008c\u0003\u008c",
    "\u0007\u008c\u09e9\n\u008c\f\u008c\u000e\u008c\u09ec\u000b\u008c\u0003",
    "\u008c\u0003\u008c\u0007\u008c\u09f0\n\u008c\f\u008c\u000e\u008c\u09f3",
    "\u000b\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0007\u008c",
    "\u09f9\n\u008c\f\u008c\u000e\u008c\u09fc\u000b\u008c\u0003\u008c\u0005",
    "\u008c\u09ff\n\u008c\u0003\u008c\u0007\u008c\u0a02\n\u008c\f\u008c\u000e",
    "\u008c\u0a05\u000b\u008c\u0003\u008c\u0005\u008c\u0a08\n\u008c\u0005",
    "\u008c\u0a0a\n\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d",
    "\u0006\u008d\u0a10\n\u008d\r\u008d\u000e\u008d\u0a11\u0003\u008d\u0003",
    "\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0006\u008d\u0a19\n\u008d",
    "\r\u008d\u000e\u008d\u0a1a\u0003\u008d\u0003\u008d\u0005\u008d\u0a1f",
    "\n\u008d\u0003\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0005\u008f",
    "\u0a25\n\u008f\u0003\u008f\u0005\u008f\u0a28\n\u008f\u0003\u0090\u0003",
    "\u0090\u0007\u0090\u0a2c\n\u0090\f\u0090\u000e\u0090\u0a2f\u000b\u0090",
    "\u0003\u0090\u0003\u0090\u0007\u0090\u0a33\n\u0090\f\u0090\u000e\u0090",
    "\u0a36\u000b\u0090\u0003\u0091\u0003\u0091\u0003\u0092\u0006\u0092\u0a3b",
    "\n\u0092\r\u0092\u000e\u0092\u0a3c\u0003\u0092\u0007\u0092\u0a40\n\u0092",
    "\f\u0092\u000e\u0092\u0a43\u000b\u0092\u0003\u0092\u0003\u0092\u0007",
    "\u0092\u0a47\n\u0092\f\u0092\u000e\u0092\u0a4a\u000b\u0092\u0005\u0092",
    "\u0a4c\n\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0002\u0002\u0094",
    "\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c",
    "\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082",
    "\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a",
    "\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2",
    "\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca",
    "\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2",
    "\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa",
    "\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112",
    "\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0002\u001b\u0003",
    "\u0002=>\u0003\u0002AB\u0004\u0002\u001d\u001dEE\u0003\u0002\u009e\u00a0",
    "\u0003\u0002\u00a4\u00a6\u0004\u000277VV\u0003\u0002&\'\u0003\u0002",
    "\u001d\"\u0004\u00021245\u0003\u0002-0\u0004\u0002[[]]\u0004\u0002Z",
    "Z\\\\\u0003\u0002\u0014\u0015\u0003\u0002\u0011\u0013\u0005\u0002\u001b",
    "\u001b33YY\u0003\u0002nr\u0004\u0002yy~~\u0003\u0002jm\u0004\u0002[",
    "[^^\u0003\u0002sx\u0003\u0002z|\u0003\u0002\u007f\u0081\u0005\u0002",
    "::_beh\n\u0002<<DGKKPQ^^cdi\u0082\u008e\u008e\u0004\u0002\u0007\u0007",
    "\u001c\u001c\u0002\u0b88\u0002\u0129\u0003\u0002\u0002\u0002\u0004\u0148",
    "\u0003\u0002\u0002\u0002\u0006\u0165\u0003\u0002\u0002\u0002\b\u016b",
    "\u0003\u0002\u0002\u0002\n\u017f\u0003\u0002\u0002\u0002\f\u018b\u0003",
    "\u0002\u0002\u0002\u000e\u0190\u0003\u0002\u0002\u0002\u0010\u0193\u0003",
    "\u0002\u0002\u0002\u0012\u019d\u0003\u0002\u0002\u0002\u0014\u01a5\u0003",
    "\u0002\u0002\u0002\u0016\u01a8\u0003\u0002\u0002\u0002\u0018\u01ee\u0003",
    "\u0002\u0002\u0002\u001a\u01fb\u0003\u0002\u0002\u0002\u001c\u0209\u0003",
    "\u0002\u0002\u0002\u001e\u0218\u0003\u0002\u0002\u0002 \u0232\u0003",
    "\u0002\u0002\u0002\"\u0234\u0003\u0002\u0002\u0002$\u0237\u0003\u0002",
    "\u0002\u0002&\u0247\u0003\u0002\u0002\u0002(\u0264\u0003\u0002\u0002",
    "\u0002*\u026c\u0003\u0002\u0002\u0002,\u0276\u0003\u0002\u0002\u0002",
    ".\u02a8\u0003\u0002\u0002\u00020\u02aa\u0003\u0002\u0002\u00022\u02d8",
    "\u0003\u0002\u0002\u00024\u02df\u0003\u0002\u0002\u00026\u02fc\u0003",
    "\u0002\u0002\u00028\u034b\u0003\u0002\u0002\u0002:\u0359\u0003\u0002",
    "\u0002\u0002<\u0360\u0003\u0002\u0002\u0002>\u036d\u0003\u0002\u0002",
    "\u0002@\u0370\u0003\u0002\u0002\u0002B\u039d\u0003\u0002\u0002\u0002",
    "D\u03cd\u0003\u0002\u0002\u0002F\u041b\u0003\u0002\u0002\u0002H\u0426",
    "\u0003\u0002\u0002\u0002J\u045c\u0003\u0002\u0002\u0002L\u0481\u0003",
    "\u0002\u0002\u0002N\u0484\u0003\u0002\u0002\u0002P\u04a6\u0003\u0002",
    "\u0002\u0002R\u04ca\u0003\u0002\u0002\u0002T\u04e4\u0003\u0002\u0002",
    "\u0002V\u04f4\u0003\u0002\u0002\u0002X\u04f8\u0003\u0002\u0002\u0002",
    "Z\u04fe\u0003\u0002\u0002\u0002\\\u0511\u0003\u0002\u0002\u0002^\u0521",
    "\u0003\u0002\u0002\u0002`\u0536\u0003\u0002\u0002\u0002b\u0538\u0003",
    "\u0002\u0002\u0002d\u054c\u0003\u0002\u0002\u0002f\u0556\u0003\u0002",
    "\u0002\u0002h\u0567\u0003\u0002\u0002\u0002j\u0585\u0003\u0002\u0002",
    "\u0002l\u0598\u0003\u0002\u0002\u0002n\u059f\u0003\u0002\u0002\u0002",
    "p\u05b4\u0003\u0002\u0002\u0002r\u05b9\u0003\u0002\u0002\u0002t\u05c7",
    "\u0003\u0002\u0002\u0002v\u05d0\u0003\u0002\u0002\u0002x\u05d9\u0003",
    "\u0002\u0002\u0002z\u05ed\u0003\u0002\u0002\u0002|\u0601\u0003\u0002",
    "\u0002\u0002~\u0610\u0003\u0002\u0002\u0002\u0080\u061c\u0003\u0002",
    "\u0002\u0002\u0082\u0635\u0003\u0002\u0002\u0002\u0084\u0649\u0003\u0002",
    "\u0002\u0002\u0086\u0658\u0003\u0002\u0002\u0002\u0088\u0666\u0003\u0002",
    "\u0002\u0002\u008a\u0675\u0003\u0002\u0002\u0002\u008c\u0684\u0003\u0002",
    "\u0002\u0002\u008e\u0696\u0003\u0002\u0002\u0002\u0090\u069d\u0003\u0002",
    "\u0002\u0002\u0092\u06b1\u0003\u0002\u0002\u0002\u0094\u06b3\u0003\u0002",
    "\u0002\u0002\u0096\u06cd\u0003\u0002\u0002\u0002\u0098\u06d2\u0003\u0002",
    "\u0002\u0002\u009a\u06e0\u0003\u0002\u0002\u0002\u009c\u06ed\u0003\u0002",
    "\u0002\u0002\u009e\u06fa\u0003\u0002\u0002\u0002\u00a0\u071c\u0003\u0002",
    "\u0002\u0002\u00a2\u071f\u0003\u0002\u0002\u0002\u00a4\u0731\u0003\u0002",
    "\u0002\u0002\u00a6\u0747\u0003\u0002\u0002\u0002\u00a8\u074b\u0003\u0002",
    "\u0002\u0002\u00aa\u074d\u0003\u0002\u0002\u0002\u00ac\u0757\u0003\u0002",
    "\u0002\u0002\u00ae\u0763\u0003\u0002\u0002\u0002\u00b0\u0765\u0003\u0002",
    "\u0002\u0002\u00b2\u0769\u0003\u0002\u0002\u0002\u00b4\u076b\u0003\u0002",
    "\u0002\u0002\u00b6\u0772\u0003\u0002\u0002\u0002\u00b8\u07a6\u0003\u0002",
    "\u0002\u0002\u00ba\u07cd\u0003\u0002\u0002\u0002\u00bc\u07cf\u0003\u0002",
    "\u0002\u0002\u00be\u07e8\u0003\u0002\u0002\u0002\u00c0\u07f5\u0003\u0002",
    "\u0002\u0002\u00c2\u07f9\u0003\u0002\u0002\u0002\u00c4\u0811\u0003\u0002",
    "\u0002\u0002\u00c6\u0813\u0003\u0002\u0002\u0002\u00c8\u083d\u0003\u0002",
    "\u0002\u0002\u00ca\u083f\u0003\u0002\u0002\u0002\u00cc\u08a1\u0003\u0002",
    "\u0002\u0002\u00ce\u08a6\u0003\u0002\u0002\u0002\u00d0\u08a8\u0003\u0002",
    "\u0002\u0002\u00d2\u08b1\u0003\u0002\u0002\u0002\u00d4\u08ba\u0003\u0002",
    "\u0002\u0002\u00d6\u08d7\u0003\u0002\u0002\u0002\u00d8\u08f1\u0003\u0002",
    "\u0002\u0002\u00da\u08fd\u0003\u0002\u0002\u0002\u00dc\u08ff\u0003\u0002",
    "\u0002\u0002\u00de\u091d\u0003\u0002\u0002\u0002\u00e0\u0930\u0003\u0002",
    "\u0002\u0002\u00e2\u095b\u0003\u0002\u0002\u0002\u00e4\u096a\u0003\u0002",
    "\u0002\u0002\u00e6\u097d\u0003\u0002\u0002\u0002\u00e8\u097f\u0003\u0002",
    "\u0002\u0002\u00ea\u0981\u0003\u0002\u0002\u0002\u00ec\u0983\u0003\u0002",
    "\u0002\u0002\u00ee\u0985\u0003\u0002\u0002\u0002\u00f0\u0987\u0003\u0002",
    "\u0002\u0002\u00f2\u0989\u0003\u0002\u0002\u0002\u00f4\u098b\u0003\u0002",
    "\u0002\u0002\u00f6\u0994\u0003\u0002\u0002\u0002\u00f8\u09a5\u0003\u0002",
    "\u0002\u0002\u00fa\u09aa\u0003\u0002\u0002\u0002\u00fc\u09ae\u0003\u0002",
    "\u0002\u0002\u00fe\u09bb\u0003\u0002\u0002\u0002\u0100\u09c3\u0003\u0002",
    "\u0002\u0002\u0102\u09c5\u0003\u0002\u0002\u0002\u0104\u09c7\u0003\u0002",
    "\u0002\u0002\u0106\u09c9\u0003\u0002\u0002\u0002\u0108\u09cb\u0003\u0002",
    "\u0002\u0002\u010a\u09cd\u0003\u0002\u0002\u0002\u010c\u09cf\u0003\u0002",
    "\u0002\u0002\u010e\u09d1\u0003\u0002\u0002\u0002\u0110\u09d3\u0003\u0002",
    "\u0002\u0002\u0112\u09d5\u0003\u0002\u0002\u0002\u0114\u09de\u0003\u0002",
    "\u0002\u0002\u0116\u0a09\u0003\u0002\u0002\u0002\u0118\u0a1e\u0003\u0002",
    "\u0002\u0002\u011a\u0a20\u0003\u0002\u0002\u0002\u011c\u0a22\u0003\u0002",
    "\u0002\u0002\u011e\u0a29\u0003\u0002\u0002\u0002\u0120\u0a37\u0003\u0002",
    "\u0002\u0002\u0122\u0a4b\u0003\u0002\u0002\u0002\u0124\u0a4d\u0003\u0002",
    "\u0002\u0002\u0126\u0128\u0007\u0007\u0002\u0002\u0127\u0126\u0003\u0002",
    "\u0002\u0002\u0128\u012b\u0003\u0002\u0002\u0002\u0129\u0127\u0003\u0002",
    "\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\u012c\u0003\u0002",
    "\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012c\u0130\u0005\u0006",
    "\u0004\u0002\u012d\u012f\u0005\u0124\u0093\u0002\u012e\u012d\u0003\u0002",
    "\u0002\u0002\u012f\u0132\u0003\u0002\u0002\u0002\u0130\u012e\u0003\u0002",
    "\u0002\u0002\u0130\u0131\u0003\u0002\u0002\u0002\u0131\u0141\u0003\u0002",
    "\u0002\u0002\u0132\u0130\u0003\u0002\u0002\u0002\u0133\u013e\u0005\u0014",
    "\u000b\u0002\u0134\u0136\u0005\u0124\u0093\u0002\u0135\u0134\u0003\u0002",
    "\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u0135\u0003\u0002",
    "\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138\u013a\u0003\u0002",
    "\u0002\u0002\u0139\u013b\u0005\u0014\u000b\u0002\u013a\u0139\u0003\u0002",
    "\u0002\u0002\u013a\u013b\u0003\u0002\u0002\u0002\u013b\u013d\u0003\u0002",
    "\u0002\u0002\u013c\u0135\u0003\u0002\u0002\u0002\u013d\u0140\u0003\u0002",
    "\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002",
    "\u0002\u0002\u013f\u0142\u0003\u0002\u0002\u0002\u0140\u013e\u0003\u0002",
    "\u0002\u0002\u0141\u0133\u0003\u0002\u0002\u0002\u0141\u0142\u0003\u0002",
    "\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143\u0144\u0007\u0002",
    "\u0002\u0003\u0144\u0003\u0003\u0002\u0002\u0002\u0145\u0147\u0007\u0007",
    "\u0002\u0002\u0146\u0145\u0003\u0002\u0002\u0002\u0147\u014a\u0003\u0002",
    "\u0002\u0002\u0148\u0146\u0003\u0002\u0002\u0002\u0148\u0149\u0003\u0002",
    "\u0002\u0002\u0149\u014b\u0003\u0002\u0002\u0002\u014a\u0148\u0003\u0002",
    "\u0002\u0002\u014b\u014f\u0005\u0006\u0004\u0002\u014c\u014e\u0005\u0124",
    "\u0093\u0002\u014d\u014c\u0003\u0002\u0002\u0002\u014e\u0151\u0003\u0002",
    "\u0002\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f\u0150\u0003\u0002",
    "\u0002\u0002\u0150\u0160\u0003\u0002\u0002\u0002\u0151\u014f\u0003\u0002",
    "\u0002\u0002\u0152\u015d\u0005v<\u0002\u0153\u0155\u0005\u0124\u0093",
    "\u0002\u0154\u0153\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002\u0002",
    "\u0002\u0156\u0154\u0003\u0002\u0002\u0002\u0156\u0157\u0003\u0002\u0002",
    "\u0002\u0157\u0159\u0003\u0002\u0002\u0002\u0158\u015a\u0005v<\u0002",
    "\u0159\u0158\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002",
    "\u015a\u015c\u0003\u0002\u0002\u0002\u015b\u0154\u0003\u0002\u0002\u0002",
    "\u015c\u015f\u0003\u0002\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002",
    "\u015d\u015e\u0003\u0002\u0002\u0002\u015e\u0161\u0003\u0002\u0002\u0002",
    "\u015f\u015d\u0003\u0002\u0002\u0002\u0160\u0152\u0003\u0002\u0002\u0002",
    "\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002",
    "\u0162\u0163\u0007\u0002\u0002\u0003\u0163\u0005\u0003\u0002\u0002\u0002",
    "\u0164\u0166\u0005\b\u0005\u0002\u0165\u0164\u0003\u0002\u0002\u0002",
    "\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002",
    "\u0167\u0168\u0005\f\u0007\u0002\u0168\u0169\u0005\u000e\b\u0002\u0169",
    "\u0007\u0003\u0002\u0002\u0002\u016a\u016c\u0005\n\u0006\u0002\u016b",
    "\u016a\u0003\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d",
    "\u016b\u0003\u0002\u0002\u0002\u016d\u016e\u0003\u0002\u0002\u0002\u016e",
    "\t\u0003\u0002\u0002\u0002\u016f\u0170\u0007:\u0002\u0002\u0170\u017a",
    "\u0007\u001b\u0002\u0002\u0171\u0173\u0007\r\u0002\u0002\u0172\u0174",
    "\u0005\u011c\u008f\u0002\u0173\u0172\u0003\u0002\u0002\u0002\u0174\u0175",
    "\u0003\u0002\u0002\u0002\u0175\u0173\u0003\u0002\u0002\u0002\u0175\u0176",
    "\u0003\u0002\u0002\u0002\u0176\u0177\u0003\u0002\u0002\u0002\u0177\u0178",
    "\u0007\u000e\u0002\u0002\u0178\u017b\u0003\u0002\u0002\u0002\u0179\u017b",
    "\u0005\u011c\u008f\u0002\u017a\u0171\u0003\u0002\u0002\u0002\u017a\u0179",
    "\u0003\u0002\u0002\u0002\u017b\u017d\u0003\u0002\u0002\u0002\u017c\u017e",
    "\u0005\u0122\u0092\u0002\u017d\u017c\u0003\u0002\u0002\u0002\u017d\u017e",
    "\u0003\u0002\u0002\u0002\u017e\u0180\u0003\u0002\u0002\u0002\u017f\u016f",
    "\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u017f",
    "\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u000b",
    "\u0003\u0002\u0002\u0002\u0183\u0185\u0005\u00fc\u007f\u0002\u0184\u0183",
    "\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002\u0002\u0002\u0185\u0186",
    "\u0003\u0002\u0002\u0002\u0186\u0187\u0007;\u0002\u0002\u0187\u0189",
    "\u0005\u011e\u0090\u0002\u0188\u018a\u0005\u0122\u0092\u0002\u0189\u0188",
    "\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002\u018a\u018c",
    "\u0003\u0002\u0002\u0002\u018b\u0184\u0003\u0002\u0002\u0002\u018b\u018c",
    "\u0003\u0002\u0002\u0002\u018c\r\u0003\u0002\u0002\u0002\u018d\u018f",
    "\u0005\u0010\t\u0002\u018e\u018d\u0003\u0002\u0002\u0002\u018f\u0192",
    "\u0003\u0002\u0002\u0002\u0190\u018e\u0003\u0002\u0002\u0002\u0190\u0191",
    "\u0003\u0002\u0002\u0002\u0191\u000f\u0003\u0002\u0002\u0002\u0192\u0190",
    "\u0003\u0002\u0002\u0002\u0193\u0194\u0007<\u0002\u0002\u0194\u0198",
    "\u0005\u011e\u0090\u0002\u0195\u0196\u0007\t\u0002\u0002\u0196\u0199",
    "\u0007\u0011\u0002\u0002\u0197\u0199\u0005\u0012\n\u0002\u0198\u0195",
    "\u0003\u0002\u0002\u0002\u0198\u0197\u0003\u0002\u0002\u0002\u0198\u0199",
    "\u0003\u0002\u0002\u0002\u0199\u019b\u0003\u0002\u0002\u0002\u019a\u019c",
    "\u0005\u0122\u0092\u0002\u019b\u019a\u0003\u0002\u0002\u0002\u019b\u019c",
    "\u0003\u0002\u0002\u0002\u019c\u0011\u0003\u0002\u0002\u0002\u019d\u019e",
    "\u0007Y\u0002\u0002\u019e\u019f\u0005\u0120\u0091\u0002\u019f\u0013",
    "\u0003\u0002\u0002\u0002\u01a0\u01a6\u0005\u0016\f\u0002\u01a1\u01a6",
    "\u0005@!\u0002\u01a2\u01a6\u00056\u001c\u0002\u01a3\u01a6\u0005D#\u0002",
    "\u01a4\u01a6\u0005N(\u0002\u01a5\u01a0\u0003\u0002\u0002\u0002\u01a5",
    "\u01a1\u0003\u0002\u0002\u0002\u01a5\u01a2\u0003\u0002\u0002\u0002\u01a5",
    "\u01a3\u0003\u0002\u0002\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a6",
    "\u0015\u0003\u0002\u0002\u0002\u01a7\u01a9\u0005\u00fc\u007f\u0002\u01a8",
    "\u01a7\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9",
    "\u01aa\u0003\u0002\u0002\u0002\u01aa\u01ae\t\u0002\u0002\u0002\u01ab",
    "\u01ad\u0007\u0007\u0002\u0002\u01ac\u01ab\u0003\u0002\u0002\u0002\u01ad",
    "\u01b0\u0003\u0002\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002\u01ae",
    "\u01af\u0003\u0002\u0002\u0002\u01af\u01b1\u0003\u0002\u0002\u0002\u01b0",
    "\u01ae\u0003\u0002\u0002\u0002\u01b1\u01b9\u0005\u0120\u0091\u0002\u01b2",
    "\u01b4\u0007\u0007\u0002\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b4",
    "\u01b7\u0003\u0002\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b5",
    "\u01b6\u0003\u0002\u0002\u0002\u01b6\u01b8\u0003\u0002\u0002\u0002\u01b7",
    "\u01b5\u0003\u0002\u0002\u0002\u01b8\u01ba\u0005P)\u0002\u01b9\u01b5",
    "\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba\u01c2",
    "\u0003\u0002\u0002\u0002\u01bb\u01bd\u0007\u0007\u0002\u0002\u01bc\u01bb",
    "\u0003\u0002\u0002\u0002\u01bd\u01c0\u0003\u0002\u0002\u0002\u01be\u01bc",
    "\u0003\u0002\u0002\u0002\u01be\u01bf\u0003\u0002\u0002\u0002\u01bf\u01c1",
    "\u0003\u0002\u0002\u0002\u01c0\u01be\u0003\u0002\u0002\u0002\u01c1\u01c3",
    "\u0005\u0018\r\u0002\u01c2\u01be\u0003\u0002\u0002\u0002\u01c2\u01c3",
    "\u0003\u0002\u0002\u0002\u01c3\u01d2\u0003\u0002\u0002\u0002\u01c4\u01c6",
    "\u0007\u0007\u0002\u0002\u01c5\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c9",
    "\u0003\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002\u01c7\u01c8",
    "\u0003\u0002\u0002\u0002\u01c8\u01ca\u0003\u0002\u0002\u0002\u01c9\u01c7",
    "\u0003\u0002\u0002\u0002\u01ca\u01ce\u0007\u001b\u0002\u0002\u01cb\u01cd",
    "\u0007\u0007\u0002\u0002\u01cc\u01cb\u0003\u0002\u0002\u0002\u01cd\u01d0",
    "\u0003\u0002\u0002\u0002\u01ce\u01cc\u0003\u0002\u0002\u0002\u01ce\u01cf",
    "\u0003\u0002\u0002\u0002\u01cf\u01d1\u0003\u0002\u0002\u0002\u01d0\u01ce",
    "\u0003\u0002\u0002\u0002\u01d1\u01d3\u0005\u001e\u0010\u0002\u01d2\u01c7",
    "\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01db",
    "\u0003\u0002\u0002\u0002\u01d4\u01d6\u0007\u0007\u0002\u0002\u01d5\u01d4",
    "\u0003\u0002\u0002\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002\u01d7\u01d5",
    "\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01da",
    "\u0003\u0002\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01da\u01dc",
    "\u0005h5\u0002\u01db\u01d7\u0003\u0002\u0002\u0002\u01db\u01dc\u0003",
    "\u0002\u0002\u0002\u01dc\u01eb\u0003\u0002\u0002\u0002\u01dd\u01df\u0007",
    "\u0007\u0002\u0002\u01de\u01dd\u0003\u0002\u0002\u0002\u01df\u01e2\u0003",
    "\u0002\u0002\u0002\u01e0\u01de\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003",
    "\u0002\u0002\u0002\u01e1\u01e3\u0003\u0002\u0002\u0002\u01e2\u01e0\u0003",
    "\u0002\u0002\u0002\u01e3\u01ec\u0005&\u0014\u0002\u01e4\u01e6\u0007",
    "\u0007\u0002\u0002\u01e5\u01e4\u0003\u0002\u0002\u0002\u01e6\u01e9\u0003",
    "\u0002\u0002\u0002\u01e7\u01e5\u0003\u0002\u0002\u0002\u01e7\u01e8\u0003",
    "\u0002\u0002\u0002\u01e8\u01ea\u0003\u0002\u0002\u0002\u01e9\u01e7\u0003",
    "\u0002\u0002\u0002\u01ea\u01ec\u00050\u0019\u0002\u01eb\u01e0\u0003",
    "\u0002\u0002\u0002\u01eb\u01e7\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003",
    "\u0002\u0002\u0002\u01ec\u0017\u0003\u0002\u0002\u0002\u01ed\u01ef\u0005",
    "\u00fc\u007f\u0002\u01ee\u01ed\u0003\u0002\u0002\u0002\u01ee\u01ef\u0003",
    "\u0002\u0002\u0002\u01ef\u01f7\u0003\u0002\u0002\u0002\u01f0\u01f4\u0007",
    "D\u0002\u0002\u01f1\u01f3\u0007\u0007\u0002\u0002\u01f2\u01f1\u0003",
    "\u0002\u0002\u0002\u01f3\u01f6\u0003\u0002\u0002\u0002\u01f4\u01f2\u0003",
    "\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5\u01f8\u0003",
    "\u0002\u0002\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f7\u01f0\u0003",
    "\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003",
    "\u0002\u0002\u0002\u01f9\u01fa\u0005\u001a\u000e\u0002\u01fa\u0019\u0003",
    "\u0002\u0002\u0002\u01fb\u0204\u0007\u000b\u0002\u0002\u01fc\u0201\u0005",
    "\u001c\u000f\u0002\u01fd\u01fe\u0007\n\u0002\u0002\u01fe\u0200\u0005",
    "\u001c\u000f\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u0200\u0203\u0003",
    "\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0201\u0202\u0003",
    "\u0002\u0002\u0002\u0202\u0205\u0003\u0002\u0002\u0002\u0203\u0201\u0003",
    "\u0002\u0002\u0002\u0204\u01fc\u0003\u0002\u0002\u0002\u0204\u0205\u0003",
    "\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0207\u0007",
    "\f\u0002\u0002\u0207\u001b\u0003\u0002\u0002\u0002\u0208\u020a\u0005",
    "\u00fc\u007f\u0002\u0209\u0208\u0003\u0002\u0002\u0002\u0209\u020a\u0003",
    "\u0002\u0002\u0002\u020a\u020c\u0003\u0002\u0002\u0002\u020b\u020d\t",
    "\u0003\u0002\u0002\u020c\u020b\u0003\u0002\u0002\u0002\u020c\u020d\u0003",
    "\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020f\u0005",
    "\u0120\u0091\u0002\u020f\u0210\u0007\u001b\u0002\u0002\u0210\u0213\u0005",
    "T+\u0002\u0211\u0212\u0007\u001d\u0002\u0002\u0212\u0214\u0005v<\u0002",
    "\u0213\u0211\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002",
    "\u0214\u001d\u0003\u0002\u0002\u0002\u0215\u0217\u0005\u0114\u008b\u0002",
    "\u0216\u0215\u0003\u0002\u0002\u0002\u0217\u021a\u0003\u0002\u0002\u0002",
    "\u0218\u0216\u0003\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002",
    "\u0219\u021b\u0003\u0002\u0002\u0002\u021a\u0218\u0003\u0002\u0002\u0002",
    "\u021b\u022c\u0005 \u0011\u0002\u021c\u021e\u0007\u0007\u0002\u0002",
    "\u021d\u021c\u0003\u0002\u0002\u0002\u021e\u0221\u0003\u0002\u0002\u0002",
    "\u021f\u021d\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002",
    "\u0220\u0222\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002\u0002\u0002",
    "\u0222\u0226\u0007\n\u0002\u0002\u0223\u0225\u0007\u0007\u0002\u0002",
    "\u0224\u0223\u0003\u0002\u0002\u0002\u0225\u0228\u0003\u0002\u0002\u0002",
    "\u0226\u0224\u0003\u0002\u0002\u0002\u0226\u0227\u0003\u0002\u0002\u0002",
    "\u0227\u0229\u0003\u0002\u0002\u0002\u0228\u0226\u0003\u0002\u0002\u0002",
    "\u0229\u022b\u0005 \u0011\u0002\u022a\u021f\u0003\u0002\u0002\u0002",
    "\u022b\u022e\u0003\u0002\u0002\u0002\u022c\u022a\u0003\u0002\u0002\u0002",
    "\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u001f\u0003\u0002\u0002\u0002",
    "\u022e\u022c\u0003\u0002\u0002\u0002\u022f\u0233\u0005\"\u0012\u0002",
    "\u0230\u0233\u0005b2\u0002\u0231\u0233\u0005$\u0013\u0002\u0232\u022f",
    "\u0003\u0002\u0002\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0232\u0231",
    "\u0003\u0002\u0002\u0002\u0233!\u0003\u0002\u0002\u0002\u0234\u0235",
    "\u0005b2\u0002\u0235\u0236\u0005\u0096L\u0002\u0236#\u0003\u0002\u0002",
    "\u0002\u0237\u023b\u0005b2\u0002\u0238\u023a\u0007\u0007\u0002\u0002",
    "\u0239\u0238\u0003\u0002\u0002\u0002\u023a\u023d\u0003\u0002\u0002\u0002",
    "\u023b\u0239\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002",
    "\u023c\u023e\u0003\u0002\u0002\u0002\u023d\u023b\u0003\u0002\u0002\u0002",
    "\u023e\u0242\u0007E\u0002\u0002\u023f\u0241\u0007\u0007\u0002\u0002",
    "\u0240\u023f\u0003\u0002\u0002\u0002\u0241\u0244\u0003\u0002\u0002\u0002",
    "\u0242\u0240\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002",
    "\u0243\u0245\u0003\u0002\u0002\u0002\u0244\u0242\u0003\u0002\u0002\u0002",
    "\u0245\u0246\u0005v<\u0002\u0246%\u0003\u0002\u0002\u0002\u0247\u024b",
    "\u0007\u000f\u0002\u0002\u0248\u024a\u0007\u0007\u0002\u0002\u0249\u0248",
    "\u0003\u0002\u0002\u0002\u024a\u024d\u0003\u0002\u0002\u0002\u024b\u0249",
    "\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u0251",
    "\u0003\u0002\u0002\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024e\u0250",
    "\u0005(\u0015\u0002\u024f\u024e\u0003\u0002\u0002\u0002\u0250\u0253",
    "\u0003\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0251\u0252",
    "\u0003\u0002\u0002\u0002\u0252\u0257\u0003\u0002\u0002\u0002\u0253\u0251",
    "\u0003\u0002\u0002\u0002\u0254\u0256\u0007\u0007\u0002\u0002\u0255\u0254",
    "\u0003\u0002\u0002\u0002\u0256\u0259\u0003\u0002\u0002\u0002\u0257\u0255",
    "\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258\u025a",
    "\u0003\u0002\u0002\u0002\u0259\u0257\u0003\u0002\u0002\u0002\u025a\u025b",
    "\u0007\u0010\u0002\u0002\u025b\'\u0003\u0002\u0002\u0002\u025c\u0265",
    "\u0005\u0016\f\u0002\u025d\u0265\u00056\u001c\u0002\u025e\u0265\u0005",
    "@!\u0002\u025f\u0265\u0005B\"\u0002\u0260\u0265\u0005D#\u0002\u0261",
    "\u0265\u0005*\u0016\u0002\u0262\u0265\u0005,\u0017\u0002\u0263\u0265",
    "\u0005N(\u0002\u0264\u025c\u0003\u0002\u0002\u0002\u0264\u025d\u0003",
    "\u0002\u0002\u0002\u0264\u025e\u0003\u0002\u0002\u0002\u0264\u025f\u0003",
    "\u0002\u0002\u0002\u0264\u0260\u0003\u0002\u0002\u0002\u0264\u0261\u0003",
    "\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0264\u0263\u0003",
    "\u0002\u0002\u0002\u0265\u0269\u0003\u0002\u0002\u0002\u0266\u0268\u0005",
    "\u0124\u0093\u0002\u0267\u0266\u0003\u0002\u0002\u0002\u0268\u026b\u0003",
    "\u0002\u0002\u0002\u0269\u0267\u0003\u0002\u0002\u0002\u0269\u026a\u0003",
    "\u0002\u0002\u0002\u026a)\u0003\u0002\u0002\u0002\u026b\u0269\u0003",
    "\u0002\u0002\u0002\u026c\u0270\u0007G\u0002\u0002\u026d\u026f\u0007",
    "\u0007\u0002\u0002\u026e\u026d\u0003\u0002\u0002\u0002\u026f\u0272\u0003",
    "\u0002\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0270\u0271\u0003",
    "\u0002\u0002\u0002\u0271\u0273\u0003\u0002\u0002\u0002\u0272\u0270\u0003",
    "\u0002\u0002\u0002\u0273\u0274\u0005l7\u0002\u0274+\u0003\u0002\u0002",
    "\u0002\u0275\u0277\u0005\u00fc\u007f\u0002\u0276\u0275\u0003\u0002\u0002",
    "\u0002\u0276\u0277\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002\u0002",
    "\u0002\u0278\u027c\u0007D\u0002\u0002\u0279\u027b\u0007\u0007\u0002",
    "\u0002\u027a\u0279\u0003\u0002\u0002\u0002\u027b\u027e\u0003\u0002\u0002",
    "\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002\u0002",
    "\u0002\u027d\u027f\u0003\u0002\u0002\u0002\u027e\u027c\u0003\u0002\u0002",
    "\u0002\u027f\u028e\u00058\u001d\u0002\u0280\u0282\u0007\u0007\u0002",
    "\u0002\u0281\u0280\u0003\u0002\u0002\u0002\u0282\u0285\u0003\u0002\u0002",
    "\u0002\u0283\u0281\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002",
    "\u0002\u0284\u0286\u0003\u0002\u0002\u0002\u0285\u0283\u0003\u0002\u0002",
    "\u0002\u0286\u028a\u0007\u001b\u0002\u0002\u0287\u0289\u0007\u0007\u0002",
    "\u0002\u0288\u0287\u0003\u0002\u0002\u0002\u0289\u028c\u0003\u0002\u0002",
    "\u0002\u028a\u0288\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002",
    "\u0002\u028b\u028d\u0003\u0002\u0002\u0002\u028c\u028a\u0003\u0002\u0002",
    "\u0002\u028d\u028f\u0005.\u0018\u0002\u028e\u0283\u0003\u0002\u0002",
    "\u0002\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0293\u0003\u0002\u0002",
    "\u0002\u0290\u0292\u0007\u0007\u0002\u0002\u0291\u0290\u0003\u0002\u0002",
    "\u0002\u0292\u0295\u0003\u0002\u0002\u0002\u0293\u0291\u0003\u0002\u0002",
    "\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294\u0296\u0003\u0002\u0002",
    "\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0296\u0297\u0005l7\u0002",
    "\u0297-\u0003\u0002\u0002\u0002\u0298\u029c\u0007H\u0002\u0002\u0299",
    "\u029b\u0007\u0007\u0002\u0002\u029a\u0299\u0003\u0002\u0002\u0002\u029b",
    "\u029e\u0003\u0002\u0002\u0002\u029c\u029a\u0003\u0002\u0002\u0002\u029c",
    "\u029d\u0003\u0002\u0002\u0002\u029d\u029f\u0003\u0002\u0002\u0002\u029e",
    "\u029c\u0003\u0002\u0002\u0002\u029f\u02a9\u0005\u009cO\u0002\u02a0",
    "\u02a4\u0007I\u0002\u0002\u02a1\u02a3\u0007\u0007\u0002\u0002\u02a2",
    "\u02a1\u0003\u0002\u0002\u0002\u02a3\u02a6\u0003\u0002\u0002\u0002\u02a4",
    "\u02a2\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5",
    "\u02a7\u0003\u0002\u0002\u0002\u02a6\u02a4\u0003\u0002\u0002\u0002\u02a7",
    "\u02a9\u0005\u009cO\u0002\u02a8\u0298\u0003\u0002\u0002\u0002\u02a8",
    "\u02a0\u0003\u0002\u0002\u0002\u02a9/\u0003\u0002\u0002\u0002\u02aa",
    "\u02ae\u0007\u000f\u0002\u0002\u02ab\u02ad\u0007\u0007\u0002\u0002\u02ac",
    "\u02ab\u0003\u0002\u0002\u0002\u02ad\u02b0\u0003\u0002\u0002\u0002\u02ae",
    "\u02ac\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af",
    "\u02b2\u0003\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b1",
    "\u02b3\u00052\u001a\u0002\u02b2\u02b1\u0003\u0002\u0002\u0002\u02b2",
    "\u02b3\u0003\u0002\u0002\u0002\u02b3\u02c7\u0003\u0002\u0002\u0002\u02b4",
    "\u02b6\u0007\u0007\u0002\u0002\u02b5\u02b4\u0003\u0002\u0002\u0002\u02b6",
    "\u02b9\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b7",
    "\u02b8\u0003\u0002\u0002\u0002\u02b8\u02ba\u0003\u0002\u0002\u0002\u02b9",
    "\u02b7\u0003\u0002\u0002\u0002\u02ba\u02be\u0007\u001c\u0002\u0002\u02bb",
    "\u02bd\u0007\u0007\u0002\u0002\u02bc\u02bb\u0003\u0002\u0002\u0002\u02bd",
    "\u02c0\u0003\u0002\u0002\u0002\u02be\u02bc\u0003\u0002\u0002\u0002\u02be",
    "\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c4\u0003\u0002\u0002\u0002\u02c0",
    "\u02be\u0003\u0002\u0002\u0002\u02c1\u02c3\u0005(\u0015\u0002\u02c2",
    "\u02c1\u0003\u0002\u0002\u0002\u02c3\u02c6\u0003\u0002\u0002\u0002\u02c4",
    "\u02c2\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003\u0002\u0002\u0002\u02c5",
    "\u02c8\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002\u02c7",
    "\u02b7\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8",
    "\u02cc\u0003\u0002\u0002\u0002\u02c9\u02cb\u0007\u0007\u0002\u0002\u02ca",
    "\u02c9\u0003\u0002\u0002\u0002\u02cb\u02ce\u0003\u0002\u0002\u0002\u02cc",
    "\u02ca\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd",
    "\u02cf\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002\u02cf",
    "\u02d0\u0007\u0010\u0002\u0002\u02d01\u0003\u0002\u0002\u0002\u02d1",
    "\u02d5\u00054\u001b\u0002\u02d2\u02d4\u0007\u0007\u0002\u0002\u02d3",
    "\u02d2\u0003\u0002\u0002\u0002\u02d4\u02d7\u0003\u0002\u0002\u0002\u02d5",
    "\u02d3\u0003\u0002\u0002\u0002\u02d5\u02d6\u0003\u0002\u0002\u0002\u02d6",
    "\u02d9\u0003\u0002\u0002\u0002\u02d7\u02d5\u0003\u0002\u0002\u0002\u02d8",
    "\u02d1\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da",
    "\u02d8\u0003\u0002\u0002\u0002\u02da\u02db\u0003\u0002\u0002\u0002\u02db",
    "\u02dd\u0003\u0002\u0002\u0002\u02dc\u02de\u0007\u001c\u0002\u0002\u02dd",
    "\u02dc\u0003\u0002\u0002\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de",
    "3\u0003\u0002\u0002\u0002\u02df\u02e7\u0005\u0120\u0091\u0002\u02e0",
    "\u02e2\u0007\u0007\u0002\u0002\u02e1\u02e0\u0003\u0002\u0002\u0002\u02e2",
    "\u02e5\u0003\u0002\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e3",
    "\u02e4\u0003\u0002\u0002\u0002\u02e4\u02e6\u0003\u0002\u0002\u0002\u02e5",
    "\u02e3\u0003\u0002\u0002\u0002\u02e6\u02e8\u0005\u009cO\u0002\u02e7",
    "\u02e3\u0003\u0002\u0002\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8",
    "\u02f0\u0003\u0002\u0002\u0002\u02e9\u02eb\u0007\u0007\u0002\u0002\u02ea",
    "\u02e9\u0003\u0002\u0002\u0002\u02eb\u02ee\u0003\u0002\u0002\u0002\u02ec",
    "\u02ea\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002\u02ed",
    "\u02ef\u0003\u0002\u0002\u0002\u02ee\u02ec\u0003\u0002\u0002\u0002\u02ef",
    "\u02f1\u0005&\u0014\u0002\u02f0\u02ec\u0003\u0002\u0002\u0002\u02f0",
    "\u02f1\u0003\u0002\u0002\u0002\u02f1\u02f9\u0003\u0002\u0002\u0002\u02f2",
    "\u02f4\u0007\u0007\u0002\u0002\u02f3\u02f2\u0003\u0002\u0002\u0002\u02f4",
    "\u02f7\u0003\u0002\u0002\u0002\u02f5\u02f3\u0003\u0002\u0002\u0002\u02f5",
    "\u02f6\u0003\u0002\u0002\u0002\u02f6\u02f8\u0003\u0002\u0002\u0002\u02f7",
    "\u02f5\u0003\u0002\u0002\u0002\u02f8\u02fa\u0007\n\u0002\u0002\u02f9",
    "\u02f5\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa",
    "5\u0003\u0002\u0002\u0002\u02fb\u02fd\u0005\u00fc\u007f\u0002\u02fc",
    "\u02fb\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002\u0002\u0002\u02fd",
    "\u02fe\u0003\u0002\u0002\u0002\u02fe\u030e\u0007?\u0002\u0002\u02ff",
    "\u0301\u0007\u0007\u0002\u0002\u0300\u02ff\u0003\u0002\u0002\u0002\u0301",
    "\u0304\u0003\u0002\u0002\u0002\u0302\u0300\u0003\u0002\u0002\u0002\u0302",
    "\u0303\u0003\u0002\u0002\u0002\u0303\u0305\u0003\u0002\u0002\u0002\u0304",
    "\u0302\u0003\u0002\u0002\u0002\u0305\u0309\u0005T+\u0002\u0306\u0308",
    "\u0007\u0007\u0002\u0002\u0307\u0306\u0003\u0002\u0002\u0002\u0308\u030b",
    "\u0003\u0002\u0002\u0002\u0309\u0307\u0003\u0002\u0002\u0002\u0309\u030a",
    "\u0003\u0002\u0002\u0002\u030a\u030c\u0003\u0002\u0002\u0002\u030b\u0309",
    "\u0003\u0002\u0002\u0002\u030c\u030d\u0007\t\u0002\u0002\u030d\u030f",
    "\u0003\u0002\u0002\u0002\u030e\u0302\u0003\u0002\u0002\u0002\u030e\u030f",
    "\u0003\u0002\u0002\u0002\u030f\u0317\u0003\u0002\u0002\u0002\u0310\u0312",
    "\u0007\u0007\u0002\u0002\u0311\u0310\u0003\u0002\u0002\u0002\u0312\u0315",
    "\u0003\u0002\u0002\u0002\u0313\u0311\u0003\u0002\u0002\u0002\u0313\u0314",
    "\u0003\u0002\u0002\u0002\u0314\u0316\u0003\u0002\u0002\u0002\u0315\u0313",
    "\u0003\u0002\u0002\u0002\u0316\u0318\u0005P)\u0002\u0317\u0313\u0003",
    "\u0002\u0002\u0002\u0317\u0318\u0003\u0002\u0002\u0002\u0318\u0320\u0003",
    "\u0002\u0002\u0002\u0319\u031b\u0007\u0007\u0002\u0002\u031a\u0319\u0003",
    "\u0002\u0002\u0002\u031b\u031e\u0003\u0002\u0002\u0002\u031c\u031a\u0003",
    "\u0002\u0002\u0002\u031c\u031d\u0003\u0002\u0002\u0002\u031d\u031f\u0003",
    "\u0002\u0002\u0002\u031e\u031c\u0003\u0002\u0002\u0002\u031f\u0321\u0005",
    "\u011e\u0090\u0002\u0320\u031c\u0003\u0002\u0002\u0002\u0320\u0321\u0003",
    "\u0002\u0002\u0002\u0321\u0325\u0003\u0002\u0002\u0002\u0322\u0324\u0007",
    "\u0007\u0002\u0002\u0323\u0322\u0003\u0002\u0002\u0002\u0324\u0327\u0003",
    "\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0325\u0326\u0003",
    "\u0002\u0002\u0002\u0326\u0328\u0003\u0002\u0002\u0002\u0327\u0325\u0003",
    "\u0002\u0002\u0002\u0328\u0337\u00058\u001d\u0002\u0329\u032b\u0007",
    "\u0007\u0002\u0002\u032a\u0329\u0003\u0002\u0002\u0002\u032b\u032e\u0003",
    "\u0002\u0002\u0002\u032c\u032a\u0003\u0002\u0002\u0002\u032c\u032d\u0003",
    "\u0002\u0002\u0002\u032d\u032f\u0003\u0002\u0002\u0002\u032e\u032c\u0003",
    "\u0002\u0002\u0002\u032f\u0333\u0007\u001b\u0002\u0002\u0330\u0332\u0007",
    "\u0007\u0002\u0002\u0331\u0330\u0003\u0002\u0002\u0002\u0332\u0335\u0003",
    "\u0002\u0002\u0002\u0333\u0331\u0003\u0002\u0002\u0002\u0333\u0334\u0003",
    "\u0002\u0002\u0002\u0334\u0336\u0003\u0002\u0002\u0002\u0335\u0333\u0003",
    "\u0002\u0002\u0002\u0336\u0338\u0005T+\u0002\u0337\u032c\u0003\u0002",
    "\u0002\u0002\u0337\u0338\u0003\u0002\u0002\u0002\u0338\u0340\u0003\u0002",
    "\u0002\u0002\u0339\u033b\u0007\u0007\u0002\u0002\u033a\u0339\u0003\u0002",
    "\u0002\u0002\u033b\u033e\u0003\u0002\u0002\u0002\u033c\u033a\u0003\u0002",
    "\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u033f\u0003\u0002",
    "\u0002\u0002\u033e\u033c\u0003\u0002\u0002\u0002\u033f\u0341\u0005h",
    "5\u0002\u0340\u033c\u0003\u0002\u0002\u0002\u0340\u0341\u0003\u0002",
    "\u0002\u0002\u0341\u0349\u0003\u0002\u0002\u0002\u0342\u0344\u0007\u0007",
    "\u0002\u0002\u0343\u0342\u0003\u0002\u0002\u0002\u0344\u0347\u0003\u0002",
    "\u0002\u0002\u0345\u0343\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002",
    "\u0002\u0002\u0346\u0348\u0003\u0002\u0002\u0002\u0347\u0345\u0003\u0002",
    "\u0002\u0002\u0348\u034a\u0005> \u0002\u0349\u0345\u0003\u0002\u0002",
    "\u0002\u0349\u034a\u0003\u0002\u0002\u0002\u034a7\u0003\u0002\u0002",
    "\u0002\u034b\u0354\u0007\u000b\u0002\u0002\u034c\u0351\u0005:\u001e",
    "\u0002\u034d\u034e\u0007\n\u0002\u0002\u034e\u0350\u0005:\u001e\u0002",
    "\u034f\u034d\u0003\u0002\u0002\u0002\u0350\u0353\u0003\u0002\u0002\u0002",
    "\u0351\u034f\u0003\u0002\u0002\u0002\u0351\u0352\u0003\u0002\u0002\u0002",
    "\u0352\u0355\u0003\u0002\u0002\u0002\u0353\u0351\u0003\u0002\u0002\u0002",
    "\u0354\u034c\u0003\u0002\u0002\u0002\u0354\u0355\u0003\u0002\u0002\u0002",
    "\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u0357\u0007\f\u0002\u0002",
    "\u03579\u0003\u0002\u0002\u0002\u0358\u035a\u0005\u00fc\u007f\u0002",
    "\u0359\u0358\u0003\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002",
    "\u035a\u035b\u0003\u0002\u0002\u0002\u035b\u035e\u0005<\u001f\u0002",
    "\u035c\u035d\u0007\u001d\u0002\u0002\u035d\u035f\u0005v<\u0002\u035e",
    "\u035c\u0003\u0002\u0002\u0002\u035e\u035f\u0003\u0002\u0002\u0002\u035f",
    ";\u0003\u0002\u0002\u0002\u0360\u0361\u0005\u0120\u0091\u0002\u0361",
    "\u0362\u0007\u001b\u0002\u0002\u0362\u0363\u0005T+\u0002\u0363=\u0003",
    "\u0002\u0002\u0002\u0364\u036e\u0005l7\u0002\u0365\u0369\u0007\u001d",
    "\u0002\u0002\u0366\u0368\u0007\u0007\u0002\u0002\u0367\u0366\u0003\u0002",
    "\u0002\u0002\u0368\u036b\u0003\u0002\u0002\u0002\u0369\u0367\u0003\u0002",
    "\u0002\u0002\u0369\u036a\u0003\u0002\u0002\u0002\u036a\u036c\u0003\u0002",
    "\u0002\u0002\u036b\u0369\u0003\u0002\u0002\u0002\u036c\u036e\u0005v",
    "<\u0002\u036d\u0364\u0003\u0002\u0002\u0002\u036d\u0365\u0003\u0002",
    "\u0002\u0002\u036e?\u0003\u0002\u0002\u0002\u036f\u0371\u0005\u00fc",
    "\u007f\u0002\u0370\u036f\u0003\u0002\u0002\u0002\u0370\u0371\u0003\u0002",
    "\u0002\u0002\u0371\u0372\u0003\u0002\u0002\u0002\u0372\u0376\u0007@",
    "\u0002\u0002\u0373\u0375\u0007\u0007\u0002\u0002\u0374\u0373\u0003\u0002",
    "\u0002\u0002\u0375\u0378\u0003\u0002\u0002\u0002\u0376\u0374\u0003\u0002",
    "\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002\u0377\u0379\u0003\u0002",
    "\u0002\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0379\u0381\u0005\u0120",
    "\u0091\u0002\u037a\u037c\u0007\u0007\u0002\u0002\u037b\u037a\u0003\u0002",
    "\u0002\u0002\u037c\u037f\u0003\u0002\u0002\u0002\u037d\u037b\u0003\u0002",
    "\u0002\u0002\u037d\u037e\u0003\u0002\u0002\u0002\u037e\u0380\u0003\u0002",
    "\u0002\u0002\u037f\u037d\u0003\u0002\u0002\u0002\u0380\u0382\u0005\u0018",
    "\r\u0002\u0381\u037d\u0003\u0002\u0002\u0002\u0381\u0382\u0003\u0002",
    "\u0002\u0002\u0382\u0391\u0003\u0002\u0002\u0002\u0383\u0385\u0007\u0007",
    "\u0002\u0002\u0384\u0383\u0003\u0002\u0002\u0002\u0385\u0388\u0003\u0002",
    "\u0002\u0002\u0386\u0384\u0003\u0002\u0002\u0002\u0386\u0387\u0003\u0002",
    "\u0002\u0002\u0387\u0389\u0003\u0002\u0002\u0002\u0388\u0386\u0003\u0002",
    "\u0002\u0002\u0389\u038d\u0007\u001b\u0002\u0002\u038a\u038c\u0007\u0007",
    "\u0002\u0002\u038b\u038a\u0003\u0002\u0002\u0002\u038c\u038f\u0003\u0002",
    "\u0002\u0002\u038d\u038b\u0003\u0002\u0002\u0002\u038d\u038e\u0003\u0002",
    "\u0002\u0002\u038e\u0390\u0003\u0002\u0002\u0002\u038f\u038d\u0003\u0002",
    "\u0002\u0002\u0390\u0392\u0005\u001e\u0010\u0002\u0391\u0386\u0003\u0002",
    "\u0002\u0002\u0391\u0392\u0003\u0002\u0002\u0002\u0392\u039a\u0003\u0002",
    "\u0002\u0002\u0393\u0395\u0007\u0007\u0002\u0002\u0394\u0393\u0003\u0002",
    "\u0002\u0002\u0395\u0398\u0003\u0002\u0002\u0002\u0396\u0394\u0003\u0002",
    "\u0002\u0002\u0396\u0397\u0003\u0002\u0002\u0002\u0397\u0399\u0003\u0002",
    "\u0002\u0002\u0398\u0396\u0003\u0002\u0002\u0002\u0399\u039b\u0005&",
    "\u0014\u0002\u039a\u0396\u0003\u0002\u0002\u0002\u039a\u039b\u0003\u0002",
    "\u0002\u0002\u039bA\u0003\u0002\u0002\u0002\u039c\u039e\u0005\u00fc",
    "\u007f\u0002\u039d\u039c\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002",
    "\u0002\u0002\u039e\u039f\u0003\u0002\u0002\u0002\u039f\u03a3\u0007F",
    "\u0002\u0002\u03a0\u03a2\u0007\u0007\u0002\u0002\u03a1\u03a0\u0003\u0002",
    "\u0002\u0002\u03a2\u03a5\u0003\u0002\u0002\u0002\u03a3\u03a1\u0003\u0002",
    "\u0002\u0002\u03a3\u03a4\u0003\u0002\u0002\u0002\u03a4\u03a7\u0003\u0002",
    "\u0002\u0002\u03a5\u03a3\u0003\u0002\u0002\u0002\u03a6\u03a8\u0005\u00fc",
    "\u007f\u0002\u03a7\u03a6\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002",
    "\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002\u03a9\u03b1\u0007@",
    "\u0002\u0002\u03aa\u03ac\u0007\u0007\u0002\u0002\u03ab\u03aa\u0003\u0002",
    "\u0002\u0002\u03ac\u03af\u0003\u0002\u0002\u0002\u03ad\u03ab\u0003\u0002",
    "\u0002\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u03b0\u0003\u0002",
    "\u0002\u0002\u03af\u03ad\u0003\u0002\u0002\u0002\u03b0\u03b2\u0005\u0120",
    "\u0091\u0002\u03b1\u03ad\u0003\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002",
    "\u0002\u0002\u03b2\u03c1\u0003\u0002\u0002\u0002\u03b3\u03b5\u0007\u0007",
    "\u0002\u0002\u03b4\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b8\u0003\u0002",
    "\u0002\u0002\u03b6\u03b4\u0003\u0002\u0002\u0002\u03b6\u03b7\u0003\u0002",
    "\u0002\u0002\u03b7\u03b9\u0003\u0002\u0002\u0002\u03b8\u03b6\u0003\u0002",
    "\u0002\u0002\u03b9\u03bd\u0007\u001b\u0002\u0002\u03ba\u03bc\u0007\u0007",
    "\u0002\u0002\u03bb\u03ba\u0003\u0002\u0002\u0002\u03bc\u03bf\u0003\u0002",
    "\u0002\u0002\u03bd\u03bb\u0003\u0002\u0002\u0002\u03bd\u03be\u0003\u0002",
    "\u0002\u0002\u03be\u03c0\u0003\u0002\u0002\u0002\u03bf\u03bd\u0003\u0002",
    "\u0002\u0002\u03c0\u03c2\u0005\u001e\u0010\u0002\u03c1\u03b6\u0003\u0002",
    "\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2\u03ca\u0003\u0002",
    "\u0002\u0002\u03c3\u03c5\u0007\u0007\u0002\u0002\u03c4\u03c3\u0003\u0002",
    "\u0002\u0002\u03c5\u03c8\u0003\u0002\u0002\u0002\u03c6\u03c4\u0003\u0002",
    "\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7\u03c9\u0003\u0002",
    "\u0002\u0002\u03c8\u03c6\u0003\u0002\u0002\u0002\u03c9\u03cb\u0005&",
    "\u0014\u0002\u03ca\u03c6\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003\u0002",
    "\u0002\u0002\u03cbC\u0003\u0002\u0002\u0002\u03cc\u03ce\u0005\u00fc",
    "\u007f\u0002\u03cd\u03cc\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002",
    "\u0002\u0002\u03ce\u03cf\u0003\u0002\u0002\u0002\u03cf\u03d7\t\u0003",
    "\u0002\u0002\u03d0\u03d2\u0007\u0007\u0002\u0002\u03d1\u03d0\u0003\u0002",
    "\u0002\u0002\u03d2\u03d5\u0003\u0002\u0002\u0002\u03d3\u03d1\u0003\u0002",
    "\u0002\u0002\u03d3\u03d4\u0003\u0002\u0002\u0002\u03d4\u03d6\u0003\u0002",
    "\u0002\u0002\u03d5\u03d3\u0003\u0002\u0002\u0002\u03d6\u03d8\u0005P",
    ")\u0002\u03d7\u03d3\u0003\u0002\u0002\u0002\u03d7\u03d8\u0003\u0002",
    "\u0002\u0002\u03d8\u03e8\u0003\u0002\u0002\u0002\u03d9\u03db\u0007\u0007",
    "\u0002\u0002\u03da\u03d9\u0003\u0002\u0002\u0002\u03db\u03de\u0003\u0002",
    "\u0002\u0002\u03dc\u03da\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002",
    "\u0002\u0002\u03dd\u03df\u0003\u0002\u0002\u0002\u03de\u03dc\u0003\u0002",
    "\u0002\u0002\u03df\u03e3\u0005T+\u0002\u03e0\u03e2\u0007\u0007\u0002",
    "\u0002\u03e1\u03e0\u0003\u0002\u0002\u0002\u03e2\u03e5\u0003\u0002\u0002",
    "\u0002\u03e3\u03e1\u0003\u0002\u0002\u0002\u03e3\u03e4\u0003\u0002\u0002",
    "\u0002\u03e4\u03e6\u0003\u0002\u0002\u0002\u03e5\u03e3\u0003\u0002\u0002",
    "\u0002\u03e6\u03e7\u0007\t\u0002\u0002\u03e7\u03e9\u0003\u0002\u0002",
    "\u0002\u03e8\u03dc\u0003\u0002\u0002\u0002\u03e8\u03e9\u0003\u0002\u0002",
    "\u0002\u03e9\u03ed\u0003\u0002\u0002\u0002\u03ea\u03ec\u0007\u0007\u0002",
    "\u0002\u03eb\u03ea\u0003\u0002\u0002\u0002\u03ec\u03ef\u0003\u0002\u0002",
    "\u0002\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ed\u03ee\u0003\u0002\u0002",
    "\u0002\u03ee\u03f2\u0003\u0002\u0002\u0002\u03ef\u03ed\u0003\u0002\u0002",
    "\u0002\u03f0\u03f3\u0005F$\u0002\u03f1\u03f3\u0005H%\u0002\u03f2\u03f0",
    "\u0003\u0002\u0002\u0002\u03f2\u03f1\u0003\u0002\u0002\u0002\u03f3\u03fb",
    "\u0003\u0002\u0002\u0002\u03f4\u03f6\u0007\u0007\u0002\u0002\u03f5\u03f4",
    "\u0003\u0002\u0002\u0002\u03f6\u03f9\u0003\u0002\u0002\u0002\u03f7\u03f5",
    "\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8\u03fa",
    "\u0003\u0002\u0002\u0002\u03f9\u03f7\u0003\u0002\u0002\u0002\u03fa\u03fc",
    "\u0005h5\u0002\u03fb\u03f7\u0003\u0002\u0002\u0002\u03fb\u03fc\u0003",
    "\u0002\u0002\u0002\u03fc\u040b\u0003\u0002\u0002\u0002\u03fd\u03ff\u0007",
    "\u0007\u0002\u0002\u03fe\u03fd\u0003\u0002\u0002\u0002\u03ff\u0402\u0003",
    "\u0002\u0002\u0002\u0400\u03fe\u0003\u0002\u0002\u0002\u0400\u0401\u0003",
    "\u0002\u0002\u0002\u0401\u0403\u0003\u0002\u0002\u0002\u0402\u0400\u0003",
    "\u0002\u0002\u0002\u0403\u0407\t\u0004\u0002\u0002\u0404\u0406\u0007",
    "\u0007\u0002\u0002\u0405\u0404\u0003\u0002\u0002\u0002\u0406\u0409\u0003",
    "\u0002\u0002\u0002\u0407\u0405\u0003\u0002\u0002\u0002\u0407\u0408\u0003",
    "\u0002\u0002\u0002\u0408\u040a\u0003\u0002\u0002\u0002\u0409\u0407\u0003",
    "\u0002\u0002\u0002\u040a\u040c\u0005v<\u0002\u040b\u0400\u0003\u0002",
    "\u0002\u0002\u040b\u040c\u0003\u0002\u0002\u0002\u040c\u0419\u0003\u0002",
    "\u0002\u0002\u040d\u0411\u0005J&\u0002\u040e\u040f\u0005\u0122\u0092",
    "\u0002\u040f\u0410\u0005L\'\u0002\u0410\u0412\u0003\u0002\u0002\u0002",
    "\u0411\u040e\u0003\u0002\u0002\u0002\u0411\u0412\u0003\u0002\u0002\u0002",
    "\u0412\u041a\u0003\u0002\u0002\u0002\u0413\u0417\u0005L\'\u0002\u0414",
    "\u0415\u0005\u0122\u0092\u0002\u0415\u0416\u0005J&\u0002\u0416\u0418",
    "\u0003\u0002\u0002\u0002\u0417\u0414\u0003\u0002\u0002\u0002\u0417\u0418",
    "\u0003\u0002\u0002\u0002\u0418\u041a\u0003\u0002\u0002\u0002\u0419\u040d",
    "\u0003\u0002\u0002\u0002\u0419\u0413\u0003\u0002\u0002\u0002\u0419\u041a",
    "\u0003\u0002\u0002\u0002\u041aE\u0003\u0002\u0002\u0002\u041b\u041c",
    "\u0007\u000b\u0002\u0002\u041c\u0421\u0005H%\u0002\u041d\u041e\u0007",
    "\n\u0002\u0002\u041e\u0420\u0005H%\u0002\u041f\u041d\u0003\u0002\u0002",
    "\u0002\u0420\u0423\u0003\u0002\u0002\u0002\u0421\u041f\u0003\u0002\u0002",
    "\u0002\u0421\u0422\u0003\u0002\u0002\u0002\u0422\u0424\u0003\u0002\u0002",
    "\u0002\u0423\u0421\u0003\u0002\u0002\u0002\u0424\u0425\u0007\f\u0002",
    "\u0002\u0425G\u0003\u0002\u0002\u0002\u0426\u0429\u0005\u0120\u0091",
    "\u0002\u0427\u0428\u0007\u001b\u0002\u0002\u0428\u042a\u0005T+\u0002",
    "\u0429\u0427\u0003\u0002\u0002\u0002\u0429\u042a\u0003\u0002\u0002\u0002",
    "\u042aI\u0003\u0002\u0002\u0002\u042b\u042d\u0005\u00fc\u007f\u0002",
    "\u042c\u042b\u0003\u0002\u0002\u0002\u042c\u042d\u0003\u0002\u0002\u0002",
    "\u042d\u042e\u0003\u0002\u0002\u0002\u042e\u045d\u0007c\u0002\u0002",
    "\u042f\u0431\u0005\u00fc\u007f\u0002\u0430\u042f\u0003\u0002\u0002\u0002",
    "\u0430\u0431\u0003\u0002\u0002\u0002\u0431\u0432\u0003\u0002\u0002\u0002",
    "\u0432\u0436\u0007c\u0002\u0002\u0433\u0435\u0007\u0007\u0002\u0002",
    "\u0434\u0433\u0003\u0002\u0002\u0002\u0435\u0438\u0003\u0002\u0002\u0002",
    "\u0436\u0434\u0003\u0002\u0002\u0002\u0436\u0437\u0003\u0002\u0002\u0002",
    "\u0437\u0439\u0003\u0002\u0002\u0002\u0438\u0436\u0003\u0002\u0002\u0002",
    "\u0439\u043a\u0007\u000b\u0002\u0002\u043a\u0449\u0007\f\u0002\u0002",
    "\u043b\u043d\u0007\u0007\u0002\u0002\u043c\u043b\u0003\u0002\u0002\u0002",
    "\u043d\u0440\u0003\u0002\u0002\u0002\u043e\u043c\u0003\u0002\u0002\u0002",
    "\u043e\u043f\u0003\u0002\u0002\u0002\u043f\u0441\u0003\u0002\u0002\u0002",
    "\u0440\u043e\u0003\u0002\u0002\u0002\u0441\u0445\u0007\u001b\u0002\u0002",
    "\u0442\u0444\u0007\u0007\u0002\u0002\u0443\u0442\u0003\u0002\u0002\u0002",
    "\u0444\u0447\u0003\u0002\u0002\u0002\u0445\u0443\u0003\u0002\u0002\u0002",
    "\u0445\u0446\u0003\u0002\u0002\u0002\u0446\u0448\u0003\u0002\u0002\u0002",
    "\u0447\u0445\u0003\u0002\u0002\u0002\u0448\u044a\u0005T+\u0002\u0449",
    "\u043e\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002\u044a",
    "\u044e\u0003\u0002\u0002\u0002\u044b\u044d\u0007\u0007\u0002\u0002\u044c",
    "\u044b\u0003\u0002\u0002\u0002\u044d\u0450\u0003\u0002\u0002\u0002\u044e",
    "\u044c\u0003\u0002\u0002\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f",
    "\u045a\u0003\u0002\u0002\u0002\u0450\u044e\u0003\u0002\u0002\u0002\u0451",
    "\u045b\u0005l7\u0002\u0452\u0456\u0007\u001d\u0002\u0002\u0453\u0455",
    "\u0007\u0007\u0002\u0002\u0454\u0453\u0003\u0002\u0002\u0002\u0455\u0458",
    "\u0003\u0002\u0002\u0002\u0456\u0454\u0003\u0002\u0002\u0002\u0456\u0457",
    "\u0003\u0002\u0002\u0002\u0457\u0459\u0003\u0002\u0002\u0002\u0458\u0456",
    "\u0003\u0002\u0002\u0002\u0459\u045b\u0005v<\u0002\u045a\u0451\u0003",
    "\u0002\u0002\u0002\u045a\u0452\u0003\u0002\u0002\u0002\u045b\u045d\u0003",
    "\u0002\u0002\u0002\u045c\u042c\u0003\u0002\u0002\u0002\u045c\u0430\u0003",
    "\u0002\u0002\u0002\u045dK\u0003\u0002\u0002\u0002\u045e\u0460\u0005",
    "\u00fc\u007f\u0002\u045f\u045e\u0003\u0002\u0002\u0002\u045f\u0460\u0003",
    "\u0002\u0002\u0002\u0460\u0461\u0003\u0002\u0002\u0002\u0461\u0482\u0007",
    "d\u0002\u0002\u0462\u0464\u0005\u00fc\u007f\u0002\u0463\u0462\u0003",
    "\u0002\u0002\u0002\u0463\u0464\u0003\u0002\u0002\u0002\u0464\u0465\u0003",
    "\u0002\u0002\u0002\u0465\u0469\u0007d\u0002\u0002\u0466\u0468\u0007",
    "\u0007\u0002\u0002\u0467\u0466\u0003\u0002\u0002\u0002\u0468\u046b\u0003",
    "\u0002\u0002\u0002\u0469\u0467\u0003\u0002\u0002\u0002\u0469\u046a\u0003",
    "\u0002\u0002\u0002\u046a\u046c\u0003\u0002\u0002\u0002\u046b\u0469\u0003",
    "\u0002\u0002\u0002\u046c\u0471\u0007\u000b\u0002\u0002\u046d\u0470\u0005",
    "\u0114\u008b\u0002\u046e\u0470\u0005\u010e\u0088\u0002\u046f\u046d\u0003",
    "\u0002\u0002\u0002\u046f\u046e\u0003\u0002\u0002\u0002\u0470\u0473\u0003",
    "\u0002\u0002\u0002\u0471\u046f\u0003\u0002\u0002\u0002\u0471\u0472\u0003",
    "\u0002\u0002\u0002\u0472\u0476\u0003\u0002\u0002\u0002\u0473\u0471\u0003",
    "\u0002\u0002\u0002\u0474\u0477\u0005\u0120\u0091\u0002\u0475\u0477\u0005",
    "<\u001f\u0002\u0476\u0474\u0003\u0002\u0002\u0002\u0476\u0475\u0003",
    "\u0002\u0002\u0002\u0477\u0478\u0003\u0002\u0002\u0002\u0478\u047c\u0007",
    "\f\u0002\u0002\u0479\u047b\u0007\u0007\u0002\u0002\u047a\u0479\u0003",
    "\u0002\u0002\u0002\u047b\u047e\u0003\u0002\u0002\u0002\u047c\u047a\u0003",
    "\u0002\u0002\u0002\u047c\u047d\u0003\u0002\u0002\u0002\u047d\u047f\u0003",
    "\u0002\u0002\u0002\u047e\u047c\u0003\u0002\u0002\u0002\u047f\u0480\u0005",
    "> \u0002\u0480\u0482\u0003\u0002\u0002\u0002\u0481\u045f\u0003\u0002",
    "\u0002\u0002\u0481\u0463\u0003\u0002\u0002\u0002\u0482M\u0003\u0002",
    "\u0002\u0002\u0483\u0485\u0005\u00fc\u007f\u0002\u0484\u0483\u0003\u0002",
    "\u0002\u0002\u0484\u0485\u0003\u0002\u0002\u0002\u0485\u0486\u0003\u0002",
    "\u0002\u0002\u0486\u048a\u0007C\u0002\u0002\u0487\u0489\u0007\u0007",
    "\u0002\u0002\u0488\u0487\u0003\u0002\u0002\u0002\u0489\u048c\u0003\u0002",
    "\u0002\u0002\u048a\u0488\u0003\u0002\u0002\u0002\u048a\u048b\u0003\u0002",
    "\u0002\u0002\u048b\u048d\u0003\u0002\u0002\u0002\u048c\u048a\u0003\u0002",
    "\u0002\u0002\u048d\u0495\u0005\u0120\u0091\u0002\u048e\u0490\u0007\u0007",
    "\u0002\u0002\u048f\u048e\u0003\u0002\u0002\u0002\u0490\u0493\u0003\u0002",
    "\u0002\u0002\u0491\u048f\u0003\u0002\u0002\u0002\u0491\u0492\u0003\u0002",
    "\u0002\u0002\u0492\u0494\u0003\u0002\u0002\u0002\u0493\u0491\u0003\u0002",
    "\u0002\u0002\u0494\u0496\u0005P)\u0002\u0495\u0491\u0003\u0002\u0002",
    "\u0002\u0495\u0496\u0003\u0002\u0002\u0002\u0496\u049a\u0003\u0002\u0002",
    "\u0002\u0497\u0499\u0007\u0007\u0002\u0002\u0498\u0497\u0003\u0002\u0002",
    "\u0002\u0499\u049c\u0003\u0002\u0002\u0002\u049a\u0498\u0003\u0002\u0002",
    "\u0002\u049a\u049b\u0003\u0002\u0002\u0002\u049b\u049d\u0003\u0002\u0002",
    "\u0002\u049c\u049a\u0003\u0002\u0002\u0002\u049d\u04a1\u0007\u001d\u0002",
    "\u0002\u049e\u04a0\u0007\u0007\u0002\u0002\u049f\u049e\u0003\u0002\u0002",
    "\u0002\u04a0\u04a3\u0003\u0002\u0002\u0002\u04a1\u049f\u0003\u0002\u0002",
    "\u0002\u04a1\u04a2\u0003\u0002\u0002\u0002\u04a2\u04a4\u0003\u0002\u0002",
    "\u0002\u04a3\u04a1\u0003\u0002\u0002\u0002\u04a4\u04a5\u0005T+\u0002",
    "\u04a5O\u0003\u0002\u0002\u0002\u04a6\u04aa\u0007-\u0002\u0002\u04a7",
    "\u04a9\u0007\u0007\u0002\u0002\u04a8\u04a7\u0003\u0002\u0002\u0002\u04a9",
    "\u04ac\u0003\u0002\u0002\u0002\u04aa\u04a8\u0003\u0002\u0002\u0002\u04aa",
    "\u04ab\u0003\u0002\u0002\u0002\u04ab\u04ad\u0003\u0002\u0002\u0002\u04ac",
    "\u04aa\u0003\u0002\u0002\u0002\u04ad\u04be\u0005R*\u0002\u04ae\u04b0",
    "\u0007\u0007\u0002\u0002\u04af\u04ae\u0003\u0002\u0002\u0002\u04b0\u04b3",
    "\u0003\u0002\u0002\u0002\u04b1\u04af\u0003\u0002\u0002\u0002\u04b1\u04b2",
    "\u0003\u0002\u0002\u0002\u04b2\u04b4\u0003\u0002\u0002\u0002\u04b3\u04b1",
    "\u0003\u0002\u0002\u0002\u04b4\u04b8\u0007\n\u0002\u0002\u04b5\u04b7",
    "\u0007\u0007\u0002\u0002\u04b6\u04b5\u0003\u0002\u0002\u0002\u04b7\u04ba",
    "\u0003\u0002\u0002\u0002\u04b8\u04b6\u0003\u0002\u0002\u0002\u04b8\u04b9",
    "\u0003\u0002\u0002\u0002\u04b9\u04bb\u0003\u0002\u0002\u0002\u04ba\u04b8",
    "\u0003\u0002\u0002\u0002\u04bb\u04bd\u0005R*\u0002\u04bc\u04b1\u0003",
    "\u0002\u0002\u0002\u04bd\u04c0\u0003\u0002\u0002\u0002\u04be\u04bc\u0003",
    "\u0002\u0002\u0002\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c4\u0003",
    "\u0002\u0002\u0002\u04c0\u04be\u0003\u0002\u0002\u0002\u04c1\u04c3\u0007",
    "\u0007\u0002\u0002\u04c2\u04c1\u0003\u0002\u0002\u0002\u04c3\u04c6\u0003",
    "\u0002\u0002\u0002\u04c4\u04c2\u0003\u0002\u0002\u0002\u04c4\u04c5\u0003",
    "\u0002\u0002\u0002\u04c5\u04c7\u0003\u0002\u0002\u0002\u04c6\u04c4\u0003",
    "\u0002\u0002\u0002\u04c7\u04c8\u0007.\u0002\u0002\u04c8Q\u0003\u0002",
    "\u0002\u0002\u04c9\u04cb\u0005\u00fc\u007f\u0002\u04ca\u04c9\u0003\u0002",
    "\u0002\u0002\u04ca\u04cb\u0003\u0002\u0002\u0002\u04cb\u04cf\u0003\u0002",
    "\u0002\u0002\u04cc\u04ce\u0007\u0007\u0002\u0002\u04cd\u04cc\u0003\u0002",
    "\u0002\u0002\u04ce\u04d1\u0003\u0002\u0002\u0002\u04cf\u04cd\u0003\u0002",
    "\u0002\u0002\u04cf\u04d0\u0003\u0002\u0002\u0002\u04d0\u04d2\u0003\u0002",
    "\u0002\u0002\u04d1\u04cf\u0003\u0002\u0002\u0002\u04d2\u04e1\u0005\u0120",
    "\u0091\u0002\u04d3\u04d5\u0007\u0007\u0002\u0002\u04d4\u04d3\u0003\u0002",
    "\u0002\u0002\u04d5\u04d8\u0003\u0002\u0002\u0002\u04d6\u04d4\u0003\u0002",
    "\u0002\u0002\u04d6\u04d7\u0003\u0002\u0002\u0002\u04d7\u04d9\u0003\u0002",
    "\u0002\u0002\u04d8\u04d6\u0003\u0002\u0002\u0002\u04d9\u04dd\u0007\u001b",
    "\u0002\u0002\u04da\u04dc\u0007\u0007\u0002\u0002\u04db\u04da\u0003\u0002",
    "\u0002\u0002\u04dc\u04df\u0003\u0002\u0002\u0002\u04dd\u04db\u0003\u0002",
    "\u0002\u0002\u04dd\u04de\u0003\u0002\u0002\u0002\u04de\u04e0\u0003\u0002",
    "\u0002\u0002\u04df\u04dd\u0003\u0002\u0002\u0002\u04e0\u04e2\u0005T",
    "+\u0002\u04e1\u04d6\u0003\u0002\u0002\u0002\u04e1\u04e2\u0003\u0002",
    "\u0002\u0002\u04e2S\u0003\u0002\u0002\u0002\u04e3\u04e5\u0005V,\u0002",
    "\u04e4\u04e3\u0003\u0002\u0002\u0002\u04e4\u04e5\u0003\u0002\u0002\u0002",
    "\u04e5\u04ea\u0003\u0002\u0002\u0002\u04e6\u04eb\u0005^0\u0002\u04e7",
    "\u04eb\u0005X-\u0002\u04e8\u04eb\u0005Z.\u0002\u04e9\u04eb\u0005\\/",
    "\u0002\u04ea\u04e6\u0003\u0002\u0002\u0002\u04ea\u04e7\u0003\u0002\u0002",
    "\u0002\u04ea\u04e8\u0003\u0002\u0002\u0002\u04ea\u04e9\u0003\u0002\u0002",
    "\u0002\u04ebU\u0003\u0002\u0002\u0002\u04ec\u04f5\u0005\u0114\u008b",
    "\u0002\u04ed\u04f1\u0007x\u0002\u0002\u04ee\u04f0\u0007\u0007\u0002",
    "\u0002\u04ef\u04ee\u0003\u0002\u0002\u0002\u04f0\u04f3\u0003\u0002\u0002",
    "\u0002\u04f1\u04ef\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002\u0002",
    "\u0002\u04f2\u04f5\u0003\u0002\u0002\u0002\u04f3\u04f1\u0003\u0002\u0002",
    "\u0002\u04f4\u04ec\u0003\u0002\u0002\u0002\u04f4\u04ed\u0003\u0002\u0002",
    "\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f4\u0003\u0002\u0002",
    "\u0002\u04f6\u04f7\u0003\u0002\u0002\u0002\u04f7W\u0003\u0002\u0002",
    "\u0002\u04f8\u04f9\u0007\u000b\u0002\u0002\u04f9\u04fa\u0005T+\u0002",
    "\u04fa\u04fb\u0007\f\u0002\u0002\u04fbY\u0003\u0002\u0002\u0002\u04fc",
    "\u04ff\u0005\\/\u0002\u04fd\u04ff\u0005X-\u0002\u04fe\u04fc\u0003\u0002",
    "\u0002\u0002\u04fe\u04fd\u0003\u0002\u0002\u0002\u04ff\u0503\u0003\u0002",
    "\u0002\u0002\u0500\u0502\u0007\u0007\u0002\u0002\u0501\u0500\u0003\u0002",
    "\u0002\u0002\u0502\u0505\u0003\u0002\u0002\u0002\u0503\u0501\u0003\u0002",
    "\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504\u0507\u0003\u0002",
    "\u0002\u0002\u0505\u0503\u0003\u0002\u0002\u0002\u0506\u0508\u0007+",
    "\u0002\u0002\u0507\u0506\u0003\u0002\u0002\u0002\u0508\u0509\u0003\u0002",
    "\u0002\u0002\u0509\u0507\u0003\u0002\u0002\u0002\u0509\u050a\u0003\u0002",
    "\u0002\u0002\u050a[\u0003\u0002\u0002\u0002\u050b\u050c\u0007\u000b",
    "\u0002\u0002\u050c\u050d\u0005\\/\u0002\u050d\u050e\u0007\f\u0002\u0002",
    "\u050e\u0512\u0003\u0002\u0002\u0002\u050f\u0512\u0005b2\u0002\u0510",
    "\u0512\u0007i\u0002\u0002\u0511\u050b\u0003\u0002\u0002\u0002\u0511",
    "\u050f\u0003\u0002\u0002\u0002\u0511\u0510\u0003\u0002\u0002\u0002\u0512",
    "]\u0003\u0002\u0002\u0002\u0513\u0517\u0005`1\u0002\u0514\u0516\u0007",
    "\u0007\u0002\u0002\u0515\u0514\u0003\u0002\u0002\u0002\u0516\u0519\u0003",
    "\u0002\u0002\u0002\u0517\u0515\u0003\u0002\u0002\u0002\u0517\u0518\u0003",
    "\u0002\u0002\u0002\u0518\u051a\u0003\u0002\u0002\u0002\u0519\u0517\u0003",
    "\u0002\u0002\u0002\u051a\u051e\u0007\t\u0002\u0002\u051b\u051d\u0007",
    "\u0007\u0002\u0002\u051c\u051b\u0003\u0002\u0002\u0002\u051d\u0520\u0003",
    "\u0002\u0002\u0002\u051e\u051c\u0003\u0002\u0002\u0002\u051e\u051f\u0003",
    "\u0002\u0002\u0002\u051f\u0522\u0003\u0002\u0002\u0002\u0520\u051e\u0003",
    "\u0002\u0002\u0002\u0521\u0513\u0003\u0002\u0002\u0002\u0521\u0522\u0003",
    "\u0002\u0002\u0002\u0522\u0523\u0003\u0002\u0002\u0002\u0523\u0527\u0005",
    "f4\u0002\u0524\u0526\u0007\u0007\u0002\u0002\u0525\u0524\u0003\u0002",
    "\u0002\u0002\u0526\u0529\u0003\u0002\u0002\u0002\u0527\u0525\u0003\u0002",
    "\u0002\u0002\u0527\u0528\u0003\u0002\u0002\u0002\u0528\u052a\u0003\u0002",
    "\u0002\u0002\u0529\u0527\u0003\u0002\u0002\u0002\u052a\u052e\u0007#",
    "\u0002\u0002\u052b\u052d\u0007\u0007\u0002\u0002\u052c\u052b\u0003\u0002",
    "\u0002\u0002\u052d\u0530\u0003\u0002\u0002\u0002\u052e\u052c\u0003\u0002",
    "\u0002\u0002\u052e\u052f\u0003\u0002\u0002\u0002\u052f\u0531\u0003\u0002",
    "\u0002\u0002\u0530\u052e\u0003\u0002\u0002\u0002\u0531\u0532\u0005T",
    "+\u0002\u0532_\u0003\u0002\u0002\u0002\u0533\u0537\u0005X-\u0002\u0534",
    "\u0537\u0005Z.\u0002\u0535\u0537\u0005\\/\u0002\u0536\u0533\u0003\u0002",
    "\u0002\u0002\u0536\u0534\u0003\u0002\u0002\u0002\u0536\u0535\u0003\u0002",
    "\u0002\u0002\u0537a\u0003\u0002\u0002\u0002\u0538\u0549\u0005d3\u0002",
    "\u0539\u053b\u0007\u0007\u0002\u0002\u053a\u0539\u0003\u0002\u0002\u0002",
    "\u053b\u053e\u0003\u0002\u0002\u0002\u053c\u053a\u0003\u0002\u0002\u0002",
    "\u053c\u053d\u0003\u0002\u0002\u0002\u053d\u053f\u0003\u0002\u0002\u0002",
    "\u053e\u053c\u0003\u0002\u0002\u0002\u053f\u0543\u0007\t\u0002\u0002",
    "\u0540\u0542\u0007\u0007\u0002\u0002\u0541\u0540\u0003\u0002\u0002\u0002",
    "\u0542\u0545\u0003\u0002\u0002\u0002\u0543\u0541\u0003\u0002\u0002\u0002",
    "\u0543\u0544\u0003\u0002\u0002\u0002\u0544\u0546\u0003\u0002\u0002\u0002",
    "\u0545\u0543\u0003\u0002\u0002\u0002\u0546\u0548\u0005d3\u0002\u0547",
    "\u053c\u0003\u0002\u0002\u0002\u0548\u054b\u0003\u0002\u0002\u0002\u0549",
    "\u0547\u0003\u0002\u0002\u0002\u0549\u054a\u0003\u0002\u0002\u0002\u054a",
    "c\u0003\u0002\u0002\u0002\u054b\u0549\u0003\u0002\u0002\u0002\u054c",
    "\u0554\u0005\u0120\u0091\u0002\u054d\u054f\u0007\u0007\u0002\u0002\u054e",
    "\u054d\u0003\u0002\u0002\u0002\u054f\u0552\u0003\u0002\u0002\u0002\u0550",
    "\u054e\u0003\u0002\u0002\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551",
    "\u0553\u0003\u0002\u0002\u0002\u0552\u0550\u0003\u0002\u0002\u0002\u0553",
    "\u0555\u0005\u009eP\u0002\u0554\u0550\u0003\u0002\u0002\u0002\u0554",
    "\u0555\u0003\u0002\u0002\u0002\u0555e\u0003\u0002\u0002\u0002\u0556",
    "\u0559\u0007\u000b\u0002\u0002\u0557\u055a\u0005<\u001f\u0002\u0558",
    "\u055a\u0005T+\u0002\u0559\u0557\u0003\u0002\u0002\u0002\u0559\u0558",
    "\u0003\u0002\u0002\u0002\u0559\u055a\u0003\u0002\u0002\u0002\u055a\u0562",
    "\u0003\u0002\u0002\u0002\u055b\u055e\u0007\n\u0002\u0002\u055c\u055f",
    "\u0005<\u001f\u0002\u055d\u055f\u0005T+\u0002\u055e\u055c\u0003\u0002",
    "\u0002\u0002\u055e\u055d\u0003\u0002\u0002\u0002\u055f\u0561\u0003\u0002",
    "\u0002\u0002\u0560\u055b\u0003\u0002\u0002\u0002\u0561\u0564\u0003\u0002",
    "\u0002\u0002\u0562\u0560\u0003\u0002\u0002\u0002\u0562\u0563\u0003\u0002",
    "\u0002\u0002\u0563\u0565\u0003\u0002\u0002\u0002\u0564\u0562\u0003\u0002",
    "\u0002\u0002\u0565\u0566\u0007\f\u0002\u0002\u0566g\u0003\u0002\u0002",
    "\u0002\u0567\u056b\u0007K\u0002\u0002\u0568\u056a\u0007\u0007\u0002",
    "\u0002\u0569\u0568\u0003\u0002\u0002\u0002\u056a\u056d\u0003\u0002\u0002",
    "\u0002\u056b\u0569\u0003\u0002\u0002\u0002\u056b\u056c\u0003\u0002\u0002",
    "\u0002\u056c\u056e\u0003\u0002\u0002\u0002\u056d\u056b\u0003\u0002\u0002",
    "\u0002\u056e\u057f\u0005j6\u0002\u056f\u0571\u0007\u0007\u0002\u0002",
    "\u0570\u056f\u0003\u0002\u0002\u0002\u0571\u0574\u0003\u0002\u0002\u0002",
    "\u0572\u0570\u0003\u0002\u0002\u0002\u0572\u0573\u0003\u0002\u0002\u0002",
    "\u0573\u0575\u0003\u0002\u0002\u0002\u0574\u0572\u0003\u0002\u0002\u0002",
    "\u0575\u0579\u0007\n\u0002\u0002\u0576\u0578\u0007\u0007\u0002\u0002",
    "\u0577\u0576\u0003\u0002\u0002\u0002\u0578\u057b\u0003\u0002\u0002\u0002",
    "\u0579\u0577\u0003\u0002\u0002\u0002\u0579\u057a\u0003\u0002\u0002\u0002",
    "\u057a\u057c\u0003\u0002\u0002\u0002\u057b\u0579\u0003\u0002\u0002\u0002",
    "\u057c\u057e\u0005j6\u0002\u057d\u0572\u0003\u0002\u0002\u0002\u057e",
    "\u0581\u0003\u0002\u0002\u0002\u057f\u057d\u0003\u0002\u0002\u0002\u057f",
    "\u0580\u0003\u0002\u0002\u0002\u0580i\u0003\u0002\u0002\u0002\u0581",
    "\u057f\u0003\u0002\u0002\u0002\u0582\u0584\u0005\u0114\u008b\u0002\u0583",
    "\u0582\u0003\u0002\u0002\u0002\u0584\u0587\u0003\u0002\u0002\u0002\u0585",
    "\u0583\u0003\u0002\u0002\u0002\u0585\u0586\u0003\u0002\u0002\u0002\u0586",
    "\u0588\u0003\u0002\u0002\u0002\u0587\u0585\u0003\u0002\u0002\u0002\u0588",
    "\u058c\u0005\u0120\u0091\u0002\u0589\u058b\u0007\u0007\u0002\u0002\u058a",
    "\u0589\u0003\u0002\u0002\u0002\u058b\u058e\u0003\u0002\u0002\u0002\u058c",
    "\u058a\u0003\u0002\u0002\u0002\u058c\u058d\u0003\u0002\u0002\u0002\u058d",
    "\u058f\u0003\u0002\u0002\u0002\u058e\u058c\u0003\u0002\u0002\u0002\u058f",
    "\u0593\u0007\u001b\u0002\u0002\u0590\u0592\u0007\u0007\u0002\u0002\u0591",
    "\u0590\u0003\u0002\u0002\u0002\u0592\u0595\u0003\u0002\u0002\u0002\u0593",
    "\u0591\u0003\u0002\u0002\u0002\u0593\u0594\u0003\u0002\u0002\u0002\u0594",
    "\u0596\u0003\u0002\u0002\u0002\u0595\u0593\u0003\u0002\u0002\u0002\u0596",
    "\u0597\u0005T+\u0002\u0597k\u0003\u0002\u0002\u0002\u0598\u0599\u0007",
    "\u000f\u0002\u0002\u0599\u059a\u0005n8\u0002\u059a\u059b\u0007\u0010",
    "\u0002\u0002\u059bm\u0003\u0002\u0002\u0002\u059c\u059e\u0005\u0124",
    "\u0093\u0002\u059d\u059c\u0003\u0002\u0002\u0002\u059e\u05a1\u0003\u0002",
    "\u0002\u0002\u059f\u059d\u0003\u0002\u0002\u0002\u059f\u05a0\u0003\u0002",
    "\u0002\u0002\u05a0\u05b0\u0003\u0002\u0002\u0002\u05a1\u059f\u0003\u0002",
    "\u0002\u0002\u05a2\u05ad\u0005p9\u0002\u05a3\u05a5\u0005\u0124\u0093",
    "\u0002\u05a4\u05a3\u0003\u0002\u0002\u0002\u05a5\u05a6\u0003\u0002\u0002",
    "\u0002\u05a6\u05a4\u0003\u0002\u0002\u0002\u05a6\u05a7\u0003\u0002\u0002",
    "\u0002\u05a7\u05a9\u0003\u0002\u0002\u0002\u05a8\u05aa\u0005p9\u0002",
    "\u05a9\u05a8\u0003\u0002\u0002\u0002\u05a9\u05aa\u0003\u0002\u0002\u0002",
    "\u05aa\u05ac\u0003\u0002\u0002\u0002\u05ab\u05a4\u0003\u0002\u0002\u0002",
    "\u05ac\u05af\u0003\u0002\u0002\u0002\u05ad\u05ab\u0003\u0002\u0002\u0002",
    "\u05ad\u05ae\u0003\u0002\u0002\u0002\u05ae\u05b1\u0003\u0002\u0002\u0002",
    "\u05af\u05ad\u0003\u0002\u0002\u0002\u05b0\u05a2\u0003\u0002\u0002\u0002",
    "\u05b0\u05b1\u0003\u0002\u0002\u0002\u05b1o\u0003\u0002\u0002\u0002",
    "\u05b2\u05b5\u0005t;\u0002\u05b3\u05b5\u0005r:\u0002\u05b4\u05b2\u0003",
    "\u0002\u0002\u0002\u05b4\u05b3\u0003\u0002\u0002\u0002\u05b5q\u0003",
    "\u0002\u0002\u0002\u05b6\u05b8\u0005\u0114\u008b\u0002\u05b7\u05b6\u0003",
    "\u0002\u0002\u0002\u05b8\u05bb\u0003\u0002\u0002\u0002\u05b9\u05b7\u0003",
    "\u0002\u0002\u0002\u05b9\u05ba\u0003\u0002\u0002\u0002\u05ba\u05bf\u0003",
    "\u0002\u0002\u0002\u05bb\u05b9\u0003\u0002\u0002\u0002\u05bc\u05be\u0007",
    "\u0007\u0002\u0002\u05bd\u05bc\u0003\u0002\u0002\u0002\u05be\u05c1\u0003",
    "\u0002\u0002\u0002\u05bf\u05bd\u0003\u0002\u0002\u0002\u05bf\u05c0\u0003",
    "\u0002\u0002\u0002\u05c0\u05c2\u0003\u0002\u0002\u0002\u05c1\u05bf\u0003",
    "\u0002\u0002\u0002\u05c2\u05c3\u0005v<\u0002\u05c3s\u0003\u0002\u0002",
    "\u0002\u05c4\u05c6\u0005\u0112\u008a\u0002\u05c5\u05c4\u0003\u0002\u0002",
    "\u0002\u05c6\u05c9\u0003\u0002\u0002\u0002\u05c7\u05c5\u0003\u0002\u0002",
    "\u0002\u05c7\u05c8\u0003\u0002\u0002\u0002\u05c8\u05ce\u0003\u0002\u0002",
    "\u0002\u05c9\u05c7\u0003\u0002\u0002\u0002\u05ca\u05cf\u0005\u0016\f",
    "\u0002\u05cb\u05cf\u00056\u001c\u0002\u05cc\u05cf\u0005D#\u0002\u05cd",
    "\u05cf\u0005N(\u0002\u05ce\u05ca\u0003\u0002\u0002\u0002\u05ce\u05cb",
    "\u0003\u0002\u0002\u0002\u05ce\u05cc\u0003\u0002\u0002\u0002\u05ce\u05cd",
    "\u0003\u0002\u0002\u0002\u05cfu\u0003\u0002\u0002\u0002\u05d0\u05d6",
    "\u0005x=\u0002\u05d1\u05d2\u0005\u00e6t\u0002\u05d2\u05d3\u0005x=\u0002",
    "\u05d3\u05d5\u0003\u0002\u0002\u0002\u05d4\u05d1\u0003\u0002\u0002\u0002",
    "\u05d5\u05d8\u0003\u0002\u0002\u0002\u05d6\u05d4\u0003\u0002\u0002\u0002",
    "\u05d6\u05d7\u0003\u0002\u0002\u0002\u05d7w\u0003\u0002\u0002\u0002",
    "\u05d8\u05d6\u0003\u0002\u0002\u0002\u05d9\u05ea\u0005z>\u0002\u05da",
    "\u05dc\u0007\u0007\u0002\u0002\u05db\u05da\u0003\u0002\u0002\u0002\u05dc",
    "\u05df\u0003\u0002\u0002\u0002\u05dd\u05db\u0003\u0002\u0002\u0002\u05dd",
    "\u05de\u0003\u0002\u0002\u0002\u05de\u05e0\u0003\u0002\u0002\u0002\u05df",
    "\u05dd\u0003\u0002\u0002\u0002\u05e0\u05e4\u0007\u0019\u0002\u0002\u05e1",
    "\u05e3\u0007\u0007\u0002\u0002\u05e2\u05e1\u0003\u0002\u0002\u0002\u05e3",
    "\u05e6\u0003\u0002\u0002\u0002\u05e4\u05e2\u0003\u0002\u0002\u0002\u05e4",
    "\u05e5\u0003\u0002\u0002\u0002\u05e5\u05e7\u0003\u0002\u0002\u0002\u05e6",
    "\u05e4\u0003\u0002\u0002\u0002\u05e7\u05e9\u0005z>\u0002\u05e8\u05dd",
    "\u0003\u0002\u0002\u0002\u05e9\u05ec\u0003\u0002\u0002\u0002\u05ea\u05e8",
    "\u0003\u0002\u0002\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002\u05eby",
    "\u0003\u0002\u0002\u0002\u05ec\u05ea\u0003\u0002\u0002\u0002\u05ed\u05fe",
    "\u0005|?\u0002\u05ee\u05f0\u0007\u0007\u0002\u0002\u05ef\u05ee\u0003",
    "\u0002\u0002\u0002\u05f0\u05f3\u0003\u0002\u0002\u0002\u05f1\u05ef\u0003",
    "\u0002\u0002\u0002\u05f1\u05f2\u0003\u0002\u0002\u0002\u05f2\u05f4\u0003",
    "\u0002\u0002\u0002\u05f3\u05f1\u0003\u0002\u0002\u0002\u05f4\u05f8\u0007",
    "\u0018\u0002\u0002\u05f5\u05f7\u0007\u0007\u0002\u0002\u05f6\u05f5\u0003",
    "\u0002\u0002\u0002\u05f7\u05fa\u0003\u0002\u0002\u0002\u05f8\u05f6\u0003",
    "\u0002\u0002\u0002\u05f8\u05f9\u0003\u0002\u0002\u0002\u05f9\u05fb\u0003",
    "\u0002\u0002\u0002\u05fa\u05f8\u0003\u0002\u0002\u0002\u05fb\u05fd\u0005",
    "|?\u0002\u05fc\u05f1\u0003\u0002\u0002\u0002\u05fd\u0600\u0003\u0002",
    "\u0002\u0002\u05fe\u05fc\u0003\u0002\u0002\u0002\u05fe\u05ff\u0003\u0002",
    "\u0002\u0002\u05ff{\u0003\u0002\u0002\u0002\u0600\u05fe\u0003\u0002",
    "\u0002\u0002\u0601\u060d\u0005~@\u0002\u0602\u0606\u0005\u00e8u\u0002",
    "\u0603\u0605\u0007\u0007\u0002\u0002\u0604\u0603\u0003\u0002\u0002\u0002",
    "\u0605\u0608\u0003\u0002\u0002\u0002\u0606\u0604\u0003\u0002\u0002\u0002",
    "\u0606\u0607\u0003\u0002\u0002\u0002\u0607\u0609\u0003\u0002\u0002\u0002",
    "\u0608\u0606\u0003\u0002\u0002\u0002\u0609\u060a\u0005~@\u0002\u060a",
    "\u060c\u0003\u0002\u0002\u0002\u060b\u0602\u0003\u0002\u0002\u0002\u060c",
    "\u060f\u0003\u0002\u0002\u0002\u060d\u060b\u0003\u0002\u0002\u0002\u060d",
    "\u060e\u0003\u0002\u0002\u0002\u060e}\u0003\u0002\u0002\u0002\u060f",
    "\u060d\u0003\u0002\u0002\u0002\u0610\u061a\u0005\u0080A\u0002\u0611",
    "\u0615\u0005\u00eav\u0002\u0612\u0614\u0007\u0007\u0002\u0002\u0613",
    "\u0612\u0003\u0002\u0002\u0002\u0614\u0617\u0003\u0002\u0002\u0002\u0615",
    "\u0613\u0003\u0002\u0002\u0002\u0615\u0616\u0003\u0002\u0002\u0002\u0616",
    "\u0618\u0003\u0002\u0002\u0002\u0617\u0615\u0003\u0002\u0002\u0002\u0618",
    "\u0619\u0005\u0080A\u0002\u0619\u061b\u0003\u0002\u0002\u0002\u061a",
    "\u0611\u0003\u0002\u0002\u0002\u061a\u061b\u0003\u0002\u0002\u0002\u061b",
    "\u007f\u0003\u0002\u0002\u0002\u061c\u0633\u0005\u0082B\u0002\u061d",
    "\u0621\u0005\u00ecw\u0002\u061e\u0620\u0007\u0007\u0002\u0002\u061f",
    "\u061e\u0003\u0002\u0002\u0002\u0620\u0623\u0003\u0002\u0002\u0002\u0621",
    "\u061f\u0003\u0002\u0002\u0002\u0621\u0622\u0003\u0002\u0002\u0002\u0622",
    "\u0624\u0003\u0002\u0002\u0002\u0623\u0621\u0003\u0002\u0002\u0002\u0624",
    "\u0625\u0005\u0082B\u0002\u0625\u0627\u0003\u0002\u0002\u0002\u0626",
    "\u061d\u0003\u0002\u0002\u0002\u0627\u0628\u0003\u0002\u0002\u0002\u0628",
    "\u0626\u0003\u0002\u0002\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0629",
    "\u0634\u0003\u0002\u0002\u0002\u062a\u062e\u0005\u00eex\u0002\u062b",
    "\u062d\u0007\u0007\u0002\u0002\u062c\u062b\u0003\u0002\u0002\u0002\u062d",
    "\u0630\u0003\u0002\u0002\u0002\u062e\u062c\u0003\u0002\u0002\u0002\u062e",
    "\u062f\u0003\u0002\u0002\u0002\u062f\u0631\u0003\u0002\u0002\u0002\u0630",
    "\u062e\u0003\u0002\u0002\u0002\u0631\u0632\u0005T+\u0002\u0632\u0634",
    "\u0003\u0002\u0002\u0002\u0633\u0626\u0003\u0002\u0002\u0002\u0633\u062a",
    "\u0003\u0002\u0002\u0002\u0633\u0634\u0003\u0002\u0002\u0002\u0634\u0081",
    "\u0003\u0002\u0002\u0002\u0635\u0646\u0005\u0084C\u0002\u0636\u0638",
    "\u0007\u0007\u0002\u0002\u0637\u0636\u0003\u0002\u0002\u0002\u0638\u063b",
    "\u0003\u0002\u0002\u0002\u0639\u0637\u0003\u0002\u0002\u0002\u0639\u063a",
    "\u0003\u0002\u0002\u0002\u063a\u063c\u0003\u0002\u0002\u0002\u063b\u0639",
    "\u0003\u0002\u0002\u0002\u063c\u0640\u0007,\u0002\u0002\u063d\u063f",
    "\u0007\u0007\u0002\u0002\u063e\u063d\u0003\u0002\u0002\u0002\u063f\u0642",
    "\u0003\u0002\u0002\u0002\u0640\u063e\u0003\u0002\u0002\u0002\u0640\u0641",
    "\u0003\u0002\u0002\u0002\u0641\u0643\u0003\u0002\u0002\u0002\u0642\u0640",
    "\u0003\u0002\u0002\u0002\u0643\u0645\u0005\u0084C\u0002\u0644\u0639",
    "\u0003\u0002\u0002\u0002\u0645\u0648\u0003\u0002\u0002\u0002\u0646\u0644",
    "\u0003\u0002\u0002\u0002\u0646\u0647\u0003\u0002\u0002\u0002\u0647\u0083",
    "\u0003\u0002\u0002\u0002\u0648\u0646\u0003\u0002\u0002\u0002\u0649\u0655",
    "\u0005\u0086D\u0002\u064a\u064e\u0005\u0120\u0091\u0002\u064b\u064d",
    "\u0007\u0007\u0002\u0002\u064c\u064b\u0003\u0002\u0002\u0002\u064d\u0650",
    "\u0003\u0002\u0002\u0002\u064e\u064c\u0003\u0002\u0002\u0002\u064e\u064f",
    "\u0003\u0002\u0002\u0002\u064f\u0651\u0003\u0002\u0002\u0002\u0650\u064e",
    "\u0003\u0002\u0002\u0002\u0651\u0652\u0005\u0086D\u0002\u0652\u0654",
    "\u0003\u0002\u0002\u0002\u0653\u064a\u0003\u0002\u0002\u0002\u0654\u0657",
    "\u0003\u0002\u0002\u0002\u0655\u0653\u0003\u0002\u0002\u0002\u0655\u0656",
    "\u0003\u0002\u0002\u0002\u0656\u0085\u0003\u0002\u0002\u0002\u0657\u0655",
    "\u0003\u0002\u0002\u0002\u0658\u0663\u0005\u0088E\u0002\u0659\u065d",
    "\u0007%\u0002\u0002\u065a\u065c\u0007\u0007\u0002\u0002\u065b\u065a",
    "\u0003\u0002\u0002\u0002\u065c\u065f\u0003\u0002\u0002\u0002\u065d\u065b",
    "\u0003\u0002\u0002\u0002\u065d\u065e\u0003\u0002\u0002\u0002\u065e\u0660",
    "\u0003\u0002\u0002\u0002\u065f\u065d\u0003\u0002\u0002\u0002\u0660\u0662",
    "\u0005\u0088E\u0002\u0661\u0659\u0003\u0002\u0002\u0002\u0662\u0665",
    "\u0003\u0002\u0002\u0002\u0663\u0661\u0003\u0002\u0002\u0002\u0663\u0664",
    "\u0003\u0002\u0002\u0002\u0664\u0087\u0003\u0002\u0002\u0002\u0665\u0663",
    "\u0003\u0002\u0002\u0002\u0666\u0672\u0005\u008aF\u0002\u0667\u066b",
    "\u0005\u00f0y\u0002\u0668\u066a\u0007\u0007\u0002\u0002\u0669\u0668",
    "\u0003\u0002\u0002\u0002\u066a\u066d\u0003\u0002\u0002\u0002\u066b\u0669",
    "\u0003\u0002\u0002\u0002\u066b\u066c\u0003\u0002\u0002\u0002\u066c\u066e",
    "\u0003\u0002\u0002\u0002\u066d\u066b\u0003\u0002\u0002\u0002\u066e\u066f",
    "\u0005\u008aF\u0002\u066f\u0671\u0003\u0002\u0002\u0002\u0670\u0667",
    "\u0003\u0002\u0002\u0002\u0671\u0674\u0003\u0002\u0002\u0002\u0672\u0670",
    "\u0003\u0002\u0002\u0002\u0672\u0673\u0003\u0002\u0002\u0002\u0673\u0089",
    "\u0003\u0002\u0002\u0002\u0674\u0672\u0003\u0002\u0002\u0002\u0675\u0681",
    "\u0005\u008cG\u0002\u0676\u067a\u0005\u00f2z\u0002\u0677\u0679\u0007",
    "\u0007\u0002\u0002\u0678\u0677\u0003\u0002\u0002\u0002\u0679\u067c\u0003",
    "\u0002\u0002\u0002\u067a\u0678\u0003\u0002\u0002\u0002\u067a\u067b\u0003",
    "\u0002\u0002\u0002\u067b\u067d\u0003\u0002\u0002\u0002\u067c\u067a\u0003",
    "\u0002\u0002\u0002\u067d\u067e\u0005\u008cG\u0002\u067e\u0680\u0003",
    "\u0002\u0002\u0002\u067f\u0676\u0003\u0002\u0002\u0002\u0680\u0683\u0003",
    "\u0002\u0002\u0002\u0681\u067f\u0003\u0002\u0002\u0002\u0681\u0682\u0003",
    "\u0002\u0002\u0002\u0682\u008b\u0003\u0002\u0002\u0002\u0683\u0681\u0003",
    "\u0002\u0002\u0002\u0684\u0690\u0005\u008eH\u0002\u0685\u0687\u0007",
    "\u0007\u0002\u0002\u0686\u0685\u0003\u0002\u0002\u0002\u0687\u068a\u0003",
    "\u0002\u0002\u0002\u0688\u0686\u0003\u0002\u0002\u0002\u0688\u0689\u0003",
    "\u0002\u0002\u0002\u0689\u068b\u0003\u0002\u0002\u0002\u068a\u0688\u0003",
    "\u0002\u0002\u0002\u068b\u068c\u0005\u00f4{\u0002\u068c\u068d\u0005",
    "\u008eH\u0002\u068d\u068f\u0003\u0002\u0002\u0002\u068e\u0688\u0003",
    "\u0002\u0002\u0002\u068f\u0692\u0003\u0002\u0002\u0002\u0690\u068e\u0003",
    "\u0002\u0002\u0002\u0690\u0691\u0003\u0002\u0002\u0002\u0691\u008d\u0003",
    "\u0002\u0002\u0002\u0692\u0690\u0003\u0002\u0002\u0002\u0693\u0695\u0005",
    "\u00f6|\u0002\u0694\u0693\u0003\u0002\u0002\u0002\u0695\u0698\u0003",
    "\u0002\u0002\u0002\u0696\u0694\u0003\u0002\u0002\u0002\u0696\u0697\u0003",
    "\u0002\u0002\u0002\u0697\u0699\u0003\u0002\u0002\u0002\u0698\u0696\u0003",
    "\u0002\u0002\u0002\u0699\u069a\u0005\u0090I\u0002\u069a\u008f\u0003",
    "\u0002\u0002\u0002\u069b\u069e\u0005\u0092J\u0002\u069c\u069e\u0005",
    "\u00e4s\u0002\u069d\u069b\u0003\u0002\u0002\u0002\u069d\u069c\u0003",
    "\u0002\u0002\u0002\u069e\u06a2\u0003\u0002\u0002\u0002\u069f\u06a1\u0005",
    "\u00f8}\u0002\u06a0\u069f\u0003\u0002\u0002\u0002\u06a1\u06a4\u0003",
    "\u0002\u0002\u0002\u06a2\u06a0\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003",
    "\u0002\u0002\u0002\u06a3\u0091\u0003\u0002\u0002\u0002\u06a4\u06a2\u0003",
    "\u0002\u0002\u0002\u06a5\u06b2\u0005\u0094K\u0002\u06a6\u06b2\u0005",
    "\u00a6T\u0002\u06a7\u06b2\u0005\u00b6\\\u0002\u06a8\u06b2\u0005\u00c0",
    "a\u0002\u06a9\u06b2\u0005\u00c2b\u0002\u06aa\u06b2\u0005\u00c4c\u0002",
    "\u06ab\u06b2\u0005\u00d4k\u0002\u06ac\u06b2\u0005\u00bc_\u0002\u06ad",
    "\u06b2\u0005\u00e2r\u0002\u06ae\u06b2\u0005\u00dan\u0002\u06af\u06b2",
    "\u0005\u00be`\u0002\u06b0\u06b2\u0005\u0120\u0091\u0002\u06b1\u06a5",
    "\u0003\u0002\u0002\u0002\u06b1\u06a6\u0003\u0002\u0002\u0002\u06b1\u06a7",
    "\u0003\u0002\u0002\u0002\u06b1\u06a8\u0003\u0002\u0002\u0002\u06b1\u06a9",
    "\u0003\u0002\u0002\u0002\u06b1\u06aa\u0003\u0002\u0002\u0002\u06b1\u06ab",
    "\u0003\u0002\u0002\u0002\u06b1\u06ac\u0003\u0002\u0002\u0002\u06b1\u06ad",
    "\u0003\u0002\u0002\u0002\u06b1\u06ae\u0003\u0002\u0002\u0002\u06b1\u06af",
    "\u0003\u0002\u0002\u0002\u06b1\u06b0\u0003\u0002\u0002\u0002\u06b2\u0093",
    "\u0003\u0002\u0002\u0002\u06b3\u06b4\u0007\u000b\u0002\u0002\u06b4\u06b5",
    "\u0005v<\u0002\u06b5\u06b6\u0007\f\u0002\u0002\u06b6\u0095\u0003\u0002",
    "\u0002\u0002\u06b7\u06b9\u0005\u009eP\u0002\u06b8\u06ba\u0005\u009c",
    "O\u0002\u06b9\u06b8\u0003\u0002\u0002\u0002\u06b9\u06ba\u0003\u0002",
    "\u0002\u0002\u06ba\u06be\u0003\u0002\u0002\u0002\u06bb\u06bd\u0005\u0098",
    "M\u0002\u06bc\u06bb\u0003\u0002\u0002\u0002\u06bd\u06c0\u0003\u0002",
    "\u0002\u0002\u06be\u06bc\u0003\u0002\u0002\u0002\u06be\u06bf\u0003\u0002",
    "\u0002\u0002\u06bf\u06ce\u0003\u0002\u0002\u0002\u06c0\u06be\u0003\u0002",
    "\u0002\u0002\u06c1\u06c5\u0005\u009cO\u0002\u06c2\u06c4\u0005\u0098",
    "M\u0002\u06c3\u06c2\u0003\u0002\u0002\u0002\u06c4\u06c7\u0003\u0002",
    "\u0002\u0002\u06c5\u06c3\u0003\u0002\u0002\u0002\u06c5\u06c6\u0003\u0002",
    "\u0002\u0002\u06c6\u06ce\u0003\u0002\u0002\u0002\u06c7\u06c5\u0003\u0002",
    "\u0002\u0002\u06c8\u06ca\u0005\u0098M\u0002\u06c9\u06c8\u0003\u0002",
    "\u0002\u0002\u06ca\u06cb\u0003\u0002\u0002\u0002\u06cb\u06c9\u0003\u0002",
    "\u0002\u0002\u06cb\u06cc\u0003\u0002\u0002\u0002\u06cc\u06ce\u0003\u0002",
    "\u0002\u0002\u06cd\u06b7\u0003\u0002\u0002\u0002\u06cd\u06c1\u0003\u0002",
    "\u0002\u0002\u06cd\u06c9\u0003\u0002\u0002\u0002\u06ce\u0097\u0003\u0002",
    "\u0002\u0002\u06cf\u06d1\u0005\u011c\u008f\u0002\u06d0\u06cf\u0003\u0002",
    "\u0002\u0002\u06d1\u06d4\u0003\u0002\u0002\u0002\u06d2\u06d0\u0003\u0002",
    "\u0002\u0002\u06d2\u06d3\u0003\u0002\u0002\u0002\u06d3\u06d6\u0003\u0002",
    "\u0002\u0002\u06d4\u06d2\u0003\u0002\u0002\u0002\u06d5\u06d7\u0007\u0090",
    "\u0002\u0002\u06d6\u06d5\u0003\u0002\u0002\u0002\u06d6\u06d7\u0003\u0002",
    "\u0002\u0002\u06d7\u06db\u0003\u0002\u0002\u0002\u06d8\u06da\u0007\u0007",
    "\u0002\u0002\u06d9\u06d8\u0003\u0002\u0002\u0002\u06da\u06dd\u0003\u0002",
    "\u0002\u0002\u06db\u06d9\u0003\u0002\u0002\u0002\u06db\u06dc\u0003\u0002",
    "\u0002\u0002\u06dc\u06de\u0003\u0002\u0002\u0002\u06dd\u06db\u0003\u0002",
    "\u0002\u0002\u06de\u06df\u0005\u00b6\\\u0002\u06df\u0099\u0003\u0002",
    "\u0002\u0002\u06e0\u06e9\u0007\r\u0002\u0002\u06e1\u06e6\u0005v<\u0002",
    "\u06e2\u06e3\u0007\n\u0002\u0002\u06e3\u06e5\u0005v<\u0002\u06e4\u06e2",
    "\u0003\u0002\u0002\u0002\u06e5\u06e8\u0003\u0002\u0002\u0002\u06e6\u06e4",
    "\u0003\u0002\u0002\u0002\u06e6\u06e7\u0003\u0002\u0002\u0002\u06e7\u06ea",
    "\u0003\u0002\u0002\u0002\u06e8\u06e6\u0003\u0002\u0002\u0002\u06e9\u06e1",
    "\u0003\u0002\u0002\u0002\u06e9\u06ea\u0003\u0002\u0002\u0002\u06ea\u06eb",
    "\u0003\u0002\u0002\u0002\u06eb\u06ec\u0007\u000e\u0002\u0002\u06ec\u009b",
    "\u0003\u0002\u0002\u0002\u06ed\u06f6\u0007\u000b\u0002\u0002\u06ee\u06f3",
    "\u0005\u00a4S\u0002\u06ef\u06f0\u0007\n\u0002\u0002\u06f0\u06f2\u0005",
    "\u00a4S\u0002\u06f1\u06ef\u0003\u0002\u0002\u0002\u06f2\u06f5\u0003",
    "\u0002\u0002\u0002\u06f3\u06f1\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003",
    "\u0002\u0002\u0002\u06f4\u06f7\u0003\u0002\u0002\u0002\u06f5\u06f3\u0003",
    "\u0002\u0002\u0002\u06f6\u06ee\u0003\u0002\u0002\u0002\u06f6\u06f7\u0003",
    "\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06f9\u0007",
    "\f\u0002\u0002\u06f9\u009d\u0003\u0002\u0002\u0002\u06fa\u06fe\u0007",
    "-\u0002\u0002\u06fb\u06fd\u0007\u0007\u0002\u0002\u06fc\u06fb\u0003",
    "\u0002\u0002\u0002\u06fd\u0700\u0003\u0002\u0002\u0002\u06fe\u06fc\u0003",
    "\u0002\u0002\u0002\u06fe\u06ff\u0003\u0002\u0002\u0002\u06ff\u0701\u0003",
    "\u0002\u0002\u0002\u0700\u06fe\u0003\u0002\u0002\u0002\u0701\u070c\u0005",
    "\u00a0Q\u0002\u0702\u0704\u0007\u0007\u0002\u0002\u0703\u0702\u0003",
    "\u0002\u0002\u0002\u0704\u0707\u0003\u0002\u0002\u0002\u0705\u0703\u0003",
    "\u0002\u0002\u0002\u0705\u0706\u0003\u0002\u0002\u0002\u0706\u0708\u0003",
    "\u0002\u0002\u0002\u0707\u0705\u0003\u0002\u0002\u0002\u0708\u0709\u0007",
    "\n\u0002\u0002\u0709\u070b\u0005\u00a0Q\u0002\u070a\u0705\u0003\u0002",
    "\u0002\u0002\u070b\u070e\u0003\u0002\u0002\u0002\u070c\u070a\u0003\u0002",
    "\u0002\u0002\u070c\u070d\u0003\u0002\u0002\u0002\u070d\u0712\u0003\u0002",
    "\u0002\u0002\u070e\u070c\u0003\u0002\u0002\u0002\u070f\u0711\u0007\u0007",
    "\u0002\u0002\u0710\u070f\u0003\u0002\u0002\u0002\u0711\u0714\u0003\u0002",
    "\u0002\u0002\u0712\u0710\u0003\u0002\u0002\u0002\u0712\u0713\u0003\u0002",
    "\u0002\u0002\u0713\u0715\u0003\u0002\u0002\u0002\u0714\u0712\u0003\u0002",
    "\u0002\u0002\u0715\u0716\u0007.\u0002\u0002\u0716\u009f\u0003\u0002",
    "\u0002\u0002\u0717\u0719\u0005\u00a2R\u0002\u0718\u0717\u0003\u0002",
    "\u0002\u0002\u0718\u0719\u0003\u0002\u0002\u0002\u0719\u071a\u0003\u0002",
    "\u0002\u0002\u071a\u071d\u0005T+\u0002\u071b\u071d\u0007\u0011\u0002",
    "\u0002\u071c\u0718\u0003\u0002\u0002\u0002\u071c\u071b\u0003\u0002\u0002",
    "\u0002\u071d\u00a1\u0003\u0002\u0002\u0002\u071e\u0720\u0005\u0106\u0084",
    "\u0002\u071f\u071e\u0003\u0002\u0002\u0002\u0720\u0721\u0003\u0002\u0002",
    "\u0002\u0721\u071f\u0003\u0002\u0002\u0002\u0721\u0722\u0003\u0002\u0002",
    "\u0002\u0722\u00a3\u0003\u0002\u0002\u0002\u0723\u0727\u0005\u0120\u0091",
    "\u0002\u0724\u0726\u0007\u0007\u0002\u0002\u0725\u0724\u0003\u0002\u0002",
    "\u0002\u0726\u0729\u0003\u0002\u0002\u0002\u0727\u0725\u0003\u0002\u0002",
    "\u0002\u0727\u0728\u0003\u0002\u0002\u0002\u0728\u072a\u0003\u0002\u0002",
    "\u0002\u0729\u0727\u0003\u0002\u0002\u0002\u072a\u072e\u0007\u001d\u0002",
    "\u0002\u072b\u072d\u0007\u0007\u0002\u0002\u072c\u072b\u0003\u0002\u0002",
    "\u0002\u072d\u0730\u0003\u0002\u0002\u0002\u072e\u072c\u0003\u0002\u0002",
    "\u0002\u072e\u072f\u0003\u0002\u0002\u0002\u072f\u0732\u0003\u0002\u0002",
    "\u0002\u0730\u072e\u0003\u0002\u0002\u0002\u0731\u0723\u0003\u0002\u0002",
    "\u0002\u0731\u0732\u0003\u0002\u0002\u0002\u0732\u0734\u0003\u0002\u0002",
    "\u0002\u0733\u0735\u0007\u0011\u0002\u0002\u0734\u0733\u0003\u0002\u0002",
    "\u0002\u0734\u0735\u0003\u0002\u0002\u0002\u0735\u0739\u0003\u0002\u0002",
    "\u0002\u0736\u0738\u0007\u0007\u0002\u0002\u0737\u0736\u0003\u0002\u0002",
    "\u0002\u0738\u073b\u0003\u0002\u0002\u0002\u0739\u0737\u0003\u0002\u0002",
    "\u0002\u0739\u073a\u0003\u0002\u0002\u0002\u073a\u073c\u0003\u0002\u0002",
    "\u0002\u073b\u0739\u0003\u0002\u0002\u0002\u073c\u073d\u0005v<\u0002",
    "\u073d\u00a5\u0003\u0002\u0002\u0002\u073e\u0748\u0007\u008c\u0002\u0002",
    "\u073f\u0748\u0007\u0089\u0002\u0002\u0740\u0748\u0005\u00a8U\u0002",
    "\u0741\u0748\u0007\u008a\u0002\u0002\u0742\u0748\u0007\u008b\u0002\u0002",
    "\u0743\u0748\u0007\u0092\u0002\u0002\u0744\u0748\u0007\u0085\u0002\u0002",
    "\u0745\u0748\u0007\u008d\u0002\u0002\u0746\u0748\u0007\u0088\u0002\u0002",
    "\u0747\u073e\u0003\u0002\u0002\u0002\u0747\u073f\u0003\u0002\u0002\u0002",
    "\u0747\u0740\u0003\u0002\u0002\u0002\u0747\u0741\u0003\u0002\u0002\u0002",
    "\u0747\u0742\u0003\u0002\u0002\u0002\u0747\u0743\u0003\u0002\u0002\u0002",
    "\u0747\u0744\u0003\u0002\u0002\u0002\u0747\u0745\u0003\u0002\u0002\u0002",
    "\u0747\u0746\u0003\u0002\u0002\u0002\u0748\u00a7\u0003\u0002\u0002\u0002",
    "\u0749\u074c\u0005\u00aaV\u0002\u074a\u074c\u0005\u00acW\u0002\u074b",
    "\u0749\u0003\u0002\u0002\u0002\u074b\u074a\u0003\u0002\u0002\u0002\u074c",
    "\u00a9\u0003\u0002\u0002\u0002\u074d\u0752\u0007\u0083\u0002\u0002\u074e",
    "\u0751\u0005\u00aeX\u0002\u074f\u0751\u0005\u00b0Y\u0002\u0750\u074e",
    "\u0003\u0002\u0002\u0002\u0750\u074f\u0003\u0002\u0002\u0002\u0751\u0754",
    "\u0003\u0002\u0002\u0002\u0752\u0750\u0003\u0002\u0002\u0002\u0752\u0753",
    "\u0003\u0002\u0002\u0002\u0753\u0755\u0003\u0002\u0002\u0002\u0754\u0752",
    "\u0003\u0002\u0002\u0002\u0755\u0756\u0007\u009d\u0002\u0002\u0756\u00ab",
    "\u0003\u0002\u0002\u0002\u0757\u075e\u0007\u0084\u0002\u0002\u0758\u075d",
    "\u0005\u00b2Z\u0002\u0759\u075d\u0005\u00b4[\u0002\u075a\u075d\u0005",
    "\u00aaV\u0002\u075b\u075d\u0007\u00a3\u0002\u0002\u075c\u0758\u0003",
    "\u0002\u0002\u0002\u075c\u0759\u0003\u0002\u0002\u0002\u075c\u075a\u0003",
    "\u0002\u0002\u0002\u075c\u075b\u0003\u0002\u0002\u0002\u075d\u0760\u0003",
    "\u0002\u0002\u0002\u075e\u075c\u0003\u0002\u0002\u0002\u075e\u075f\u0003",
    "\u0002\u0002\u0002\u075f\u0761\u0003\u0002\u0002\u0002\u0760\u075e\u0003",
    "\u0002\u0002\u0002\u0761\u0762\u0007\u00a2\u0002\u0002\u0762\u00ad\u0003",
    "\u0002\u0002\u0002\u0763\u0764\t\u0005\u0002\u0002\u0764\u00af\u0003",
    "\u0002\u0002\u0002\u0765\u0766\u0007\u00a1\u0002\u0002\u0766\u0767\u0005",
    "v<\u0002\u0767\u0768\u0007\u0010\u0002\u0002\u0768\u00b1\u0003\u0002",
    "\u0002\u0002\u0769\u076a\t\u0006\u0002\u0002\u076a\u00b3\u0003\u0002",
    "\u0002\u0002\u076b\u076c\u0007\u00a7\u0002\u0002\u076c\u076d\u0005v",
    "<\u0002\u076d\u076e\u0007\u0010\u0002\u0002\u076e\u00b5\u0003\u0002",
    "\u0002\u0002\u076f\u0771\u0005\u0114\u008b\u0002\u0770\u076f\u0003\u0002",
    "\u0002\u0002\u0771\u0774\u0003\u0002\u0002\u0002\u0772\u0770\u0003\u0002",
    "\u0002\u0002\u0772\u0773\u0003\u0002\u0002\u0002\u0773\u07a3\u0003\u0002",
    "\u0002\u0002\u0774\u0772\u0003\u0002\u0002\u0002\u0775\u0779\u0007\u000f",
    "\u0002\u0002\u0776\u0778\u0007\u0007\u0002\u0002\u0777\u0776\u0003\u0002",
    "\u0002\u0002\u0778\u077b\u0003\u0002\u0002\u0002\u0779\u0777\u0003\u0002",
    "\u0002\u0002\u0779\u077a\u0003\u0002\u0002\u0002\u077a\u077c\u0003\u0002",
    "\u0002\u0002\u077b\u0779\u0003\u0002\u0002\u0002\u077c\u0780\u0005n",
    "8\u0002\u077d\u077f\u0007\u0007\u0002\u0002\u077e\u077d\u0003\u0002",
    "\u0002\u0002\u077f\u0782\u0003\u0002\u0002\u0002\u0780\u077e\u0003\u0002",
    "\u0002\u0002\u0780\u0781\u0003\u0002\u0002\u0002\u0781\u0783\u0003\u0002",
    "\u0002\u0002\u0782\u0780\u0003\u0002\u0002\u0002\u0783\u0784\u0007\u0010",
    "\u0002\u0002\u0784\u07a4\u0003\u0002\u0002\u0002\u0785\u0789\u0007\u000f",
    "\u0002\u0002\u0786\u0788\u0007\u0007\u0002\u0002\u0787\u0786\u0003\u0002",
    "\u0002\u0002\u0788\u078b\u0003\u0002\u0002\u0002\u0789\u0787\u0003\u0002",
    "\u0002\u0002\u0789\u078a\u0003\u0002\u0002\u0002\u078a\u078c\u0003\u0002",
    "\u0002\u0002\u078b\u0789\u0003\u0002\u0002\u0002\u078c\u0790\u0005\u00b8",
    "]\u0002\u078d\u078f\u0007\u0007\u0002\u0002\u078e\u078d\u0003\u0002",
    "\u0002\u0002\u078f\u0792\u0003\u0002\u0002\u0002\u0790\u078e\u0003\u0002",
    "\u0002\u0002\u0790\u0791\u0003\u0002\u0002\u0002\u0791\u0793\u0003\u0002",
    "\u0002\u0002\u0792\u0790\u0003\u0002\u0002\u0002\u0793\u0797\u0007#",
    "\u0002\u0002\u0794\u0796\u0007\u0007\u0002\u0002\u0795\u0794\u0003\u0002",
    "\u0002\u0002\u0796\u0799\u0003\u0002\u0002\u0002\u0797\u0795\u0003\u0002",
    "\u0002\u0002\u0797\u0798\u0003\u0002\u0002\u0002\u0798\u079a\u0003\u0002",
    "\u0002\u0002\u0799\u0797\u0003\u0002\u0002\u0002\u079a\u079e\u0005n",
    "8\u0002\u079b\u079d\u0007\u0007\u0002\u0002\u079c\u079b\u0003\u0002",
    "\u0002\u0002\u079d\u07a0\u0003\u0002\u0002\u0002\u079e\u079c\u0003\u0002",
    "\u0002\u0002\u079e\u079f\u0003\u0002\u0002\u0002\u079f\u07a1\u0003\u0002",
    "\u0002\u0002\u07a0\u079e\u0003\u0002\u0002\u0002\u07a1\u07a2\u0007\u0010",
    "\u0002\u0002\u07a2\u07a4\u0003\u0002\u0002\u0002\u07a3\u0775\u0003\u0002",
    "\u0002\u0002\u07a3\u0785\u0003\u0002\u0002\u0002\u07a4\u00b7\u0003\u0002",
    "\u0002\u0002\u07a5\u07a7\u0005\u00ba^\u0002\u07a6\u07a5\u0003\u0002",
    "\u0002\u0002\u07a6\u07a7\u0003\u0002\u0002\u0002\u07a7\u07b8\u0003\u0002",
    "\u0002\u0002\u07a8\u07aa\u0007\u0007\u0002\u0002\u07a9\u07a8\u0003\u0002",
    "\u0002\u0002\u07aa\u07ad\u0003\u0002\u0002\u0002\u07ab\u07a9\u0003\u0002",
    "\u0002\u0002\u07ab\u07ac\u0003\u0002\u0002\u0002\u07ac\u07ae\u0003\u0002",
    "\u0002\u0002\u07ad\u07ab\u0003\u0002\u0002\u0002\u07ae\u07b2\u0007\n",
    "\u0002\u0002\u07af\u07b1\u0007\u0007\u0002\u0002\u07b0\u07af\u0003\u0002",
    "\u0002\u0002\u07b1\u07b4\u0003\u0002\u0002\u0002\u07b2\u07b0\u0003\u0002",
    "\u0002\u0002\u07b2\u07b3\u0003\u0002\u0002\u0002\u07b3\u07b5\u0003\u0002",
    "\u0002\u0002\u07b4\u07b2\u0003\u0002\u0002\u0002\u07b5\u07b7\u0005\u00ba",
    "^\u0002\u07b6\u07ab\u0003\u0002\u0002\u0002\u07b7\u07ba\u0003\u0002",
    "\u0002\u0002\u07b8\u07b6\u0003\u0002\u0002\u0002\u07b8\u07b9\u0003\u0002",
    "\u0002\u0002\u07b9\u00b9\u0003\u0002\u0002\u0002\u07ba\u07b8\u0003\u0002",
    "\u0002\u0002\u07bb\u07ce\u0005H%\u0002\u07bc\u07cb\u0005F$\u0002\u07bd",
    "\u07bf\u0007\u0007\u0002\u0002\u07be\u07bd\u0003\u0002\u0002\u0002\u07bf",
    "\u07c2\u0003\u0002\u0002\u0002\u07c0\u07be\u0003\u0002\u0002\u0002\u07c0",
    "\u07c1\u0003\u0002\u0002\u0002\u07c1\u07c3\u0003\u0002\u0002\u0002\u07c2",
    "\u07c0\u0003\u0002\u0002\u0002\u07c3\u07c7\u0007\u001b\u0002\u0002\u07c4",
    "\u07c6\u0007\u0007\u0002\u0002\u07c5\u07c4\u0003\u0002\u0002\u0002\u07c6",
    "\u07c9\u0003\u0002\u0002\u0002\u07c7\u07c5\u0003\u0002\u0002\u0002\u07c7",
    "\u07c8\u0003\u0002\u0002\u0002\u07c8\u07ca\u0003\u0002\u0002\u0002\u07c9",
    "\u07c7\u0003\u0002\u0002\u0002\u07ca\u07cc\u0005T+\u0002\u07cb\u07c0",
    "\u0003\u0002\u0002\u0002\u07cb\u07cc\u0003\u0002\u0002\u0002\u07cc\u07ce",
    "\u0003\u0002\u0002\u0002\u07cd\u07bb\u0003\u0002\u0002\u0002\u07cd\u07bc",
    "\u0003\u0002\u0002\u0002\u07ce\u00bb\u0003\u0002\u0002\u0002\u07cf\u07de",
    "\u0007@\u0002\u0002\u07d0\u07d2\u0007\u0007\u0002\u0002\u07d1\u07d0",
    "\u0003\u0002\u0002\u0002\u07d2\u07d5\u0003\u0002\u0002\u0002\u07d3\u07d1",
    "\u0003\u0002\u0002\u0002\u07d3\u07d4\u0003\u0002\u0002\u0002\u07d4\u07d6",
    "\u0003\u0002\u0002\u0002\u07d5\u07d3\u0003\u0002\u0002\u0002\u07d6\u07da",
    "\u0007\u001b\u0002\u0002\u07d7\u07d9\u0007\u0007\u0002\u0002\u07d8\u07d7",
    "\u0003\u0002\u0002\u0002\u07d9\u07dc\u0003\u0002\u0002\u0002\u07da\u07d8",
    "\u0003\u0002\u0002\u0002\u07da\u07db\u0003\u0002\u0002\u0002\u07db\u07dd",
    "\u0003\u0002\u0002\u0002\u07dc\u07da\u0003\u0002\u0002\u0002\u07dd\u07df",
    "\u0005\u001e\u0010\u0002\u07de\u07d3\u0003\u0002\u0002\u0002\u07de\u07df",
    "\u0003\u0002\u0002\u0002\u07df\u07e3\u0003\u0002\u0002\u0002\u07e0\u07e2",
    "\u0007\u0007\u0002\u0002\u07e1\u07e0\u0003\u0002\u0002\u0002\u07e2\u07e5",
    "\u0003\u0002\u0002\u0002\u07e3\u07e1\u0003\u0002\u0002\u0002\u07e3\u07e4",
    "\u0003\u0002\u0002\u0002\u07e4\u07e6\u0003\u0002\u0002\u0002\u07e5\u07e3",
    "\u0003\u0002\u0002\u0002\u07e6\u07e7\u0005&\u0014\u0002\u07e7\u00bd",
    "\u0003\u0002\u0002\u0002\u07e8\u07ea\u0007\r\u0002\u0002\u07e9\u07eb",
    "\u0005v<\u0002\u07ea\u07e9\u0003\u0002\u0002\u0002\u07ea\u07eb\u0003",
    "\u0002\u0002\u0002\u07eb\u07f0\u0003\u0002\u0002\u0002\u07ec\u07ed\u0007",
    "\n\u0002\u0002\u07ed\u07ef\u0005v<\u0002\u07ee\u07ec\u0003\u0002\u0002",
    "\u0002\u07ef\u07f2\u0003\u0002\u0002\u0002\u07f0\u07ee\u0003\u0002\u0002",
    "\u0002\u07f0\u07f1\u0003\u0002\u0002\u0002\u07f1\u07f3\u0003\u0002\u0002",
    "\u0002\u07f2\u07f0\u0003\u0002\u0002\u0002\u07f3\u07f4\u0007\u000e\u0002",
    "\u0002\u07f4\u00bf\u0003\u0002\u0002\u0002\u07f5\u07f7\u0007H\u0002",
    "\u0002\u07f6\u07f8\u0007\u008f\u0002\u0002\u07f7\u07f6\u0003\u0002\u0002",
    "\u0002\u07f7\u07f8\u0003\u0002\u0002\u0002\u07f8\u00c1\u0003\u0002\u0002",
    "\u0002\u07f9\u080a\u0007I\u0002\u0002\u07fa\u07fe\u0007-\u0002\u0002",
    "\u07fb\u07fd\u0007\u0007\u0002\u0002\u07fc\u07fb\u0003\u0002\u0002\u0002",
    "\u07fd\u0800\u0003\u0002\u0002\u0002\u07fe\u07fc\u0003\u0002\u0002\u0002",
    "\u07fe\u07ff\u0003\u0002\u0002\u0002\u07ff\u0801\u0003\u0002\u0002\u0002",
    "\u0800\u07fe\u0003\u0002\u0002\u0002\u0801\u0805\u0005T+\u0002\u0802",
    "\u0804\u0007\u0007\u0002\u0002\u0803\u0802\u0003\u0002\u0002\u0002\u0804",
    "\u0807\u0003\u0002\u0002\u0002\u0805\u0803\u0003\u0002\u0002\u0002\u0805",
    "\u0806\u0003\u0002\u0002\u0002\u0806\u0808\u0003\u0002\u0002\u0002\u0807",
    "\u0805\u0003\u0002\u0002\u0002\u0808\u0809\u0007.\u0002\u0002\u0809",
    "\u080b\u0003\u0002\u0002\u0002\u080a\u07fa\u0003\u0002\u0002\u0002\u080a",
    "\u080b\u0003\u0002\u0002\u0002\u080b\u080d\u0003\u0002\u0002\u0002\u080c",
    "\u080e\u0007\u008f\u0002\u0002\u080d\u080c\u0003\u0002\u0002\u0002\u080d",
    "\u080e\u0003\u0002\u0002\u0002\u080e\u00c3\u0003\u0002\u0002\u0002\u080f",
    "\u0812\u0005\u00c6d\u0002\u0810\u0812\u0005\u00caf\u0002\u0811\u080f",
    "\u0003\u0002\u0002\u0002\u0811\u0810\u0003\u0002\u0002\u0002\u0812\u00c5",
    "\u0003\u0002\u0002\u0002\u0813\u0817\u0007L\u0002\u0002\u0814\u0816",
    "\u0007\u0007\u0002\u0002\u0815\u0814\u0003\u0002\u0002\u0002\u0816\u0819",
    "\u0003\u0002\u0002\u0002\u0817\u0815\u0003\u0002\u0002\u0002\u0817\u0818",
    "\u0003\u0002\u0002\u0002\u0818\u081a\u0003\u0002\u0002\u0002\u0819\u0817",
    "\u0003\u0002\u0002\u0002\u081a\u081b\u0007\u000b\u0002\u0002\u081b\u081c",
    "\u0005v<\u0002\u081c\u0820\u0007\f\u0002\u0002\u081d\u081f\u0007\u0007",
    "\u0002\u0002\u081e\u081d\u0003\u0002\u0002\u0002\u081f\u0822\u0003\u0002",
    "\u0002\u0002\u0820\u081e\u0003\u0002\u0002\u0002\u0820\u0821\u0003\u0002",
    "\u0002\u0002\u0821\u0824\u0003\u0002\u0002\u0002\u0822\u0820\u0003\u0002",
    "\u0002\u0002\u0823\u0825\u0005\u00c8e\u0002\u0824\u0823\u0003\u0002",
    "\u0002\u0002\u0824\u0825\u0003\u0002\u0002\u0002\u0825\u0827\u0003\u0002",
    "\u0002\u0002\u0826\u0828\u0007\u001c\u0002\u0002\u0827\u0826\u0003\u0002",
    "\u0002\u0002\u0827\u0828\u0003\u0002\u0002\u0002\u0828\u0839\u0003\u0002",
    "\u0002\u0002\u0829\u082b\u0007\u0007\u0002\u0002\u082a\u0829\u0003\u0002",
    "\u0002\u0002\u082b\u082e\u0003\u0002\u0002\u0002\u082c\u082a\u0003\u0002",
    "\u0002\u0002\u082c\u082d\u0003\u0002\u0002\u0002\u082d\u082f\u0003\u0002",
    "\u0002\u0002\u082e\u082c\u0003\u0002\u0002\u0002\u082f\u0833\u0007M",
    "\u0002\u0002\u0830\u0832\u0007\u0007\u0002\u0002\u0831\u0830\u0003\u0002",
    "\u0002\u0002\u0832\u0835\u0003\u0002\u0002\u0002\u0833\u0831\u0003\u0002",
    "\u0002\u0002\u0833\u0834\u0003\u0002\u0002\u0002\u0834\u0837\u0003\u0002",
    "\u0002\u0002\u0835\u0833\u0003\u0002\u0002\u0002\u0836\u0838\u0005\u00c8",
    "e\u0002\u0837\u0836\u0003\u0002\u0002\u0002\u0837\u0838\u0003\u0002",
    "\u0002\u0002\u0838\u083a\u0003\u0002\u0002\u0002\u0839\u082c\u0003\u0002",
    "\u0002\u0002\u0839\u083a\u0003\u0002\u0002\u0002\u083a\u00c7\u0003\u0002",
    "\u0002\u0002\u083b\u083e\u0005l7\u0002\u083c\u083e\u0005v<\u0002\u083d",
    "\u083b\u0003\u0002\u0002\u0002\u083d\u083c\u0003\u0002\u0002\u0002\u083e",
    "\u00c9\u0003\u0002\u0002\u0002\u083f\u0843\u0007N\u0002\u0002\u0840",
    "\u0842\u0007\u0007\u0002\u0002\u0841\u0840\u0003\u0002\u0002\u0002\u0842",
    "\u0845\u0003\u0002\u0002\u0002\u0843\u0841\u0003\u0002\u0002\u0002\u0843",
    "\u0844\u0003\u0002\u0002\u0002\u0844\u084a\u0003\u0002\u0002\u0002\u0845",
    "\u0843\u0003\u0002\u0002\u0002\u0846\u0847\u0007\u000b\u0002\u0002\u0847",
    "\u0848\u0005v<\u0002\u0848\u0849\u0007\f\u0002\u0002\u0849\u084b\u0003",
    "\u0002\u0002\u0002\u084a\u0846\u0003\u0002\u0002\u0002\u084a\u084b\u0003",
    "\u0002\u0002\u0002\u084b\u084f\u0003\u0002\u0002\u0002\u084c\u084e\u0007",
    "\u0007\u0002\u0002\u084d\u084c\u0003\u0002\u0002\u0002\u084e\u0851\u0003",
    "\u0002\u0002\u0002\u084f\u084d\u0003\u0002\u0002\u0002\u084f\u0850\u0003",
    "\u0002\u0002\u0002\u0850\u0852\u0003\u0002\u0002\u0002\u0851\u084f\u0003",
    "\u0002\u0002\u0002\u0852\u0856\u0007\u000f\u0002\u0002\u0853\u0855\u0007",
    "\u0007\u0002\u0002\u0854\u0853\u0003\u0002\u0002\u0002\u0855\u0858\u0003",
    "\u0002\u0002\u0002\u0856\u0854\u0003\u0002\u0002\u0002\u0856\u0857\u0003",
    "\u0002\u0002\u0002\u0857\u0862\u0003\u0002\u0002\u0002\u0858\u0856\u0003",
    "\u0002\u0002\u0002\u0859\u085d\u0005\u00ccg\u0002\u085a\u085c\u0007",
    "\u0007\u0002\u0002\u085b\u085a\u0003\u0002\u0002\u0002\u085c\u085f\u0003",
    "\u0002\u0002\u0002\u085d\u085b\u0003\u0002\u0002\u0002\u085d\u085e\u0003",
    "\u0002\u0002\u0002\u085e\u0861\u0003\u0002\u0002\u0002\u085f\u085d\u0003",
    "\u0002\u0002\u0002\u0860\u0859\u0003\u0002\u0002\u0002\u0861\u0864\u0003",
    "\u0002\u0002\u0002\u0862\u0860\u0003\u0002\u0002\u0002\u0862\u0863\u0003",
    "\u0002\u0002\u0002\u0863\u0868\u0003\u0002\u0002\u0002\u0864\u0862\u0003",
    "\u0002\u0002\u0002\u0865\u0867\u0007\u0007\u0002\u0002\u0866\u0865\u0003",
    "\u0002\u0002\u0002\u0867\u086a\u0003\u0002\u0002\u0002\u0868\u0866\u0003",
    "\u0002\u0002\u0002\u0868\u0869\u0003\u0002\u0002\u0002\u0869\u086b\u0003",
    "\u0002\u0002\u0002\u086a\u0868\u0003\u0002\u0002\u0002\u086b\u086c\u0007",
    "\u0010\u0002\u0002\u086c\u00cb\u0003\u0002\u0002\u0002\u086d\u087e\u0005",
    "\u00ceh\u0002\u086e\u0870\u0007\u0007\u0002\u0002\u086f\u086e\u0003",
    "\u0002\u0002\u0002\u0870\u0873\u0003\u0002\u0002\u0002\u0871\u086f\u0003",
    "\u0002\u0002\u0002\u0871\u0872\u0003\u0002\u0002\u0002\u0872\u0874\u0003",
    "\u0002\u0002\u0002\u0873\u0871\u0003\u0002\u0002\u0002\u0874\u0878\u0007",
    "\n\u0002\u0002\u0875\u0877\u0007\u0007\u0002\u0002\u0876\u0875\u0003",
    "\u0002\u0002\u0002\u0877\u087a\u0003\u0002\u0002\u0002\u0878\u0876\u0003",
    "\u0002\u0002\u0002\u0878\u0879\u0003\u0002\u0002\u0002\u0879\u087b\u0003",
    "\u0002\u0002\u0002\u087a\u0878\u0003\u0002\u0002\u0002\u087b\u087d\u0005",
    "\u00ceh\u0002\u087c\u0871\u0003\u0002\u0002\u0002\u087d\u0880\u0003",
    "\u0002\u0002\u0002\u087e\u087c\u0003\u0002\u0002\u0002\u087e\u087f\u0003",
    "\u0002\u0002\u0002\u087f\u0884\u0003\u0002\u0002\u0002\u0880\u087e\u0003",
    "\u0002\u0002\u0002\u0881\u0883\u0007\u0007\u0002\u0002\u0882\u0881\u0003",
    "\u0002\u0002\u0002\u0883\u0886\u0003\u0002\u0002\u0002\u0884\u0882\u0003",
    "\u0002\u0002\u0002\u0884\u0885\u0003\u0002\u0002\u0002\u0885\u0887\u0003",
    "\u0002\u0002\u0002\u0886\u0884\u0003\u0002\u0002\u0002\u0887\u088b\u0007",
    "#\u0002\u0002\u0888\u088a\u0007\u0007\u0002\u0002\u0889\u0888\u0003",
    "\u0002\u0002\u0002\u088a\u088d\u0003\u0002\u0002\u0002\u088b\u0889\u0003",
    "\u0002\u0002\u0002\u088b\u088c\u0003\u0002\u0002\u0002\u088c\u088e\u0003",
    "\u0002\u0002\u0002\u088d\u088b\u0003\u0002\u0002\u0002\u088e\u0890\u0005",
    "\u00c8e\u0002\u088f\u0891\u0005\u0122\u0092\u0002\u0890\u088f\u0003",
    "\u0002\u0002\u0002\u0890\u0891\u0003\u0002\u0002\u0002\u0891\u08a2\u0003",
    "\u0002\u0002\u0002\u0892\u0896\u0007M\u0002\u0002\u0893\u0895\u0007",
    "\u0007\u0002\u0002\u0894\u0893\u0003\u0002\u0002\u0002\u0895\u0898\u0003",
    "\u0002\u0002\u0002\u0896\u0894\u0003\u0002\u0002\u0002\u0896\u0897\u0003",
    "\u0002\u0002\u0002\u0897\u0899\u0003\u0002\u0002\u0002\u0898\u0896\u0003",
    "\u0002\u0002\u0002\u0899\u089d\u0007#\u0002\u0002\u089a\u089c\u0007",
    "\u0007\u0002\u0002\u089b\u089a\u0003\u0002\u0002\u0002\u089c\u089f\u0003",
    "\u0002\u0002\u0002\u089d\u089b\u0003\u0002\u0002\u0002\u089d\u089e\u0003",
    "\u0002\u0002\u0002\u089e\u08a0\u0003\u0002\u0002\u0002\u089f\u089d\u0003",
    "\u0002\u0002\u0002\u08a0\u08a2\u0005\u00c8e\u0002\u08a1\u086d\u0003",
    "\u0002\u0002\u0002\u08a1\u0892\u0003\u0002\u0002\u0002\u08a2\u00cd\u0003",
    "\u0002\u0002\u0002\u08a3\u08a7\u0005v<\u0002\u08a4\u08a7\u0005\u00d0",
    "i\u0002\u08a5\u08a7\u0005\u00d2j\u0002\u08a6\u08a3\u0003\u0002\u0002",
    "\u0002\u08a6\u08a4\u0003\u0002\u0002\u0002\u08a6\u08a5\u0003\u0002\u0002",
    "\u0002\u08a7\u00cf\u0003\u0002\u0002\u0002\u08a8\u08ac\u0005\u00ecw",
    "\u0002\u08a9\u08ab\u0007\u0007\u0002\u0002\u08aa\u08a9\u0003\u0002\u0002",
    "\u0002\u08ab\u08ae\u0003\u0002\u0002\u0002\u08ac\u08aa\u0003\u0002\u0002",
    "\u0002\u08ac\u08ad\u0003\u0002\u0002\u0002\u08ad\u08af\u0003\u0002\u0002",
    "\u0002\u08ae\u08ac\u0003\u0002\u0002\u0002\u08af\u08b0\u0005v<\u0002",
    "\u08b0\u00d1\u0003\u0002\u0002\u0002\u08b1\u08b5\u0005\u00eex\u0002",
    "\u08b2\u08b4\u0007\u0007\u0002\u0002\u08b3\u08b2\u0003\u0002\u0002\u0002",
    "\u08b4\u08b7\u0003\u0002\u0002\u0002\u08b5\u08b3\u0003\u0002\u0002\u0002",
    "\u08b5\u08b6\u0003\u0002\u0002\u0002\u08b6\u08b8\u0003\u0002\u0002\u0002",
    "\u08b7\u08b5\u0003\u0002\u0002\u0002\u08b8\u08b9\u0005T+\u0002\u08b9",
    "\u00d3\u0003\u0002\u0002\u0002\u08ba\u08be\u0007O\u0002\u0002\u08bb",
    "\u08bd\u0007\u0007\u0002\u0002\u08bc\u08bb\u0003\u0002\u0002\u0002\u08bd",
    "\u08c0\u0003\u0002\u0002\u0002\u08be\u08bc\u0003\u0002\u0002\u0002\u08be",
    "\u08bf\u0003\u0002\u0002\u0002\u08bf\u08c1\u0003\u0002\u0002\u0002\u08c0",
    "\u08be\u0003\u0002\u0002\u0002\u08c1\u08cb\u0005l7\u0002\u08c2\u08c4",
    "\u0007\u0007\u0002\u0002\u08c3\u08c2\u0003\u0002\u0002\u0002\u08c4\u08c7",
    "\u0003\u0002\u0002\u0002\u08c5\u08c3\u0003\u0002\u0002\u0002\u08c5\u08c6",
    "\u0003\u0002\u0002\u0002\u08c6\u08c8\u0003\u0002\u0002\u0002\u08c7\u08c5",
    "\u0003\u0002\u0002\u0002\u08c8\u08ca\u0005\u00d6l\u0002\u08c9\u08c5",
    "\u0003\u0002\u0002\u0002\u08ca\u08cd\u0003\u0002\u0002\u0002\u08cb\u08c9",
    "\u0003\u0002\u0002\u0002\u08cb\u08cc\u0003\u0002\u0002\u0002\u08cc\u08d5",
    "\u0003\u0002\u0002\u0002\u08cd\u08cb\u0003\u0002\u0002\u0002\u08ce\u08d0",
    "\u0007\u0007\u0002\u0002\u08cf\u08ce\u0003\u0002\u0002\u0002\u08d0\u08d3",
    "\u0003\u0002\u0002\u0002\u08d1\u08cf\u0003\u0002\u0002\u0002\u08d1\u08d2",
    "\u0003\u0002\u0002\u0002\u08d2\u08d4\u0003\u0002\u0002\u0002\u08d3\u08d1",
    "\u0003\u0002\u0002\u0002\u08d4\u08d6\u0005\u00d8m\u0002\u08d5\u08d1",
    "\u0003\u0002\u0002\u0002\u08d5\u08d6\u0003\u0002\u0002\u0002\u08d6\u00d5",
    "\u0003\u0002\u0002\u0002\u08d7\u08db\u0007P\u0002\u0002\u08d8\u08da",
    "\u0007\u0007\u0002\u0002\u08d9\u08d8\u0003\u0002\u0002\u0002\u08da\u08dd",
    "\u0003\u0002\u0002\u0002\u08db\u08d9\u0003\u0002\u0002\u0002\u08db\u08dc",
    "\u0003\u0002\u0002\u0002\u08dc\u08de\u0003\u0002\u0002\u0002\u08dd\u08db",
    "\u0003\u0002\u0002\u0002\u08de\u08e2\u0007\u000b\u0002\u0002\u08df\u08e1",
    "\u0005\u0114\u008b\u0002\u08e0\u08df\u0003\u0002\u0002\u0002\u08e1\u08e4",
    "\u0003\u0002\u0002\u0002\u08e2\u08e0\u0003\u0002\u0002\u0002\u08e2\u08e3",
    "\u0003\u0002\u0002\u0002\u08e3\u08e5\u0003\u0002\u0002\u0002\u08e4\u08e2",
    "\u0003\u0002\u0002\u0002\u08e5\u08e6\u0005\u0120\u0091\u0002\u08e6\u08e7",
    "\u0007\u001b\u0002\u0002\u08e7\u08e8\u0005b2\u0002\u08e8\u08ec\u0007",
    "\f\u0002\u0002\u08e9\u08eb\u0007\u0007\u0002\u0002\u08ea\u08e9\u0003",
    "\u0002\u0002\u0002\u08eb\u08ee\u0003\u0002\u0002\u0002\u08ec\u08ea\u0003",
    "\u0002\u0002\u0002\u08ec\u08ed\u0003\u0002\u0002\u0002\u08ed\u08ef\u0003",
    "\u0002\u0002\u0002\u08ee\u08ec\u0003\u0002\u0002\u0002\u08ef\u08f0\u0005",
    "l7\u0002\u08f0\u00d7\u0003\u0002\u0002\u0002\u08f1\u08f5\u0007Q\u0002",
    "\u0002\u08f2\u08f4\u0007\u0007\u0002\u0002\u08f3\u08f2\u0003\u0002\u0002",
    "\u0002\u08f4\u08f7\u0003\u0002\u0002\u0002\u08f5\u08f3\u0003\u0002\u0002",
    "\u0002\u08f5\u08f6\u0003\u0002\u0002\u0002\u08f6\u08f8\u0003\u0002\u0002",
    "\u0002\u08f7\u08f5\u0003\u0002\u0002\u0002\u08f8\u08f9\u0005l7\u0002",
    "\u08f9\u00d9\u0003\u0002\u0002\u0002\u08fa\u08fe\u0005\u00dco\u0002",
    "\u08fb\u08fe\u0005\u00dep\u0002\u08fc\u08fe\u0005\u00e0q\u0002\u08fd",
    "\u08fa\u0003\u0002\u0002\u0002\u08fd\u08fb\u0003\u0002\u0002\u0002\u08fd",
    "\u08fc\u0003\u0002\u0002\u0002\u08fe\u00db\u0003\u0002\u0002\u0002\u08ff",
    "\u0903\u0007R\u0002\u0002\u0900\u0902\u0007\u0007\u0002\u0002\u0901",
    "\u0900\u0003\u0002\u0002\u0002\u0902\u0905\u0003\u0002\u0002\u0002\u0903",
    "\u0901\u0003\u0002\u0002\u0002\u0903\u0904\u0003\u0002\u0002\u0002\u0904",
    "\u0906\u0003\u0002\u0002\u0002\u0905\u0903\u0003\u0002\u0002\u0002\u0906",
    "\u090a\u0007\u000b\u0002\u0002\u0907\u0909\u0005\u0114\u008b\u0002\u0908",
    "\u0907\u0003\u0002\u0002\u0002\u0909\u090c\u0003\u0002\u0002\u0002\u090a",
    "\u0908\u0003\u0002\u0002\u0002\u090a\u090b\u0003\u0002\u0002\u0002\u090b",
    "\u090f\u0003\u0002\u0002\u0002\u090c\u090a\u0003\u0002\u0002\u0002\u090d",
    "\u0910\u0005H%\u0002\u090e\u0910\u0005F$\u0002\u090f\u090d\u0003\u0002",
    "\u0002\u0002\u090f\u090e\u0003\u0002\u0002\u0002\u0910\u0911\u0003\u0002",
    "\u0002\u0002\u0911\u0912\u0007[\u0002\u0002\u0912\u0913\u0005v<\u0002",
    "\u0913\u0917\u0007\f\u0002\u0002\u0914\u0916\u0007\u0007\u0002\u0002",
    "\u0915\u0914\u0003\u0002\u0002\u0002\u0916\u0919\u0003\u0002\u0002\u0002",
    "\u0917\u0915\u0003\u0002\u0002\u0002\u0917\u0918\u0003\u0002\u0002\u0002",
    "\u0918\u091b\u0003\u0002\u0002\u0002\u0919\u0917\u0003\u0002\u0002\u0002",
    "\u091a\u091c\u0005\u00c8e\u0002\u091b\u091a\u0003\u0002\u0002\u0002",
    "\u091b\u091c\u0003\u0002\u0002\u0002\u091c\u00dd\u0003\u0002\u0002\u0002",
    "\u091d\u0921\u0007T\u0002\u0002\u091e\u0920\u0007\u0007\u0002\u0002",
    "\u091f\u091e\u0003\u0002\u0002\u0002\u0920\u0923\u0003\u0002\u0002\u0002",
    "\u0921\u091f\u0003\u0002\u0002\u0002\u0921\u0922\u0003\u0002\u0002\u0002",
    "\u0922\u0924\u0003\u0002\u0002\u0002\u0923\u0921\u0003\u0002\u0002\u0002",
    "\u0924\u0925\u0007\u000b\u0002\u0002\u0925\u0926\u0005v<\u0002\u0926",
    "\u092a\u0007\f\u0002\u0002\u0927\u0929\u0007\u0007\u0002\u0002\u0928",
    "\u0927\u0003\u0002\u0002\u0002\u0929\u092c\u0003\u0002\u0002\u0002\u092a",
    "\u0928\u0003\u0002\u0002\u0002\u092a\u092b\u0003\u0002\u0002\u0002\u092b",
    "\u092e\u0003\u0002\u0002\u0002\u092c\u092a\u0003\u0002\u0002\u0002\u092d",
    "\u092f\u0005\u00c8e\u0002\u092e\u092d\u0003\u0002\u0002\u0002\u092e",
    "\u092f\u0003\u0002\u0002\u0002\u092f\u00df\u0003\u0002\u0002\u0002\u0930",
    "\u0934\u0007S\u0002\u0002\u0931\u0933\u0007\u0007\u0002\u0002\u0932",
    "\u0931\u0003\u0002\u0002\u0002\u0933\u0936\u0003\u0002\u0002\u0002\u0934",
    "\u0932\u0003\u0002\u0002\u0002\u0934\u0935\u0003\u0002\u0002\u0002\u0935",
    "\u0938\u0003\u0002\u0002\u0002\u0936\u0934\u0003\u0002\u0002\u0002\u0937",
    "\u0939\u0005\u00c8e\u0002\u0938\u0937\u0003\u0002\u0002\u0002\u0938",
    "\u0939\u0003\u0002\u0002\u0002\u0939\u093d\u0003\u0002\u0002\u0002\u093a",
    "\u093c\u0007\u0007\u0002\u0002\u093b\u093a\u0003\u0002\u0002\u0002\u093c",
    "\u093f\u0003\u0002\u0002\u0002\u093d\u093b\u0003\u0002\u0002\u0002\u093d",
    "\u093e\u0003\u0002\u0002\u0002\u093e\u0940\u0003\u0002\u0002\u0002\u093f",
    "\u093d\u0003\u0002\u0002\u0002\u0940\u0944\u0007T\u0002\u0002\u0941",
    "\u0943\u0007\u0007\u0002\u0002\u0942\u0941\u0003\u0002\u0002\u0002\u0943",
    "\u0946\u0003\u0002\u0002\u0002\u0944\u0942\u0003\u0002\u0002\u0002\u0944",
    "\u0945\u0003\u0002\u0002\u0002\u0945\u0947\u0003\u0002\u0002\u0002\u0946",
    "\u0944\u0003\u0002\u0002\u0002\u0947\u0948\u0007\u000b\u0002\u0002\u0948",
    "\u0949\u0005v<\u0002\u0949\u094a\u0007\f\u0002\u0002\u094a\u00e1\u0003",
    "\u0002\u0002\u0002\u094b\u094f\u0007U\u0002\u0002\u094c\u094e\u0007",
    "\u0007\u0002\u0002\u094d\u094c\u0003\u0002\u0002\u0002\u094e\u0951\u0003",
    "\u0002\u0002\u0002\u094f\u094d\u0003\u0002\u0002\u0002\u094f\u0950\u0003",
    "\u0002\u0002\u0002\u0950\u0952\u0003\u0002\u0002\u0002\u0951\u094f\u0003",
    "\u0002\u0002\u0002\u0952\u095c\u0005v<\u0002\u0953\u0955\t\u0007\u0002",
    "\u0002\u0954\u0956\u0005v<\u0002\u0955\u0954\u0003\u0002\u0002\u0002",
    "\u0955\u0956\u0003\u0002\u0002\u0002\u0956\u095c\u0003\u0002\u0002\u0002",
    "\u0957\u095c\u0007W\u0002\u0002\u0958\u095c\u00078\u0002\u0002\u0959",
    "\u095c\u0007X\u0002\u0002\u095a\u095c\u00079\u0002\u0002\u095b\u094b",
    "\u0003\u0002\u0002\u0002\u095b\u0953\u0003\u0002\u0002\u0002\u095b\u0957",
    "\u0003\u0002\u0002\u0002\u095b\u0958\u0003\u0002\u0002\u0002\u095b\u0959",
    "\u0003\u0002\u0002\u0002\u095b\u095a\u0003\u0002\u0002\u0002\u095c\u00e3",
    "\u0003\u0002\u0002\u0002\u095d\u0967\u0005b2\u0002\u095e\u0962\u0007",
    "+\u0002\u0002\u095f\u0961\u0007\u0007\u0002\u0002\u0960\u095f\u0003",
    "\u0002\u0002\u0002\u0961\u0964\u0003\u0002\u0002\u0002\u0962\u0960\u0003",
    "\u0002\u0002\u0002\u0962\u0963\u0003\u0002\u0002\u0002\u0963\u0966\u0003",
    "\u0002\u0002\u0002\u0964\u0962\u0003\u0002\u0002\u0002\u0965\u095e\u0003",
    "\u0002\u0002\u0002\u0966\u0969\u0003\u0002\u0002\u0002\u0967\u0965\u0003",
    "\u0002\u0002\u0002\u0967\u0968\u0003\u0002\u0002\u0002\u0968\u096b\u0003",
    "\u0002\u0002\u0002\u0969\u0967\u0003\u0002\u0002\u0002\u096a\u095d\u0003",
    "\u0002\u0002\u0002\u096a\u096b\u0003\u0002\u0002\u0002\u096b\u096f\u0003",
    "\u0002\u0002\u0002\u096c\u096e\u0007\u0007\u0002\u0002\u096d\u096c\u0003",
    "\u0002\u0002\u0002\u096e\u0971\u0003\u0002\u0002\u0002\u096f\u096d\u0003",
    "\u0002\u0002\u0002\u096f\u0970\u0003\u0002\u0002\u0002\u0970\u0972\u0003",
    "\u0002\u0002\u0002\u0971\u096f\u0003\u0002\u0002\u0002\u0972\u0976\t",
    "\b\u0002\u0002\u0973\u0975\u0007\u0007\u0002\u0002\u0974\u0973\u0003",
    "\u0002\u0002\u0002\u0975\u0978\u0003\u0002\u0002\u0002\u0976\u0974\u0003",
    "\u0002\u0002\u0002\u0976\u0977\u0003\u0002\u0002\u0002\u0977\u097b\u0003",
    "\u0002\u0002\u0002\u0978\u0976\u0003\u0002\u0002\u0002\u0979\u097c\u0005",
    "\u011e\u0090\u0002\u097a\u097c\u0007=\u0002\u0002\u097b\u0979\u0003",
    "\u0002\u0002\u0002\u097b\u097a\u0003\u0002\u0002\u0002\u097c\u00e5\u0003",
    "\u0002\u0002\u0002\u097d\u097e\t\t\u0002\u0002\u097e\u00e7\u0003\u0002",
    "\u0002\u0002\u097f\u0980\t\n\u0002\u0002\u0980\u00e9\u0003\u0002\u0002",
    "\u0002\u0981\u0982\t\u000b\u0002\u0002\u0982\u00eb\u0003\u0002\u0002",
    "\u0002\u0983\u0984\t\f\u0002\u0002\u0984\u00ed\u0003\u0002\u0002\u0002",
    "\u0985\u0986\t\r\u0002\u0002\u0986\u00ef\u0003\u0002\u0002\u0002\u0987",
    "\u0988\t\u000e\u0002\u0002\u0988\u00f1\u0003\u0002\u0002\u0002\u0989",
    "\u098a\t\u000f\u0002\u0002\u098a\u00f3\u0003\u0002\u0002\u0002\u098b",
    "\u098c\t\u0010\u0002\u0002\u098c\u00f5\u0003\u0002\u0002\u0002\u098d",
    "\u0995\u0007\u0016\u0002\u0002\u098e\u0995\u0007\u0017\u0002\u0002\u098f",
    "\u0995\u0007\u0014\u0002\u0002\u0990\u0995\u0007\u0015\u0002\u0002\u0991",
    "\u0995\u0007\u001a\u0002\u0002\u0992\u0995\u0005\u0114\u008b\u0002\u0993",
    "\u0995\u0005\u0112\u008a\u0002\u0994\u098d\u0003\u0002\u0002\u0002\u0994",
    "\u098e\u0003\u0002\u0002\u0002\u0994\u098f\u0003\u0002\u0002\u0002\u0994",
    "\u0990\u0003\u0002\u0002\u0002\u0994\u0991\u0003\u0002\u0002\u0002\u0994",
    "\u0992\u0003\u0002\u0002\u0002\u0994\u0993\u0003\u0002\u0002\u0002\u0995",
    "\u00f7\u0003\u0002\u0002\u0002\u0996\u09a6\u0007\u0016\u0002\u0002\u0997",
    "\u09a6\u0007\u0017\u0002\u0002\u0998\u0999\u0007\u001a\u0002\u0002\u0999",
    "\u09a6\u0007\u001a\u0002\u0002\u099a\u09a6\u0005\u0096L\u0002\u099b",
    "\u09a6\u0005\u009aN\u0002\u099c\u099e\u0007\u0007\u0002\u0002\u099d",
    "\u099c\u0003\u0002\u0002\u0002\u099e\u09a1\u0003\u0002\u0002\u0002\u099f",
    "\u099d\u0003\u0002\u0002\u0002\u099f\u09a0\u0003\u0002\u0002\u0002\u09a0",
    "\u09a2\u0003\u0002\u0002\u0002\u09a1\u099f\u0003\u0002\u0002\u0002\u09a2",
    "\u09a3\u0005\u00fa~\u0002\u09a3\u09a4\u0005\u0090I\u0002\u09a4\u09a6",
    "\u0003\u0002\u0002\u0002\u09a5\u0996\u0003\u0002\u0002\u0002\u09a5\u0997",
    "\u0003\u0002\u0002\u0002\u09a5\u0998\u0003\u0002\u0002\u0002\u09a5\u099a",
    "\u0003\u0002\u0002\u0002\u09a5\u099b\u0003\u0002\u0002\u0002\u09a5\u099f",
    "\u0003\u0002\u0002\u0002\u09a6\u00f9\u0003\u0002\u0002\u0002\u09a7\u09ab",
    "\u0007\t\u0002\u0002\u09a8\u09a9\u0007+\u0002\u0002\u09a9\u09ab\u0007",
    "\t\u0002\u0002\u09aa\u09a7\u0003\u0002\u0002\u0002\u09aa\u09a8\u0003",
    "\u0002\u0002\u0002\u09ab\u00fb\u0003\u0002\u0002\u0002\u09ac\u09af\u0005",
    "\u0114\u008b\u0002\u09ad\u09af\u0005\u00fe\u0080\u0002\u09ae\u09ac\u0003",
    "\u0002\u0002\u0002\u09ae\u09ad\u0003\u0002\u0002\u0002\u09af\u09b0\u0003",
    "\u0002\u0002\u0002\u09b0\u09ae\u0003\u0002\u0002\u0002\u09b0\u09b1\u0003",
    "\u0002\u0002\u0002\u09b1\u00fd\u0003\u0002\u0002\u0002\u09b2\u09bc\u0005",
    "\u0100\u0081\u0002\u09b3\u09bc\u0005\u0102\u0082\u0002\u09b4\u09bc\u0005",
    "\u0104\u0083\u0002\u09b5\u09bc\u0005\u0106\u0084\u0002\u09b6\u09bc\u0005",
    "\u0108\u0085\u0002\u09b7\u09bc\u0005\u010a\u0086\u0002\u09b8\u09bc\u0005",
    "\u010c\u0087\u0002\u09b9\u09bc\u0005\u010e\u0088\u0002\u09ba\u09bc\u0005",
    "\u0110\u0089\u0002\u09bb\u09b2\u0003\u0002\u0002\u0002\u09bb\u09b3\u0003",
    "\u0002\u0002\u0002\u09bb\u09b4\u0003\u0002\u0002\u0002\u09bb\u09b5\u0003",
    "\u0002\u0002\u0002\u09bb\u09b6\u0003\u0002\u0002\u0002\u09bb\u09b7\u0003",
    "\u0002\u0002\u0002\u09bb\u09b8\u0003\u0002\u0002\u0002\u09bb\u09b9\u0003",
    "\u0002\u0002\u0002\u09bb\u09ba\u0003\u0002\u0002\u0002\u09bc\u09c0\u0003",
    "\u0002\u0002\u0002\u09bd\u09bf\u0007\u0007\u0002\u0002\u09be\u09bd\u0003",
    "\u0002\u0002\u0002\u09bf\u09c2\u0003\u0002\u0002\u0002\u09c0\u09be\u0003",
    "\u0002\u0002\u0002\u09c0\u09c1\u0003\u0002\u0002\u0002\u09c1\u00ff\u0003",
    "\u0002\u0002\u0002\u09c2\u09c0\u0003\u0002\u0002\u0002\u09c3\u09c4\t",
    "\u0011\u0002\u0002\u09c4\u0101\u0003\u0002\u0002\u0002\u09c5\u09c6\t",
    "\u0012\u0002\u0002\u09c6\u0103\u0003\u0002\u0002\u0002\u09c7\u09c8\t",
    "\u0013\u0002\u0002\u09c8\u0105\u0003\u0002\u0002\u0002\u09c9\u09ca\t",
    "\u0014\u0002\u0002\u09ca\u0107\u0003\u0002\u0002\u0002\u09cb\u09cc\t",
    "\u0015\u0002\u0002\u09cc\u0109\u0003\u0002\u0002\u0002\u09cd\u09ce\u0007",
    "}\u0002\u0002\u09ce\u010b\u0003\u0002\u0002\u0002\u09cf\u09d0\t\u0016",
    "\u0002\u0002\u09d0\u010d\u0003\u0002\u0002\u0002\u09d1\u09d2\t\u0017",
    "\u0002\u0002\u09d2\u010f\u0003\u0002\u0002\u0002\u09d3\u09d4\u0007\u0082",
    "\u0002\u0002\u09d4\u0111\u0003\u0002\u0002\u0002\u09d5\u09d9\u0007\u0090",
    "\u0002\u0002\u09d6\u09d8\u0007\u0007\u0002\u0002\u09d7\u09d6\u0003\u0002",
    "\u0002\u0002\u09d8\u09db\u0003\u0002\u0002\u0002\u09d9\u09d7\u0003\u0002",
    "\u0002\u0002\u09d9\u09da\u0003\u0002\u0002\u0002\u09da\u0113\u0003\u0002",
    "\u0002\u0002\u09db\u09d9\u0003\u0002\u0002\u0002\u09dc\u09df\u0005\u0116",
    "\u008c\u0002\u09dd\u09df\u0005\u0118\u008d\u0002\u09de\u09dc\u0003\u0002",
    "\u0002\u0002\u09de\u09dd\u0003\u0002\u0002\u0002\u09df\u09e3\u0003\u0002",
    "\u0002\u0002\u09e0\u09e2\u0007\u0007\u0002\u0002\u09e1\u09e0\u0003\u0002",
    "\u0002\u0002\u09e2\u09e5\u0003\u0002\u0002\u0002\u09e3\u09e1\u0003\u0002",
    "\u0002\u0002\u09e3\u09e4\u0003\u0002\u0002\u0002\u09e4\u0115\u0003\u0002",
    "\u0002\u0002\u09e5\u09e3\u0003\u0002\u0002\u0002\u09e6\u09ea\u0005\u011a",
    "\u008e\u0002\u09e7\u09e9\u0007\u0007\u0002\u0002\u09e8\u09e7\u0003\u0002",
    "\u0002\u0002\u09e9\u09ec\u0003\u0002\u0002\u0002\u09ea\u09e8\u0003\u0002",
    "\u0002\u0002\u09ea\u09eb\u0003\u0002\u0002\u0002\u09eb\u09ed\u0003\u0002",
    "\u0002\u0002\u09ec\u09ea\u0003\u0002\u0002\u0002\u09ed\u09f1\u0007\u001b",
    "\u0002\u0002\u09ee\u09f0\u0007\u0007\u0002\u0002\u09ef\u09ee\u0003\u0002",
    "\u0002\u0002\u09f0\u09f3\u0003\u0002\u0002\u0002\u09f1\u09ef\u0003\u0002",
    "\u0002\u0002\u09f1\u09f2\u0003\u0002\u0002\u0002\u09f2\u09f4\u0003\u0002",
    "\u0002\u0002\u09f3\u09f1\u0003\u0002\u0002\u0002\u09f4\u09f5\u0005\u011c",
    "\u008f\u0002\u09f5\u0a0a\u0003\u0002\u0002\u0002\u09f6\u09fe\u0007\u008f",
    "\u0002\u0002\u09f7\u09f9\u0007\u0007\u0002\u0002\u09f8\u09f7\u0003\u0002",
    "\u0002\u0002\u09f9\u09fc\u0003\u0002\u0002\u0002\u09fa\u09f8\u0003\u0002",
    "\u0002\u0002\u09fa\u09fb\u0003\u0002\u0002\u0002\u09fb\u09fd\u0003\u0002",
    "\u0002\u0002\u09fc\u09fa\u0003\u0002\u0002\u0002\u09fd\u09ff\u0005\u009e",
    "P\u0002\u09fe\u09fa\u0003\u0002\u0002\u0002\u09fe\u09ff\u0003\u0002",
    "\u0002\u0002\u09ff\u0a07\u0003\u0002\u0002\u0002\u0a00\u0a02\u0007\u0007",
    "\u0002\u0002\u0a01\u0a00\u0003\u0002\u0002\u0002\u0a02\u0a05\u0003\u0002",
    "\u0002\u0002\u0a03\u0a01\u0003\u0002\u0002\u0002\u0a03\u0a04\u0003\u0002",
    "\u0002\u0002\u0a04\u0a06\u0003\u0002\u0002\u0002\u0a05\u0a03\u0003\u0002",
    "\u0002\u0002\u0a06\u0a08\u0005\u009cO\u0002\u0a07\u0a03\u0003\u0002",
    "\u0002\u0002\u0a07\u0a08\u0003\u0002\u0002\u0002\u0a08\u0a0a\u0003\u0002",
    "\u0002\u0002\u0a09\u09e6\u0003\u0002\u0002\u0002\u0a09\u09f6\u0003\u0002",
    "\u0002\u0002\u0a0a\u0117\u0003\u0002\u0002\u0002\u0a0b\u0a0c\u0005\u011a",
    "\u008e\u0002\u0a0c\u0a0d\u0007\u001b\u0002\u0002\u0a0d\u0a0f\u0007\r",
    "\u0002\u0002\u0a0e\u0a10\u0005\u011c\u008f\u0002\u0a0f\u0a0e\u0003\u0002",
    "\u0002\u0002\u0a10\u0a11\u0003\u0002\u0002\u0002\u0a11\u0a0f\u0003\u0002",
    "\u0002\u0002\u0a11\u0a12\u0003\u0002\u0002\u0002\u0a12\u0a13\u0003\u0002",
    "\u0002\u0002\u0a13\u0a14\u0007\u000e\u0002\u0002\u0a14\u0a1f\u0003\u0002",
    "\u0002\u0002\u0a15\u0a16\u0007*\u0002\u0002\u0a16\u0a18\u0007\r\u0002",
    "\u0002\u0a17\u0a19\u0005\u011c\u008f\u0002\u0a18\u0a17\u0003\u0002\u0002",
    "\u0002\u0a19\u0a1a\u0003\u0002\u0002\u0002\u0a1a\u0a18\u0003\u0002\u0002",
    "\u0002\u0a1a\u0a1b\u0003\u0002\u0002\u0002\u0a1b\u0a1c\u0003\u0002\u0002",
    "\u0002\u0a1c\u0a1d\u0007\u000e\u0002\u0002\u0a1d\u0a1f\u0003\u0002\u0002",
    "\u0002\u0a1e\u0a0b\u0003\u0002\u0002\u0002\u0a1e\u0a15\u0003\u0002\u0002",
    "\u0002\u0a1f\u0119\u0003\u0002\u0002\u0002\u0a20\u0a21\t\u0018\u0002",
    "\u0002\u0a21\u011b\u0003\u0002\u0002\u0002\u0a22\u0a24\u0005\u011e\u0090",
    "\u0002\u0a23\u0a25\u0005\u009eP\u0002\u0a24\u0a23\u0003\u0002\u0002",
    "\u0002\u0a24\u0a25\u0003\u0002\u0002\u0002\u0a25\u0a27\u0003\u0002\u0002",
    "\u0002\u0a26\u0a28\u0005\u009cO\u0002\u0a27\u0a26\u0003\u0002\u0002",
    "\u0002\u0a27\u0a28\u0003\u0002\u0002\u0002\u0a28\u011d\u0003\u0002\u0002",
    "\u0002\u0a29\u0a34\u0005\u0120\u0091\u0002\u0a2a\u0a2c\u0007\u0007\u0002",
    "\u0002\u0a2b\u0a2a\u0003\u0002\u0002\u0002\u0a2c\u0a2f\u0003\u0002\u0002",
    "\u0002\u0a2d\u0a2b\u0003\u0002\u0002\u0002\u0a2d\u0a2e\u0003\u0002\u0002",
    "\u0002\u0a2e\u0a30\u0003\u0002\u0002\u0002\u0a2f\u0a2d\u0003\u0002\u0002",
    "\u0002\u0a30\u0a31\u0007\t\u0002\u0002\u0a31\u0a33\u0005\u0120\u0091",
    "\u0002\u0a32\u0a2d\u0003\u0002\u0002\u0002\u0a33\u0a36\u0003\u0002\u0002",
    "\u0002\u0a34\u0a32\u0003\u0002\u0002\u0002\u0a34\u0a35\u0003\u0002\u0002",
    "\u0002\u0a35\u011f\u0003\u0002\u0002\u0002\u0a36\u0a34\u0003\u0002\u0002",
    "\u0002\u0a37\u0a38\t\u0019\u0002\u0002\u0a38\u0121\u0003\u0002\u0002",
    "\u0002\u0a39\u0a3b\u0007\u0007\u0002\u0002\u0a3a\u0a39\u0003\u0002\u0002",
    "\u0002\u0a3b\u0a3c\u0003\u0002\u0002\u0002\u0a3c\u0a3a\u0003\u0002\u0002",
    "\u0002\u0a3c\u0a3d\u0003\u0002\u0002\u0002\u0a3d\u0a4c\u0003\u0002\u0002",
    "\u0002\u0a3e\u0a40\u0007\u0007\u0002\u0002\u0a3f\u0a3e\u0003\u0002\u0002",
    "\u0002\u0a40\u0a43\u0003\u0002\u0002\u0002\u0a41\u0a3f\u0003\u0002\u0002",
    "\u0002\u0a41\u0a42\u0003\u0002\u0002\u0002\u0a42\u0a44\u0003\u0002\u0002",
    "\u0002\u0a43\u0a41\u0003\u0002\u0002\u0002\u0a44\u0a48\u0007\u001c\u0002",
    "\u0002\u0a45\u0a47\u0007\u0007\u0002\u0002\u0a46\u0a45\u0003\u0002\u0002",
    "\u0002\u0a47\u0a4a\u0003\u0002\u0002\u0002\u0a48\u0a46\u0003\u0002\u0002",
    "\u0002\u0a48\u0a49\u0003\u0002\u0002\u0002\u0a49\u0a4c\u0003\u0002\u0002",
    "\u0002\u0a4a\u0a48\u0003\u0002\u0002\u0002\u0a4b\u0a3a\u0003\u0002\u0002",
    "\u0002\u0a4b\u0a41\u0003\u0002\u0002\u0002\u0a4c\u0123\u0003\u0002\u0002",
    "\u0002\u0a4d\u0a4e\t\u001a\u0002\u0002\u0a4e\u0125\u0003\u0002\u0002",
    "\u0002\u018e\u0129\u0130\u0137\u013a\u013e\u0141\u0148\u014f\u0156\u0159",
    "\u015d\u0160\u0165\u016d\u0175\u017a\u017d\u0181\u0184\u0189\u018b\u0190",
    "\u0198\u019b\u01a5\u01a8\u01ae\u01b5\u01b9\u01be\u01c2\u01c7\u01ce\u01d2",
    "\u01d7\u01db\u01e0\u01e7\u01eb\u01ee\u01f4\u01f7\u0201\u0204\u0209\u020c",
    "\u0213\u0218\u021f\u0226\u022c\u0232\u023b\u0242\u024b\u0251\u0257\u0264",
    "\u0269\u0270\u0276\u027c\u0283\u028a\u028e\u0293\u029c\u02a4\u02a8\u02ae",
    "\u02b2\u02b7\u02be\u02c4\u02c7\u02cc\u02d5\u02da\u02dd\u02e3\u02e7\u02ec",
    "\u02f0\u02f5\u02f9\u02fc\u0302\u0309\u030e\u0313\u0317\u031c\u0320\u0325",
    "\u032c\u0333\u0337\u033c\u0340\u0345\u0349\u0351\u0354\u0359\u035e\u0369",
    "\u036d\u0370\u0376\u037d\u0381\u0386\u038d\u0391\u0396\u039a\u039d\u03a3",
    "\u03a7\u03ad\u03b1\u03b6\u03bd\u03c1\u03c6\u03ca\u03cd\u03d3\u03d7\u03dc",
    "\u03e3\u03e8\u03ed\u03f2\u03f7\u03fb\u0400\u0407\u040b\u0411\u0417\u0419",
    "\u0421\u0429\u042c\u0430\u0436\u043e\u0445\u0449\u044e\u0456\u045a\u045c",
    "\u045f\u0463\u0469\u046f\u0471\u0476\u047c\u0481\u0484\u048a\u0491\u0495",
    "\u049a\u04a1\u04aa\u04b1\u04b8\u04be\u04c4\u04ca\u04cf\u04d6\u04dd\u04e1",
    "\u04e4\u04ea\u04f1\u04f4\u04f6\u04fe\u0503\u0509\u0511\u0517\u051e\u0521",
    "\u0527\u052e\u0536\u053c\u0543\u0549\u0550\u0554\u0559\u055e\u0562\u056b",
    "\u0572\u0579\u057f\u0585\u058c\u0593\u059f\u05a6\u05a9\u05ad\u05b0\u05b4",
    "\u05b9\u05bf\u05c7\u05ce\u05d6\u05dd\u05e4\u05ea\u05f1\u05f8\u05fe\u0606",
    "\u060d\u0615\u061a\u0621\u0628\u062e\u0633\u0639\u0640\u0646\u064e\u0655",
    "\u065d\u0663\u066b\u0672\u067a\u0681\u0688\u0690\u0696\u069d\u06a2\u06b1",
    "\u06b9\u06be\u06c5\u06cb\u06cd\u06d2\u06d6\u06db\u06e6\u06e9\u06f3\u06f6",
    "\u06fe\u0705\u070c\u0712\u0718\u071c\u0721\u0727\u072e\u0731\u0734\u0739",
    "\u0747\u074b\u0750\u0752\u075c\u075e\u0772\u0779\u0780\u0789\u0790\u0797",
    "\u079e\u07a3\u07a6\u07ab\u07b2\u07b8\u07c0\u07c7\u07cb\u07cd\u07d3\u07da",
    "\u07de\u07e3\u07ea\u07f0\u07f7\u07fe\u0805\u080a\u080d\u0811\u0817\u0820",
    "\u0824\u0827\u082c\u0833\u0837\u0839\u083d\u0843\u084a\u084f\u0856\u085d",
    "\u0862\u0868\u0871\u0878\u087e\u0884\u088b\u0890\u0896\u089d\u08a1\u08a6",
    "\u08ac\u08b5\u08be\u08c5\u08cb\u08d1\u08d5\u08db\u08e2\u08ec\u08f5\u08fd",
    "\u0903\u090a\u090f\u0917\u091b\u0921\u092a\u092e\u0934\u0938\u093d\u0944",
    "\u094f\u0955\u095b\u0962\u0967\u096a\u096f\u0976\u097b\u0994\u099f\u09a5",
    "\u09aa\u09ae\u09b0\u09bb\u09c0\u09d9\u09de\u09e3\u09ea\u09f1\u09fa\u09fe",
    "\u0a03\u0a07\u0a09\u0a11\u0a1a\u0a1e\u0a24\u0a27\u0a2d\u0a34\u0a3c\u0a41",
    "\u0a48\u0a4b"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, "'...'", "'.'", 
                     "','", "'('", null, "'['", null, "'{'", "'}'", "'*'", 
                     "'%'", "'/'", "'+'", "'-'", "'++'", "'--'", "'&&'", 
                     "'||'", "'!'", "':'", "';'", "'='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'->'", "'=>'", "'..'", "'::'", 
                     "'?::'", "';;'", "'#'", "'@'", "'?'", "'?:'", "'<'", 
                     "'>'", "'<='", "'>='", "'!='", "'!=='", "'as?'", "'=='", 
                     "'==='", "'''", null, null, null, "'@file'", "'package'", 
                     "'import'", "'class'", "'interface'", "'fun'", "'object'", 
                     "'val'", "'var'", "'typealias'", "'constructor'", "'by'", 
                     "'companion'", "'init'", "'this'", "'super'", "'typeof'", 
                     "'where'", "'if'", "'else'", "'when'", "'try'", "'catch'", 
                     "'finally'", "'for'", "'do'", "'while'", "'throw'", 
                     "'return'", "'continue'", "'break'", "'as'", "'is'", 
                     "'in'", null, null, "'out'", "'@field'", "'@property'", 
                     "'@get'", "'@set'", "'get'", "'set'", "'@receiver'", 
                     "'@param'", "'@setparam'", "'@delegate'", "'dynamic'", 
                     "'public'", "'private'", "'protected'", "'internal'", 
                     "'enum'", "'sealed'", "'annotation'", "'data'", "'inner'", 
                     "'tailrec'", "'operator'", "'inline'", "'infix'", "'external'", 
                     "'suspend'", "'override'", "'abstract'", "'final'", 
                     "'open'", "'const'", "'lateinit'", "'vararg'", "'noinline'", 
                     "'crossinline'", "'reified'", null, "'\"\"\"'", null, 
                     null, null, null, null, null, null, null, "'null'" ];

var symbolicNames = [ null, "ShebangLine", "DelimitedComment", "LineComment", 
                      "WS", "NL", "RESERVED", "DOT", "COMMA", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
                      "MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", 
                      "CONJ", "DISJ", "EXCL", "COLON", "SEMICOLON", "ASSIGNMENT", 
                      "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", 
                      "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", 
                      "RANGE", "COLONCOLON", "Q_COLONCOLON", "DOUBLE_SEMICOLON", 
                      "HASH", "AT", "QUEST", "ELVIS", "LANGLE", "RANGLE", 
                      "LE", "GE", "EXCL_EQ", "EXCL_EQEQ", "AS_SAFE", "EQEQ", 
                      "EQEQEQ", "SINGLE_QUOTE", "RETURN_AT", "CONTINUE_AT", 
                      "BREAK_AT", "FILE", "PACKAGE", "IMPORT", "CLASS", 
                      "INTERFACE", "FUN", "OBJECT", "VAL", "VAR", "TYPE_ALIAS", 
                      "CONSTRUCTOR", "BY", "COMPANION", "INIT", "THIS", 
                      "SUPER", "TYPEOF", "WHERE", "IF", "ELSE", "WHEN", 
                      "TRY", "CATCH", "FINALLY", "FOR", "DO", "WHILE", "THROW", 
                      "RETURN", "CONTINUE", "BREAK", "AS", "IS", "IN", "NOT_IS", 
                      "NOT_IN", "OUT", "FIELD", "PROPERTY", "GET", "SET", 
                      "GETTER", "SETTER", "RECEIVER", "PARAM", "SETPARAM", 
                      "DELEGATE", "DYNAMIC", "PUBLIC", "PRIVATE", "PROTECTED", 
                      "INTERNAL", "ENUM", "SEALED", "ANNOTATION", "DATA", 
                      "INNER", "TAILREC", "OPERATOR", "INLINE", "INFIX", 
                      "EXTERNAL", "SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL", 
                      "OPEN", "CONST", "LATEINIT", "VARARG", "NOINLINE", 
                      "CROSSINLINE", "REIFIED", "QUOTE_OPEN", "TRIPLE_QUOTE_OPEN", 
                      "RealLiteral", "FloatLiteral", "DoubleLiteral", "LongLiteral", 
                      "IntegerLiteral", "HexLiteral", "BinLiteral", "BooleanLiteral", 
                      "NullLiteral", "Identifier", "LabelReference", "LabelDefinition", 
                      "FieldIdentifier", "CharacterLiteral", "UNICODE_CLASS_LL", 
                      "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", "UNICODE_CLASS_LT", 
                      "UNICODE_CLASS_LU", "UNICODE_CLASS_ND", "UNICODE_CLASS_NL", 
                      "Inside_Comment", "Inside_WS", "Inside_NL", "QUOTE_CLOSE", 
                      "LineStrRef", "LineStrText", "LineStrEscapedChar", 
                      "LineStrExprStart", "TRIPLE_QUOTE_CLOSE", "MultiLineStringQuote", 
                      "MultiLineStrRef", "MultiLineStrText", "MultiLineStrEscapedChar", 
                      "MultiLineStrExprStart", "MultiLineNL", "StrExpr_IN", 
                      "StrExpr_Comment", "StrExpr_WS", "StrExpr_NL" ];

var ruleNames =  [ "kotlinFile", "script", "preamble", "fileAnnotations", 
                   "fileAnnotation", "packageHeader", "importList", "importHeader", 
                   "importAlias", "topLevelObject", "classDeclaration", 
                   "primaryConstructor", "classParameters", "classParameter", 
                   "delegationSpecifiers", "delegationSpecifier", "constructorInvocation", 
                   "explicitDelegation", "classBody", "classMemberDeclaration", 
                   "anonymousInitializer", "secondaryConstructor", "constructorDelegationCall", 
                   "enumClassBody", "enumEntries", "enumEntry", "functionDeclaration", 
                   "functionValueParameters", "functionValueParameter", 
                   "parameter", "functionBody", "objectDeclaration", "companionObject", 
                   "propertyDeclaration", "multiVariableDeclaration", "variableDeclaration", 
                   "getter", "setter", "typeAlias", "typeParameters", "typeParameter", 
                   "type", "typeModifierList", "parenthesizedType", "nullableType", 
                   "typeReference", "functionType", "functionTypeReceiver", 
                   "userType", "simpleUserType", "functionTypeParameters", 
                   "typeConstraints", "typeConstraint", "block", "statements", 
                   "statement", "blockLevelExpression", "declaration", "expression", 
                   "disjunction", "conjunction", "equalityComparison", "comparison", 
                   "namedInfix", "elvisExpression", "infixFunctionCall", 
                   "rangeExpression", "additiveExpression", "multiplicativeExpression", 
                   "typeRHS", "prefixUnaryExpression", "postfixUnaryExpression", 
                   "atomicExpression", "parenthesizedExpression", "callSuffix", 
                   "annotatedLambda", "arrayAccess", "valueArguments", "typeArguments", 
                   "typeProjection", "typeProjectionModifierList", "valueArgument", 
                   "literalConstant", "stringLiteral", "lineStringLiteral", 
                   "multiLineStringLiteral", "lineStringContent", "lineStringExpression", 
                   "multiLineStringContent", "multiLineStringExpression", 
                   "functionLiteral", "lambdaParameters", "lambdaParameter", 
                   "objectLiteral", "collectionLiteral", "thisExpression", 
                   "superExpression", "conditionalExpression", "ifExpression", 
                   "controlStructureBody", "whenExpression", "whenEntry", 
                   "whenCondition", "rangeTest", "typeTest", "tryExpression", 
                   "catchBlock", "finallyBlock", "loopExpression", "forExpression", 
                   "whileExpression", "doWhileExpression", "jumpExpression", 
                   "callableReference", "assignmentOperator", "equalityOperation", 
                   "comparisonOperator", "inOperator", "isOperator", "additiveOperator", 
                   "multiplicativeOperation", "typeOperation", "prefixUnaryOperation", 
                   "postfixUnaryOperation", "memberAccessOperator", "modifierList", 
                   "modifier", "classModifier", "memberModifier", "visibilityModifier", 
                   "varianceAnnotation", "functionModifier", "propertyModifier", 
                   "inheritanceModifier", "parameterModifier", "typeParameterModifier", 
                   "labelDefinition", "annotations", "annotation", "annotationList", 
                   "annotationUseSiteTarget", "unescapedAnnotation", "identifier", 
                   "simpleIdentifier", "semi", "anysemi" ];

function KotlinParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

KotlinParser.prototype = Object.create(antlr4.Parser.prototype);
KotlinParser.prototype.constructor = KotlinParser;

Object.defineProperty(KotlinParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

KotlinParser.EOF = antlr4.Token.EOF;
KotlinParser.ShebangLine = 1;
KotlinParser.DelimitedComment = 2;
KotlinParser.LineComment = 3;
KotlinParser.WS = 4;
KotlinParser.NL = 5;
KotlinParser.RESERVED = 6;
KotlinParser.DOT = 7;
KotlinParser.COMMA = 8;
KotlinParser.LPAREN = 9;
KotlinParser.RPAREN = 10;
KotlinParser.LSQUARE = 11;
KotlinParser.RSQUARE = 12;
KotlinParser.LCURL = 13;
KotlinParser.RCURL = 14;
KotlinParser.MULT = 15;
KotlinParser.MOD = 16;
KotlinParser.DIV = 17;
KotlinParser.ADD = 18;
KotlinParser.SUB = 19;
KotlinParser.INCR = 20;
KotlinParser.DECR = 21;
KotlinParser.CONJ = 22;
KotlinParser.DISJ = 23;
KotlinParser.EXCL = 24;
KotlinParser.COLON = 25;
KotlinParser.SEMICOLON = 26;
KotlinParser.ASSIGNMENT = 27;
KotlinParser.ADD_ASSIGNMENT = 28;
KotlinParser.SUB_ASSIGNMENT = 29;
KotlinParser.MULT_ASSIGNMENT = 30;
KotlinParser.DIV_ASSIGNMENT = 31;
KotlinParser.MOD_ASSIGNMENT = 32;
KotlinParser.ARROW = 33;
KotlinParser.DOUBLE_ARROW = 34;
KotlinParser.RANGE = 35;
KotlinParser.COLONCOLON = 36;
KotlinParser.Q_COLONCOLON = 37;
KotlinParser.DOUBLE_SEMICOLON = 38;
KotlinParser.HASH = 39;
KotlinParser.AT = 40;
KotlinParser.QUEST = 41;
KotlinParser.ELVIS = 42;
KotlinParser.LANGLE = 43;
KotlinParser.RANGLE = 44;
KotlinParser.LE = 45;
KotlinParser.GE = 46;
KotlinParser.EXCL_EQ = 47;
KotlinParser.EXCL_EQEQ = 48;
KotlinParser.AS_SAFE = 49;
KotlinParser.EQEQ = 50;
KotlinParser.EQEQEQ = 51;
KotlinParser.SINGLE_QUOTE = 52;
KotlinParser.RETURN_AT = 53;
KotlinParser.CONTINUE_AT = 54;
KotlinParser.BREAK_AT = 55;
KotlinParser.FILE = 56;
KotlinParser.PACKAGE = 57;
KotlinParser.IMPORT = 58;
KotlinParser.CLASS = 59;
KotlinParser.INTERFACE = 60;
KotlinParser.FUN = 61;
KotlinParser.OBJECT = 62;
KotlinParser.VAL = 63;
KotlinParser.VAR = 64;
KotlinParser.TYPE_ALIAS = 65;
KotlinParser.CONSTRUCTOR = 66;
KotlinParser.BY = 67;
KotlinParser.COMPANION = 68;
KotlinParser.INIT = 69;
KotlinParser.THIS = 70;
KotlinParser.SUPER = 71;
KotlinParser.TYPEOF = 72;
KotlinParser.WHERE = 73;
KotlinParser.IF = 74;
KotlinParser.ELSE = 75;
KotlinParser.WHEN = 76;
KotlinParser.TRY = 77;
KotlinParser.CATCH = 78;
KotlinParser.FINALLY = 79;
KotlinParser.FOR = 80;
KotlinParser.DO = 81;
KotlinParser.WHILE = 82;
KotlinParser.THROW = 83;
KotlinParser.RETURN = 84;
KotlinParser.CONTINUE = 85;
KotlinParser.BREAK = 86;
KotlinParser.AS = 87;
KotlinParser.IS = 88;
KotlinParser.IN = 89;
KotlinParser.NOT_IS = 90;
KotlinParser.NOT_IN = 91;
KotlinParser.OUT = 92;
KotlinParser.FIELD = 93;
KotlinParser.PROPERTY = 94;
KotlinParser.GET = 95;
KotlinParser.SET = 96;
KotlinParser.GETTER = 97;
KotlinParser.SETTER = 98;
KotlinParser.RECEIVER = 99;
KotlinParser.PARAM = 100;
KotlinParser.SETPARAM = 101;
KotlinParser.DELEGATE = 102;
KotlinParser.DYNAMIC = 103;
KotlinParser.PUBLIC = 104;
KotlinParser.PRIVATE = 105;
KotlinParser.PROTECTED = 106;
KotlinParser.INTERNAL = 107;
KotlinParser.ENUM = 108;
KotlinParser.SEALED = 109;
KotlinParser.ANNOTATION = 110;
KotlinParser.DATA = 111;
KotlinParser.INNER = 112;
KotlinParser.TAILREC = 113;
KotlinParser.OPERATOR = 114;
KotlinParser.INLINE = 115;
KotlinParser.INFIX = 116;
KotlinParser.EXTERNAL = 117;
KotlinParser.SUSPEND = 118;
KotlinParser.OVERRIDE = 119;
KotlinParser.ABSTRACT = 120;
KotlinParser.FINAL = 121;
KotlinParser.OPEN = 122;
KotlinParser.CONST = 123;
KotlinParser.LATEINIT = 124;
KotlinParser.VARARG = 125;
KotlinParser.NOINLINE = 126;
KotlinParser.CROSSINLINE = 127;
KotlinParser.REIFIED = 128;
KotlinParser.QUOTE_OPEN = 129;
KotlinParser.TRIPLE_QUOTE_OPEN = 130;
KotlinParser.RealLiteral = 131;
KotlinParser.FloatLiteral = 132;
KotlinParser.DoubleLiteral = 133;
KotlinParser.LongLiteral = 134;
KotlinParser.IntegerLiteral = 135;
KotlinParser.HexLiteral = 136;
KotlinParser.BinLiteral = 137;
KotlinParser.BooleanLiteral = 138;
KotlinParser.NullLiteral = 139;
KotlinParser.Identifier = 140;
KotlinParser.LabelReference = 141;
KotlinParser.LabelDefinition = 142;
KotlinParser.FieldIdentifier = 143;
KotlinParser.CharacterLiteral = 144;
KotlinParser.UNICODE_CLASS_LL = 145;
KotlinParser.UNICODE_CLASS_LM = 146;
KotlinParser.UNICODE_CLASS_LO = 147;
KotlinParser.UNICODE_CLASS_LT = 148;
KotlinParser.UNICODE_CLASS_LU = 149;
KotlinParser.UNICODE_CLASS_ND = 150;
KotlinParser.UNICODE_CLASS_NL = 151;
KotlinParser.Inside_Comment = 152;
KotlinParser.Inside_WS = 153;
KotlinParser.Inside_NL = 154;
KotlinParser.QUOTE_CLOSE = 155;
KotlinParser.LineStrRef = 156;
KotlinParser.LineStrText = 157;
KotlinParser.LineStrEscapedChar = 158;
KotlinParser.LineStrExprStart = 159;
KotlinParser.TRIPLE_QUOTE_CLOSE = 160;
KotlinParser.MultiLineStringQuote = 161;
KotlinParser.MultiLineStrRef = 162;
KotlinParser.MultiLineStrText = 163;
KotlinParser.MultiLineStrEscapedChar = 164;
KotlinParser.MultiLineStrExprStart = 165;
KotlinParser.MultiLineNL = 166;
KotlinParser.StrExpr_IN = 167;
KotlinParser.StrExpr_Comment = 168;
KotlinParser.StrExpr_WS = 169;
KotlinParser.StrExpr_NL = 170;

KotlinParser.RULE_kotlinFile = 0;
KotlinParser.RULE_script = 1;
KotlinParser.RULE_preamble = 2;
KotlinParser.RULE_fileAnnotations = 3;
KotlinParser.RULE_fileAnnotation = 4;
KotlinParser.RULE_packageHeader = 5;
KotlinParser.RULE_importList = 6;
KotlinParser.RULE_importHeader = 7;
KotlinParser.RULE_importAlias = 8;
KotlinParser.RULE_topLevelObject = 9;
KotlinParser.RULE_classDeclaration = 10;
KotlinParser.RULE_primaryConstructor = 11;
KotlinParser.RULE_classParameters = 12;
KotlinParser.RULE_classParameter = 13;
KotlinParser.RULE_delegationSpecifiers = 14;
KotlinParser.RULE_delegationSpecifier = 15;
KotlinParser.RULE_constructorInvocation = 16;
KotlinParser.RULE_explicitDelegation = 17;
KotlinParser.RULE_classBody = 18;
KotlinParser.RULE_classMemberDeclaration = 19;
KotlinParser.RULE_anonymousInitializer = 20;
KotlinParser.RULE_secondaryConstructor = 21;
KotlinParser.RULE_constructorDelegationCall = 22;
KotlinParser.RULE_enumClassBody = 23;
KotlinParser.RULE_enumEntries = 24;
KotlinParser.RULE_enumEntry = 25;
KotlinParser.RULE_functionDeclaration = 26;
KotlinParser.RULE_functionValueParameters = 27;
KotlinParser.RULE_functionValueParameter = 28;
KotlinParser.RULE_parameter = 29;
KotlinParser.RULE_functionBody = 30;
KotlinParser.RULE_objectDeclaration = 31;
KotlinParser.RULE_companionObject = 32;
KotlinParser.RULE_propertyDeclaration = 33;
KotlinParser.RULE_multiVariableDeclaration = 34;
KotlinParser.RULE_variableDeclaration = 35;
KotlinParser.RULE_getter = 36;
KotlinParser.RULE_setter = 37;
KotlinParser.RULE_typeAlias = 38;
KotlinParser.RULE_typeParameters = 39;
KotlinParser.RULE_typeParameter = 40;
KotlinParser.RULE_type = 41;
KotlinParser.RULE_typeModifierList = 42;
KotlinParser.RULE_parenthesizedType = 43;
KotlinParser.RULE_nullableType = 44;
KotlinParser.RULE_typeReference = 45;
KotlinParser.RULE_functionType = 46;
KotlinParser.RULE_functionTypeReceiver = 47;
KotlinParser.RULE_userType = 48;
KotlinParser.RULE_simpleUserType = 49;
KotlinParser.RULE_functionTypeParameters = 50;
KotlinParser.RULE_typeConstraints = 51;
KotlinParser.RULE_typeConstraint = 52;
KotlinParser.RULE_block = 53;
KotlinParser.RULE_statements = 54;
KotlinParser.RULE_statement = 55;
KotlinParser.RULE_blockLevelExpression = 56;
KotlinParser.RULE_declaration = 57;
KotlinParser.RULE_expression = 58;
KotlinParser.RULE_disjunction = 59;
KotlinParser.RULE_conjunction = 60;
KotlinParser.RULE_equalityComparison = 61;
KotlinParser.RULE_comparison = 62;
KotlinParser.RULE_namedInfix = 63;
KotlinParser.RULE_elvisExpression = 64;
KotlinParser.RULE_infixFunctionCall = 65;
KotlinParser.RULE_rangeExpression = 66;
KotlinParser.RULE_additiveExpression = 67;
KotlinParser.RULE_multiplicativeExpression = 68;
KotlinParser.RULE_typeRHS = 69;
KotlinParser.RULE_prefixUnaryExpression = 70;
KotlinParser.RULE_postfixUnaryExpression = 71;
KotlinParser.RULE_atomicExpression = 72;
KotlinParser.RULE_parenthesizedExpression = 73;
KotlinParser.RULE_callSuffix = 74;
KotlinParser.RULE_annotatedLambda = 75;
KotlinParser.RULE_arrayAccess = 76;
KotlinParser.RULE_valueArguments = 77;
KotlinParser.RULE_typeArguments = 78;
KotlinParser.RULE_typeProjection = 79;
KotlinParser.RULE_typeProjectionModifierList = 80;
KotlinParser.RULE_valueArgument = 81;
KotlinParser.RULE_literalConstant = 82;
KotlinParser.RULE_stringLiteral = 83;
KotlinParser.RULE_lineStringLiteral = 84;
KotlinParser.RULE_multiLineStringLiteral = 85;
KotlinParser.RULE_lineStringContent = 86;
KotlinParser.RULE_lineStringExpression = 87;
KotlinParser.RULE_multiLineStringContent = 88;
KotlinParser.RULE_multiLineStringExpression = 89;
KotlinParser.RULE_functionLiteral = 90;
KotlinParser.RULE_lambdaParameters = 91;
KotlinParser.RULE_lambdaParameter = 92;
KotlinParser.RULE_objectLiteral = 93;
KotlinParser.RULE_collectionLiteral = 94;
KotlinParser.RULE_thisExpression = 95;
KotlinParser.RULE_superExpression = 96;
KotlinParser.RULE_conditionalExpression = 97;
KotlinParser.RULE_ifExpression = 98;
KotlinParser.RULE_controlStructureBody = 99;
KotlinParser.RULE_whenExpression = 100;
KotlinParser.RULE_whenEntry = 101;
KotlinParser.RULE_whenCondition = 102;
KotlinParser.RULE_rangeTest = 103;
KotlinParser.RULE_typeTest = 104;
KotlinParser.RULE_tryExpression = 105;
KotlinParser.RULE_catchBlock = 106;
KotlinParser.RULE_finallyBlock = 107;
KotlinParser.RULE_loopExpression = 108;
KotlinParser.RULE_forExpression = 109;
KotlinParser.RULE_whileExpression = 110;
KotlinParser.RULE_doWhileExpression = 111;
KotlinParser.RULE_jumpExpression = 112;
KotlinParser.RULE_callableReference = 113;
KotlinParser.RULE_assignmentOperator = 114;
KotlinParser.RULE_equalityOperation = 115;
KotlinParser.RULE_comparisonOperator = 116;
KotlinParser.RULE_inOperator = 117;
KotlinParser.RULE_isOperator = 118;
KotlinParser.RULE_additiveOperator = 119;
KotlinParser.RULE_multiplicativeOperation = 120;
KotlinParser.RULE_typeOperation = 121;
KotlinParser.RULE_prefixUnaryOperation = 122;
KotlinParser.RULE_postfixUnaryOperation = 123;
KotlinParser.RULE_memberAccessOperator = 124;
KotlinParser.RULE_modifierList = 125;
KotlinParser.RULE_modifier = 126;
KotlinParser.RULE_classModifier = 127;
KotlinParser.RULE_memberModifier = 128;
KotlinParser.RULE_visibilityModifier = 129;
KotlinParser.RULE_varianceAnnotation = 130;
KotlinParser.RULE_functionModifier = 131;
KotlinParser.RULE_propertyModifier = 132;
KotlinParser.RULE_inheritanceModifier = 133;
KotlinParser.RULE_parameterModifier = 134;
KotlinParser.RULE_typeParameterModifier = 135;
KotlinParser.RULE_labelDefinition = 136;
KotlinParser.RULE_annotations = 137;
KotlinParser.RULE_annotation = 138;
KotlinParser.RULE_annotationList = 139;
KotlinParser.RULE_annotationUseSiteTarget = 140;
KotlinParser.RULE_unescapedAnnotation = 141;
KotlinParser.RULE_identifier = 142;
KotlinParser.RULE_simpleIdentifier = 143;
KotlinParser.RULE_semi = 144;
KotlinParser.RULE_anysemi = 145;


function KotlinFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_kotlinFile;
    return this;
}

KotlinFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KotlinFileContext.prototype.constructor = KotlinFileContext;

KotlinFileContext.prototype.preamble = function() {
    return this.getTypedRuleContext(PreambleContext,0);
};

KotlinFileContext.prototype.EOF = function() {
    return this.getToken(KotlinParser.EOF, 0);
};

KotlinFileContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


KotlinFileContext.prototype.anysemi = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnysemiContext);
    } else {
        return this.getTypedRuleContext(AnysemiContext,i);
    }
};

KotlinFileContext.prototype.topLevelObject = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopLevelObjectContext);
    } else {
        return this.getTypedRuleContext(TopLevelObjectContext,i);
    }
};

KotlinFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterKotlinFile(this);
	}
};

KotlinFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitKotlinFile(this);
	}
};




KotlinParser.KotlinFileContext = KotlinFileContext;

KotlinParser.prototype.kotlinFile = function() {

    var localctx = new KotlinFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, KotlinParser.RULE_kotlinFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 295;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 292;
                this.match(KotlinParser.NL); 
            }
            this.state = 297;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
        }

        this.state = 298;
        this.preamble();
        this.state = 302;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL || _la===KotlinParser.SEMICOLON) {
            this.state = 299;
            this.anysemi();
            this.state = 304;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 319;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 305;
            this.topLevelObject();
            this.state = 316;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL || _la===KotlinParser.SEMICOLON) {
                this.state = 307; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 306;
                		this.anysemi();
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 309; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,2, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                this.state = 312;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
                    this.state = 311;
                    this.topLevelObject();
                }

                this.state = 318;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 321;
        this.match(KotlinParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_script;
    return this;
}

ScriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptContext.prototype.constructor = ScriptContext;

ScriptContext.prototype.preamble = function() {
    return this.getTypedRuleContext(PreambleContext,0);
};

ScriptContext.prototype.EOF = function() {
    return this.getToken(KotlinParser.EOF, 0);
};

ScriptContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ScriptContext.prototype.anysemi = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnysemiContext);
    } else {
        return this.getTypedRuleContext(AnysemiContext,i);
    }
};

ScriptContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ScriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterScript(this);
	}
};

ScriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitScript(this);
	}
};




KotlinParser.ScriptContext = ScriptContext;

KotlinParser.prototype.script = function() {

    var localctx = new ScriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, KotlinParser.RULE_script);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 323;
                this.match(KotlinParser.NL); 
            }
            this.state = 328;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
        }

        this.state = 329;
        this.preamble();
        this.state = 333;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 330;
                this.anysemi(); 
            }
            this.state = 335;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
        }

        this.state = 350;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (KotlinParser.COLONCOLON - 36)) | (1 << (KotlinParser.Q_COLONCOLON - 36)) | (1 << (KotlinParser.AT - 36)) | (1 << (KotlinParser.RETURN_AT - 36)) | (1 << (KotlinParser.CONTINUE_AT - 36)) | (1 << (KotlinParser.BREAK_AT - 36)) | (1 << (KotlinParser.FILE - 36)) | (1 << (KotlinParser.IMPORT - 36)) | (1 << (KotlinParser.OBJECT - 36)) | (1 << (KotlinParser.CONSTRUCTOR - 36)) | (1 << (KotlinParser.BY - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (KotlinParser.COMPANION - 68)) | (1 << (KotlinParser.INIT - 68)) | (1 << (KotlinParser.THIS - 68)) | (1 << (KotlinParser.SUPER - 68)) | (1 << (KotlinParser.WHERE - 68)) | (1 << (KotlinParser.IF - 68)) | (1 << (KotlinParser.WHEN - 68)) | (1 << (KotlinParser.TRY - 68)) | (1 << (KotlinParser.CATCH - 68)) | (1 << (KotlinParser.FINALLY - 68)) | (1 << (KotlinParser.FOR - 68)) | (1 << (KotlinParser.DO - 68)) | (1 << (KotlinParser.WHILE - 68)) | (1 << (KotlinParser.THROW - 68)) | (1 << (KotlinParser.RETURN - 68)) | (1 << (KotlinParser.CONTINUE - 68)) | (1 << (KotlinParser.BREAK - 68)) | (1 << (KotlinParser.OUT - 68)) | (1 << (KotlinParser.FIELD - 68)) | (1 << (KotlinParser.PROPERTY - 68)) | (1 << (KotlinParser.GET - 68)) | (1 << (KotlinParser.SET - 68)) | (1 << (KotlinParser.GETTER - 68)) | (1 << (KotlinParser.SETTER - 68)) | (1 << (KotlinParser.RECEIVER - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (KotlinParser.PARAM - 100)) | (1 << (KotlinParser.SETPARAM - 100)) | (1 << (KotlinParser.DELEGATE - 100)) | (1 << (KotlinParser.DYNAMIC - 100)) | (1 << (KotlinParser.PUBLIC - 100)) | (1 << (KotlinParser.PRIVATE - 100)) | (1 << (KotlinParser.PROTECTED - 100)) | (1 << (KotlinParser.INTERNAL - 100)) | (1 << (KotlinParser.ENUM - 100)) | (1 << (KotlinParser.SEALED - 100)) | (1 << (KotlinParser.ANNOTATION - 100)) | (1 << (KotlinParser.DATA - 100)) | (1 << (KotlinParser.INNER - 100)) | (1 << (KotlinParser.TAILREC - 100)) | (1 << (KotlinParser.OPERATOR - 100)) | (1 << (KotlinParser.INLINE - 100)) | (1 << (KotlinParser.INFIX - 100)) | (1 << (KotlinParser.EXTERNAL - 100)) | (1 << (KotlinParser.SUSPEND - 100)) | (1 << (KotlinParser.OVERRIDE - 100)) | (1 << (KotlinParser.ABSTRACT - 100)) | (1 << (KotlinParser.FINAL - 100)) | (1 << (KotlinParser.OPEN - 100)) | (1 << (KotlinParser.CONST - 100)) | (1 << (KotlinParser.LATEINIT - 100)) | (1 << (KotlinParser.VARARG - 100)) | (1 << (KotlinParser.NOINLINE - 100)) | (1 << (KotlinParser.CROSSINLINE - 100)) | (1 << (KotlinParser.REIFIED - 100)) | (1 << (KotlinParser.QUOTE_OPEN - 100)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 100)) | (1 << (KotlinParser.RealLiteral - 100)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (KotlinParser.LongLiteral - 134)) | (1 << (KotlinParser.IntegerLiteral - 134)) | (1 << (KotlinParser.HexLiteral - 134)) | (1 << (KotlinParser.BinLiteral - 134)) | (1 << (KotlinParser.BooleanLiteral - 134)) | (1 << (KotlinParser.NullLiteral - 134)) | (1 << (KotlinParser.Identifier - 134)) | (1 << (KotlinParser.LabelReference - 134)) | (1 << (KotlinParser.LabelDefinition - 134)) | (1 << (KotlinParser.CharacterLiteral - 134)))) !== 0)) {
            this.state = 336;
            this.expression();
            this.state = 347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL || _la===KotlinParser.SEMICOLON) {
                this.state = 338; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 337;
                		this.anysemi();
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 340; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,8, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                this.state = 343;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
                if(la_===1) {
                    this.state = 342;
                    this.expression();

                }
                this.state = 349;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 352;
        this.match(KotlinParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PreambleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_preamble;
    return this;
}

PreambleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreambleContext.prototype.constructor = PreambleContext;

PreambleContext.prototype.packageHeader = function() {
    return this.getTypedRuleContext(PackageHeaderContext,0);
};

PreambleContext.prototype.importList = function() {
    return this.getTypedRuleContext(ImportListContext,0);
};

PreambleContext.prototype.fileAnnotations = function() {
    return this.getTypedRuleContext(FileAnnotationsContext,0);
};

PreambleContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterPreamble(this);
	}
};

PreambleContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitPreamble(this);
	}
};




KotlinParser.PreambleContext = PreambleContext;

KotlinParser.prototype.preamble = function() {

    var localctx = new PreambleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, KotlinParser.RULE_preamble);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        if(la_===1) {
            this.state = 354;
            this.fileAnnotations();

        }
        this.state = 357;
        this.packageHeader();
        this.state = 358;
        this.importList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FileAnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_fileAnnotations;
    return this;
}

FileAnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileAnnotationsContext.prototype.constructor = FileAnnotationsContext;

FileAnnotationsContext.prototype.fileAnnotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FileAnnotationContext);
    } else {
        return this.getTypedRuleContext(FileAnnotationContext,i);
    }
};

FileAnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFileAnnotations(this);
	}
};

FileAnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFileAnnotations(this);
	}
};




KotlinParser.FileAnnotationsContext = FileAnnotationsContext;

KotlinParser.prototype.fileAnnotations = function() {

    var localctx = new FileAnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, KotlinParser.RULE_fileAnnotations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 361; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 360;
        		this.fileAnnotation();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 363; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,13, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FileAnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_fileAnnotation;
    return this;
}

FileAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileAnnotationContext.prototype.constructor = FileAnnotationContext;

FileAnnotationContext.prototype.FILE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.FILE);
    } else {
        return this.getToken(KotlinParser.FILE, i);
    }
};


FileAnnotationContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COLON);
    } else {
        return this.getToken(KotlinParser.COLON, i);
    }
};


FileAnnotationContext.prototype.LSQUARE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.LSQUARE);
    } else {
        return this.getToken(KotlinParser.LSQUARE, i);
    }
};


FileAnnotationContext.prototype.RSQUARE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.RSQUARE);
    } else {
        return this.getToken(KotlinParser.RSQUARE, i);
    }
};


FileAnnotationContext.prototype.unescapedAnnotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnescapedAnnotationContext);
    } else {
        return this.getTypedRuleContext(UnescapedAnnotationContext,i);
    }
};

FileAnnotationContext.prototype.semi = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SemiContext);
    } else {
        return this.getTypedRuleContext(SemiContext,i);
    }
};

FileAnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFileAnnotation(this);
	}
};

FileAnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFileAnnotation(this);
	}
};




KotlinParser.FileAnnotationContext = FileAnnotationContext;

KotlinParser.prototype.fileAnnotation = function() {

    var localctx = new FileAnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, KotlinParser.RULE_fileAnnotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 381; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 365;
        		this.match(KotlinParser.FILE);
        		this.state = 366;
        		this.match(KotlinParser.COLON);
        		this.state = 376;
        		this._errHandler.sync(this);
        		switch(this._input.LA(1)) {
        		case KotlinParser.LSQUARE:
        		    this.state = 367;
        		    this.match(KotlinParser.LSQUARE);
        		    this.state = 369; 
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    do {
        		        this.state = 368;
        		        this.unescapedAnnotation();
        		        this.state = 371; 
        		        this._errHandler.sync(this);
        		        _la = this._input.LA(1);
        		    } while(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (KotlinParser.OUT - 92)) | (1 << (KotlinParser.GETTER - 92)) | (1 << (KotlinParser.SETTER - 92)) | (1 << (KotlinParser.DYNAMIC - 92)) | (1 << (KotlinParser.PUBLIC - 92)) | (1 << (KotlinParser.PRIVATE - 92)) | (1 << (KotlinParser.PROTECTED - 92)) | (1 << (KotlinParser.INTERNAL - 92)) | (1 << (KotlinParser.ENUM - 92)) | (1 << (KotlinParser.SEALED - 92)) | (1 << (KotlinParser.ANNOTATION - 92)) | (1 << (KotlinParser.DATA - 92)) | (1 << (KotlinParser.INNER - 92)) | (1 << (KotlinParser.TAILREC - 92)) | (1 << (KotlinParser.OPERATOR - 92)) | (1 << (KotlinParser.INLINE - 92)) | (1 << (KotlinParser.INFIX - 92)) | (1 << (KotlinParser.EXTERNAL - 92)) | (1 << (KotlinParser.SUSPEND - 92)) | (1 << (KotlinParser.OVERRIDE - 92)) | (1 << (KotlinParser.ABSTRACT - 92)) | (1 << (KotlinParser.FINAL - 92)) | (1 << (KotlinParser.OPEN - 92)) | (1 << (KotlinParser.CONST - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (KotlinParser.LATEINIT - 124)) | (1 << (KotlinParser.VARARG - 124)) | (1 << (KotlinParser.NOINLINE - 124)) | (1 << (KotlinParser.CROSSINLINE - 124)) | (1 << (KotlinParser.REIFIED - 124)) | (1 << (KotlinParser.Identifier - 124)))) !== 0));
        		    this.state = 373;
        		    this.match(KotlinParser.RSQUARE);
        		    break;
        		case KotlinParser.IMPORT:
        		case KotlinParser.CONSTRUCTOR:
        		case KotlinParser.BY:
        		case KotlinParser.COMPANION:
        		case KotlinParser.INIT:
        		case KotlinParser.WHERE:
        		case KotlinParser.CATCH:
        		case KotlinParser.FINALLY:
        		case KotlinParser.OUT:
        		case KotlinParser.GETTER:
        		case KotlinParser.SETTER:
        		case KotlinParser.DYNAMIC:
        		case KotlinParser.PUBLIC:
        		case KotlinParser.PRIVATE:
        		case KotlinParser.PROTECTED:
        		case KotlinParser.INTERNAL:
        		case KotlinParser.ENUM:
        		case KotlinParser.SEALED:
        		case KotlinParser.ANNOTATION:
        		case KotlinParser.DATA:
        		case KotlinParser.INNER:
        		case KotlinParser.TAILREC:
        		case KotlinParser.OPERATOR:
        		case KotlinParser.INLINE:
        		case KotlinParser.INFIX:
        		case KotlinParser.EXTERNAL:
        		case KotlinParser.SUSPEND:
        		case KotlinParser.OVERRIDE:
        		case KotlinParser.ABSTRACT:
        		case KotlinParser.FINAL:
        		case KotlinParser.OPEN:
        		case KotlinParser.CONST:
        		case KotlinParser.LATEINIT:
        		case KotlinParser.VARARG:
        		case KotlinParser.NOINLINE:
        		case KotlinParser.CROSSINLINE:
        		case KotlinParser.REIFIED:
        		case KotlinParser.Identifier:
        		    this.state = 375;
        		    this.unescapedAnnotation();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		this.state = 379;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        		if(la_===1) {
        		    this.state = 378;
        		    this.semi();

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 383; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,17, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PackageHeaderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_packageHeader;
    return this;
}

PackageHeaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageHeaderContext.prototype.constructor = PackageHeaderContext;

PackageHeaderContext.prototype.PACKAGE = function() {
    return this.getToken(KotlinParser.PACKAGE, 0);
};

PackageHeaderContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PackageHeaderContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

PackageHeaderContext.prototype.semi = function() {
    return this.getTypedRuleContext(SemiContext,0);
};

PackageHeaderContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterPackageHeader(this);
	}
};

PackageHeaderContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitPackageHeader(this);
	}
};




KotlinParser.PackageHeaderContext = PackageHeaderContext;

KotlinParser.prototype.packageHeader = function() {

    var localctx = new PackageHeaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, KotlinParser.RULE_packageHeader);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 393;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        if(la_===1) {
            this.state = 386;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
                this.state = 385;
                this.modifierList();
            }

            this.state = 388;
            this.match(KotlinParser.PACKAGE);
            this.state = 389;
            this.identifier();
            this.state = 391;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            if(la_===1) {
                this.state = 390;
                this.semi();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_importList;
    return this;
}

ImportListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportListContext.prototype.constructor = ImportListContext;

ImportListContext.prototype.importHeader = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportHeaderContext);
    } else {
        return this.getTypedRuleContext(ImportHeaderContext,i);
    }
};

ImportListContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterImportList(this);
	}
};

ImportListContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitImportList(this);
	}
};




KotlinParser.ImportListContext = ImportListContext;

KotlinParser.prototype.importList = function() {

    var localctx = new ImportListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, KotlinParser.RULE_importList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 398;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 395;
                this.importHeader(); 
            }
            this.state = 400;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportHeaderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_importHeader;
    return this;
}

ImportHeaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportHeaderContext.prototype.constructor = ImportHeaderContext;

ImportHeaderContext.prototype.IMPORT = function() {
    return this.getToken(KotlinParser.IMPORT, 0);
};

ImportHeaderContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ImportHeaderContext.prototype.DOT = function() {
    return this.getToken(KotlinParser.DOT, 0);
};

ImportHeaderContext.prototype.MULT = function() {
    return this.getToken(KotlinParser.MULT, 0);
};

ImportHeaderContext.prototype.importAlias = function() {
    return this.getTypedRuleContext(ImportAliasContext,0);
};

ImportHeaderContext.prototype.semi = function() {
    return this.getTypedRuleContext(SemiContext,0);
};

ImportHeaderContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterImportHeader(this);
	}
};

ImportHeaderContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitImportHeader(this);
	}
};




KotlinParser.ImportHeaderContext = ImportHeaderContext;

KotlinParser.prototype.importHeader = function() {

    var localctx = new ImportHeaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, KotlinParser.RULE_importHeader);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 401;
        this.match(KotlinParser.IMPORT);
        this.state = 402;
        this.identifier();
        this.state = 406;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case KotlinParser.DOT:
        	this.state = 403;
        	this.match(KotlinParser.DOT);
        	this.state = 404;
        	this.match(KotlinParser.MULT);
        	break;
        case KotlinParser.AS:
        	this.state = 405;
        	this.importAlias();
        	break;
        case KotlinParser.EOF:
        case KotlinParser.NL:
        case KotlinParser.LPAREN:
        case KotlinParser.LSQUARE:
        case KotlinParser.LCURL:
        case KotlinParser.ADD:
        case KotlinParser.SUB:
        case KotlinParser.INCR:
        case KotlinParser.DECR:
        case KotlinParser.EXCL:
        case KotlinParser.SEMICOLON:
        case KotlinParser.COLONCOLON:
        case KotlinParser.Q_COLONCOLON:
        case KotlinParser.AT:
        case KotlinParser.RETURN_AT:
        case KotlinParser.CONTINUE_AT:
        case KotlinParser.BREAK_AT:
        case KotlinParser.FILE:
        case KotlinParser.IMPORT:
        case KotlinParser.CLASS:
        case KotlinParser.INTERFACE:
        case KotlinParser.FUN:
        case KotlinParser.OBJECT:
        case KotlinParser.VAL:
        case KotlinParser.VAR:
        case KotlinParser.TYPE_ALIAS:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.THIS:
        case KotlinParser.SUPER:
        case KotlinParser.WHERE:
        case KotlinParser.IF:
        case KotlinParser.WHEN:
        case KotlinParser.TRY:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.FOR:
        case KotlinParser.DO:
        case KotlinParser.WHILE:
        case KotlinParser.THROW:
        case KotlinParser.RETURN:
        case KotlinParser.CONTINUE:
        case KotlinParser.BREAK:
        case KotlinParser.IN:
        case KotlinParser.OUT:
        case KotlinParser.FIELD:
        case KotlinParser.PROPERTY:
        case KotlinParser.GET:
        case KotlinParser.SET:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.RECEIVER:
        case KotlinParser.PARAM:
        case KotlinParser.SETPARAM:
        case KotlinParser.DELEGATE:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.QUOTE_OPEN:
        case KotlinParser.TRIPLE_QUOTE_OPEN:
        case KotlinParser.RealLiteral:
        case KotlinParser.LongLiteral:
        case KotlinParser.IntegerLiteral:
        case KotlinParser.HexLiteral:
        case KotlinParser.BinLiteral:
        case KotlinParser.BooleanLiteral:
        case KotlinParser.NullLiteral:
        case KotlinParser.Identifier:
        case KotlinParser.LabelReference:
        case KotlinParser.LabelDefinition:
        case KotlinParser.CharacterLiteral:
        	break;
        default:
        	break;
        }
        this.state = 409;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        if(la_===1) {
            this.state = 408;
            this.semi();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_importAlias;
    return this;
}

ImportAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportAliasContext.prototype.constructor = ImportAliasContext;

ImportAliasContext.prototype.AS = function() {
    return this.getToken(KotlinParser.AS, 0);
};

ImportAliasContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

ImportAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterImportAlias(this);
	}
};

ImportAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitImportAlias(this);
	}
};




KotlinParser.ImportAliasContext = ImportAliasContext;

KotlinParser.prototype.importAlias = function() {

    var localctx = new ImportAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, KotlinParser.RULE_importAlias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.match(KotlinParser.AS);
        this.state = 412;
        this.simpleIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopLevelObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_topLevelObject;
    return this;
}

TopLevelObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopLevelObjectContext.prototype.constructor = TopLevelObjectContext;

TopLevelObjectContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

TopLevelObjectContext.prototype.objectDeclaration = function() {
    return this.getTypedRuleContext(ObjectDeclarationContext,0);
};

TopLevelObjectContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

TopLevelObjectContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

TopLevelObjectContext.prototype.typeAlias = function() {
    return this.getTypedRuleContext(TypeAliasContext,0);
};

TopLevelObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTopLevelObject(this);
	}
};

TopLevelObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTopLevelObject(this);
	}
};




KotlinParser.TopLevelObjectContext = TopLevelObjectContext;

KotlinParser.prototype.topLevelObject = function() {

    var localctx = new TopLevelObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, KotlinParser.RULE_topLevelObject);
    try {
        this.state = 419;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 414;
            this.classDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 415;
            this.objectDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 416;
            this.functionDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 417;
            this.propertyDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 418;
            this.typeAlias();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

ClassDeclarationContext.prototype.CLASS = function() {
    return this.getToken(KotlinParser.CLASS, 0);
};

ClassDeclarationContext.prototype.INTERFACE = function() {
    return this.getToken(KotlinParser.INTERFACE, 0);
};

ClassDeclarationContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

ClassDeclarationContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ClassDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

ClassDeclarationContext.prototype.primaryConstructor = function() {
    return this.getTypedRuleContext(PrimaryConstructorContext,0);
};

ClassDeclarationContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

ClassDeclarationContext.prototype.delegationSpecifiers = function() {
    return this.getTypedRuleContext(DelegationSpecifiersContext,0);
};

ClassDeclarationContext.prototype.typeConstraints = function() {
    return this.getTypedRuleContext(TypeConstraintsContext,0);
};

ClassDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassDeclarationContext.prototype.enumClassBody = function() {
    return this.getTypedRuleContext(EnumClassBodyContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitClassDeclaration(this);
	}
};




KotlinParser.ClassDeclarationContext = ClassDeclarationContext;

KotlinParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, KotlinParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 422;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 421;
            this.modifierList();
        }

        this.state = 424;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.CLASS || _la===KotlinParser.INTERFACE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 428;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 425;
            this.match(KotlinParser.NL);
            this.state = 430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 431;
        this.simpleIdentifier();
        this.state = 439;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 432;
                this.match(KotlinParser.NL);
                this.state = 437;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 438;
            this.typeParameters();

        }
        this.state = 448;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 441;
                this.match(KotlinParser.NL);
                this.state = 446;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 447;
            this.primaryConstructor();

        }
        this.state = 464;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 453;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 450;
                this.match(KotlinParser.NL);
                this.state = 455;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 456;
            this.match(KotlinParser.COLON);
            this.state = 460;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 457;
                this.match(KotlinParser.NL);
                this.state = 462;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 463;
            this.delegationSpecifiers();

        }
        this.state = 473;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 466;
                this.match(KotlinParser.NL);
                this.state = 471;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 472;
            this.typeConstraints();

        }
        this.state = 489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 475;
                this.match(KotlinParser.NL);
                this.state = 480;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 481;
            this.classBody();

        } else if(la_===2) {
            this.state = 485;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 482;
                this.match(KotlinParser.NL);
                this.state = 487;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 488;
            this.enumClassBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryConstructorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_primaryConstructor;
    return this;
}

PrimaryConstructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryConstructorContext.prototype.constructor = PrimaryConstructorContext;

PrimaryConstructorContext.prototype.classParameters = function() {
    return this.getTypedRuleContext(ClassParametersContext,0);
};

PrimaryConstructorContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

PrimaryConstructorContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(KotlinParser.CONSTRUCTOR, 0);
};

PrimaryConstructorContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


PrimaryConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterPrimaryConstructor(this);
	}
};

PrimaryConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitPrimaryConstructor(this);
	}
};




KotlinParser.PrimaryConstructorContext = PrimaryConstructorContext;

KotlinParser.prototype.primaryConstructor = function() {

    var localctx = new PrimaryConstructorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, KotlinParser.RULE_primaryConstructor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 491;
            this.modifierList();
        }

        this.state = 501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.CONSTRUCTOR) {
            this.state = 494;
            this.match(KotlinParser.CONSTRUCTOR);
            this.state = 498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 495;
                this.match(KotlinParser.NL);
                this.state = 500;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 503;
        this.classParameters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_classParameters;
    return this;
}

ClassParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassParametersContext.prototype.constructor = ClassParametersContext;

ClassParametersContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

ClassParametersContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

ClassParametersContext.prototype.classParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassParameterContext);
    } else {
        return this.getTypedRuleContext(ClassParameterContext,i);
    }
};

ClassParametersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


ClassParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterClassParameters(this);
	}
};

ClassParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitClassParameters(this);
	}
};




KotlinParser.ClassParametersContext = ClassParametersContext;

KotlinParser.prototype.classParameters = function() {

    var localctx = new ClassParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, KotlinParser.RULE_classParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.match(KotlinParser.LPAREN);
        this.state = 514;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (KotlinParser.WHERE - 73)) | (1 << (KotlinParser.CATCH - 73)) | (1 << (KotlinParser.FINALLY - 73)) | (1 << (KotlinParser.IN - 73)) | (1 << (KotlinParser.OUT - 73)) | (1 << (KotlinParser.FIELD - 73)) | (1 << (KotlinParser.PROPERTY - 73)) | (1 << (KotlinParser.GET - 73)) | (1 << (KotlinParser.SET - 73)) | (1 << (KotlinParser.GETTER - 73)) | (1 << (KotlinParser.SETTER - 73)) | (1 << (KotlinParser.RECEIVER - 73)) | (1 << (KotlinParser.PARAM - 73)) | (1 << (KotlinParser.SETPARAM - 73)) | (1 << (KotlinParser.DELEGATE - 73)) | (1 << (KotlinParser.DYNAMIC - 73)) | (1 << (KotlinParser.PUBLIC - 73)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (KotlinParser.PRIVATE - 105)) | (1 << (KotlinParser.PROTECTED - 105)) | (1 << (KotlinParser.INTERNAL - 105)) | (1 << (KotlinParser.ENUM - 105)) | (1 << (KotlinParser.SEALED - 105)) | (1 << (KotlinParser.ANNOTATION - 105)) | (1 << (KotlinParser.DATA - 105)) | (1 << (KotlinParser.INNER - 105)) | (1 << (KotlinParser.TAILREC - 105)) | (1 << (KotlinParser.OPERATOR - 105)) | (1 << (KotlinParser.INLINE - 105)) | (1 << (KotlinParser.INFIX - 105)) | (1 << (KotlinParser.EXTERNAL - 105)) | (1 << (KotlinParser.SUSPEND - 105)) | (1 << (KotlinParser.OVERRIDE - 105)) | (1 << (KotlinParser.ABSTRACT - 105)) | (1 << (KotlinParser.FINAL - 105)) | (1 << (KotlinParser.OPEN - 105)) | (1 << (KotlinParser.CONST - 105)) | (1 << (KotlinParser.LATEINIT - 105)) | (1 << (KotlinParser.VARARG - 105)) | (1 << (KotlinParser.NOINLINE - 105)) | (1 << (KotlinParser.CROSSINLINE - 105)) | (1 << (KotlinParser.REIFIED - 105)))) !== 0) || _la===KotlinParser.Identifier || _la===KotlinParser.LabelReference) {
            this.state = 506;
            this.classParameter();
            this.state = 511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.COMMA) {
                this.state = 507;
                this.match(KotlinParser.COMMA);
                this.state = 508;
                this.classParameter();
                this.state = 513;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 516;
        this.match(KotlinParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_classParameter;
    return this;
}

ClassParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassParameterContext.prototype.constructor = ClassParameterContext;

ClassParameterContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

ClassParameterContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

ClassParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ClassParameterContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

ClassParameterContext.prototype.ASSIGNMENT = function() {
    return this.getToken(KotlinParser.ASSIGNMENT, 0);
};

ClassParameterContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ClassParameterContext.prototype.VAL = function() {
    return this.getToken(KotlinParser.VAL, 0);
};

ClassParameterContext.prototype.VAR = function() {
    return this.getToken(KotlinParser.VAR, 0);
};

ClassParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterClassParameter(this);
	}
};

ClassParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitClassParameter(this);
	}
};




KotlinParser.ClassParameterContext = ClassParameterContext;

KotlinParser.prototype.classParameter = function() {

    var localctx = new ClassParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, KotlinParser.RULE_classParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 518;
            this.modifierList();

        }
        this.state = 522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.VAL || _la===KotlinParser.VAR) {
            this.state = 521;
            _la = this._input.LA(1);
            if(!(_la===KotlinParser.VAL || _la===KotlinParser.VAR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 524;
        this.simpleIdentifier();
        this.state = 525;
        this.match(KotlinParser.COLON);
        this.state = 526;
        this.type();
        this.state = 529;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.ASSIGNMENT) {
            this.state = 527;
            this.match(KotlinParser.ASSIGNMENT);
            this.state = 528;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DelegationSpecifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_delegationSpecifiers;
    return this;
}

DelegationSpecifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DelegationSpecifiersContext.prototype.constructor = DelegationSpecifiersContext;

DelegationSpecifiersContext.prototype.delegationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DelegationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DelegationSpecifierContext,i);
    }
};

DelegationSpecifiersContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

DelegationSpecifiersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


DelegationSpecifiersContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


DelegationSpecifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterDelegationSpecifiers(this);
	}
};

DelegationSpecifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitDelegationSpecifiers(this);
	}
};




KotlinParser.DelegationSpecifiersContext = DelegationSpecifiersContext;

KotlinParser.prototype.delegationSpecifiers = function() {

    var localctx = new DelegationSpecifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, KotlinParser.RULE_delegationSpecifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)))) !== 0) || _la===KotlinParser.LabelReference) {
            this.state = 531;
            this.annotations();
            this.state = 536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 537;
        this.delegationSpecifier();
        this.state = 554;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 541;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 538;
                    this.match(KotlinParser.NL);
                    this.state = 543;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 544;
                this.match(KotlinParser.COMMA);
                this.state = 548;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 545;
                    this.match(KotlinParser.NL);
                    this.state = 550;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 551;
                this.delegationSpecifier(); 
            }
            this.state = 556;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DelegationSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_delegationSpecifier;
    return this;
}

DelegationSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DelegationSpecifierContext.prototype.constructor = DelegationSpecifierContext;

DelegationSpecifierContext.prototype.constructorInvocation = function() {
    return this.getTypedRuleContext(ConstructorInvocationContext,0);
};

DelegationSpecifierContext.prototype.userType = function() {
    return this.getTypedRuleContext(UserTypeContext,0);
};

DelegationSpecifierContext.prototype.explicitDelegation = function() {
    return this.getTypedRuleContext(ExplicitDelegationContext,0);
};

DelegationSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterDelegationSpecifier(this);
	}
};

DelegationSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitDelegationSpecifier(this);
	}
};




KotlinParser.DelegationSpecifierContext = DelegationSpecifierContext;

KotlinParser.prototype.delegationSpecifier = function() {

    var localctx = new DelegationSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, KotlinParser.RULE_delegationSpecifier);
    try {
        this.state = 560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 557;
            this.constructorInvocation();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 558;
            this.userType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 559;
            this.explicitDelegation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstructorInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_constructorInvocation;
    return this;
}

ConstructorInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorInvocationContext.prototype.constructor = ConstructorInvocationContext;

ConstructorInvocationContext.prototype.userType = function() {
    return this.getTypedRuleContext(UserTypeContext,0);
};

ConstructorInvocationContext.prototype.callSuffix = function() {
    return this.getTypedRuleContext(CallSuffixContext,0);
};

ConstructorInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterConstructorInvocation(this);
	}
};

ConstructorInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitConstructorInvocation(this);
	}
};




KotlinParser.ConstructorInvocationContext = ConstructorInvocationContext;

KotlinParser.prototype.constructorInvocation = function() {

    var localctx = new ConstructorInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, KotlinParser.RULE_constructorInvocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this.userType();
        this.state = 563;
        this.callSuffix();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplicitDelegationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_explicitDelegation;
    return this;
}

ExplicitDelegationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitDelegationContext.prototype.constructor = ExplicitDelegationContext;

ExplicitDelegationContext.prototype.userType = function() {
    return this.getTypedRuleContext(UserTypeContext,0);
};

ExplicitDelegationContext.prototype.BY = function() {
    return this.getToken(KotlinParser.BY, 0);
};

ExplicitDelegationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExplicitDelegationContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ExplicitDelegationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterExplicitDelegation(this);
	}
};

ExplicitDelegationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitExplicitDelegation(this);
	}
};




KotlinParser.ExplicitDelegationContext = ExplicitDelegationContext;

KotlinParser.prototype.explicitDelegation = function() {

    var localctx = new ExplicitDelegationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, KotlinParser.RULE_explicitDelegation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 565;
        this.userType();
        this.state = 569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 566;
            this.match(KotlinParser.NL);
            this.state = 571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 572;
        this.match(KotlinParser.BY);
        this.state = 576;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 573;
                this.match(KotlinParser.NL); 
            }
            this.state = 578;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
        }

        this.state = 579;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.LCURL = function() {
    return this.getToken(KotlinParser.LCURL, 0);
};

ClassBodyContext.prototype.RCURL = function() {
    return this.getToken(KotlinParser.RCURL, 0);
};

ClassBodyContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ClassBodyContext.prototype.classMemberDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassMemberDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassMemberDeclarationContext,i);
    }
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitClassBody(this);
	}
};




KotlinParser.ClassBodyContext = ClassBodyContext;

KotlinParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, KotlinParser.RULE_classBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 581;
        this.match(KotlinParser.LCURL);
        this.state = 585;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 582;
                this.match(KotlinParser.NL); 
            }
            this.state = 587;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 588;
            this.classMemberDeclaration();
            this.state = 593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 597;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 594;
            this.match(KotlinParser.NL);
            this.state = 599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 600;
        this.match(KotlinParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_classMemberDeclaration;
    return this;
}

ClassMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassMemberDeclarationContext.prototype.constructor = ClassMemberDeclarationContext;

ClassMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.objectDeclaration = function() {
    return this.getTypedRuleContext(ObjectDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.companionObject = function() {
    return this.getTypedRuleContext(CompanionObjectContext,0);
};

ClassMemberDeclarationContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.anonymousInitializer = function() {
    return this.getTypedRuleContext(AnonymousInitializerContext,0);
};

ClassMemberDeclarationContext.prototype.secondaryConstructor = function() {
    return this.getTypedRuleContext(SecondaryConstructorContext,0);
};

ClassMemberDeclarationContext.prototype.typeAlias = function() {
    return this.getTypedRuleContext(TypeAliasContext,0);
};

ClassMemberDeclarationContext.prototype.anysemi = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnysemiContext);
    } else {
        return this.getTypedRuleContext(AnysemiContext,i);
    }
};

ClassMemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterClassMemberDeclaration(this);
	}
};

ClassMemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitClassMemberDeclaration(this);
	}
};




KotlinParser.ClassMemberDeclarationContext = ClassMemberDeclarationContext;

KotlinParser.prototype.classMemberDeclaration = function() {

    var localctx = new ClassMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, KotlinParser.RULE_classMemberDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.state = 602;
            this.classDeclaration();
            break;

        case 2:
            this.state = 603;
            this.functionDeclaration();
            break;

        case 3:
            this.state = 604;
            this.objectDeclaration();
            break;

        case 4:
            this.state = 605;
            this.companionObject();
            break;

        case 5:
            this.state = 606;
            this.propertyDeclaration();
            break;

        case 6:
            this.state = 607;
            this.anonymousInitializer();
            break;

        case 7:
            this.state = 608;
            this.secondaryConstructor();
            break;

        case 8:
            this.state = 609;
            this.typeAlias();
            break;

        }
        this.state = 615;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 612;
                this.anysemi(); 
            }
            this.state = 617;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnonymousInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_anonymousInitializer;
    return this;
}

AnonymousInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonymousInitializerContext.prototype.constructor = AnonymousInitializerContext;

AnonymousInitializerContext.prototype.INIT = function() {
    return this.getToken(KotlinParser.INIT, 0);
};

AnonymousInitializerContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

AnonymousInitializerContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


AnonymousInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAnonymousInitializer(this);
	}
};

AnonymousInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAnonymousInitializer(this);
	}
};




KotlinParser.AnonymousInitializerContext = AnonymousInitializerContext;

KotlinParser.prototype.anonymousInitializer = function() {

    var localctx = new AnonymousInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, KotlinParser.RULE_anonymousInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.match(KotlinParser.INIT);
        this.state = 622;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 619;
            this.match(KotlinParser.NL);
            this.state = 624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 625;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SecondaryConstructorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_secondaryConstructor;
    return this;
}

SecondaryConstructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SecondaryConstructorContext.prototype.constructor = SecondaryConstructorContext;

SecondaryConstructorContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(KotlinParser.CONSTRUCTOR, 0);
};

SecondaryConstructorContext.prototype.functionValueParameters = function() {
    return this.getTypedRuleContext(FunctionValueParametersContext,0);
};

SecondaryConstructorContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

SecondaryConstructorContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

SecondaryConstructorContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


SecondaryConstructorContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

SecondaryConstructorContext.prototype.constructorDelegationCall = function() {
    return this.getTypedRuleContext(ConstructorDelegationCallContext,0);
};

SecondaryConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterSecondaryConstructor(this);
	}
};

SecondaryConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitSecondaryConstructor(this);
	}
};




KotlinParser.SecondaryConstructorContext = SecondaryConstructorContext;

KotlinParser.prototype.secondaryConstructor = function() {

    var localctx = new SecondaryConstructorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, KotlinParser.RULE_secondaryConstructor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 627;
            this.modifierList();
        }

        this.state = 630;
        this.match(KotlinParser.CONSTRUCTOR);
        this.state = 634;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 631;
            this.match(KotlinParser.NL);
            this.state = 636;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 637;
        this.functionValueParameters();
        this.state = 652;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        if(la_===1) {
            this.state = 641;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 638;
                this.match(KotlinParser.NL);
                this.state = 643;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 644;
            this.match(KotlinParser.COLON);
            this.state = 648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 645;
                this.match(KotlinParser.NL);
                this.state = 650;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 651;
            this.constructorDelegationCall();

        }
        this.state = 657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 654;
            this.match(KotlinParser.NL);
            this.state = 659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 660;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstructorDelegationCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_constructorDelegationCall;
    return this;
}

ConstructorDelegationCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDelegationCallContext.prototype.constructor = ConstructorDelegationCallContext;

ConstructorDelegationCallContext.prototype.THIS = function() {
    return this.getToken(KotlinParser.THIS, 0);
};

ConstructorDelegationCallContext.prototype.valueArguments = function() {
    return this.getTypedRuleContext(ValueArgumentsContext,0);
};

ConstructorDelegationCallContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ConstructorDelegationCallContext.prototype.SUPER = function() {
    return this.getToken(KotlinParser.SUPER, 0);
};

ConstructorDelegationCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterConstructorDelegationCall(this);
	}
};

ConstructorDelegationCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitConstructorDelegationCall(this);
	}
};




KotlinParser.ConstructorDelegationCallContext = ConstructorDelegationCallContext;

KotlinParser.prototype.constructorDelegationCall = function() {

    var localctx = new ConstructorDelegationCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, KotlinParser.RULE_constructorDelegationCall);
    var _la = 0; // Token type
    try {
        this.state = 678;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.THIS:
            this.enterOuterAlt(localctx, 1);
            this.state = 662;
            this.match(KotlinParser.THIS);
            this.state = 666;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 663;
                this.match(KotlinParser.NL);
                this.state = 668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 669;
            this.valueArguments();
            break;
        case KotlinParser.SUPER:
            this.enterOuterAlt(localctx, 2);
            this.state = 670;
            this.match(KotlinParser.SUPER);
            this.state = 674;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 671;
                this.match(KotlinParser.NL);
                this.state = 676;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 677;
            this.valueArguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_enumClassBody;
    return this;
}

EnumClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumClassBodyContext.prototype.constructor = EnumClassBodyContext;

EnumClassBodyContext.prototype.LCURL = function() {
    return this.getToken(KotlinParser.LCURL, 0);
};

EnumClassBodyContext.prototype.RCURL = function() {
    return this.getToken(KotlinParser.RCURL, 0);
};

EnumClassBodyContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


EnumClassBodyContext.prototype.enumEntries = function() {
    return this.getTypedRuleContext(EnumEntriesContext,0);
};

EnumClassBodyContext.prototype.SEMICOLON = function() {
    return this.getToken(KotlinParser.SEMICOLON, 0);
};

EnumClassBodyContext.prototype.classMemberDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassMemberDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassMemberDeclarationContext,i);
    }
};

EnumClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterEnumClassBody(this);
	}
};

EnumClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitEnumClassBody(this);
	}
};




KotlinParser.EnumClassBodyContext = EnumClassBodyContext;

KotlinParser.prototype.enumClassBody = function() {

    var localctx = new EnumClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, KotlinParser.RULE_enumClassBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 680;
        this.match(KotlinParser.LCURL);
        this.state = 684;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 681;
                this.match(KotlinParser.NL); 
            }
            this.state = 686;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

        this.state = 688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (KotlinParser.OUT - 92)) | (1 << (KotlinParser.GETTER - 92)) | (1 << (KotlinParser.SETTER - 92)) | (1 << (KotlinParser.DYNAMIC - 92)) | (1 << (KotlinParser.PUBLIC - 92)) | (1 << (KotlinParser.PRIVATE - 92)) | (1 << (KotlinParser.PROTECTED - 92)) | (1 << (KotlinParser.INTERNAL - 92)) | (1 << (KotlinParser.ENUM - 92)) | (1 << (KotlinParser.SEALED - 92)) | (1 << (KotlinParser.ANNOTATION - 92)) | (1 << (KotlinParser.DATA - 92)) | (1 << (KotlinParser.INNER - 92)) | (1 << (KotlinParser.TAILREC - 92)) | (1 << (KotlinParser.OPERATOR - 92)) | (1 << (KotlinParser.INLINE - 92)) | (1 << (KotlinParser.INFIX - 92)) | (1 << (KotlinParser.EXTERNAL - 92)) | (1 << (KotlinParser.SUSPEND - 92)) | (1 << (KotlinParser.OVERRIDE - 92)) | (1 << (KotlinParser.ABSTRACT - 92)) | (1 << (KotlinParser.FINAL - 92)) | (1 << (KotlinParser.OPEN - 92)) | (1 << (KotlinParser.CONST - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (KotlinParser.LATEINIT - 124)) | (1 << (KotlinParser.VARARG - 124)) | (1 << (KotlinParser.NOINLINE - 124)) | (1 << (KotlinParser.CROSSINLINE - 124)) | (1 << (KotlinParser.REIFIED - 124)) | (1 << (KotlinParser.Identifier - 124)))) !== 0)) {
            this.state = 687;
            this.enumEntries();
        }

        this.state = 709;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 693;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 690;
                this.match(KotlinParser.NL);
                this.state = 695;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 696;
            this.match(KotlinParser.SEMICOLON);
            this.state = 700;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 697;
                    this.match(KotlinParser.NL); 
                }
                this.state = 702;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
            }

            this.state = 706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
                this.state = 703;
                this.classMemberDeclaration();
                this.state = 708;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 711;
            this.match(KotlinParser.NL);
            this.state = 716;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 717;
        this.match(KotlinParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumEntriesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_enumEntries;
    return this;
}

EnumEntriesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumEntriesContext.prototype.constructor = EnumEntriesContext;

EnumEntriesContext.prototype.enumEntry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumEntryContext);
    } else {
        return this.getTypedRuleContext(EnumEntryContext,i);
    }
};

EnumEntriesContext.prototype.SEMICOLON = function() {
    return this.getToken(KotlinParser.SEMICOLON, 0);
};

EnumEntriesContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


EnumEntriesContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterEnumEntries(this);
	}
};

EnumEntriesContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitEnumEntries(this);
	}
};




KotlinParser.EnumEntriesContext = EnumEntriesContext;

KotlinParser.prototype.enumEntries = function() {

    var localctx = new EnumEntriesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, KotlinParser.RULE_enumEntries);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 726; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 719;
            this.enumEntry();
            this.state = 723;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 720;
                    this.match(KotlinParser.NL); 
                }
                this.state = 725;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
            }

            this.state = 728; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (KotlinParser.OUT - 92)) | (1 << (KotlinParser.GETTER - 92)) | (1 << (KotlinParser.SETTER - 92)) | (1 << (KotlinParser.DYNAMIC - 92)) | (1 << (KotlinParser.PUBLIC - 92)) | (1 << (KotlinParser.PRIVATE - 92)) | (1 << (KotlinParser.PROTECTED - 92)) | (1 << (KotlinParser.INTERNAL - 92)) | (1 << (KotlinParser.ENUM - 92)) | (1 << (KotlinParser.SEALED - 92)) | (1 << (KotlinParser.ANNOTATION - 92)) | (1 << (KotlinParser.DATA - 92)) | (1 << (KotlinParser.INNER - 92)) | (1 << (KotlinParser.TAILREC - 92)) | (1 << (KotlinParser.OPERATOR - 92)) | (1 << (KotlinParser.INLINE - 92)) | (1 << (KotlinParser.INFIX - 92)) | (1 << (KotlinParser.EXTERNAL - 92)) | (1 << (KotlinParser.SUSPEND - 92)) | (1 << (KotlinParser.OVERRIDE - 92)) | (1 << (KotlinParser.ABSTRACT - 92)) | (1 << (KotlinParser.FINAL - 92)) | (1 << (KotlinParser.OPEN - 92)) | (1 << (KotlinParser.CONST - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (KotlinParser.LATEINIT - 124)) | (1 << (KotlinParser.VARARG - 124)) | (1 << (KotlinParser.NOINLINE - 124)) | (1 << (KotlinParser.CROSSINLINE - 124)) | (1 << (KotlinParser.REIFIED - 124)) | (1 << (KotlinParser.Identifier - 124)))) !== 0));
        this.state = 731;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        if(la_===1) {
            this.state = 730;
            this.match(KotlinParser.SEMICOLON);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumEntryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_enumEntry;
    return this;
}

EnumEntryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumEntryContext.prototype.constructor = EnumEntryContext;

EnumEntryContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

EnumEntryContext.prototype.valueArguments = function() {
    return this.getTypedRuleContext(ValueArgumentsContext,0);
};

EnumEntryContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

EnumEntryContext.prototype.COMMA = function() {
    return this.getToken(KotlinParser.COMMA, 0);
};

EnumEntryContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


EnumEntryContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterEnumEntry(this);
	}
};

EnumEntryContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitEnumEntry(this);
	}
};




KotlinParser.EnumEntryContext = EnumEntryContext;

KotlinParser.prototype.enumEntry = function() {

    var localctx = new EnumEntryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, KotlinParser.RULE_enumEntry);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 733;
        this.simpleIdentifier();
        this.state = 741;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        if(la_===1) {
            this.state = 737;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 734;
                this.match(KotlinParser.NL);
                this.state = 739;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 740;
            this.valueArguments();

        }
        this.state = 750;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        if(la_===1) {
            this.state = 746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 743;
                this.match(KotlinParser.NL);
                this.state = 748;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 749;
            this.classBody();

        }
        this.state = 759;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 752;
                this.match(KotlinParser.NL);
                this.state = 757;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 758;
            this.match(KotlinParser.COMMA);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.FUN = function() {
    return this.getToken(KotlinParser.FUN, 0);
};

FunctionDeclarationContext.prototype.functionValueParameters = function() {
    return this.getTypedRuleContext(FunctionValueParametersContext,0);
};

FunctionDeclarationContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

FunctionDeclarationContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

FunctionDeclarationContext.prototype.DOT = function() {
    return this.getToken(KotlinParser.DOT, 0);
};

FunctionDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

FunctionDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDeclarationContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


FunctionDeclarationContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

FunctionDeclarationContext.prototype.typeConstraints = function() {
    return this.getTypedRuleContext(TypeConstraintsContext,0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




KotlinParser.FunctionDeclarationContext = FunctionDeclarationContext;

KotlinParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, KotlinParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 762;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 761;
            this.modifierList();
        }

        this.state = 764;
        this.match(KotlinParser.FUN);
        this.state = 780;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        if(la_===1) {
            this.state = 768;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 765;
                this.match(KotlinParser.NL);
                this.state = 770;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 771;
            this.type();
            this.state = 775;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 772;
                this.match(KotlinParser.NL);
                this.state = 777;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 778;
            this.match(KotlinParser.DOT);

        }
        this.state = 789;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        if(la_===1) {
            this.state = 785;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 782;
                this.match(KotlinParser.NL);
                this.state = 787;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 788;
            this.typeParameters();

        }
        this.state = 798;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        if(la_===1) {
            this.state = 794;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 791;
                this.match(KotlinParser.NL);
                this.state = 796;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 797;
            this.identifier();

        }
        this.state = 803;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 800;
            this.match(KotlinParser.NL);
            this.state = 805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 806;
        this.functionValueParameters();
        this.state = 821;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        if(la_===1) {
            this.state = 810;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 807;
                this.match(KotlinParser.NL);
                this.state = 812;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 813;
            this.match(KotlinParser.COLON);
            this.state = 817;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 814;
                this.match(KotlinParser.NL);
                this.state = 819;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 820;
            this.type();

        }
        this.state = 830;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        if(la_===1) {
            this.state = 826;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 823;
                this.match(KotlinParser.NL);
                this.state = 828;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 829;
            this.typeConstraints();

        }
        this.state = 839;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        if(la_===1) {
            this.state = 835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 832;
                this.match(KotlinParser.NL);
                this.state = 837;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 838;
            this.functionBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionValueParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_functionValueParameters;
    return this;
}

FunctionValueParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionValueParametersContext.prototype.constructor = FunctionValueParametersContext;

FunctionValueParametersContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

FunctionValueParametersContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

FunctionValueParametersContext.prototype.functionValueParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionValueParameterContext);
    } else {
        return this.getTypedRuleContext(FunctionValueParameterContext,i);
    }
};

FunctionValueParametersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


FunctionValueParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFunctionValueParameters(this);
	}
};

FunctionValueParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFunctionValueParameters(this);
	}
};




KotlinParser.FunctionValueParametersContext = FunctionValueParametersContext;

KotlinParser.prototype.functionValueParameters = function() {

    var localctx = new FunctionValueParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, KotlinParser.RULE_functionValueParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 841;
        this.match(KotlinParser.LPAREN);
        this.state = 850;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (KotlinParser.WHERE - 73)) | (1 << (KotlinParser.CATCH - 73)) | (1 << (KotlinParser.FINALLY - 73)) | (1 << (KotlinParser.IN - 73)) | (1 << (KotlinParser.OUT - 73)) | (1 << (KotlinParser.FIELD - 73)) | (1 << (KotlinParser.PROPERTY - 73)) | (1 << (KotlinParser.GET - 73)) | (1 << (KotlinParser.SET - 73)) | (1 << (KotlinParser.GETTER - 73)) | (1 << (KotlinParser.SETTER - 73)) | (1 << (KotlinParser.RECEIVER - 73)) | (1 << (KotlinParser.PARAM - 73)) | (1 << (KotlinParser.SETPARAM - 73)) | (1 << (KotlinParser.DELEGATE - 73)) | (1 << (KotlinParser.DYNAMIC - 73)) | (1 << (KotlinParser.PUBLIC - 73)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (KotlinParser.PRIVATE - 105)) | (1 << (KotlinParser.PROTECTED - 105)) | (1 << (KotlinParser.INTERNAL - 105)) | (1 << (KotlinParser.ENUM - 105)) | (1 << (KotlinParser.SEALED - 105)) | (1 << (KotlinParser.ANNOTATION - 105)) | (1 << (KotlinParser.DATA - 105)) | (1 << (KotlinParser.INNER - 105)) | (1 << (KotlinParser.TAILREC - 105)) | (1 << (KotlinParser.OPERATOR - 105)) | (1 << (KotlinParser.INLINE - 105)) | (1 << (KotlinParser.INFIX - 105)) | (1 << (KotlinParser.EXTERNAL - 105)) | (1 << (KotlinParser.SUSPEND - 105)) | (1 << (KotlinParser.OVERRIDE - 105)) | (1 << (KotlinParser.ABSTRACT - 105)) | (1 << (KotlinParser.FINAL - 105)) | (1 << (KotlinParser.OPEN - 105)) | (1 << (KotlinParser.CONST - 105)) | (1 << (KotlinParser.LATEINIT - 105)) | (1 << (KotlinParser.VARARG - 105)) | (1 << (KotlinParser.NOINLINE - 105)) | (1 << (KotlinParser.CROSSINLINE - 105)) | (1 << (KotlinParser.REIFIED - 105)))) !== 0) || _la===KotlinParser.Identifier || _la===KotlinParser.LabelReference) {
            this.state = 842;
            this.functionValueParameter();
            this.state = 847;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.COMMA) {
                this.state = 843;
                this.match(KotlinParser.COMMA);
                this.state = 844;
                this.functionValueParameter();
                this.state = 849;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 852;
        this.match(KotlinParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionValueParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_functionValueParameter;
    return this;
}

FunctionValueParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionValueParameterContext.prototype.constructor = FunctionValueParameterContext;

FunctionValueParameterContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

FunctionValueParameterContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

FunctionValueParameterContext.prototype.ASSIGNMENT = function() {
    return this.getToken(KotlinParser.ASSIGNMENT, 0);
};

FunctionValueParameterContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionValueParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFunctionValueParameter(this);
	}
};

FunctionValueParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFunctionValueParameter(this);
	}
};




KotlinParser.FunctionValueParameterContext = FunctionValueParameterContext;

KotlinParser.prototype.functionValueParameter = function() {

    var localctx = new FunctionValueParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, KotlinParser.RULE_functionValueParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 855;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        if(la_===1) {
            this.state = 854;
            this.modifierList();

        }
        this.state = 857;
        this.parameter();
        this.state = 860;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.ASSIGNMENT) {
            this.state = 858;
            this.match(KotlinParser.ASSIGNMENT);
            this.state = 859;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

ParameterContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

ParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitParameter(this);
	}
};




KotlinParser.ParameterContext = ParameterContext;

KotlinParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, KotlinParser.RULE_parameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 862;
        this.simpleIdentifier();
        this.state = 863;
        this.match(KotlinParser.COLON);
        this.state = 864;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_functionBody;
    return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionBodyContext.prototype.ASSIGNMENT = function() {
    return this.getToken(KotlinParser.ASSIGNMENT, 0);
};

FunctionBodyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionBodyContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


FunctionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFunctionBody(this);
	}
};

FunctionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFunctionBody(this);
	}
};




KotlinParser.FunctionBodyContext = FunctionBodyContext;

KotlinParser.prototype.functionBody = function() {

    var localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, KotlinParser.RULE_functionBody);
    try {
        this.state = 875;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.LCURL:
            this.enterOuterAlt(localctx, 1);
            this.state = 866;
            this.block();
            break;
        case KotlinParser.ASSIGNMENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 867;
            this.match(KotlinParser.ASSIGNMENT);
            this.state = 871;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 868;
                    this.match(KotlinParser.NL); 
                }
                this.state = 873;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
            }

            this.state = 874;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_objectDeclaration;
    return this;
}

ObjectDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectDeclarationContext.prototype.constructor = ObjectDeclarationContext;

ObjectDeclarationContext.prototype.OBJECT = function() {
    return this.getToken(KotlinParser.OBJECT, 0);
};

ObjectDeclarationContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

ObjectDeclarationContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

ObjectDeclarationContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ObjectDeclarationContext.prototype.primaryConstructor = function() {
    return this.getTypedRuleContext(PrimaryConstructorContext,0);
};

ObjectDeclarationContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

ObjectDeclarationContext.prototype.delegationSpecifiers = function() {
    return this.getTypedRuleContext(DelegationSpecifiersContext,0);
};

ObjectDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ObjectDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterObjectDeclaration(this);
	}
};

ObjectDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitObjectDeclaration(this);
	}
};




KotlinParser.ObjectDeclarationContext = ObjectDeclarationContext;

KotlinParser.prototype.objectDeclaration = function() {

    var localctx = new ObjectDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, KotlinParser.RULE_objectDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 877;
            this.modifierList();
        }

        this.state = 880;
        this.match(KotlinParser.OBJECT);
        this.state = 884;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 881;
            this.match(KotlinParser.NL);
            this.state = 886;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 887;
        this.simpleIdentifier();
        this.state = 895;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        if(la_===1) {
            this.state = 891;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 888;
                this.match(KotlinParser.NL);
                this.state = 893;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 894;
            this.primaryConstructor();

        }
        this.state = 911;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        if(la_===1) {
            this.state = 900;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 897;
                this.match(KotlinParser.NL);
                this.state = 902;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 903;
            this.match(KotlinParser.COLON);
            this.state = 907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 904;
                this.match(KotlinParser.NL);
                this.state = 909;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 910;
            this.delegationSpecifiers();

        }
        this.state = 920;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        if(la_===1) {
            this.state = 916;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 913;
                this.match(KotlinParser.NL);
                this.state = 918;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 919;
            this.classBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompanionObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_companionObject;
    return this;
}

CompanionObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompanionObjectContext.prototype.constructor = CompanionObjectContext;

CompanionObjectContext.prototype.COMPANION = function() {
    return this.getToken(KotlinParser.COMPANION, 0);
};

CompanionObjectContext.prototype.OBJECT = function() {
    return this.getToken(KotlinParser.OBJECT, 0);
};

CompanionObjectContext.prototype.modifierList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierListContext);
    } else {
        return this.getTypedRuleContext(ModifierListContext,i);
    }
};

CompanionObjectContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


CompanionObjectContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

CompanionObjectContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

CompanionObjectContext.prototype.delegationSpecifiers = function() {
    return this.getTypedRuleContext(DelegationSpecifiersContext,0);
};

CompanionObjectContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

CompanionObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterCompanionObject(this);
	}
};

CompanionObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitCompanionObject(this);
	}
};




KotlinParser.CompanionObjectContext = CompanionObjectContext;

KotlinParser.prototype.companionObject = function() {

    var localctx = new CompanionObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, KotlinParser.RULE_companionObject);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 922;
            this.modifierList();
        }

        this.state = 925;
        this.match(KotlinParser.COMPANION);
        this.state = 929;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 926;
            this.match(KotlinParser.NL);
            this.state = 931;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 933;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 932;
            this.modifierList();
        }

        this.state = 935;
        this.match(KotlinParser.OBJECT);
        this.state = 943;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        if(la_===1) {
            this.state = 939;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 936;
                this.match(KotlinParser.NL);
                this.state = 941;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 942;
            this.simpleIdentifier();

        }
        this.state = 959;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
        if(la_===1) {
            this.state = 948;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 945;
                this.match(KotlinParser.NL);
                this.state = 950;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 951;
            this.match(KotlinParser.COLON);
            this.state = 955;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 952;
                this.match(KotlinParser.NL);
                this.state = 957;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 958;
            this.delegationSpecifiers();

        }
        this.state = 968;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        if(la_===1) {
            this.state = 964;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 961;
                this.match(KotlinParser.NL);
                this.state = 966;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 967;
            this.classBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.VAL = function() {
    return this.getToken(KotlinParser.VAL, 0);
};

PropertyDeclarationContext.prototype.VAR = function() {
    return this.getToken(KotlinParser.VAR, 0);
};

PropertyDeclarationContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

PropertyDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

PropertyDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PropertyDeclarationContext.prototype.DOT = function() {
    return this.getToken(KotlinParser.DOT, 0);
};

PropertyDeclarationContext.prototype.typeConstraints = function() {
    return this.getTypedRuleContext(TypeConstraintsContext,0);
};

PropertyDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PropertyDeclarationContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyDeclarationContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertyDeclarationContext.prototype.multiVariableDeclaration = function() {
    return this.getTypedRuleContext(MultiVariableDeclarationContext,0);
};

PropertyDeclarationContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

PropertyDeclarationContext.prototype.BY = function() {
    return this.getToken(KotlinParser.BY, 0);
};

PropertyDeclarationContext.prototype.ASSIGNMENT = function() {
    return this.getToken(KotlinParser.ASSIGNMENT, 0);
};

PropertyDeclarationContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


PropertyDeclarationContext.prototype.semi = function() {
    return this.getTypedRuleContext(SemiContext,0);
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitPropertyDeclaration(this);
	}
};




KotlinParser.PropertyDeclarationContext = PropertyDeclarationContext;

KotlinParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, KotlinParser.RULE_propertyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 971;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 970;
            this.modifierList();
        }

        this.state = 973;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.VAL || _la===KotlinParser.VAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 981;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        if(la_===1) {
            this.state = 977;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 974;
                this.match(KotlinParser.NL);
                this.state = 979;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 980;
            this.typeParameters();

        }
        this.state = 998;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        if(la_===1) {
            this.state = 986;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 983;
                this.match(KotlinParser.NL);
                this.state = 988;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 989;
            this.type();
            this.state = 993;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 990;
                this.match(KotlinParser.NL);
                this.state = 995;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 996;
            this.match(KotlinParser.DOT);

        }

        this.state = 1003;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1000;
            this.match(KotlinParser.NL);
            this.state = 1005;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1008;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.LPAREN:
            this.state = 1006;
            this.multiVariableDeclaration();
            break;
        case KotlinParser.IMPORT:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.WHERE:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.OUT:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.Identifier:
            this.state = 1007;
            this.variableDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1017;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        if(la_===1) {
            this.state = 1013;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1010;
                this.match(KotlinParser.NL);
                this.state = 1015;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1016;
            this.typeConstraints();

        }
        this.state = 1033;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        if(la_===1) {
            this.state = 1022;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1019;
                this.match(KotlinParser.NL);
                this.state = 1024;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1025;
            _la = this._input.LA(1);
            if(!(_la===KotlinParser.ASSIGNMENT || _la===KotlinParser.BY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1029;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1026;
                    this.match(KotlinParser.NL); 
                }
                this.state = 1031;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
            }

            this.state = 1032;
            this.expression();

        }
        this.state = 1047;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        if(la_===1) {
            this.state = 1035;
            this.getter();
            this.state = 1039;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
            if(la_===1) {
                this.state = 1036;
                this.semi();
                this.state = 1037;
                this.setter();

            }

        } else if(la_===2) {
            this.state = 1041;
            this.setter();
            this.state = 1045;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
            if(la_===1) {
                this.state = 1042;
                this.semi();
                this.state = 1043;
                this.getter();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_multiVariableDeclaration;
    return this;
}

MultiVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiVariableDeclarationContext.prototype.constructor = MultiVariableDeclarationContext;

MultiVariableDeclarationContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

MultiVariableDeclarationContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

MultiVariableDeclarationContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

MultiVariableDeclarationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


MultiVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterMultiVariableDeclaration(this);
	}
};

MultiVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitMultiVariableDeclaration(this);
	}
};




KotlinParser.MultiVariableDeclarationContext = MultiVariableDeclarationContext;

KotlinParser.prototype.multiVariableDeclaration = function() {

    var localctx = new MultiVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, KotlinParser.RULE_multiVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1049;
        this.match(KotlinParser.LPAREN);
        this.state = 1050;
        this.variableDeclaration();
        this.state = 1055;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.COMMA) {
            this.state = 1051;
            this.match(KotlinParser.COMMA);
            this.state = 1052;
            this.variableDeclaration();
            this.state = 1057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1058;
        this.match(KotlinParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

VariableDeclarationContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

VariableDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitVariableDeclaration(this);
	}
};




KotlinParser.VariableDeclarationContext = VariableDeclarationContext;

KotlinParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, KotlinParser.RULE_variableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1060;
        this.simpleIdentifier();
        this.state = 1063;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.COLON) {
            this.state = 1061;
            this.match(KotlinParser.COLON);
            this.state = 1062;
            this.type();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.GETTER = function() {
    return this.getToken(KotlinParser.GETTER, 0);
};

GetterContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

GetterContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

GetterContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

GetterContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

GetterContext.prototype.ASSIGNMENT = function() {
    return this.getToken(KotlinParser.ASSIGNMENT, 0);
};

GetterContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GetterContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


GetterContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

GetterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

GetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterGetter(this);
	}
};

GetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitGetter(this);
	}
};




KotlinParser.GetterContext = GetterContext;

KotlinParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, KotlinParser.RULE_getter);
    var _la = 0; // Token type
    try {
        this.state = 1114;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1066;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
                this.state = 1065;
                this.modifierList();
            }

            this.state = 1068;
            this.match(KotlinParser.GETTER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1070;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
                this.state = 1069;
                this.modifierList();
            }

            this.state = 1072;
            this.match(KotlinParser.GETTER);
            this.state = 1076;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1073;
                this.match(KotlinParser.NL);
                this.state = 1078;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1079;
            this.match(KotlinParser.LPAREN);
            this.state = 1080;
            this.match(KotlinParser.RPAREN);
            this.state = 1095;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
            if(la_===1) {
                this.state = 1084;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1081;
                    this.match(KotlinParser.NL);
                    this.state = 1086;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1087;
                this.match(KotlinParser.COLON);
                this.state = 1091;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1088;
                    this.match(KotlinParser.NL);
                    this.state = 1093;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1094;
                this.type();

            }
            this.state = 1100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1097;
                this.match(KotlinParser.NL);
                this.state = 1102;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1112;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case KotlinParser.LCURL:
                this.state = 1103;
                this.block();
                break;
            case KotlinParser.ASSIGNMENT:
                this.state = 1104;
                this.match(KotlinParser.ASSIGNMENT);
                this.state = 1108;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,151,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1105;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1110;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,151,this._ctx);
                }

                this.state = 1111;
                this.expression();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.SETTER = function() {
    return this.getToken(KotlinParser.SETTER, 0);
};

SetterContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

SetterContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

SetterContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

SetterContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

SetterContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

SetterContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

SetterContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


SetterContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

SetterContext.prototype.parameterModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterModifierContext);
    } else {
        return this.getTypedRuleContext(ParameterModifierContext,i);
    }
};

SetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterSetter(this);
	}
};

SetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitSetter(this);
	}
};




KotlinParser.SetterContext = SetterContext;

KotlinParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, KotlinParser.RULE_setter);
    var _la = 0; // Token type
    try {
        this.state = 1151;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1117;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
                this.state = 1116;
                this.modifierList();
            }

            this.state = 1119;
            this.match(KotlinParser.SETTER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1121;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
                this.state = 1120;
                this.modifierList();
            }

            this.state = 1123;
            this.match(KotlinParser.SETTER);
            this.state = 1127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1124;
                this.match(KotlinParser.NL);
                this.state = 1129;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1130;
            this.match(KotlinParser.LPAREN);
            this.state = 1135;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,158,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1133;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case KotlinParser.AT:
                    case KotlinParser.FILE:
                    case KotlinParser.FIELD:
                    case KotlinParser.PROPERTY:
                    case KotlinParser.GET:
                    case KotlinParser.SET:
                    case KotlinParser.RECEIVER:
                    case KotlinParser.PARAM:
                    case KotlinParser.SETPARAM:
                    case KotlinParser.DELEGATE:
                    case KotlinParser.LabelReference:
                        this.state = 1131;
                        this.annotations();
                        break;
                    case KotlinParser.VARARG:
                    case KotlinParser.NOINLINE:
                    case KotlinParser.CROSSINLINE:
                        this.state = 1132;
                        this.parameterModifier();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 1137;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,158,this._ctx);
            }

            this.state = 1140;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1138;
                this.simpleIdentifier();
                break;

            case 2:
                this.state = 1139;
                this.parameter();
                break;

            }
            this.state = 1142;
            this.match(KotlinParser.RPAREN);
            this.state = 1146;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1143;
                this.match(KotlinParser.NL);
                this.state = 1148;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1149;
            this.functionBody();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeAlias;
    return this;
}

TypeAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAliasContext.prototype.constructor = TypeAliasContext;

TypeAliasContext.prototype.TYPE_ALIAS = function() {
    return this.getToken(KotlinParser.TYPE_ALIAS, 0);
};

TypeAliasContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

TypeAliasContext.prototype.ASSIGNMENT = function() {
    return this.getToken(KotlinParser.ASSIGNMENT, 0);
};

TypeAliasContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeAliasContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

TypeAliasContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TypeAliasContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

TypeAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeAlias(this);
	}
};

TypeAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeAlias(this);
	}
};




KotlinParser.TypeAliasContext = TypeAliasContext;

KotlinParser.prototype.typeAlias = function() {

    var localctx = new TypeAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, KotlinParser.RULE_typeAlias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (KotlinParser.FINAL - 121)) | (1 << (KotlinParser.OPEN - 121)) | (1 << (KotlinParser.CONST - 121)) | (1 << (KotlinParser.LATEINIT - 121)) | (1 << (KotlinParser.VARARG - 121)) | (1 << (KotlinParser.NOINLINE - 121)) | (1 << (KotlinParser.CROSSINLINE - 121)) | (1 << (KotlinParser.REIFIED - 121)) | (1 << (KotlinParser.LabelReference - 121)))) !== 0)) {
            this.state = 1153;
            this.modifierList();
        }

        this.state = 1156;
        this.match(KotlinParser.TYPE_ALIAS);
        this.state = 1160;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1157;
            this.match(KotlinParser.NL);
            this.state = 1162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1163;
        this.simpleIdentifier();
        this.state = 1171;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        if(la_===1) {
            this.state = 1167;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1164;
                this.match(KotlinParser.NL);
                this.state = 1169;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1170;
            this.typeParameters();

        }
        this.state = 1176;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1173;
            this.match(KotlinParser.NL);
            this.state = 1178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1179;
        this.match(KotlinParser.ASSIGNMENT);
        this.state = 1183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1180;
            this.match(KotlinParser.NL);
            this.state = 1185;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1186;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeParameters;
    return this;
}

TypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParametersContext.prototype.constructor = TypeParametersContext;

TypeParametersContext.prototype.LANGLE = function() {
    return this.getToken(KotlinParser.LANGLE, 0);
};

TypeParametersContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeParametersContext.prototype.RANGLE = function() {
    return this.getToken(KotlinParser.RANGLE, 0);
};

TypeParametersContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TypeParametersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


TypeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeParameters(this);
	}
};

TypeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeParameters(this);
	}
};




KotlinParser.TypeParametersContext = TypeParametersContext;

KotlinParser.prototype.typeParameters = function() {

    var localctx = new TypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, KotlinParser.RULE_typeParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1188;
        this.match(KotlinParser.LANGLE);
        this.state = 1192;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,168,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1189;
                this.match(KotlinParser.NL); 
            }
            this.state = 1194;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,168,this._ctx);
        }

        this.state = 1195;
        this.typeParameter();
        this.state = 1212;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1199;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1196;
                    this.match(KotlinParser.NL);
                    this.state = 1201;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1202;
                this.match(KotlinParser.COMMA);
                this.state = 1206;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1203;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1208;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
                }

                this.state = 1209;
                this.typeParameter(); 
            }
            this.state = 1214;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
        }

        this.state = 1218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1215;
            this.match(KotlinParser.NL);
            this.state = 1220;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1221;
        this.match(KotlinParser.RANGLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

TypeParameterContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

TypeParameterContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TypeParameterContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

TypeParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeParameter(this);
	}
};




KotlinParser.TypeParameterContext = TypeParameterContext;

KotlinParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, KotlinParser.RULE_typeParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1224;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        if(la_===1) {
            this.state = 1223;
            this.modifierList();

        }
        this.state = 1229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1226;
            this.match(KotlinParser.NL);
            this.state = 1231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1232;
        this.simpleIdentifier();
        this.state = 1247;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
        if(la_===1) {
            this.state = 1236;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1233;
                this.match(KotlinParser.NL);
                this.state = 1238;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1239;
            this.match(KotlinParser.COLON);
            this.state = 1243;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1240;
                this.match(KotlinParser.NL);
                this.state = 1245;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1246;
            this.type();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.functionType = function() {
    return this.getTypedRuleContext(FunctionTypeContext,0);
};

TypeContext.prototype.parenthesizedType = function() {
    return this.getTypedRuleContext(ParenthesizedTypeContext,0);
};

TypeContext.prototype.nullableType = function() {
    return this.getTypedRuleContext(NullableTypeContext,0);
};

TypeContext.prototype.typeReference = function() {
    return this.getTypedRuleContext(TypeReferenceContext,0);
};

TypeContext.prototype.typeModifierList = function() {
    return this.getTypedRuleContext(TypeModifierListContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitType(this);
	}
};




KotlinParser.TypeContext = TypeContext;

KotlinParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, KotlinParser.RULE_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1250;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
        if(la_===1) {
            this.state = 1249;
            this.typeModifierList();

        }
        this.state = 1256;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1252;
            this.functionType();
            break;

        case 2:
            this.state = 1253;
            this.parenthesizedType();
            break;

        case 3:
            this.state = 1254;
            this.nullableType();
            break;

        case 4:
            this.state = 1255;
            this.typeReference();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeModifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeModifierList;
    return this;
}

TypeModifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeModifierListContext.prototype.constructor = TypeModifierListContext;

TypeModifierListContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

TypeModifierListContext.prototype.SUSPEND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.SUSPEND);
    } else {
        return this.getToken(KotlinParser.SUSPEND, i);
    }
};


TypeModifierListContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TypeModifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeModifierList(this);
	}
};

TypeModifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeModifierList(this);
	}
};




KotlinParser.TypeModifierListContext = TypeModifierListContext;

KotlinParser.prototype.typeModifierList = function() {

    var localctx = new TypeModifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, KotlinParser.RULE_typeModifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1266; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1266;
        		this._errHandler.sync(this);
        		switch(this._input.LA(1)) {
        		case KotlinParser.AT:
        		case KotlinParser.FILE:
        		case KotlinParser.FIELD:
        		case KotlinParser.PROPERTY:
        		case KotlinParser.GET:
        		case KotlinParser.SET:
        		case KotlinParser.RECEIVER:
        		case KotlinParser.PARAM:
        		case KotlinParser.SETPARAM:
        		case KotlinParser.DELEGATE:
        		case KotlinParser.LabelReference:
        		    this.state = 1258;
        		    this.annotations();
        		    break;
        		case KotlinParser.SUSPEND:
        		    this.state = 1259;
        		    this.match(KotlinParser.SUSPEND);
        		    this.state = 1263;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    while(_la===KotlinParser.NL) {
        		        this.state = 1260;
        		        this.match(KotlinParser.NL);
        		        this.state = 1265;
        		        this._errHandler.sync(this);
        		        _la = this._input.LA(1);
        		    }
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1268; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,182, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParenthesizedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_parenthesizedType;
    return this;
}

ParenthesizedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParenthesizedTypeContext.prototype.constructor = ParenthesizedTypeContext;

ParenthesizedTypeContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

ParenthesizedTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ParenthesizedTypeContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

ParenthesizedTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterParenthesizedType(this);
	}
};

ParenthesizedTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitParenthesizedType(this);
	}
};




KotlinParser.ParenthesizedTypeContext = ParenthesizedTypeContext;

KotlinParser.prototype.parenthesizedType = function() {

    var localctx = new ParenthesizedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, KotlinParser.RULE_parenthesizedType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1270;
        this.match(KotlinParser.LPAREN);
        this.state = 1271;
        this.type();
        this.state = 1272;
        this.match(KotlinParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NullableTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_nullableType;
    return this;
}

NullableTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullableTypeContext.prototype.constructor = NullableTypeContext;

NullableTypeContext.prototype.typeReference = function() {
    return this.getTypedRuleContext(TypeReferenceContext,0);
};

NullableTypeContext.prototype.parenthesizedType = function() {
    return this.getTypedRuleContext(ParenthesizedTypeContext,0);
};

NullableTypeContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


NullableTypeContext.prototype.QUEST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.QUEST);
    } else {
        return this.getToken(KotlinParser.QUEST, i);
    }
};


NullableTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterNullableType(this);
	}
};

NullableTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitNullableType(this);
	}
};




KotlinParser.NullableTypeContext = NullableTypeContext;

KotlinParser.prototype.nullableType = function() {

    var localctx = new NullableTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, KotlinParser.RULE_nullableType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1276;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1274;
            this.typeReference();
            break;

        case 2:
            this.state = 1275;
            this.parenthesizedType();
            break;

        }
        this.state = 1281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1278;
            this.match(KotlinParser.NL);
            this.state = 1283;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1285; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1284;
        		this.match(KotlinParser.QUEST);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1287; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,185, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeReference;
    return this;
}

TypeReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeReferenceContext.prototype.constructor = TypeReferenceContext;

TypeReferenceContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

TypeReferenceContext.prototype.typeReference = function() {
    return this.getTypedRuleContext(TypeReferenceContext,0);
};

TypeReferenceContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

TypeReferenceContext.prototype.userType = function() {
    return this.getTypedRuleContext(UserTypeContext,0);
};

TypeReferenceContext.prototype.DYNAMIC = function() {
    return this.getToken(KotlinParser.DYNAMIC, 0);
};

TypeReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeReference(this);
	}
};

TypeReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeReference(this);
	}
};




KotlinParser.TypeReferenceContext = TypeReferenceContext;

KotlinParser.prototype.typeReference = function() {

    var localctx = new TypeReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, KotlinParser.RULE_typeReference);
    try {
        this.state = 1295;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1289;
            this.match(KotlinParser.LPAREN);
            this.state = 1290;
            this.typeReference();
            this.state = 1291;
            this.match(KotlinParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1293;
            this.userType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1294;
            this.match(KotlinParser.DYNAMIC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_functionType;
    return this;
}

FunctionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeContext.prototype.constructor = FunctionTypeContext;

FunctionTypeContext.prototype.functionTypeParameters = function() {
    return this.getTypedRuleContext(FunctionTypeParametersContext,0);
};

FunctionTypeContext.prototype.ARROW = function() {
    return this.getToken(KotlinParser.ARROW, 0);
};

FunctionTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FunctionTypeContext.prototype.functionTypeReceiver = function() {
    return this.getTypedRuleContext(FunctionTypeReceiverContext,0);
};

FunctionTypeContext.prototype.DOT = function() {
    return this.getToken(KotlinParser.DOT, 0);
};

FunctionTypeContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


FunctionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFunctionType(this);
	}
};

FunctionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFunctionType(this);
	}
};




KotlinParser.FunctionTypeContext = FunctionTypeContext;

KotlinParser.prototype.functionType = function() {

    var localctx = new FunctionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, KotlinParser.RULE_functionType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1311;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        if(la_===1) {
            this.state = 1297;
            this.functionTypeReceiver();
            this.state = 1301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1298;
                this.match(KotlinParser.NL);
                this.state = 1303;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1304;
            this.match(KotlinParser.DOT);
            this.state = 1308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1305;
                this.match(KotlinParser.NL);
                this.state = 1310;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 1313;
        this.functionTypeParameters();
        this.state = 1317;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1314;
            this.match(KotlinParser.NL);
            this.state = 1319;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1320;
        this.match(KotlinParser.ARROW);

        this.state = 1324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1321;
            this.match(KotlinParser.NL);
            this.state = 1326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1327;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionTypeReceiverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_functionTypeReceiver;
    return this;
}

FunctionTypeReceiverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeReceiverContext.prototype.constructor = FunctionTypeReceiverContext;

FunctionTypeReceiverContext.prototype.parenthesizedType = function() {
    return this.getTypedRuleContext(ParenthesizedTypeContext,0);
};

FunctionTypeReceiverContext.prototype.nullableType = function() {
    return this.getTypedRuleContext(NullableTypeContext,0);
};

FunctionTypeReceiverContext.prototype.typeReference = function() {
    return this.getTypedRuleContext(TypeReferenceContext,0);
};

FunctionTypeReceiverContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFunctionTypeReceiver(this);
	}
};

FunctionTypeReceiverContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFunctionTypeReceiver(this);
	}
};




KotlinParser.FunctionTypeReceiverContext = FunctionTypeReceiverContext;

KotlinParser.prototype.functionTypeReceiver = function() {

    var localctx = new FunctionTypeReceiverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, KotlinParser.RULE_functionTypeReceiver);
    try {
        this.state = 1332;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1329;
            this.parenthesizedType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1330;
            this.nullableType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1331;
            this.typeReference();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_userType;
    return this;
}

UserTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserTypeContext.prototype.constructor = UserTypeContext;

UserTypeContext.prototype.simpleUserType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimpleUserTypeContext);
    } else {
        return this.getTypedRuleContext(SimpleUserTypeContext,i);
    }
};

UserTypeContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.DOT);
    } else {
        return this.getToken(KotlinParser.DOT, i);
    }
};


UserTypeContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


UserTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterUserType(this);
	}
};

UserTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitUserType(this);
	}
};




KotlinParser.UserTypeContext = UserTypeContext;

KotlinParser.prototype.userType = function() {

    var localctx = new UserTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, KotlinParser.RULE_userType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1334;
        this.simpleUserType();
        this.state = 1351;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,195,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1338;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1335;
                    this.match(KotlinParser.NL);
                    this.state = 1340;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1341;
                this.match(KotlinParser.DOT);
                this.state = 1345;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1342;
                    this.match(KotlinParser.NL);
                    this.state = 1347;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1348;
                this.simpleUserType(); 
            }
            this.state = 1353;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,195,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleUserTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_simpleUserType;
    return this;
}

SimpleUserTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleUserTypeContext.prototype.constructor = SimpleUserTypeContext;

SimpleUserTypeContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

SimpleUserTypeContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

SimpleUserTypeContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


SimpleUserTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterSimpleUserType(this);
	}
};

SimpleUserTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitSimpleUserType(this);
	}
};




KotlinParser.SimpleUserTypeContext = SimpleUserTypeContext;

KotlinParser.prototype.simpleUserType = function() {

    var localctx = new SimpleUserTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, KotlinParser.RULE_simpleUserType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1354;
        this.simpleIdentifier();
        this.state = 1362;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
        if(la_===1) {
            this.state = 1358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1355;
                this.match(KotlinParser.NL);
                this.state = 1360;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1361;
            this.typeArguments();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionTypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_functionTypeParameters;
    return this;
}

FunctionTypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeParametersContext.prototype.constructor = FunctionTypeParametersContext;

FunctionTypeParametersContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

FunctionTypeParametersContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

FunctionTypeParametersContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

FunctionTypeParametersContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

FunctionTypeParametersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


FunctionTypeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFunctionTypeParameters(this);
	}
};

FunctionTypeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFunctionTypeParameters(this);
	}
};




KotlinParser.FunctionTypeParametersContext = FunctionTypeParametersContext;

KotlinParser.prototype.functionTypeParameters = function() {

    var localctx = new FunctionTypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, KotlinParser.RULE_functionTypeParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1364;
        this.match(KotlinParser.LPAREN);
        this.state = 1367;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
        if(la_===1) {
            this.state = 1365;
            this.parameter();

        } else if(la_===2) {
            this.state = 1366;
            this.type();

        }
        this.state = 1376;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.COMMA) {
            this.state = 1369;
            this.match(KotlinParser.COMMA);
            this.state = 1372;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1370;
                this.parameter();
                break;

            case 2:
                this.state = 1371;
                this.type();
                break;

            }
            this.state = 1378;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1379;
        this.match(KotlinParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeConstraintsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeConstraints;
    return this;
}

TypeConstraintsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeConstraintsContext.prototype.constructor = TypeConstraintsContext;

TypeConstraintsContext.prototype.WHERE = function() {
    return this.getToken(KotlinParser.WHERE, 0);
};

TypeConstraintsContext.prototype.typeConstraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeConstraintContext);
    } else {
        return this.getTypedRuleContext(TypeConstraintContext,i);
    }
};

TypeConstraintsContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TypeConstraintsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


TypeConstraintsContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeConstraints(this);
	}
};

TypeConstraintsContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeConstraints(this);
	}
};




KotlinParser.TypeConstraintsContext = TypeConstraintsContext;

KotlinParser.prototype.typeConstraints = function() {

    var localctx = new TypeConstraintsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, KotlinParser.RULE_typeConstraints);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1381;
        this.match(KotlinParser.WHERE);
        this.state = 1385;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1382;
            this.match(KotlinParser.NL);
            this.state = 1387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1388;
        this.typeConstraint();
        this.state = 1405;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,204,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1392;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1389;
                    this.match(KotlinParser.NL);
                    this.state = 1394;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1395;
                this.match(KotlinParser.COMMA);
                this.state = 1399;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1396;
                    this.match(KotlinParser.NL);
                    this.state = 1401;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1402;
                this.typeConstraint(); 
            }
            this.state = 1407;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,204,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeConstraint;
    return this;
}

TypeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeConstraintContext.prototype.constructor = TypeConstraintContext;

TypeConstraintContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

TypeConstraintContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

TypeConstraintContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeConstraintContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

TypeConstraintContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TypeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeConstraint(this);
	}
};

TypeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeConstraint(this);
	}
};




KotlinParser.TypeConstraintContext = TypeConstraintContext;

KotlinParser.prototype.typeConstraint = function() {

    var localctx = new TypeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, KotlinParser.RULE_typeConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1411;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)))) !== 0) || _la===KotlinParser.LabelReference) {
            this.state = 1408;
            this.annotations();
            this.state = 1413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1414;
        this.simpleIdentifier();
        this.state = 1418;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1415;
            this.match(KotlinParser.NL);
            this.state = 1420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1421;
        this.match(KotlinParser.COLON);
        this.state = 1425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1422;
            this.match(KotlinParser.NL);
            this.state = 1427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1428;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.LCURL = function() {
    return this.getToken(KotlinParser.LCURL, 0);
};

BlockContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

BlockContext.prototype.RCURL = function() {
    return this.getToken(KotlinParser.RCURL, 0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitBlock(this);
	}
};




KotlinParser.BlockContext = BlockContext;

KotlinParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, KotlinParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1430;
        this.match(KotlinParser.LCURL);
        this.state = 1431;
        this.statements();
        this.state = 1432;
        this.match(KotlinParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.anysemi = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnysemiContext);
    } else {
        return this.getTypedRuleContext(AnysemiContext,i);
    }
};

StatementsContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitStatements(this);
	}
};




KotlinParser.StatementsContext = StatementsContext;

KotlinParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, KotlinParser.RULE_statements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1437;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,208,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1434;
                this.anysemi(); 
            }
            this.state = 1439;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,208,this._ctx);
        }

        this.state = 1454;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
        if(la_===1) {
            this.state = 1440;
            this.statement();
            this.state = 1451;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1442; 
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                    	switch (_alt) {
                    	case 1:
                    		this.state = 1441;
                    		this.anysemi();
                    		break;
                    	default:
                    		throw new antlr4.error.NoViableAltException(this);
                    	}
                    	this.state = 1444; 
                    	this._errHandler.sync(this);
                    	_alt = this._interp.adaptivePredict(this._input,209, this._ctx);
                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                    this.state = 1447;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
                    if(la_===1) {
                        this.state = 1446;
                        this.statement();

                    } 
                }
                this.state = 1453;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
            }


        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementContext.prototype.blockLevelExpression = function() {
    return this.getTypedRuleContext(BlockLevelExpressionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitStatement(this);
	}
};




KotlinParser.StatementContext = StatementContext;

KotlinParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, KotlinParser.RULE_statement);
    try {
        this.state = 1458;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1456;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1457;
            this.blockLevelExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockLevelExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_blockLevelExpression;
    return this;
}

BlockLevelExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockLevelExpressionContext.prototype.constructor = BlockLevelExpressionContext;

BlockLevelExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BlockLevelExpressionContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

BlockLevelExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


BlockLevelExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterBlockLevelExpression(this);
	}
};

BlockLevelExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitBlockLevelExpression(this);
	}
};




KotlinParser.BlockLevelExpressionContext = BlockLevelExpressionContext;

KotlinParser.prototype.blockLevelExpression = function() {

    var localctx = new BlockLevelExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, KotlinParser.RULE_blockLevelExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1463;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,214,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1460;
                this.annotations(); 
            }
            this.state = 1465;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,214,this._ctx);
        }

        this.state = 1469;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,215,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1466;
                this.match(KotlinParser.NL); 
            }
            this.state = 1471;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,215,this._ctx);
        }

        this.state = 1472;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

DeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

DeclarationContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

DeclarationContext.prototype.typeAlias = function() {
    return this.getTypedRuleContext(TypeAliasContext,0);
};

DeclarationContext.prototype.labelDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelDefinitionContext);
    } else {
        return this.getTypedRuleContext(LabelDefinitionContext,i);
    }
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitDeclaration(this);
	}
};




KotlinParser.DeclarationContext = DeclarationContext;

KotlinParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, KotlinParser.RULE_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1477;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.LabelDefinition) {
            this.state = 1474;
            this.labelDefinition();
            this.state = 1479;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1484;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1480;
            this.classDeclaration();
            break;

        case 2:
            this.state = 1481;
            this.functionDeclaration();
            break;

        case 3:
            this.state = 1482;
            this.propertyDeclaration();
            break;

        case 4:
            this.state = 1483;
            this.typeAlias();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.disjunction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DisjunctionContext);
    } else {
        return this.getTypedRuleContext(DisjunctionContext,i);
    }
};

ExpressionContext.prototype.assignmentOperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentOperatorContext);
    } else {
        return this.getTypedRuleContext(AssignmentOperatorContext,i);
    }
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitExpression(this);
	}
};




KotlinParser.ExpressionContext = ExpressionContext;

KotlinParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, KotlinParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1486;
        this.disjunction();
        this.state = 1492;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,218,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1487;
                this.assignmentOperator();
                this.state = 1488;
                this.disjunction(); 
            }
            this.state = 1494;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,218,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DisjunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_disjunction;
    return this;
}

DisjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DisjunctionContext.prototype.constructor = DisjunctionContext;

DisjunctionContext.prototype.conjunction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConjunctionContext);
    } else {
        return this.getTypedRuleContext(ConjunctionContext,i);
    }
};

DisjunctionContext.prototype.DISJ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.DISJ);
    } else {
        return this.getToken(KotlinParser.DISJ, i);
    }
};


DisjunctionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


DisjunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterDisjunction(this);
	}
};

DisjunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitDisjunction(this);
	}
};




KotlinParser.DisjunctionContext = DisjunctionContext;

KotlinParser.prototype.disjunction = function() {

    var localctx = new DisjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, KotlinParser.RULE_disjunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1495;
        this.conjunction();
        this.state = 1512;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1499;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1496;
                    this.match(KotlinParser.NL);
                    this.state = 1501;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1502;
                this.match(KotlinParser.DISJ);
                this.state = 1506;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,220,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1503;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1508;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,220,this._ctx);
                }

                this.state = 1509;
                this.conjunction(); 
            }
            this.state = 1514;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConjunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_conjunction;
    return this;
}

ConjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConjunctionContext.prototype.constructor = ConjunctionContext;

ConjunctionContext.prototype.equalityComparison = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EqualityComparisonContext);
    } else {
        return this.getTypedRuleContext(EqualityComparisonContext,i);
    }
};

ConjunctionContext.prototype.CONJ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.CONJ);
    } else {
        return this.getToken(KotlinParser.CONJ, i);
    }
};


ConjunctionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ConjunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterConjunction(this);
	}
};

ConjunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitConjunction(this);
	}
};




KotlinParser.ConjunctionContext = ConjunctionContext;

KotlinParser.prototype.conjunction = function() {

    var localctx = new ConjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, KotlinParser.RULE_conjunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1515;
        this.equalityComparison();
        this.state = 1532;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1519;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1516;
                    this.match(KotlinParser.NL);
                    this.state = 1521;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1522;
                this.match(KotlinParser.CONJ);
                this.state = 1526;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,223,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1523;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1528;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,223,this._ctx);
                }

                this.state = 1529;
                this.equalityComparison(); 
            }
            this.state = 1534;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EqualityComparisonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_equalityComparison;
    return this;
}

EqualityComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityComparisonContext.prototype.constructor = EqualityComparisonContext;

EqualityComparisonContext.prototype.comparison = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComparisonContext);
    } else {
        return this.getTypedRuleContext(ComparisonContext,i);
    }
};

EqualityComparisonContext.prototype.equalityOperation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EqualityOperationContext);
    } else {
        return this.getTypedRuleContext(EqualityOperationContext,i);
    }
};

EqualityComparisonContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


EqualityComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterEqualityComparison(this);
	}
};

EqualityComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitEqualityComparison(this);
	}
};




KotlinParser.EqualityComparisonContext = EqualityComparisonContext;

KotlinParser.prototype.equalityComparison = function() {

    var localctx = new EqualityComparisonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, KotlinParser.RULE_equalityComparison);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1535;
        this.comparison();
        this.state = 1547;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,226,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1536;
                this.equalityOperation();
                this.state = 1540;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,225,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1537;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1542;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,225,this._ctx);
                }

                this.state = 1543;
                this.comparison(); 
            }
            this.state = 1549;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,226,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_comparison;
    return this;
}

ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

ComparisonContext.prototype.namedInfix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedInfixContext);
    } else {
        return this.getTypedRuleContext(NamedInfixContext,i);
    }
};

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitComparison(this);
	}
};




KotlinParser.ComparisonContext = ComparisonContext;

KotlinParser.prototype.comparison = function() {

    var localctx = new ComparisonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, KotlinParser.RULE_comparison);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1550;
        this.namedInfix();
        this.state = 1560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
        if(la_===1) {
            this.state = 1551;
            this.comparisonOperator();
            this.state = 1555;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,227,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1552;
                    this.match(KotlinParser.NL); 
                }
                this.state = 1557;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,227,this._ctx);
            }

            this.state = 1558;
            this.namedInfix();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedInfixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_namedInfix;
    return this;
}

NamedInfixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedInfixContext.prototype.constructor = NamedInfixContext;

NamedInfixContext.prototype.elvisExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElvisExpressionContext);
    } else {
        return this.getTypedRuleContext(ElvisExpressionContext,i);
    }
};

NamedInfixContext.prototype.isOperator = function() {
    return this.getTypedRuleContext(IsOperatorContext,0);
};

NamedInfixContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

NamedInfixContext.prototype.inOperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InOperatorContext);
    } else {
        return this.getTypedRuleContext(InOperatorContext,i);
    }
};

NamedInfixContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


NamedInfixContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterNamedInfix(this);
	}
};

NamedInfixContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitNamedInfix(this);
	}
};




KotlinParser.NamedInfixContext = NamedInfixContext;

KotlinParser.prototype.namedInfix = function() {

    var localctx = new NamedInfixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, KotlinParser.RULE_namedInfix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1562;
        this.elvisExpression();
        this.state = 1585;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
        if(la_===1) {
            this.state = 1572; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1563;
            		this.inOperator();
            		this.state = 1567;
            		this._errHandler.sync(this);
            		var _alt = this._interp.adaptivePredict(this._input,229,this._ctx)
            		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            		    if(_alt===1) {
            		        this.state = 1564;
            		        this.match(KotlinParser.NL); 
            		    }
            		    this.state = 1569;
            		    this._errHandler.sync(this);
            		    _alt = this._interp.adaptivePredict(this._input,229,this._ctx);
            		}

            		this.state = 1570;
            		this.elvisExpression();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1574; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,230, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

        } else if(la_===2) {
            this.state = 1576;
            this.isOperator();
            this.state = 1580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1577;
                this.match(KotlinParser.NL);
                this.state = 1582;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1583;
            this.type();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElvisExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_elvisExpression;
    return this;
}

ElvisExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElvisExpressionContext.prototype.constructor = ElvisExpressionContext;

ElvisExpressionContext.prototype.infixFunctionCall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InfixFunctionCallContext);
    } else {
        return this.getTypedRuleContext(InfixFunctionCallContext,i);
    }
};

ElvisExpressionContext.prototype.ELVIS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.ELVIS);
    } else {
        return this.getToken(KotlinParser.ELVIS, i);
    }
};


ElvisExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ElvisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterElvisExpression(this);
	}
};

ElvisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitElvisExpression(this);
	}
};




KotlinParser.ElvisExpressionContext = ElvisExpressionContext;

KotlinParser.prototype.elvisExpression = function() {

    var localctx = new ElvisExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, KotlinParser.RULE_elvisExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1587;
        this.infixFunctionCall();
        this.state = 1604;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,235,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1591;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1588;
                    this.match(KotlinParser.NL);
                    this.state = 1593;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1594;
                this.match(KotlinParser.ELVIS);
                this.state = 1598;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,234,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1595;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1600;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,234,this._ctx);
                }

                this.state = 1601;
                this.infixFunctionCall(); 
            }
            this.state = 1606;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,235,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InfixFunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_infixFunctionCall;
    return this;
}

InfixFunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InfixFunctionCallContext.prototype.constructor = InfixFunctionCallContext;

InfixFunctionCallContext.prototype.rangeExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RangeExpressionContext);
    } else {
        return this.getTypedRuleContext(RangeExpressionContext,i);
    }
};

InfixFunctionCallContext.prototype.simpleIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimpleIdentifierContext);
    } else {
        return this.getTypedRuleContext(SimpleIdentifierContext,i);
    }
};

InfixFunctionCallContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


InfixFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterInfixFunctionCall(this);
	}
};

InfixFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitInfixFunctionCall(this);
	}
};




KotlinParser.InfixFunctionCallContext = InfixFunctionCallContext;

KotlinParser.prototype.infixFunctionCall = function() {

    var localctx = new InfixFunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, KotlinParser.RULE_infixFunctionCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1607;
        this.rangeExpression();
        this.state = 1619;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,237,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1608;
                this.simpleIdentifier();
                this.state = 1612;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,236,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1609;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1614;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,236,this._ctx);
                }

                this.state = 1615;
                this.rangeExpression(); 
            }
            this.state = 1621;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,237,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RangeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_rangeExpression;
    return this;
}

RangeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeExpressionContext.prototype.constructor = RangeExpressionContext;

RangeExpressionContext.prototype.additiveExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AdditiveExpressionContext);
    } else {
        return this.getTypedRuleContext(AdditiveExpressionContext,i);
    }
};

RangeExpressionContext.prototype.RANGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.RANGE);
    } else {
        return this.getToken(KotlinParser.RANGE, i);
    }
};


RangeExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


RangeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterRangeExpression(this);
	}
};

RangeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitRangeExpression(this);
	}
};




KotlinParser.RangeExpressionContext = RangeExpressionContext;

KotlinParser.prototype.rangeExpression = function() {

    var localctx = new RangeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, KotlinParser.RULE_rangeExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1622;
        this.additiveExpression();
        this.state = 1633;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,239,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1623;
                this.match(KotlinParser.RANGE);
                this.state = 1627;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,238,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1624;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1629;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,238,this._ctx);
                }

                this.state = 1630;
                this.additiveExpression(); 
            }
            this.state = 1635;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,239,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdditiveExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_additiveExpression;
    return this;
}

AdditiveExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.multiplicativeExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
    } else {
        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
    }
};

AdditiveExpressionContext.prototype.additiveOperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AdditiveOperatorContext);
    } else {
        return this.getTypedRuleContext(AdditiveOperatorContext,i);
    }
};

AdditiveExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAdditiveExpression(this);
	}
};




KotlinParser.AdditiveExpressionContext = AdditiveExpressionContext;

KotlinParser.prototype.additiveExpression = function() {

    var localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, KotlinParser.RULE_additiveExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1636;
        this.multiplicativeExpression();
        this.state = 1648;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,241,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1637;
                this.additiveOperator();
                this.state = 1641;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,240,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1638;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1643;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,240,this._ctx);
                }

                this.state = 1644;
                this.multiplicativeExpression(); 
            }
            this.state = 1650;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,241,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiplicativeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_multiplicativeExpression;
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.typeRHS = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeRHSContext);
    } else {
        return this.getTypedRuleContext(TypeRHSContext,i);
    }
};

MultiplicativeExpressionContext.prototype.multiplicativeOperation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiplicativeOperationContext);
    } else {
        return this.getTypedRuleContext(MultiplicativeOperationContext,i);
    }
};

MultiplicativeExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitMultiplicativeExpression(this);
	}
};




KotlinParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

KotlinParser.prototype.multiplicativeExpression = function() {

    var localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, KotlinParser.RULE_multiplicativeExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1651;
        this.typeRHS();
        this.state = 1663;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,243,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1652;
                this.multiplicativeOperation();
                this.state = 1656;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1653;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 1658;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
                }

                this.state = 1659;
                this.typeRHS(); 
            }
            this.state = 1665;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,243,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeRHSContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeRHS;
    return this;
}

TypeRHSContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeRHSContext.prototype.constructor = TypeRHSContext;

TypeRHSContext.prototype.prefixUnaryExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrefixUnaryExpressionContext);
    } else {
        return this.getTypedRuleContext(PrefixUnaryExpressionContext,i);
    }
};

TypeRHSContext.prototype.typeOperation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeOperationContext);
    } else {
        return this.getTypedRuleContext(TypeOperationContext,i);
    }
};

TypeRHSContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TypeRHSContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeRHS(this);
	}
};

TypeRHSContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeRHS(this);
	}
};




KotlinParser.TypeRHSContext = TypeRHSContext;

KotlinParser.prototype.typeRHS = function() {

    var localctx = new TypeRHSContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, KotlinParser.RULE_typeRHS);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1666;
        this.prefixUnaryExpression();
        this.state = 1678;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,245,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1670;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1667;
                    this.match(KotlinParser.NL);
                    this.state = 1672;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1673;
                this.typeOperation();
                this.state = 1674;
                this.prefixUnaryExpression(); 
            }
            this.state = 1680;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,245,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixUnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_prefixUnaryExpression;
    return this;
}

PrefixUnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixUnaryExpressionContext.prototype.constructor = PrefixUnaryExpressionContext;

PrefixUnaryExpressionContext.prototype.postfixUnaryExpression = function() {
    return this.getTypedRuleContext(PostfixUnaryExpressionContext,0);
};

PrefixUnaryExpressionContext.prototype.prefixUnaryOperation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrefixUnaryOperationContext);
    } else {
        return this.getTypedRuleContext(PrefixUnaryOperationContext,i);
    }
};

PrefixUnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterPrefixUnaryExpression(this);
	}
};

PrefixUnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitPrefixUnaryExpression(this);
	}
};




KotlinParser.PrefixUnaryExpressionContext = PrefixUnaryExpressionContext;

KotlinParser.prototype.prefixUnaryExpression = function() {

    var localctx = new PrefixUnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, KotlinParser.RULE_prefixUnaryExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1684;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,246,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1681;
                this.prefixUnaryOperation(); 
            }
            this.state = 1686;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,246,this._ctx);
        }

        this.state = 1687;
        this.postfixUnaryExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixUnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_postfixUnaryExpression;
    return this;
}

PostfixUnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixUnaryExpressionContext.prototype.constructor = PostfixUnaryExpressionContext;

PostfixUnaryExpressionContext.prototype.atomicExpression = function() {
    return this.getTypedRuleContext(AtomicExpressionContext,0);
};

PostfixUnaryExpressionContext.prototype.callableReference = function() {
    return this.getTypedRuleContext(CallableReferenceContext,0);
};

PostfixUnaryExpressionContext.prototype.postfixUnaryOperation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PostfixUnaryOperationContext);
    } else {
        return this.getTypedRuleContext(PostfixUnaryOperationContext,i);
    }
};

PostfixUnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterPostfixUnaryExpression(this);
	}
};

PostfixUnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitPostfixUnaryExpression(this);
	}
};




KotlinParser.PostfixUnaryExpressionContext = PostfixUnaryExpressionContext;

KotlinParser.prototype.postfixUnaryExpression = function() {

    var localctx = new PostfixUnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, KotlinParser.RULE_postfixUnaryExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1691;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1689;
            this.atomicExpression();
            break;

        case 2:
            this.state = 1690;
            this.callableReference();
            break;

        }
        this.state = 1696;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1693;
                this.postfixUnaryOperation(); 
            }
            this.state = 1698;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AtomicExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_atomicExpression;
    return this;
}

AtomicExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomicExpressionContext.prototype.constructor = AtomicExpressionContext;

AtomicExpressionContext.prototype.parenthesizedExpression = function() {
    return this.getTypedRuleContext(ParenthesizedExpressionContext,0);
};

AtomicExpressionContext.prototype.literalConstant = function() {
    return this.getTypedRuleContext(LiteralConstantContext,0);
};

AtomicExpressionContext.prototype.functionLiteral = function() {
    return this.getTypedRuleContext(FunctionLiteralContext,0);
};

AtomicExpressionContext.prototype.thisExpression = function() {
    return this.getTypedRuleContext(ThisExpressionContext,0);
};

AtomicExpressionContext.prototype.superExpression = function() {
    return this.getTypedRuleContext(SuperExpressionContext,0);
};

AtomicExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

AtomicExpressionContext.prototype.tryExpression = function() {
    return this.getTypedRuleContext(TryExpressionContext,0);
};

AtomicExpressionContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};

AtomicExpressionContext.prototype.jumpExpression = function() {
    return this.getTypedRuleContext(JumpExpressionContext,0);
};

AtomicExpressionContext.prototype.loopExpression = function() {
    return this.getTypedRuleContext(LoopExpressionContext,0);
};

AtomicExpressionContext.prototype.collectionLiteral = function() {
    return this.getTypedRuleContext(CollectionLiteralContext,0);
};

AtomicExpressionContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

AtomicExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAtomicExpression(this);
	}
};

AtomicExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAtomicExpression(this);
	}
};




KotlinParser.AtomicExpressionContext = AtomicExpressionContext;

KotlinParser.prototype.atomicExpression = function() {

    var localctx = new AtomicExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, KotlinParser.RULE_atomicExpression);
    try {
        this.state = 1711;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1699;
            this.parenthesizedExpression();
            break;
        case KotlinParser.QUOTE_OPEN:
        case KotlinParser.TRIPLE_QUOTE_OPEN:
        case KotlinParser.RealLiteral:
        case KotlinParser.LongLiteral:
        case KotlinParser.IntegerLiteral:
        case KotlinParser.HexLiteral:
        case KotlinParser.BinLiteral:
        case KotlinParser.BooleanLiteral:
        case KotlinParser.NullLiteral:
        case KotlinParser.CharacterLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 1700;
            this.literalConstant();
            break;
        case KotlinParser.LCURL:
        case KotlinParser.AT:
        case KotlinParser.FILE:
        case KotlinParser.FIELD:
        case KotlinParser.PROPERTY:
        case KotlinParser.GET:
        case KotlinParser.SET:
        case KotlinParser.RECEIVER:
        case KotlinParser.PARAM:
        case KotlinParser.SETPARAM:
        case KotlinParser.DELEGATE:
        case KotlinParser.LabelReference:
            this.enterOuterAlt(localctx, 3);
            this.state = 1701;
            this.functionLiteral();
            break;
        case KotlinParser.THIS:
            this.enterOuterAlt(localctx, 4);
            this.state = 1702;
            this.thisExpression();
            break;
        case KotlinParser.SUPER:
            this.enterOuterAlt(localctx, 5);
            this.state = 1703;
            this.superExpression();
            break;
        case KotlinParser.IF:
        case KotlinParser.WHEN:
            this.enterOuterAlt(localctx, 6);
            this.state = 1704;
            this.conditionalExpression();
            break;
        case KotlinParser.TRY:
            this.enterOuterAlt(localctx, 7);
            this.state = 1705;
            this.tryExpression();
            break;
        case KotlinParser.OBJECT:
            this.enterOuterAlt(localctx, 8);
            this.state = 1706;
            this.objectLiteral();
            break;
        case KotlinParser.RETURN_AT:
        case KotlinParser.CONTINUE_AT:
        case KotlinParser.BREAK_AT:
        case KotlinParser.THROW:
        case KotlinParser.RETURN:
        case KotlinParser.CONTINUE:
        case KotlinParser.BREAK:
            this.enterOuterAlt(localctx, 9);
            this.state = 1707;
            this.jumpExpression();
            break;
        case KotlinParser.FOR:
        case KotlinParser.DO:
        case KotlinParser.WHILE:
            this.enterOuterAlt(localctx, 10);
            this.state = 1708;
            this.loopExpression();
            break;
        case KotlinParser.LSQUARE:
            this.enterOuterAlt(localctx, 11);
            this.state = 1709;
            this.collectionLiteral();
            break;
        case KotlinParser.IMPORT:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.WHERE:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.OUT:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.Identifier:
            this.enterOuterAlt(localctx, 12);
            this.state = 1710;
            this.simpleIdentifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParenthesizedExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_parenthesizedExpression;
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParenthesizedExpressionContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitParenthesizedExpression(this);
	}
};




KotlinParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

KotlinParser.prototype.parenthesizedExpression = function() {

    var localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, KotlinParser.RULE_parenthesizedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1713;
        this.match(KotlinParser.LPAREN);
        this.state = 1714;
        this.expression();
        this.state = 1715;
        this.match(KotlinParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_callSuffix;
    return this;
}

CallSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallSuffixContext.prototype.constructor = CallSuffixContext;

CallSuffixContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

CallSuffixContext.prototype.valueArguments = function() {
    return this.getTypedRuleContext(ValueArgumentsContext,0);
};

CallSuffixContext.prototype.annotatedLambda = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotatedLambdaContext);
    } else {
        return this.getTypedRuleContext(AnnotatedLambdaContext,i);
    }
};

CallSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterCallSuffix(this);
	}
};

CallSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitCallSuffix(this);
	}
};




KotlinParser.CallSuffixContext = CallSuffixContext;

KotlinParser.prototype.callSuffix = function() {

    var localctx = new CallSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, KotlinParser.RULE_callSuffix);
    try {
        this.state = 1739;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.LANGLE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1717;
            this.typeArguments();
            this.state = 1719;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
            if(la_===1) {
                this.state = 1718;
                this.valueArguments();

            }
            this.state = 1724;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,251,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1721;
                    this.annotatedLambda(); 
                }
                this.state = 1726;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,251,this._ctx);
            }

            break;
        case KotlinParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1727;
            this.valueArguments();
            this.state = 1731;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,252,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1728;
                    this.annotatedLambda(); 
                }
                this.state = 1733;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,252,this._ctx);
            }

            break;
        case KotlinParser.NL:
        case KotlinParser.LCURL:
        case KotlinParser.AT:
        case KotlinParser.FILE:
        case KotlinParser.IMPORT:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.WHERE:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.OUT:
        case KotlinParser.FIELD:
        case KotlinParser.PROPERTY:
        case KotlinParser.GET:
        case KotlinParser.SET:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.RECEIVER:
        case KotlinParser.PARAM:
        case KotlinParser.SETPARAM:
        case KotlinParser.DELEGATE:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.Identifier:
        case KotlinParser.LabelReference:
        case KotlinParser.LabelDefinition:
            this.enterOuterAlt(localctx, 3);
            this.state = 1735; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1734;
            		this.annotatedLambda();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1737; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,253, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotatedLambdaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_annotatedLambda;
    return this;
}

AnnotatedLambdaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotatedLambdaContext.prototype.constructor = AnnotatedLambdaContext;

AnnotatedLambdaContext.prototype.functionLiteral = function() {
    return this.getTypedRuleContext(FunctionLiteralContext,0);
};

AnnotatedLambdaContext.prototype.unescapedAnnotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnescapedAnnotationContext);
    } else {
        return this.getTypedRuleContext(UnescapedAnnotationContext,i);
    }
};

AnnotatedLambdaContext.prototype.LabelDefinition = function() {
    return this.getToken(KotlinParser.LabelDefinition, 0);
};

AnnotatedLambdaContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


AnnotatedLambdaContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAnnotatedLambda(this);
	}
};

AnnotatedLambdaContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAnnotatedLambda(this);
	}
};




KotlinParser.AnnotatedLambdaContext = AnnotatedLambdaContext;

KotlinParser.prototype.annotatedLambda = function() {

    var localctx = new AnnotatedLambdaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, KotlinParser.RULE_annotatedLambda);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1744;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (KotlinParser.OUT - 92)) | (1 << (KotlinParser.GETTER - 92)) | (1 << (KotlinParser.SETTER - 92)) | (1 << (KotlinParser.DYNAMIC - 92)) | (1 << (KotlinParser.PUBLIC - 92)) | (1 << (KotlinParser.PRIVATE - 92)) | (1 << (KotlinParser.PROTECTED - 92)) | (1 << (KotlinParser.INTERNAL - 92)) | (1 << (KotlinParser.ENUM - 92)) | (1 << (KotlinParser.SEALED - 92)) | (1 << (KotlinParser.ANNOTATION - 92)) | (1 << (KotlinParser.DATA - 92)) | (1 << (KotlinParser.INNER - 92)) | (1 << (KotlinParser.TAILREC - 92)) | (1 << (KotlinParser.OPERATOR - 92)) | (1 << (KotlinParser.INLINE - 92)) | (1 << (KotlinParser.INFIX - 92)) | (1 << (KotlinParser.EXTERNAL - 92)) | (1 << (KotlinParser.SUSPEND - 92)) | (1 << (KotlinParser.OVERRIDE - 92)) | (1 << (KotlinParser.ABSTRACT - 92)) | (1 << (KotlinParser.FINAL - 92)) | (1 << (KotlinParser.OPEN - 92)) | (1 << (KotlinParser.CONST - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (KotlinParser.LATEINIT - 124)) | (1 << (KotlinParser.VARARG - 124)) | (1 << (KotlinParser.NOINLINE - 124)) | (1 << (KotlinParser.CROSSINLINE - 124)) | (1 << (KotlinParser.REIFIED - 124)) | (1 << (KotlinParser.Identifier - 124)))) !== 0)) {
            this.state = 1741;
            this.unescapedAnnotation();
            this.state = 1746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1748;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.LabelDefinition) {
            this.state = 1747;
            this.match(KotlinParser.LabelDefinition);
        }

        this.state = 1753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1750;
            this.match(KotlinParser.NL);
            this.state = 1755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1756;
        this.functionLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayAccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_arrayAccess;
    return this;
}

ArrayAccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayAccessContext.prototype.constructor = ArrayAccessContext;

ArrayAccessContext.prototype.LSQUARE = function() {
    return this.getToken(KotlinParser.LSQUARE, 0);
};

ArrayAccessContext.prototype.RSQUARE = function() {
    return this.getToken(KotlinParser.RSQUARE, 0);
};

ArrayAccessContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayAccessContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


ArrayAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterArrayAccess(this);
	}
};

ArrayAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitArrayAccess(this);
	}
};




KotlinParser.ArrayAccessContext = ArrayAccessContext;

KotlinParser.prototype.arrayAccess = function() {

    var localctx = new ArrayAccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, KotlinParser.RULE_arrayAccess);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1758;
        this.match(KotlinParser.LSQUARE);
        this.state = 1767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (KotlinParser.COLONCOLON - 36)) | (1 << (KotlinParser.Q_COLONCOLON - 36)) | (1 << (KotlinParser.AT - 36)) | (1 << (KotlinParser.RETURN_AT - 36)) | (1 << (KotlinParser.CONTINUE_AT - 36)) | (1 << (KotlinParser.BREAK_AT - 36)) | (1 << (KotlinParser.FILE - 36)) | (1 << (KotlinParser.IMPORT - 36)) | (1 << (KotlinParser.OBJECT - 36)) | (1 << (KotlinParser.CONSTRUCTOR - 36)) | (1 << (KotlinParser.BY - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (KotlinParser.COMPANION - 68)) | (1 << (KotlinParser.INIT - 68)) | (1 << (KotlinParser.THIS - 68)) | (1 << (KotlinParser.SUPER - 68)) | (1 << (KotlinParser.WHERE - 68)) | (1 << (KotlinParser.IF - 68)) | (1 << (KotlinParser.WHEN - 68)) | (1 << (KotlinParser.TRY - 68)) | (1 << (KotlinParser.CATCH - 68)) | (1 << (KotlinParser.FINALLY - 68)) | (1 << (KotlinParser.FOR - 68)) | (1 << (KotlinParser.DO - 68)) | (1 << (KotlinParser.WHILE - 68)) | (1 << (KotlinParser.THROW - 68)) | (1 << (KotlinParser.RETURN - 68)) | (1 << (KotlinParser.CONTINUE - 68)) | (1 << (KotlinParser.BREAK - 68)) | (1 << (KotlinParser.OUT - 68)) | (1 << (KotlinParser.FIELD - 68)) | (1 << (KotlinParser.PROPERTY - 68)) | (1 << (KotlinParser.GET - 68)) | (1 << (KotlinParser.SET - 68)) | (1 << (KotlinParser.GETTER - 68)) | (1 << (KotlinParser.SETTER - 68)) | (1 << (KotlinParser.RECEIVER - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (KotlinParser.PARAM - 100)) | (1 << (KotlinParser.SETPARAM - 100)) | (1 << (KotlinParser.DELEGATE - 100)) | (1 << (KotlinParser.DYNAMIC - 100)) | (1 << (KotlinParser.PUBLIC - 100)) | (1 << (KotlinParser.PRIVATE - 100)) | (1 << (KotlinParser.PROTECTED - 100)) | (1 << (KotlinParser.INTERNAL - 100)) | (1 << (KotlinParser.ENUM - 100)) | (1 << (KotlinParser.SEALED - 100)) | (1 << (KotlinParser.ANNOTATION - 100)) | (1 << (KotlinParser.DATA - 100)) | (1 << (KotlinParser.INNER - 100)) | (1 << (KotlinParser.TAILREC - 100)) | (1 << (KotlinParser.OPERATOR - 100)) | (1 << (KotlinParser.INLINE - 100)) | (1 << (KotlinParser.INFIX - 100)) | (1 << (KotlinParser.EXTERNAL - 100)) | (1 << (KotlinParser.SUSPEND - 100)) | (1 << (KotlinParser.OVERRIDE - 100)) | (1 << (KotlinParser.ABSTRACT - 100)) | (1 << (KotlinParser.FINAL - 100)) | (1 << (KotlinParser.OPEN - 100)) | (1 << (KotlinParser.CONST - 100)) | (1 << (KotlinParser.LATEINIT - 100)) | (1 << (KotlinParser.VARARG - 100)) | (1 << (KotlinParser.NOINLINE - 100)) | (1 << (KotlinParser.CROSSINLINE - 100)) | (1 << (KotlinParser.REIFIED - 100)) | (1 << (KotlinParser.QUOTE_OPEN - 100)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 100)) | (1 << (KotlinParser.RealLiteral - 100)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (KotlinParser.LongLiteral - 134)) | (1 << (KotlinParser.IntegerLiteral - 134)) | (1 << (KotlinParser.HexLiteral - 134)) | (1 << (KotlinParser.BinLiteral - 134)) | (1 << (KotlinParser.BooleanLiteral - 134)) | (1 << (KotlinParser.NullLiteral - 134)) | (1 << (KotlinParser.Identifier - 134)) | (1 << (KotlinParser.LabelReference - 134)) | (1 << (KotlinParser.LabelDefinition - 134)) | (1 << (KotlinParser.CharacterLiteral - 134)))) !== 0)) {
            this.state = 1759;
            this.expression();
            this.state = 1764;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.COMMA) {
                this.state = 1760;
                this.match(KotlinParser.COMMA);
                this.state = 1761;
                this.expression();
                this.state = 1766;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1769;
        this.match(KotlinParser.RSQUARE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_valueArguments;
    return this;
}

ValueArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueArgumentsContext.prototype.constructor = ValueArgumentsContext;

ValueArgumentsContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

ValueArgumentsContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

ValueArgumentsContext.prototype.valueArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueArgumentContext);
    } else {
        return this.getTypedRuleContext(ValueArgumentContext,i);
    }
};

ValueArgumentsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


ValueArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterValueArguments(this);
	}
};

ValueArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitValueArguments(this);
	}
};




KotlinParser.ValueArgumentsContext = ValueArgumentsContext;

KotlinParser.prototype.valueArguments = function() {

    var localctx = new ValueArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, KotlinParser.RULE_valueArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1771;
        this.match(KotlinParser.LPAREN);
        this.state = 1780;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.MULT) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (KotlinParser.COLONCOLON - 36)) | (1 << (KotlinParser.Q_COLONCOLON - 36)) | (1 << (KotlinParser.AT - 36)) | (1 << (KotlinParser.RETURN_AT - 36)) | (1 << (KotlinParser.CONTINUE_AT - 36)) | (1 << (KotlinParser.BREAK_AT - 36)) | (1 << (KotlinParser.FILE - 36)) | (1 << (KotlinParser.IMPORT - 36)) | (1 << (KotlinParser.OBJECT - 36)) | (1 << (KotlinParser.CONSTRUCTOR - 36)) | (1 << (KotlinParser.BY - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (KotlinParser.COMPANION - 68)) | (1 << (KotlinParser.INIT - 68)) | (1 << (KotlinParser.THIS - 68)) | (1 << (KotlinParser.SUPER - 68)) | (1 << (KotlinParser.WHERE - 68)) | (1 << (KotlinParser.IF - 68)) | (1 << (KotlinParser.WHEN - 68)) | (1 << (KotlinParser.TRY - 68)) | (1 << (KotlinParser.CATCH - 68)) | (1 << (KotlinParser.FINALLY - 68)) | (1 << (KotlinParser.FOR - 68)) | (1 << (KotlinParser.DO - 68)) | (1 << (KotlinParser.WHILE - 68)) | (1 << (KotlinParser.THROW - 68)) | (1 << (KotlinParser.RETURN - 68)) | (1 << (KotlinParser.CONTINUE - 68)) | (1 << (KotlinParser.BREAK - 68)) | (1 << (KotlinParser.OUT - 68)) | (1 << (KotlinParser.FIELD - 68)) | (1 << (KotlinParser.PROPERTY - 68)) | (1 << (KotlinParser.GET - 68)) | (1 << (KotlinParser.SET - 68)) | (1 << (KotlinParser.GETTER - 68)) | (1 << (KotlinParser.SETTER - 68)) | (1 << (KotlinParser.RECEIVER - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (KotlinParser.PARAM - 100)) | (1 << (KotlinParser.SETPARAM - 100)) | (1 << (KotlinParser.DELEGATE - 100)) | (1 << (KotlinParser.DYNAMIC - 100)) | (1 << (KotlinParser.PUBLIC - 100)) | (1 << (KotlinParser.PRIVATE - 100)) | (1 << (KotlinParser.PROTECTED - 100)) | (1 << (KotlinParser.INTERNAL - 100)) | (1 << (KotlinParser.ENUM - 100)) | (1 << (KotlinParser.SEALED - 100)) | (1 << (KotlinParser.ANNOTATION - 100)) | (1 << (KotlinParser.DATA - 100)) | (1 << (KotlinParser.INNER - 100)) | (1 << (KotlinParser.TAILREC - 100)) | (1 << (KotlinParser.OPERATOR - 100)) | (1 << (KotlinParser.INLINE - 100)) | (1 << (KotlinParser.INFIX - 100)) | (1 << (KotlinParser.EXTERNAL - 100)) | (1 << (KotlinParser.SUSPEND - 100)) | (1 << (KotlinParser.OVERRIDE - 100)) | (1 << (KotlinParser.ABSTRACT - 100)) | (1 << (KotlinParser.FINAL - 100)) | (1 << (KotlinParser.OPEN - 100)) | (1 << (KotlinParser.CONST - 100)) | (1 << (KotlinParser.LATEINIT - 100)) | (1 << (KotlinParser.VARARG - 100)) | (1 << (KotlinParser.NOINLINE - 100)) | (1 << (KotlinParser.CROSSINLINE - 100)) | (1 << (KotlinParser.REIFIED - 100)) | (1 << (KotlinParser.QUOTE_OPEN - 100)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 100)) | (1 << (KotlinParser.RealLiteral - 100)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (KotlinParser.LongLiteral - 134)) | (1 << (KotlinParser.IntegerLiteral - 134)) | (1 << (KotlinParser.HexLiteral - 134)) | (1 << (KotlinParser.BinLiteral - 134)) | (1 << (KotlinParser.BooleanLiteral - 134)) | (1 << (KotlinParser.NullLiteral - 134)) | (1 << (KotlinParser.Identifier - 134)) | (1 << (KotlinParser.LabelReference - 134)) | (1 << (KotlinParser.LabelDefinition - 134)) | (1 << (KotlinParser.CharacterLiteral - 134)))) !== 0)) {
            this.state = 1772;
            this.valueArgument();
            this.state = 1777;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.COMMA) {
                this.state = 1773;
                this.match(KotlinParser.COMMA);
                this.state = 1774;
                this.valueArgument();
                this.state = 1779;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1782;
        this.match(KotlinParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.LANGLE = function() {
    return this.getToken(KotlinParser.LANGLE, 0);
};

TypeArgumentsContext.prototype.typeProjection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeProjectionContext);
    } else {
        return this.getTypedRuleContext(TypeProjectionContext,i);
    }
};

TypeArgumentsContext.prototype.RANGLE = function() {
    return this.getToken(KotlinParser.RANGLE, 0);
};

TypeArgumentsContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TypeArgumentsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeArguments(this);
	}
};




KotlinParser.TypeArgumentsContext = TypeArgumentsContext;

KotlinParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, KotlinParser.RULE_typeArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1784;
        this.match(KotlinParser.LANGLE);
        this.state = 1788;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1785;
            this.match(KotlinParser.NL);
            this.state = 1790;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1791;
        this.typeProjection();
        this.state = 1802;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,264,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1795;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1792;
                    this.match(KotlinParser.NL);
                    this.state = 1797;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1798;
                this.match(KotlinParser.COMMA);
                this.state = 1799;
                this.typeProjection(); 
            }
            this.state = 1804;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,264,this._ctx);
        }

        this.state = 1808;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 1805;
            this.match(KotlinParser.NL);
            this.state = 1810;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1811;
        this.match(KotlinParser.RANGLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeProjectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeProjection;
    return this;
}

TypeProjectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeProjectionContext.prototype.constructor = TypeProjectionContext;

TypeProjectionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeProjectionContext.prototype.typeProjectionModifierList = function() {
    return this.getTypedRuleContext(TypeProjectionModifierListContext,0);
};

TypeProjectionContext.prototype.MULT = function() {
    return this.getToken(KotlinParser.MULT, 0);
};

TypeProjectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeProjection(this);
	}
};

TypeProjectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeProjection(this);
	}
};




KotlinParser.TypeProjectionContext = TypeProjectionContext;

KotlinParser.prototype.typeProjection = function() {

    var localctx = new TypeProjectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, KotlinParser.RULE_typeProjection);
    try {
        this.state = 1818;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.LPAREN:
        case KotlinParser.AT:
        case KotlinParser.FILE:
        case KotlinParser.IMPORT:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.WHERE:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.IN:
        case KotlinParser.OUT:
        case KotlinParser.FIELD:
        case KotlinParser.PROPERTY:
        case KotlinParser.GET:
        case KotlinParser.SET:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.RECEIVER:
        case KotlinParser.PARAM:
        case KotlinParser.SETPARAM:
        case KotlinParser.DELEGATE:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.Identifier:
        case KotlinParser.LabelReference:
            this.enterOuterAlt(localctx, 1);
            this.state = 1814;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
            if(la_===1) {
                this.state = 1813;
                this.typeProjectionModifierList();

            }
            this.state = 1816;
            this.type();
            break;
        case KotlinParser.MULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1817;
            this.match(KotlinParser.MULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeProjectionModifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeProjectionModifierList;
    return this;
}

TypeProjectionModifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeProjectionModifierListContext.prototype.constructor = TypeProjectionModifierListContext;

TypeProjectionModifierListContext.prototype.varianceAnnotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarianceAnnotationContext);
    } else {
        return this.getTypedRuleContext(VarianceAnnotationContext,i);
    }
};

TypeProjectionModifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeProjectionModifierList(this);
	}
};

TypeProjectionModifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeProjectionModifierList(this);
	}
};




KotlinParser.TypeProjectionModifierListContext = TypeProjectionModifierListContext;

KotlinParser.prototype.typeProjectionModifierList = function() {

    var localctx = new TypeProjectionModifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, KotlinParser.RULE_typeProjectionModifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1821; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1820;
        		this.varianceAnnotation();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1823; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,268, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_valueArgument;
    return this;
}

ValueArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueArgumentContext.prototype.constructor = ValueArgumentContext;

ValueArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ValueArgumentContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

ValueArgumentContext.prototype.ASSIGNMENT = function() {
    return this.getToken(KotlinParser.ASSIGNMENT, 0);
};

ValueArgumentContext.prototype.MULT = function() {
    return this.getToken(KotlinParser.MULT, 0);
};

ValueArgumentContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ValueArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterValueArgument(this);
	}
};

ValueArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitValueArgument(this);
	}
};




KotlinParser.ValueArgumentContext = ValueArgumentContext;

KotlinParser.prototype.valueArgument = function() {

    var localctx = new ValueArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, KotlinParser.RULE_valueArgument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1839;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
        if(la_===1) {
            this.state = 1825;
            this.simpleIdentifier();
            this.state = 1829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1826;
                this.match(KotlinParser.NL);
                this.state = 1831;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1832;
            this.match(KotlinParser.ASSIGNMENT);
            this.state = 1836;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,270,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1833;
                    this.match(KotlinParser.NL); 
                }
                this.state = 1838;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,270,this._ctx);
            }


        }
        this.state = 1842;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.MULT) {
            this.state = 1841;
            this.match(KotlinParser.MULT);
        }

        this.state = 1847;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,273,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1844;
                this.match(KotlinParser.NL); 
            }
            this.state = 1849;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,273,this._ctx);
        }

        this.state = 1850;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_literalConstant;
    return this;
}

LiteralConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralConstantContext.prototype.constructor = LiteralConstantContext;

LiteralConstantContext.prototype.BooleanLiteral = function() {
    return this.getToken(KotlinParser.BooleanLiteral, 0);
};

LiteralConstantContext.prototype.IntegerLiteral = function() {
    return this.getToken(KotlinParser.IntegerLiteral, 0);
};

LiteralConstantContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

LiteralConstantContext.prototype.HexLiteral = function() {
    return this.getToken(KotlinParser.HexLiteral, 0);
};

LiteralConstantContext.prototype.BinLiteral = function() {
    return this.getToken(KotlinParser.BinLiteral, 0);
};

LiteralConstantContext.prototype.CharacterLiteral = function() {
    return this.getToken(KotlinParser.CharacterLiteral, 0);
};

LiteralConstantContext.prototype.RealLiteral = function() {
    return this.getToken(KotlinParser.RealLiteral, 0);
};

LiteralConstantContext.prototype.NullLiteral = function() {
    return this.getToken(KotlinParser.NullLiteral, 0);
};

LiteralConstantContext.prototype.LongLiteral = function() {
    return this.getToken(KotlinParser.LongLiteral, 0);
};

LiteralConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterLiteralConstant(this);
	}
};

LiteralConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitLiteralConstant(this);
	}
};




KotlinParser.LiteralConstantContext = LiteralConstantContext;

KotlinParser.prototype.literalConstant = function() {

    var localctx = new LiteralConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, KotlinParser.RULE_literalConstant);
    try {
        this.state = 1861;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 1852;
            this.match(KotlinParser.BooleanLiteral);
            break;
        case KotlinParser.IntegerLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 1853;
            this.match(KotlinParser.IntegerLiteral);
            break;
        case KotlinParser.QUOTE_OPEN:
        case KotlinParser.TRIPLE_QUOTE_OPEN:
            this.enterOuterAlt(localctx, 3);
            this.state = 1854;
            this.stringLiteral();
            break;
        case KotlinParser.HexLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 1855;
            this.match(KotlinParser.HexLiteral);
            break;
        case KotlinParser.BinLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 1856;
            this.match(KotlinParser.BinLiteral);
            break;
        case KotlinParser.CharacterLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 1857;
            this.match(KotlinParser.CharacterLiteral);
            break;
        case KotlinParser.RealLiteral:
            this.enterOuterAlt(localctx, 7);
            this.state = 1858;
            this.match(KotlinParser.RealLiteral);
            break;
        case KotlinParser.NullLiteral:
            this.enterOuterAlt(localctx, 8);
            this.state = 1859;
            this.match(KotlinParser.NullLiteral);
            break;
        case KotlinParser.LongLiteral:
            this.enterOuterAlt(localctx, 9);
            this.state = 1860;
            this.match(KotlinParser.LongLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.lineStringLiteral = function() {
    return this.getTypedRuleContext(LineStringLiteralContext,0);
};

StringLiteralContext.prototype.multiLineStringLiteral = function() {
    return this.getTypedRuleContext(MultiLineStringLiteralContext,0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitStringLiteral(this);
	}
};




KotlinParser.StringLiteralContext = StringLiteralContext;

KotlinParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, KotlinParser.RULE_stringLiteral);
    try {
        this.state = 1865;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.QUOTE_OPEN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1863;
            this.lineStringLiteral();
            break;
        case KotlinParser.TRIPLE_QUOTE_OPEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1864;
            this.multiLineStringLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LineStringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_lineStringLiteral;
    return this;
}

LineStringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LineStringLiteralContext.prototype.constructor = LineStringLiteralContext;

LineStringLiteralContext.prototype.QUOTE_OPEN = function() {
    return this.getToken(KotlinParser.QUOTE_OPEN, 0);
};

LineStringLiteralContext.prototype.QUOTE_CLOSE = function() {
    return this.getToken(KotlinParser.QUOTE_CLOSE, 0);
};

LineStringLiteralContext.prototype.lineStringContent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LineStringContentContext);
    } else {
        return this.getTypedRuleContext(LineStringContentContext,i);
    }
};

LineStringLiteralContext.prototype.lineStringExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LineStringExpressionContext);
    } else {
        return this.getTypedRuleContext(LineStringExpressionContext,i);
    }
};

LineStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterLineStringLiteral(this);
	}
};

LineStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitLineStringLiteral(this);
	}
};




KotlinParser.LineStringLiteralContext = LineStringLiteralContext;

KotlinParser.prototype.lineStringLiteral = function() {

    var localctx = new LineStringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, KotlinParser.RULE_lineStringLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1867;
        this.match(KotlinParser.QUOTE_OPEN);
        this.state = 1872;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 156)) & ~0x1f) == 0 && ((1 << (_la - 156)) & ((1 << (KotlinParser.LineStrRef - 156)) | (1 << (KotlinParser.LineStrText - 156)) | (1 << (KotlinParser.LineStrEscapedChar - 156)) | (1 << (KotlinParser.LineStrExprStart - 156)))) !== 0)) {
            this.state = 1870;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case KotlinParser.LineStrRef:
            case KotlinParser.LineStrText:
            case KotlinParser.LineStrEscapedChar:
                this.state = 1868;
                this.lineStringContent();
                break;
            case KotlinParser.LineStrExprStart:
                this.state = 1869;
                this.lineStringExpression();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1874;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1875;
        this.match(KotlinParser.QUOTE_CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiLineStringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_multiLineStringLiteral;
    return this;
}

MultiLineStringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiLineStringLiteralContext.prototype.constructor = MultiLineStringLiteralContext;

MultiLineStringLiteralContext.prototype.TRIPLE_QUOTE_OPEN = function() {
    return this.getToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0);
};

MultiLineStringLiteralContext.prototype.TRIPLE_QUOTE_CLOSE = function() {
    return this.getToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0);
};

MultiLineStringLiteralContext.prototype.multiLineStringContent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiLineStringContentContext);
    } else {
        return this.getTypedRuleContext(MultiLineStringContentContext,i);
    }
};

MultiLineStringLiteralContext.prototype.multiLineStringExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiLineStringExpressionContext);
    } else {
        return this.getTypedRuleContext(MultiLineStringExpressionContext,i);
    }
};

MultiLineStringLiteralContext.prototype.lineStringLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LineStringLiteralContext);
    } else {
        return this.getTypedRuleContext(LineStringLiteralContext,i);
    }
};

MultiLineStringLiteralContext.prototype.MultiLineStringQuote = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.MultiLineStringQuote);
    } else {
        return this.getToken(KotlinParser.MultiLineStringQuote, i);
    }
};


MultiLineStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterMultiLineStringLiteral(this);
	}
};

MultiLineStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitMultiLineStringLiteral(this);
	}
};




KotlinParser.MultiLineStringLiteralContext = MultiLineStringLiteralContext;

KotlinParser.prototype.multiLineStringLiteral = function() {

    var localctx = new MultiLineStringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, KotlinParser.RULE_multiLineStringLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1877;
        this.match(KotlinParser.TRIPLE_QUOTE_OPEN);
        this.state = 1884;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.QUOTE_OPEN || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (KotlinParser.MultiLineStringQuote - 161)) | (1 << (KotlinParser.MultiLineStrRef - 161)) | (1 << (KotlinParser.MultiLineStrText - 161)) | (1 << (KotlinParser.MultiLineStrEscapedChar - 161)) | (1 << (KotlinParser.MultiLineStrExprStart - 161)))) !== 0)) {
            this.state = 1882;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case KotlinParser.MultiLineStrRef:
            case KotlinParser.MultiLineStrText:
            case KotlinParser.MultiLineStrEscapedChar:
                this.state = 1878;
                this.multiLineStringContent();
                break;
            case KotlinParser.MultiLineStrExprStart:
                this.state = 1879;
                this.multiLineStringExpression();
                break;
            case KotlinParser.QUOTE_OPEN:
                this.state = 1880;
                this.lineStringLiteral();
                break;
            case KotlinParser.MultiLineStringQuote:
                this.state = 1881;
                this.match(KotlinParser.MultiLineStringQuote);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1886;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1887;
        this.match(KotlinParser.TRIPLE_QUOTE_CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LineStringContentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_lineStringContent;
    return this;
}

LineStringContentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LineStringContentContext.prototype.constructor = LineStringContentContext;

LineStringContentContext.prototype.LineStrText = function() {
    return this.getToken(KotlinParser.LineStrText, 0);
};

LineStringContentContext.prototype.LineStrEscapedChar = function() {
    return this.getToken(KotlinParser.LineStrEscapedChar, 0);
};

LineStringContentContext.prototype.LineStrRef = function() {
    return this.getToken(KotlinParser.LineStrRef, 0);
};

LineStringContentContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterLineStringContent(this);
	}
};

LineStringContentContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitLineStringContent(this);
	}
};




KotlinParser.LineStringContentContext = LineStringContentContext;

KotlinParser.prototype.lineStringContent = function() {

    var localctx = new LineStringContentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, KotlinParser.RULE_lineStringContent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1889;
        _la = this._input.LA(1);
        if(!(((((_la - 156)) & ~0x1f) == 0 && ((1 << (_la - 156)) & ((1 << (KotlinParser.LineStrRef - 156)) | (1 << (KotlinParser.LineStrText - 156)) | (1 << (KotlinParser.LineStrEscapedChar - 156)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LineStringExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_lineStringExpression;
    return this;
}

LineStringExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LineStringExpressionContext.prototype.constructor = LineStringExpressionContext;

LineStringExpressionContext.prototype.LineStrExprStart = function() {
    return this.getToken(KotlinParser.LineStrExprStart, 0);
};

LineStringExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LineStringExpressionContext.prototype.RCURL = function() {
    return this.getToken(KotlinParser.RCURL, 0);
};

LineStringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterLineStringExpression(this);
	}
};

LineStringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitLineStringExpression(this);
	}
};




KotlinParser.LineStringExpressionContext = LineStringExpressionContext;

KotlinParser.prototype.lineStringExpression = function() {

    var localctx = new LineStringExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, KotlinParser.RULE_lineStringExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1891;
        this.match(KotlinParser.LineStrExprStart);
        this.state = 1892;
        this.expression();
        this.state = 1893;
        this.match(KotlinParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiLineStringContentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_multiLineStringContent;
    return this;
}

MultiLineStringContentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiLineStringContentContext.prototype.constructor = MultiLineStringContentContext;

MultiLineStringContentContext.prototype.MultiLineStrText = function() {
    return this.getToken(KotlinParser.MultiLineStrText, 0);
};

MultiLineStringContentContext.prototype.MultiLineStrEscapedChar = function() {
    return this.getToken(KotlinParser.MultiLineStrEscapedChar, 0);
};

MultiLineStringContentContext.prototype.MultiLineStrRef = function() {
    return this.getToken(KotlinParser.MultiLineStrRef, 0);
};

MultiLineStringContentContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterMultiLineStringContent(this);
	}
};

MultiLineStringContentContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitMultiLineStringContent(this);
	}
};




KotlinParser.MultiLineStringContentContext = MultiLineStringContentContext;

KotlinParser.prototype.multiLineStringContent = function() {

    var localctx = new MultiLineStringContentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, KotlinParser.RULE_multiLineStringContent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1895;
        _la = this._input.LA(1);
        if(!(((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (KotlinParser.MultiLineStrRef - 162)) | (1 << (KotlinParser.MultiLineStrText - 162)) | (1 << (KotlinParser.MultiLineStrEscapedChar - 162)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiLineStringExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_multiLineStringExpression;
    return this;
}

MultiLineStringExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiLineStringExpressionContext.prototype.constructor = MultiLineStringExpressionContext;

MultiLineStringExpressionContext.prototype.MultiLineStrExprStart = function() {
    return this.getToken(KotlinParser.MultiLineStrExprStart, 0);
};

MultiLineStringExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MultiLineStringExpressionContext.prototype.RCURL = function() {
    return this.getToken(KotlinParser.RCURL, 0);
};

MultiLineStringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterMultiLineStringExpression(this);
	}
};

MultiLineStringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitMultiLineStringExpression(this);
	}
};




KotlinParser.MultiLineStringExpressionContext = MultiLineStringExpressionContext;

KotlinParser.prototype.multiLineStringExpression = function() {

    var localctx = new MultiLineStringExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, KotlinParser.RULE_multiLineStringExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1897;
        this.match(KotlinParser.MultiLineStrExprStart);
        this.state = 1898;
        this.expression();
        this.state = 1899;
        this.match(KotlinParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_functionLiteral;
    return this;
}

FunctionLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionLiteralContext.prototype.constructor = FunctionLiteralContext;

FunctionLiteralContext.prototype.LCURL = function() {
    return this.getToken(KotlinParser.LCURL, 0);
};

FunctionLiteralContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

FunctionLiteralContext.prototype.RCURL = function() {
    return this.getToken(KotlinParser.RCURL, 0);
};

FunctionLiteralContext.prototype.lambdaParameters = function() {
    return this.getTypedRuleContext(LambdaParametersContext,0);
};

FunctionLiteralContext.prototype.ARROW = function() {
    return this.getToken(KotlinParser.ARROW, 0);
};

FunctionLiteralContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

FunctionLiteralContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


FunctionLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFunctionLiteral(this);
	}
};

FunctionLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFunctionLiteral(this);
	}
};




KotlinParser.FunctionLiteralContext = FunctionLiteralContext;

KotlinParser.prototype.functionLiteral = function() {

    var localctx = new FunctionLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, KotlinParser.RULE_functionLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1904;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)))) !== 0) || _la===KotlinParser.LabelReference) {
            this.state = 1901;
            this.annotations();
            this.state = 1906;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1953;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1907;
            this.match(KotlinParser.LCURL);
            this.state = 1911;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,281,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1908;
                    this.match(KotlinParser.NL); 
                }
                this.state = 1913;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,281,this._ctx);
            }

            this.state = 1914;
            this.statements();
            this.state = 1918;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1915;
                this.match(KotlinParser.NL);
                this.state = 1920;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1921;
            this.match(KotlinParser.RCURL);
            break;

        case 2:
            this.state = 1923;
            this.match(KotlinParser.LCURL);
            this.state = 1927;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,283,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1924;
                    this.match(KotlinParser.NL); 
                }
                this.state = 1929;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,283,this._ctx);
            }

            this.state = 1930;
            this.lambdaParameters();
            this.state = 1934;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1931;
                this.match(KotlinParser.NL);
                this.state = 1936;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1937;
            this.match(KotlinParser.ARROW);
            this.state = 1941;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,285,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1938;
                    this.match(KotlinParser.NL); 
                }
                this.state = 1943;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,285,this._ctx);
            }

            this.state = 1944;
            this.statements();
            this.state = 1948;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1945;
                this.match(KotlinParser.NL);
                this.state = 1950;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1951;
            this.match(KotlinParser.RCURL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LambdaParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_lambdaParameters;
    return this;
}

LambdaParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaParametersContext.prototype.constructor = LambdaParametersContext;

LambdaParametersContext.prototype.lambdaParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LambdaParameterContext);
    } else {
        return this.getTypedRuleContext(LambdaParameterContext,i);
    }
};

LambdaParametersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


LambdaParametersContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


LambdaParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterLambdaParameters(this);
	}
};

LambdaParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitLambdaParameters(this);
	}
};




KotlinParser.LambdaParametersContext = LambdaParametersContext;

KotlinParser.prototype.lambdaParameters = function() {

    var localctx = new LambdaParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, KotlinParser.RULE_lambdaParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1956;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.LPAREN || ((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (KotlinParser.OUT - 92)) | (1 << (KotlinParser.GETTER - 92)) | (1 << (KotlinParser.SETTER - 92)) | (1 << (KotlinParser.DYNAMIC - 92)) | (1 << (KotlinParser.PUBLIC - 92)) | (1 << (KotlinParser.PRIVATE - 92)) | (1 << (KotlinParser.PROTECTED - 92)) | (1 << (KotlinParser.INTERNAL - 92)) | (1 << (KotlinParser.ENUM - 92)) | (1 << (KotlinParser.SEALED - 92)) | (1 << (KotlinParser.ANNOTATION - 92)) | (1 << (KotlinParser.DATA - 92)) | (1 << (KotlinParser.INNER - 92)) | (1 << (KotlinParser.TAILREC - 92)) | (1 << (KotlinParser.OPERATOR - 92)) | (1 << (KotlinParser.INLINE - 92)) | (1 << (KotlinParser.INFIX - 92)) | (1 << (KotlinParser.EXTERNAL - 92)) | (1 << (KotlinParser.SUSPEND - 92)) | (1 << (KotlinParser.OVERRIDE - 92)) | (1 << (KotlinParser.ABSTRACT - 92)) | (1 << (KotlinParser.FINAL - 92)) | (1 << (KotlinParser.OPEN - 92)) | (1 << (KotlinParser.CONST - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (KotlinParser.LATEINIT - 124)) | (1 << (KotlinParser.VARARG - 124)) | (1 << (KotlinParser.NOINLINE - 124)) | (1 << (KotlinParser.CROSSINLINE - 124)) | (1 << (KotlinParser.REIFIED - 124)) | (1 << (KotlinParser.Identifier - 124)))) !== 0)) {
            this.state = 1955;
            this.lambdaParameter();
        }

        this.state = 1974;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,291,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1961;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1958;
                    this.match(KotlinParser.NL);
                    this.state = 1963;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1964;
                this.match(KotlinParser.COMMA);
                this.state = 1968;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1965;
                    this.match(KotlinParser.NL);
                    this.state = 1970;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1971;
                this.lambdaParameter(); 
            }
            this.state = 1976;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,291,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LambdaParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_lambdaParameter;
    return this;
}

LambdaParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaParameterContext.prototype.constructor = LambdaParameterContext;

LambdaParameterContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

LambdaParameterContext.prototype.multiVariableDeclaration = function() {
    return this.getTypedRuleContext(MultiVariableDeclarationContext,0);
};

LambdaParameterContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

LambdaParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LambdaParameterContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


LambdaParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterLambdaParameter(this);
	}
};

LambdaParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitLambdaParameter(this);
	}
};




KotlinParser.LambdaParameterContext = LambdaParameterContext;

KotlinParser.prototype.lambdaParameter = function() {

    var localctx = new LambdaParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, KotlinParser.RULE_lambdaParameter);
    var _la = 0; // Token type
    try {
        this.state = 1995;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.IMPORT:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.WHERE:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.OUT:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1977;
            this.variableDeclaration();
            break;
        case KotlinParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1978;
            this.multiVariableDeclaration();
            this.state = 1993;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
            if(la_===1) {
                this.state = 1982;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1979;
                    this.match(KotlinParser.NL);
                    this.state = 1984;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1985;
                this.match(KotlinParser.COLON);
                this.state = 1989;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 1986;
                    this.match(KotlinParser.NL);
                    this.state = 1991;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1992;
                this.type();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_objectLiteral;
    return this;
}

ObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteralContext.prototype.constructor = ObjectLiteralContext;

ObjectLiteralContext.prototype.OBJECT = function() {
    return this.getToken(KotlinParser.OBJECT, 0);
};

ObjectLiteralContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ObjectLiteralContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

ObjectLiteralContext.prototype.delegationSpecifiers = function() {
    return this.getTypedRuleContext(DelegationSpecifiersContext,0);
};

ObjectLiteralContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ObjectLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterObjectLiteral(this);
	}
};

ObjectLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitObjectLiteral(this);
	}
};




KotlinParser.ObjectLiteralContext = ObjectLiteralContext;

KotlinParser.prototype.objectLiteral = function() {

    var localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, KotlinParser.RULE_objectLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1997;
        this.match(KotlinParser.OBJECT);
        this.state = 2012;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
        if(la_===1) {
            this.state = 2001;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 1998;
                this.match(KotlinParser.NL);
                this.state = 2003;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2004;
            this.match(KotlinParser.COLON);
            this.state = 2008;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2005;
                this.match(KotlinParser.NL);
                this.state = 2010;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2011;
            this.delegationSpecifiers();

        }
        this.state = 2017;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2014;
            this.match(KotlinParser.NL);
            this.state = 2019;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2020;
        this.classBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CollectionLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_collectionLiteral;
    return this;
}

CollectionLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionLiteralContext.prototype.constructor = CollectionLiteralContext;

CollectionLiteralContext.prototype.LSQUARE = function() {
    return this.getToken(KotlinParser.LSQUARE, 0);
};

CollectionLiteralContext.prototype.RSQUARE = function() {
    return this.getToken(KotlinParser.RSQUARE, 0);
};

CollectionLiteralContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CollectionLiteralContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


CollectionLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterCollectionLiteral(this);
	}
};

CollectionLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitCollectionLiteral(this);
	}
};




KotlinParser.CollectionLiteralContext = CollectionLiteralContext;

KotlinParser.prototype.collectionLiteral = function() {

    var localctx = new CollectionLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, KotlinParser.RULE_collectionLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2022;
        this.match(KotlinParser.LSQUARE);
        this.state = 2024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (KotlinParser.COLONCOLON - 36)) | (1 << (KotlinParser.Q_COLONCOLON - 36)) | (1 << (KotlinParser.AT - 36)) | (1 << (KotlinParser.RETURN_AT - 36)) | (1 << (KotlinParser.CONTINUE_AT - 36)) | (1 << (KotlinParser.BREAK_AT - 36)) | (1 << (KotlinParser.FILE - 36)) | (1 << (KotlinParser.IMPORT - 36)) | (1 << (KotlinParser.OBJECT - 36)) | (1 << (KotlinParser.CONSTRUCTOR - 36)) | (1 << (KotlinParser.BY - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (KotlinParser.COMPANION - 68)) | (1 << (KotlinParser.INIT - 68)) | (1 << (KotlinParser.THIS - 68)) | (1 << (KotlinParser.SUPER - 68)) | (1 << (KotlinParser.WHERE - 68)) | (1 << (KotlinParser.IF - 68)) | (1 << (KotlinParser.WHEN - 68)) | (1 << (KotlinParser.TRY - 68)) | (1 << (KotlinParser.CATCH - 68)) | (1 << (KotlinParser.FINALLY - 68)) | (1 << (KotlinParser.FOR - 68)) | (1 << (KotlinParser.DO - 68)) | (1 << (KotlinParser.WHILE - 68)) | (1 << (KotlinParser.THROW - 68)) | (1 << (KotlinParser.RETURN - 68)) | (1 << (KotlinParser.CONTINUE - 68)) | (1 << (KotlinParser.BREAK - 68)) | (1 << (KotlinParser.OUT - 68)) | (1 << (KotlinParser.FIELD - 68)) | (1 << (KotlinParser.PROPERTY - 68)) | (1 << (KotlinParser.GET - 68)) | (1 << (KotlinParser.SET - 68)) | (1 << (KotlinParser.GETTER - 68)) | (1 << (KotlinParser.SETTER - 68)) | (1 << (KotlinParser.RECEIVER - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (KotlinParser.PARAM - 100)) | (1 << (KotlinParser.SETPARAM - 100)) | (1 << (KotlinParser.DELEGATE - 100)) | (1 << (KotlinParser.DYNAMIC - 100)) | (1 << (KotlinParser.PUBLIC - 100)) | (1 << (KotlinParser.PRIVATE - 100)) | (1 << (KotlinParser.PROTECTED - 100)) | (1 << (KotlinParser.INTERNAL - 100)) | (1 << (KotlinParser.ENUM - 100)) | (1 << (KotlinParser.SEALED - 100)) | (1 << (KotlinParser.ANNOTATION - 100)) | (1 << (KotlinParser.DATA - 100)) | (1 << (KotlinParser.INNER - 100)) | (1 << (KotlinParser.TAILREC - 100)) | (1 << (KotlinParser.OPERATOR - 100)) | (1 << (KotlinParser.INLINE - 100)) | (1 << (KotlinParser.INFIX - 100)) | (1 << (KotlinParser.EXTERNAL - 100)) | (1 << (KotlinParser.SUSPEND - 100)) | (1 << (KotlinParser.OVERRIDE - 100)) | (1 << (KotlinParser.ABSTRACT - 100)) | (1 << (KotlinParser.FINAL - 100)) | (1 << (KotlinParser.OPEN - 100)) | (1 << (KotlinParser.CONST - 100)) | (1 << (KotlinParser.LATEINIT - 100)) | (1 << (KotlinParser.VARARG - 100)) | (1 << (KotlinParser.NOINLINE - 100)) | (1 << (KotlinParser.CROSSINLINE - 100)) | (1 << (KotlinParser.REIFIED - 100)) | (1 << (KotlinParser.QUOTE_OPEN - 100)) | (1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 100)) | (1 << (KotlinParser.RealLiteral - 100)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (KotlinParser.LongLiteral - 134)) | (1 << (KotlinParser.IntegerLiteral - 134)) | (1 << (KotlinParser.HexLiteral - 134)) | (1 << (KotlinParser.BinLiteral - 134)) | (1 << (KotlinParser.BooleanLiteral - 134)) | (1 << (KotlinParser.NullLiteral - 134)) | (1 << (KotlinParser.Identifier - 134)) | (1 << (KotlinParser.LabelReference - 134)) | (1 << (KotlinParser.LabelDefinition - 134)) | (1 << (KotlinParser.CharacterLiteral - 134)))) !== 0)) {
            this.state = 2023;
            this.expression();
        }

        this.state = 2030;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.COMMA) {
            this.state = 2026;
            this.match(KotlinParser.COMMA);
            this.state = 2027;
            this.expression();
            this.state = 2032;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2033;
        this.match(KotlinParser.RSQUARE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThisExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_thisExpression;
    return this;
}

ThisExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

ThisExpressionContext.prototype.THIS = function() {
    return this.getToken(KotlinParser.THIS, 0);
};

ThisExpressionContext.prototype.LabelReference = function() {
    return this.getToken(KotlinParser.LabelReference, 0);
};

ThisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterThisExpression(this);
	}
};

ThisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitThisExpression(this);
	}
};




KotlinParser.ThisExpressionContext = ThisExpressionContext;

KotlinParser.prototype.thisExpression = function() {

    var localctx = new ThisExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, KotlinParser.RULE_thisExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2035;
        this.match(KotlinParser.THIS);
        this.state = 2037;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
        if(la_===1) {
            this.state = 2036;
            this.match(KotlinParser.LabelReference);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SuperExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_superExpression;
    return this;
}

SuperExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperExpressionContext.prototype.constructor = SuperExpressionContext;

SuperExpressionContext.prototype.SUPER = function() {
    return this.getToken(KotlinParser.SUPER, 0);
};

SuperExpressionContext.prototype.LANGLE = function() {
    return this.getToken(KotlinParser.LANGLE, 0);
};

SuperExpressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

SuperExpressionContext.prototype.RANGLE = function() {
    return this.getToken(KotlinParser.RANGLE, 0);
};

SuperExpressionContext.prototype.LabelReference = function() {
    return this.getToken(KotlinParser.LabelReference, 0);
};

SuperExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


SuperExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterSuperExpression(this);
	}
};

SuperExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitSuperExpression(this);
	}
};




KotlinParser.SuperExpressionContext = SuperExpressionContext;

KotlinParser.prototype.superExpression = function() {

    var localctx = new SuperExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, KotlinParser.RULE_superExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2039;
        this.match(KotlinParser.SUPER);
        this.state = 2056;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
        if(la_===1) {
            this.state = 2040;
            this.match(KotlinParser.LANGLE);
            this.state = 2044;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2041;
                this.match(KotlinParser.NL);
                this.state = 2046;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2047;
            this.type();
            this.state = 2051;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2048;
                this.match(KotlinParser.NL);
                this.state = 2053;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2054;
            this.match(KotlinParser.RANGLE);

        }
        this.state = 2059;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
        if(la_===1) {
            this.state = 2058;
            this.match(KotlinParser.LabelReference);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_conditionalExpression;
    return this;
}

ConditionalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.ifExpression = function() {
    return this.getTypedRuleContext(IfExpressionContext,0);
};

ConditionalExpressionContext.prototype.whenExpression = function() {
    return this.getTypedRuleContext(WhenExpressionContext,0);
};

ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitConditionalExpression(this);
	}
};




KotlinParser.ConditionalExpressionContext = ConditionalExpressionContext;

KotlinParser.prototype.conditionalExpression = function() {

    var localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, KotlinParser.RULE_conditionalExpression);
    try {
        this.state = 2063;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 2061;
            this.ifExpression();
            break;
        case KotlinParser.WHEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2062;
            this.whenExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_ifExpression;
    return this;
}

IfExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExpressionContext.prototype.constructor = IfExpressionContext;

IfExpressionContext.prototype.IF = function() {
    return this.getToken(KotlinParser.IF, 0);
};

IfExpressionContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

IfExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfExpressionContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

IfExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


IfExpressionContext.prototype.controlStructureBody = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ControlStructureBodyContext);
    } else {
        return this.getTypedRuleContext(ControlStructureBodyContext,i);
    }
};

IfExpressionContext.prototype.SEMICOLON = function() {
    return this.getToken(KotlinParser.SEMICOLON, 0);
};

IfExpressionContext.prototype.ELSE = function() {
    return this.getToken(KotlinParser.ELSE, 0);
};

IfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterIfExpression(this);
	}
};

IfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitIfExpression(this);
	}
};




KotlinParser.IfExpressionContext = IfExpressionContext;

KotlinParser.prototype.ifExpression = function() {

    var localctx = new IfExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, KotlinParser.RULE_ifExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2065;
        this.match(KotlinParser.IF);
        this.state = 2069;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2066;
            this.match(KotlinParser.NL);
            this.state = 2071;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2072;
        this.match(KotlinParser.LPAREN);
        this.state = 2073;
        this.expression();
        this.state = 2074;
        this.match(KotlinParser.RPAREN);
        this.state = 2078;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,309,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2075;
                this.match(KotlinParser.NL); 
            }
            this.state = 2080;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,309,this._ctx);
        }

        this.state = 2082;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
        if(la_===1) {
            this.state = 2081;
            this.controlStructureBody();

        }
        this.state = 2085;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
        if(la_===1) {
            this.state = 2084;
            this.match(KotlinParser.SEMICOLON);

        }
        this.state = 2103;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
        if(la_===1) {
            this.state = 2090;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2087;
                this.match(KotlinParser.NL);
                this.state = 2092;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2093;
            this.match(KotlinParser.ELSE);
            this.state = 2097;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,313,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2094;
                    this.match(KotlinParser.NL); 
                }
                this.state = 2099;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,313,this._ctx);
            }

            this.state = 2101;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
            if(la_===1) {
                this.state = 2100;
                this.controlStructureBody();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ControlStructureBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_controlStructureBody;
    return this;
}

ControlStructureBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ControlStructureBodyContext.prototype.constructor = ControlStructureBodyContext;

ControlStructureBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ControlStructureBodyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ControlStructureBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterControlStructureBody(this);
	}
};

ControlStructureBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitControlStructureBody(this);
	}
};




KotlinParser.ControlStructureBodyContext = ControlStructureBodyContext;

KotlinParser.prototype.controlStructureBody = function() {

    var localctx = new ControlStructureBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, KotlinParser.RULE_controlStructureBody);
    try {
        this.state = 2107;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2105;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2106;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_whenExpression;
    return this;
}

WhenExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenExpressionContext.prototype.constructor = WhenExpressionContext;

WhenExpressionContext.prototype.WHEN = function() {
    return this.getToken(KotlinParser.WHEN, 0);
};

WhenExpressionContext.prototype.LCURL = function() {
    return this.getToken(KotlinParser.LCURL, 0);
};

WhenExpressionContext.prototype.RCURL = function() {
    return this.getToken(KotlinParser.RCURL, 0);
};

WhenExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


WhenExpressionContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

WhenExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhenExpressionContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

WhenExpressionContext.prototype.whenEntry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenEntryContext);
    } else {
        return this.getTypedRuleContext(WhenEntryContext,i);
    }
};

WhenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterWhenExpression(this);
	}
};

WhenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitWhenExpression(this);
	}
};




KotlinParser.WhenExpressionContext = WhenExpressionContext;

KotlinParser.prototype.whenExpression = function() {

    var localctx = new WhenExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, KotlinParser.RULE_whenExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2109;
        this.match(KotlinParser.WHEN);
        this.state = 2113;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,317,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2110;
                this.match(KotlinParser.NL); 
            }
            this.state = 2115;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,317,this._ctx);
        }

        this.state = 2120;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.LPAREN) {
            this.state = 2116;
            this.match(KotlinParser.LPAREN);
            this.state = 2117;
            this.expression();
            this.state = 2118;
            this.match(KotlinParser.RPAREN);
        }

        this.state = 2125;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2122;
            this.match(KotlinParser.NL);
            this.state = 2127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2128;
        this.match(KotlinParser.LCURL);
        this.state = 2132;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,320,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2129;
                this.match(KotlinParser.NL); 
            }
            this.state = 2134;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,320,this._ctx);
        }

        this.state = 2144;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,322,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2135;
                this.whenEntry();
                this.state = 2139;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,321,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 2136;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 2141;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,321,this._ctx);
                }
         
            }
            this.state = 2146;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,322,this._ctx);
        }

        this.state = 2150;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2147;
            this.match(KotlinParser.NL);
            this.state = 2152;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2153;
        this.match(KotlinParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenEntryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_whenEntry;
    return this;
}

WhenEntryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenEntryContext.prototype.constructor = WhenEntryContext;

WhenEntryContext.prototype.whenCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenConditionContext);
    } else {
        return this.getTypedRuleContext(WhenConditionContext,i);
    }
};

WhenEntryContext.prototype.ARROW = function() {
    return this.getToken(KotlinParser.ARROW, 0);
};

WhenEntryContext.prototype.controlStructureBody = function() {
    return this.getTypedRuleContext(ControlStructureBodyContext,0);
};

WhenEntryContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.COMMA);
    } else {
        return this.getToken(KotlinParser.COMMA, i);
    }
};


WhenEntryContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


WhenEntryContext.prototype.semi = function() {
    return this.getTypedRuleContext(SemiContext,0);
};

WhenEntryContext.prototype.ELSE = function() {
    return this.getToken(KotlinParser.ELSE, 0);
};

WhenEntryContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterWhenEntry(this);
	}
};

WhenEntryContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitWhenEntry(this);
	}
};




KotlinParser.WhenEntryContext = WhenEntryContext;

KotlinParser.prototype.whenEntry = function() {

    var localctx = new WhenEntryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, KotlinParser.RULE_whenEntry);
    var _la = 0; // Token type
    try {
        this.state = 2207;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.NL:
        case KotlinParser.LPAREN:
        case KotlinParser.LSQUARE:
        case KotlinParser.LCURL:
        case KotlinParser.ADD:
        case KotlinParser.SUB:
        case KotlinParser.INCR:
        case KotlinParser.DECR:
        case KotlinParser.EXCL:
        case KotlinParser.COLONCOLON:
        case KotlinParser.Q_COLONCOLON:
        case KotlinParser.AT:
        case KotlinParser.RETURN_AT:
        case KotlinParser.CONTINUE_AT:
        case KotlinParser.BREAK_AT:
        case KotlinParser.FILE:
        case KotlinParser.IMPORT:
        case KotlinParser.OBJECT:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.THIS:
        case KotlinParser.SUPER:
        case KotlinParser.WHERE:
        case KotlinParser.IF:
        case KotlinParser.WHEN:
        case KotlinParser.TRY:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.FOR:
        case KotlinParser.DO:
        case KotlinParser.WHILE:
        case KotlinParser.THROW:
        case KotlinParser.RETURN:
        case KotlinParser.CONTINUE:
        case KotlinParser.BREAK:
        case KotlinParser.IS:
        case KotlinParser.IN:
        case KotlinParser.NOT_IS:
        case KotlinParser.NOT_IN:
        case KotlinParser.OUT:
        case KotlinParser.FIELD:
        case KotlinParser.PROPERTY:
        case KotlinParser.GET:
        case KotlinParser.SET:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.RECEIVER:
        case KotlinParser.PARAM:
        case KotlinParser.SETPARAM:
        case KotlinParser.DELEGATE:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.QUOTE_OPEN:
        case KotlinParser.TRIPLE_QUOTE_OPEN:
        case KotlinParser.RealLiteral:
        case KotlinParser.LongLiteral:
        case KotlinParser.IntegerLiteral:
        case KotlinParser.HexLiteral:
        case KotlinParser.BinLiteral:
        case KotlinParser.BooleanLiteral:
        case KotlinParser.NullLiteral:
        case KotlinParser.Identifier:
        case KotlinParser.LabelReference:
        case KotlinParser.LabelDefinition:
        case KotlinParser.CharacterLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 2155;
            this.whenCondition();
            this.state = 2172;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,326,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2159;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===KotlinParser.NL) {
                        this.state = 2156;
                        this.match(KotlinParser.NL);
                        this.state = 2161;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2162;
                    this.match(KotlinParser.COMMA);
                    this.state = 2166;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,325,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 2163;
                            this.match(KotlinParser.NL); 
                        }
                        this.state = 2168;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,325,this._ctx);
                    }

                    this.state = 2169;
                    this.whenCondition(); 
                }
                this.state = 2174;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,326,this._ctx);
            }

            this.state = 2178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2175;
                this.match(KotlinParser.NL);
                this.state = 2180;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2181;
            this.match(KotlinParser.ARROW);
            this.state = 2185;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,328,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2182;
                    this.match(KotlinParser.NL); 
                }
                this.state = 2187;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,328,this._ctx);
            }

            this.state = 2188;
            this.controlStructureBody();
            this.state = 2190;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
            if(la_===1) {
                this.state = 2189;
                this.semi();

            }
            break;
        case KotlinParser.ELSE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2192;
            this.match(KotlinParser.ELSE);
            this.state = 2196;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2193;
                this.match(KotlinParser.NL);
                this.state = 2198;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2199;
            this.match(KotlinParser.ARROW);
            this.state = 2203;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,331,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2200;
                    this.match(KotlinParser.NL); 
                }
                this.state = 2205;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,331,this._ctx);
            }

            this.state = 2206;
            this.controlStructureBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_whenCondition;
    return this;
}

WhenConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenConditionContext.prototype.constructor = WhenConditionContext;

WhenConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhenConditionContext.prototype.rangeTest = function() {
    return this.getTypedRuleContext(RangeTestContext,0);
};

WhenConditionContext.prototype.typeTest = function() {
    return this.getTypedRuleContext(TypeTestContext,0);
};

WhenConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterWhenCondition(this);
	}
};

WhenConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitWhenCondition(this);
	}
};




KotlinParser.WhenConditionContext = WhenConditionContext;

KotlinParser.prototype.whenCondition = function() {

    var localctx = new WhenConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, KotlinParser.RULE_whenCondition);
    try {
        this.state = 2212;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.NL:
        case KotlinParser.LPAREN:
        case KotlinParser.LSQUARE:
        case KotlinParser.LCURL:
        case KotlinParser.ADD:
        case KotlinParser.SUB:
        case KotlinParser.INCR:
        case KotlinParser.DECR:
        case KotlinParser.EXCL:
        case KotlinParser.COLONCOLON:
        case KotlinParser.Q_COLONCOLON:
        case KotlinParser.AT:
        case KotlinParser.RETURN_AT:
        case KotlinParser.CONTINUE_AT:
        case KotlinParser.BREAK_AT:
        case KotlinParser.FILE:
        case KotlinParser.IMPORT:
        case KotlinParser.OBJECT:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.THIS:
        case KotlinParser.SUPER:
        case KotlinParser.WHERE:
        case KotlinParser.IF:
        case KotlinParser.WHEN:
        case KotlinParser.TRY:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.FOR:
        case KotlinParser.DO:
        case KotlinParser.WHILE:
        case KotlinParser.THROW:
        case KotlinParser.RETURN:
        case KotlinParser.CONTINUE:
        case KotlinParser.BREAK:
        case KotlinParser.OUT:
        case KotlinParser.FIELD:
        case KotlinParser.PROPERTY:
        case KotlinParser.GET:
        case KotlinParser.SET:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.RECEIVER:
        case KotlinParser.PARAM:
        case KotlinParser.SETPARAM:
        case KotlinParser.DELEGATE:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.QUOTE_OPEN:
        case KotlinParser.TRIPLE_QUOTE_OPEN:
        case KotlinParser.RealLiteral:
        case KotlinParser.LongLiteral:
        case KotlinParser.IntegerLiteral:
        case KotlinParser.HexLiteral:
        case KotlinParser.BinLiteral:
        case KotlinParser.BooleanLiteral:
        case KotlinParser.NullLiteral:
        case KotlinParser.Identifier:
        case KotlinParser.LabelReference:
        case KotlinParser.LabelDefinition:
        case KotlinParser.CharacterLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 2209;
            this.expression();
            break;
        case KotlinParser.IN:
        case KotlinParser.NOT_IN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2210;
            this.rangeTest();
            break;
        case KotlinParser.IS:
        case KotlinParser.NOT_IS:
            this.enterOuterAlt(localctx, 3);
            this.state = 2211;
            this.typeTest();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RangeTestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_rangeTest;
    return this;
}

RangeTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeTestContext.prototype.constructor = RangeTestContext;

RangeTestContext.prototype.inOperator = function() {
    return this.getTypedRuleContext(InOperatorContext,0);
};

RangeTestContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

RangeTestContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


RangeTestContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterRangeTest(this);
	}
};

RangeTestContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitRangeTest(this);
	}
};




KotlinParser.RangeTestContext = RangeTestContext;

KotlinParser.prototype.rangeTest = function() {

    var localctx = new RangeTestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, KotlinParser.RULE_rangeTest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2214;
        this.inOperator();
        this.state = 2218;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,334,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2215;
                this.match(KotlinParser.NL); 
            }
            this.state = 2220;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,334,this._ctx);
        }

        this.state = 2221;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeTestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeTest;
    return this;
}

TypeTestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeTestContext.prototype.constructor = TypeTestContext;

TypeTestContext.prototype.isOperator = function() {
    return this.getTypedRuleContext(IsOperatorContext,0);
};

TypeTestContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeTestContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TypeTestContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeTest(this);
	}
};

TypeTestContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeTest(this);
	}
};




KotlinParser.TypeTestContext = TypeTestContext;

KotlinParser.prototype.typeTest = function() {

    var localctx = new TypeTestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, KotlinParser.RULE_typeTest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2223;
        this.isOperator();
        this.state = 2227;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2224;
            this.match(KotlinParser.NL);
            this.state = 2229;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2230;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_tryExpression;
    return this;
}

TryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryExpressionContext.prototype.constructor = TryExpressionContext;

TryExpressionContext.prototype.TRY = function() {
    return this.getToken(KotlinParser.TRY, 0);
};

TryExpressionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


TryExpressionContext.prototype.catchBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchBlockContext);
    } else {
        return this.getTypedRuleContext(CatchBlockContext,i);
    }
};

TryExpressionContext.prototype.finallyBlock = function() {
    return this.getTypedRuleContext(FinallyBlockContext,0);
};

TryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTryExpression(this);
	}
};

TryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTryExpression(this);
	}
};




KotlinParser.TryExpressionContext = TryExpressionContext;

KotlinParser.prototype.tryExpression = function() {

    var localctx = new TryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, KotlinParser.RULE_tryExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2232;
        this.match(KotlinParser.TRY);
        this.state = 2236;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2233;
            this.match(KotlinParser.NL);
            this.state = 2238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2239;
        this.block();
        this.state = 2249;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,338,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2243;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 2240;
                    this.match(KotlinParser.NL);
                    this.state = 2245;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2246;
                this.catchBlock(); 
            }
            this.state = 2251;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,338,this._ctx);
        }

        this.state = 2259;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
        if(la_===1) {
            this.state = 2255;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2252;
                this.match(KotlinParser.NL);
                this.state = 2257;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2258;
            this.finallyBlock();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CatchBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_catchBlock;
    return this;
}

CatchBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchBlockContext.prototype.constructor = CatchBlockContext;

CatchBlockContext.prototype.CATCH = function() {
    return this.getToken(KotlinParser.CATCH, 0);
};

CatchBlockContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

CatchBlockContext.prototype.simpleIdentifier = function() {
    return this.getTypedRuleContext(SimpleIdentifierContext,0);
};

CatchBlockContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

CatchBlockContext.prototype.userType = function() {
    return this.getTypedRuleContext(UserTypeContext,0);
};

CatchBlockContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

CatchBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchBlockContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


CatchBlockContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

CatchBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterCatchBlock(this);
	}
};

CatchBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitCatchBlock(this);
	}
};




KotlinParser.CatchBlockContext = CatchBlockContext;

KotlinParser.prototype.catchBlock = function() {

    var localctx = new CatchBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, KotlinParser.RULE_catchBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2261;
        this.match(KotlinParser.CATCH);
        this.state = 2265;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2262;
            this.match(KotlinParser.NL);
            this.state = 2267;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2268;
        this.match(KotlinParser.LPAREN);
        this.state = 2272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)))) !== 0) || _la===KotlinParser.LabelReference) {
            this.state = 2269;
            this.annotations();
            this.state = 2274;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2275;
        this.simpleIdentifier();
        this.state = 2276;
        this.match(KotlinParser.COLON);
        this.state = 2277;
        this.userType();
        this.state = 2278;
        this.match(KotlinParser.RPAREN);
        this.state = 2282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2279;
            this.match(KotlinParser.NL);
            this.state = 2284;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2285;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FinallyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_finallyBlock;
    return this;
}

FinallyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyBlockContext.prototype.constructor = FinallyBlockContext;

FinallyBlockContext.prototype.FINALLY = function() {
    return this.getToken(KotlinParser.FINALLY, 0);
};

FinallyBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyBlockContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


FinallyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFinallyBlock(this);
	}
};




KotlinParser.FinallyBlockContext = FinallyBlockContext;

KotlinParser.prototype.finallyBlock = function() {

    var localctx = new FinallyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, KotlinParser.RULE_finallyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2287;
        this.match(KotlinParser.FINALLY);
        this.state = 2291;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2288;
            this.match(KotlinParser.NL);
            this.state = 2293;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2294;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoopExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_loopExpression;
    return this;
}

LoopExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopExpressionContext.prototype.constructor = LoopExpressionContext;

LoopExpressionContext.prototype.forExpression = function() {
    return this.getTypedRuleContext(ForExpressionContext,0);
};

LoopExpressionContext.prototype.whileExpression = function() {
    return this.getTypedRuleContext(WhileExpressionContext,0);
};

LoopExpressionContext.prototype.doWhileExpression = function() {
    return this.getTypedRuleContext(DoWhileExpressionContext,0);
};

LoopExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterLoopExpression(this);
	}
};

LoopExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitLoopExpression(this);
	}
};




KotlinParser.LoopExpressionContext = LoopExpressionContext;

KotlinParser.prototype.loopExpression = function() {

    var localctx = new LoopExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, KotlinParser.RULE_loopExpression);
    try {
        this.state = 2299;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.FOR:
            this.enterOuterAlt(localctx, 1);
            this.state = 2296;
            this.forExpression();
            break;
        case KotlinParser.WHILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2297;
            this.whileExpression();
            break;
        case KotlinParser.DO:
            this.enterOuterAlt(localctx, 3);
            this.state = 2298;
            this.doWhileExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_forExpression;
    return this;
}

ForExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForExpressionContext.prototype.constructor = ForExpressionContext;

ForExpressionContext.prototype.FOR = function() {
    return this.getToken(KotlinParser.FOR, 0);
};

ForExpressionContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

ForExpressionContext.prototype.IN = function() {
    return this.getToken(KotlinParser.IN, 0);
};

ForExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForExpressionContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

ForExpressionContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

ForExpressionContext.prototype.multiVariableDeclaration = function() {
    return this.getTypedRuleContext(MultiVariableDeclarationContext,0);
};

ForExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ForExpressionContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

ForExpressionContext.prototype.controlStructureBody = function() {
    return this.getTypedRuleContext(ControlStructureBodyContext,0);
};

ForExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterForExpression(this);
	}
};

ForExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitForExpression(this);
	}
};




KotlinParser.ForExpressionContext = ForExpressionContext;

KotlinParser.prototype.forExpression = function() {

    var localctx = new ForExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, KotlinParser.RULE_forExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2301;
        this.match(KotlinParser.FOR);
        this.state = 2305;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2302;
            this.match(KotlinParser.NL);
            this.state = 2307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2308;
        this.match(KotlinParser.LPAREN);
        this.state = 2312;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.AT || _la===KotlinParser.FILE || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)))) !== 0) || _la===KotlinParser.LabelReference) {
            this.state = 2309;
            this.annotations();
            this.state = 2314;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2317;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.IMPORT:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.WHERE:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.OUT:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.Identifier:
            this.state = 2315;
            this.variableDeclaration();
            break;
        case KotlinParser.LPAREN:
            this.state = 2316;
            this.multiVariableDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2319;
        this.match(KotlinParser.IN);
        this.state = 2320;
        this.expression();
        this.state = 2321;
        this.match(KotlinParser.RPAREN);
        this.state = 2325;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,349,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2322;
                this.match(KotlinParser.NL); 
            }
            this.state = 2327;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,349,this._ctx);
        }

        this.state = 2329;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
        if(la_===1) {
            this.state = 2328;
            this.controlStructureBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_whileExpression;
    return this;
}

WhileExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileExpressionContext.prototype.constructor = WhileExpressionContext;

WhileExpressionContext.prototype.WHILE = function() {
    return this.getToken(KotlinParser.WHILE, 0);
};

WhileExpressionContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

WhileExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileExpressionContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

WhileExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


WhileExpressionContext.prototype.controlStructureBody = function() {
    return this.getTypedRuleContext(ControlStructureBodyContext,0);
};

WhileExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterWhileExpression(this);
	}
};

WhileExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitWhileExpression(this);
	}
};




KotlinParser.WhileExpressionContext = WhileExpressionContext;

KotlinParser.prototype.whileExpression = function() {

    var localctx = new WhileExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, KotlinParser.RULE_whileExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2331;
        this.match(KotlinParser.WHILE);
        this.state = 2335;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2332;
            this.match(KotlinParser.NL);
            this.state = 2337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2338;
        this.match(KotlinParser.LPAREN);
        this.state = 2339;
        this.expression();
        this.state = 2340;
        this.match(KotlinParser.RPAREN);
        this.state = 2344;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,352,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2341;
                this.match(KotlinParser.NL); 
            }
            this.state = 2346;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,352,this._ctx);
        }

        this.state = 2348;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
        if(la_===1) {
            this.state = 2347;
            this.controlStructureBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoWhileExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_doWhileExpression;
    return this;
}

DoWhileExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoWhileExpressionContext.prototype.constructor = DoWhileExpressionContext;

DoWhileExpressionContext.prototype.DO = function() {
    return this.getToken(KotlinParser.DO, 0);
};

DoWhileExpressionContext.prototype.WHILE = function() {
    return this.getToken(KotlinParser.WHILE, 0);
};

DoWhileExpressionContext.prototype.LPAREN = function() {
    return this.getToken(KotlinParser.LPAREN, 0);
};

DoWhileExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoWhileExpressionContext.prototype.RPAREN = function() {
    return this.getToken(KotlinParser.RPAREN, 0);
};

DoWhileExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


DoWhileExpressionContext.prototype.controlStructureBody = function() {
    return this.getTypedRuleContext(ControlStructureBodyContext,0);
};

DoWhileExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterDoWhileExpression(this);
	}
};

DoWhileExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitDoWhileExpression(this);
	}
};




KotlinParser.DoWhileExpressionContext = DoWhileExpressionContext;

KotlinParser.prototype.doWhileExpression = function() {

    var localctx = new DoWhileExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, KotlinParser.RULE_doWhileExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2350;
        this.match(KotlinParser.DO);
        this.state = 2354;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,354,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2351;
                this.match(KotlinParser.NL); 
            }
            this.state = 2356;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,354,this._ctx);
        }

        this.state = 2358;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
        if(la_===1) {
            this.state = 2357;
            this.controlStructureBody();

        }
        this.state = 2363;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2360;
            this.match(KotlinParser.NL);
            this.state = 2365;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2366;
        this.match(KotlinParser.WHILE);
        this.state = 2370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2367;
            this.match(KotlinParser.NL);
            this.state = 2372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2373;
        this.match(KotlinParser.LPAREN);
        this.state = 2374;
        this.expression();
        this.state = 2375;
        this.match(KotlinParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JumpExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_jumpExpression;
    return this;
}

JumpExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpExpressionContext.prototype.constructor = JumpExpressionContext;

JumpExpressionContext.prototype.THROW = function() {
    return this.getToken(KotlinParser.THROW, 0);
};

JumpExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

JumpExpressionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


JumpExpressionContext.prototype.RETURN = function() {
    return this.getToken(KotlinParser.RETURN, 0);
};

JumpExpressionContext.prototype.RETURN_AT = function() {
    return this.getToken(KotlinParser.RETURN_AT, 0);
};

JumpExpressionContext.prototype.CONTINUE = function() {
    return this.getToken(KotlinParser.CONTINUE, 0);
};

JumpExpressionContext.prototype.CONTINUE_AT = function() {
    return this.getToken(KotlinParser.CONTINUE_AT, 0);
};

JumpExpressionContext.prototype.BREAK = function() {
    return this.getToken(KotlinParser.BREAK, 0);
};

JumpExpressionContext.prototype.BREAK_AT = function() {
    return this.getToken(KotlinParser.BREAK_AT, 0);
};

JumpExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterJumpExpression(this);
	}
};

JumpExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitJumpExpression(this);
	}
};




KotlinParser.JumpExpressionContext = JumpExpressionContext;

KotlinParser.prototype.jumpExpression = function() {

    var localctx = new JumpExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, KotlinParser.RULE_jumpExpression);
    var _la = 0; // Token type
    try {
        this.state = 2393;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.THROW:
            this.enterOuterAlt(localctx, 1);
            this.state = 2377;
            this.match(KotlinParser.THROW);
            this.state = 2381;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,358,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2378;
                    this.match(KotlinParser.NL); 
                }
                this.state = 2383;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,358,this._ctx);
            }

            this.state = 2384;
            this.expression();
            break;
        case KotlinParser.RETURN_AT:
        case KotlinParser.RETURN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2385;
            _la = this._input.LA(1);
            if(!(_la===KotlinParser.RETURN_AT || _la===KotlinParser.RETURN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2387;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
            if(la_===1) {
                this.state = 2386;
                this.expression();

            }
            break;
        case KotlinParser.CONTINUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2389;
            this.match(KotlinParser.CONTINUE);
            break;
        case KotlinParser.CONTINUE_AT:
            this.enterOuterAlt(localctx, 4);
            this.state = 2390;
            this.match(KotlinParser.CONTINUE_AT);
            break;
        case KotlinParser.BREAK:
            this.enterOuterAlt(localctx, 5);
            this.state = 2391;
            this.match(KotlinParser.BREAK);
            break;
        case KotlinParser.BREAK_AT:
            this.enterOuterAlt(localctx, 6);
            this.state = 2392;
            this.match(KotlinParser.BREAK_AT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallableReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_callableReference;
    return this;
}

CallableReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallableReferenceContext.prototype.constructor = CallableReferenceContext;

CallableReferenceContext.prototype.COLONCOLON = function() {
    return this.getToken(KotlinParser.COLONCOLON, 0);
};

CallableReferenceContext.prototype.Q_COLONCOLON = function() {
    return this.getToken(KotlinParser.Q_COLONCOLON, 0);
};

CallableReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CallableReferenceContext.prototype.CLASS = function() {
    return this.getToken(KotlinParser.CLASS, 0);
};

CallableReferenceContext.prototype.userType = function() {
    return this.getTypedRuleContext(UserTypeContext,0);
};

CallableReferenceContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


CallableReferenceContext.prototype.QUEST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.QUEST);
    } else {
        return this.getToken(KotlinParser.QUEST, i);
    }
};


CallableReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterCallableReference(this);
	}
};

CallableReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitCallableReference(this);
	}
};




KotlinParser.CallableReferenceContext = CallableReferenceContext;

KotlinParser.prototype.callableReference = function() {

    var localctx = new CallableReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, KotlinParser.RULE_callableReference);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (KotlinParser.OUT - 92)) | (1 << (KotlinParser.GETTER - 92)) | (1 << (KotlinParser.SETTER - 92)) | (1 << (KotlinParser.DYNAMIC - 92)) | (1 << (KotlinParser.PUBLIC - 92)) | (1 << (KotlinParser.PRIVATE - 92)) | (1 << (KotlinParser.PROTECTED - 92)) | (1 << (KotlinParser.INTERNAL - 92)) | (1 << (KotlinParser.ENUM - 92)) | (1 << (KotlinParser.SEALED - 92)) | (1 << (KotlinParser.ANNOTATION - 92)) | (1 << (KotlinParser.DATA - 92)) | (1 << (KotlinParser.INNER - 92)) | (1 << (KotlinParser.TAILREC - 92)) | (1 << (KotlinParser.OPERATOR - 92)) | (1 << (KotlinParser.INLINE - 92)) | (1 << (KotlinParser.INFIX - 92)) | (1 << (KotlinParser.EXTERNAL - 92)) | (1 << (KotlinParser.SUSPEND - 92)) | (1 << (KotlinParser.OVERRIDE - 92)) | (1 << (KotlinParser.ABSTRACT - 92)) | (1 << (KotlinParser.FINAL - 92)) | (1 << (KotlinParser.OPEN - 92)) | (1 << (KotlinParser.CONST - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (KotlinParser.LATEINIT - 124)) | (1 << (KotlinParser.VARARG - 124)) | (1 << (KotlinParser.NOINLINE - 124)) | (1 << (KotlinParser.CROSSINLINE - 124)) | (1 << (KotlinParser.REIFIED - 124)) | (1 << (KotlinParser.Identifier - 124)))) !== 0)) {
            this.state = 2395;
            this.userType();
            this.state = 2405;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.QUEST) {
                this.state = 2396;
                this.match(KotlinParser.QUEST);
                this.state = 2400;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,361,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 2397;
                        this.match(KotlinParser.NL); 
                    }
                    this.state = 2402;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,361,this._ctx);
                }

                this.state = 2407;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 2413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2410;
            this.match(KotlinParser.NL);
            this.state = 2415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2416;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.COLONCOLON || _la===KotlinParser.Q_COLONCOLON)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===KotlinParser.NL) {
            this.state = 2417;
            this.match(KotlinParser.NL);
            this.state = 2422;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2425;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.IMPORT:
        case KotlinParser.CONSTRUCTOR:
        case KotlinParser.BY:
        case KotlinParser.COMPANION:
        case KotlinParser.INIT:
        case KotlinParser.WHERE:
        case KotlinParser.CATCH:
        case KotlinParser.FINALLY:
        case KotlinParser.OUT:
        case KotlinParser.GETTER:
        case KotlinParser.SETTER:
        case KotlinParser.DYNAMIC:
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
        case KotlinParser.OVERRIDE:
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
        case KotlinParser.CONST:
        case KotlinParser.LATEINIT:
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
        case KotlinParser.REIFIED:
        case KotlinParser.Identifier:
            this.state = 2423;
            this.identifier();
            break;
        case KotlinParser.CLASS:
            this.state = 2424;
            this.match(KotlinParser.CLASS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.ASSIGNMENT = function() {
    return this.getToken(KotlinParser.ASSIGNMENT, 0);
};

AssignmentOperatorContext.prototype.ADD_ASSIGNMENT = function() {
    return this.getToken(KotlinParser.ADD_ASSIGNMENT, 0);
};

AssignmentOperatorContext.prototype.SUB_ASSIGNMENT = function() {
    return this.getToken(KotlinParser.SUB_ASSIGNMENT, 0);
};

AssignmentOperatorContext.prototype.MULT_ASSIGNMENT = function() {
    return this.getToken(KotlinParser.MULT_ASSIGNMENT, 0);
};

AssignmentOperatorContext.prototype.DIV_ASSIGNMENT = function() {
    return this.getToken(KotlinParser.DIV_ASSIGNMENT, 0);
};

AssignmentOperatorContext.prototype.MOD_ASSIGNMENT = function() {
    return this.getToken(KotlinParser.MOD_ASSIGNMENT, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAssignmentOperator(this);
	}
};




KotlinParser.AssignmentOperatorContext = AssignmentOperatorContext;

KotlinParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, KotlinParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2427;
        _la = this._input.LA(1);
        if(!(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (KotlinParser.ASSIGNMENT - 27)) | (1 << (KotlinParser.ADD_ASSIGNMENT - 27)) | (1 << (KotlinParser.SUB_ASSIGNMENT - 27)) | (1 << (KotlinParser.MULT_ASSIGNMENT - 27)) | (1 << (KotlinParser.DIV_ASSIGNMENT - 27)) | (1 << (KotlinParser.MOD_ASSIGNMENT - 27)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EqualityOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_equalityOperation;
    return this;
}

EqualityOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityOperationContext.prototype.constructor = EqualityOperationContext;

EqualityOperationContext.prototype.EXCL_EQ = function() {
    return this.getToken(KotlinParser.EXCL_EQ, 0);
};

EqualityOperationContext.prototype.EXCL_EQEQ = function() {
    return this.getToken(KotlinParser.EXCL_EQEQ, 0);
};

EqualityOperationContext.prototype.EQEQ = function() {
    return this.getToken(KotlinParser.EQEQ, 0);
};

EqualityOperationContext.prototype.EQEQEQ = function() {
    return this.getToken(KotlinParser.EQEQEQ, 0);
};

EqualityOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterEqualityOperation(this);
	}
};

EqualityOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitEqualityOperation(this);
	}
};




KotlinParser.EqualityOperationContext = EqualityOperationContext;

KotlinParser.prototype.equalityOperation = function() {

    var localctx = new EqualityOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, KotlinParser.RULE_equalityOperation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2429;
        _la = this._input.LA(1);
        if(!(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (KotlinParser.EXCL_EQ - 47)) | (1 << (KotlinParser.EXCL_EQEQ - 47)) | (1 << (KotlinParser.EQEQ - 47)) | (1 << (KotlinParser.EQEQEQ - 47)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.LANGLE = function() {
    return this.getToken(KotlinParser.LANGLE, 0);
};

ComparisonOperatorContext.prototype.RANGLE = function() {
    return this.getToken(KotlinParser.RANGLE, 0);
};

ComparisonOperatorContext.prototype.LE = function() {
    return this.getToken(KotlinParser.LE, 0);
};

ComparisonOperatorContext.prototype.GE = function() {
    return this.getToken(KotlinParser.GE, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitComparisonOperator(this);
	}
};




KotlinParser.ComparisonOperatorContext = ComparisonOperatorContext;

KotlinParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, KotlinParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2431;
        _la = this._input.LA(1);
        if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (KotlinParser.LANGLE - 43)) | (1 << (KotlinParser.RANGLE - 43)) | (1 << (KotlinParser.LE - 43)) | (1 << (KotlinParser.GE - 43)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_inOperator;
    return this;
}

InOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InOperatorContext.prototype.constructor = InOperatorContext;

InOperatorContext.prototype.IN = function() {
    return this.getToken(KotlinParser.IN, 0);
};

InOperatorContext.prototype.NOT_IN = function() {
    return this.getToken(KotlinParser.NOT_IN, 0);
};

InOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterInOperator(this);
	}
};

InOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitInOperator(this);
	}
};




KotlinParser.InOperatorContext = InOperatorContext;

KotlinParser.prototype.inOperator = function() {

    var localctx = new InOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, KotlinParser.RULE_inOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2433;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.IN || _la===KotlinParser.NOT_IN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IsOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_isOperator;
    return this;
}

IsOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsOperatorContext.prototype.constructor = IsOperatorContext;

IsOperatorContext.prototype.IS = function() {
    return this.getToken(KotlinParser.IS, 0);
};

IsOperatorContext.prototype.NOT_IS = function() {
    return this.getToken(KotlinParser.NOT_IS, 0);
};

IsOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterIsOperator(this);
	}
};

IsOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitIsOperator(this);
	}
};




KotlinParser.IsOperatorContext = IsOperatorContext;

KotlinParser.prototype.isOperator = function() {

    var localctx = new IsOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, KotlinParser.RULE_isOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2435;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.IS || _la===KotlinParser.NOT_IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdditiveOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_additiveOperator;
    return this;
}

AdditiveOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveOperatorContext.prototype.constructor = AdditiveOperatorContext;

AdditiveOperatorContext.prototype.ADD = function() {
    return this.getToken(KotlinParser.ADD, 0);
};

AdditiveOperatorContext.prototype.SUB = function() {
    return this.getToken(KotlinParser.SUB, 0);
};

AdditiveOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAdditiveOperator(this);
	}
};

AdditiveOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAdditiveOperator(this);
	}
};




KotlinParser.AdditiveOperatorContext = AdditiveOperatorContext;

KotlinParser.prototype.additiveOperator = function() {

    var localctx = new AdditiveOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, KotlinParser.RULE_additiveOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2437;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.ADD || _la===KotlinParser.SUB)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiplicativeOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_multiplicativeOperation;
    return this;
}

MultiplicativeOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeOperationContext.prototype.constructor = MultiplicativeOperationContext;

MultiplicativeOperationContext.prototype.MULT = function() {
    return this.getToken(KotlinParser.MULT, 0);
};

MultiplicativeOperationContext.prototype.DIV = function() {
    return this.getToken(KotlinParser.DIV, 0);
};

MultiplicativeOperationContext.prototype.MOD = function() {
    return this.getToken(KotlinParser.MOD, 0);
};

MultiplicativeOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterMultiplicativeOperation(this);
	}
};

MultiplicativeOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitMultiplicativeOperation(this);
	}
};




KotlinParser.MultiplicativeOperationContext = MultiplicativeOperationContext;

KotlinParser.prototype.multiplicativeOperation = function() {

    var localctx = new MultiplicativeOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, KotlinParser.RULE_multiplicativeOperation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2439;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KotlinParser.MULT) | (1 << KotlinParser.MOD) | (1 << KotlinParser.DIV))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeOperation;
    return this;
}

TypeOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeOperationContext.prototype.constructor = TypeOperationContext;

TypeOperationContext.prototype.AS = function() {
    return this.getToken(KotlinParser.AS, 0);
};

TypeOperationContext.prototype.AS_SAFE = function() {
    return this.getToken(KotlinParser.AS_SAFE, 0);
};

TypeOperationContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

TypeOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeOperation(this);
	}
};

TypeOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeOperation(this);
	}
};




KotlinParser.TypeOperationContext = TypeOperationContext;

KotlinParser.prototype.typeOperation = function() {

    var localctx = new TypeOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, KotlinParser.RULE_typeOperation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2441;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.COLON || _la===KotlinParser.AS_SAFE || _la===KotlinParser.AS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixUnaryOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_prefixUnaryOperation;
    return this;
}

PrefixUnaryOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixUnaryOperationContext.prototype.constructor = PrefixUnaryOperationContext;

PrefixUnaryOperationContext.prototype.INCR = function() {
    return this.getToken(KotlinParser.INCR, 0);
};

PrefixUnaryOperationContext.prototype.DECR = function() {
    return this.getToken(KotlinParser.DECR, 0);
};

PrefixUnaryOperationContext.prototype.ADD = function() {
    return this.getToken(KotlinParser.ADD, 0);
};

PrefixUnaryOperationContext.prototype.SUB = function() {
    return this.getToken(KotlinParser.SUB, 0);
};

PrefixUnaryOperationContext.prototype.EXCL = function() {
    return this.getToken(KotlinParser.EXCL, 0);
};

PrefixUnaryOperationContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

PrefixUnaryOperationContext.prototype.labelDefinition = function() {
    return this.getTypedRuleContext(LabelDefinitionContext,0);
};

PrefixUnaryOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterPrefixUnaryOperation(this);
	}
};

PrefixUnaryOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitPrefixUnaryOperation(this);
	}
};




KotlinParser.PrefixUnaryOperationContext = PrefixUnaryOperationContext;

KotlinParser.prototype.prefixUnaryOperation = function() {

    var localctx = new PrefixUnaryOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, KotlinParser.RULE_prefixUnaryOperation);
    try {
        this.state = 2450;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.INCR:
            this.enterOuterAlt(localctx, 1);
            this.state = 2443;
            this.match(KotlinParser.INCR);
            break;
        case KotlinParser.DECR:
            this.enterOuterAlt(localctx, 2);
            this.state = 2444;
            this.match(KotlinParser.DECR);
            break;
        case KotlinParser.ADD:
            this.enterOuterAlt(localctx, 3);
            this.state = 2445;
            this.match(KotlinParser.ADD);
            break;
        case KotlinParser.SUB:
            this.enterOuterAlt(localctx, 4);
            this.state = 2446;
            this.match(KotlinParser.SUB);
            break;
        case KotlinParser.EXCL:
            this.enterOuterAlt(localctx, 5);
            this.state = 2447;
            this.match(KotlinParser.EXCL);
            break;
        case KotlinParser.AT:
        case KotlinParser.FILE:
        case KotlinParser.FIELD:
        case KotlinParser.PROPERTY:
        case KotlinParser.GET:
        case KotlinParser.SET:
        case KotlinParser.RECEIVER:
        case KotlinParser.PARAM:
        case KotlinParser.SETPARAM:
        case KotlinParser.DELEGATE:
        case KotlinParser.LabelReference:
            this.enterOuterAlt(localctx, 6);
            this.state = 2448;
            this.annotations();
            break;
        case KotlinParser.LabelDefinition:
            this.enterOuterAlt(localctx, 7);
            this.state = 2449;
            this.labelDefinition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixUnaryOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_postfixUnaryOperation;
    return this;
}

PostfixUnaryOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixUnaryOperationContext.prototype.constructor = PostfixUnaryOperationContext;

PostfixUnaryOperationContext.prototype.INCR = function() {
    return this.getToken(KotlinParser.INCR, 0);
};

PostfixUnaryOperationContext.prototype.DECR = function() {
    return this.getToken(KotlinParser.DECR, 0);
};

PostfixUnaryOperationContext.prototype.EXCL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.EXCL);
    } else {
        return this.getToken(KotlinParser.EXCL, i);
    }
};


PostfixUnaryOperationContext.prototype.callSuffix = function() {
    return this.getTypedRuleContext(CallSuffixContext,0);
};

PostfixUnaryOperationContext.prototype.arrayAccess = function() {
    return this.getTypedRuleContext(ArrayAccessContext,0);
};

PostfixUnaryOperationContext.prototype.memberAccessOperator = function() {
    return this.getTypedRuleContext(MemberAccessOperatorContext,0);
};

PostfixUnaryOperationContext.prototype.postfixUnaryExpression = function() {
    return this.getTypedRuleContext(PostfixUnaryExpressionContext,0);
};

PostfixUnaryOperationContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


PostfixUnaryOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterPostfixUnaryOperation(this);
	}
};

PostfixUnaryOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitPostfixUnaryOperation(this);
	}
};




KotlinParser.PostfixUnaryOperationContext = PostfixUnaryOperationContext;

KotlinParser.prototype.postfixUnaryOperation = function() {

    var localctx = new PostfixUnaryOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, KotlinParser.RULE_postfixUnaryOperation);
    var _la = 0; // Token type
    try {
        this.state = 2467;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2452;
            this.match(KotlinParser.INCR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2453;
            this.match(KotlinParser.DECR);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2454;
            this.match(KotlinParser.EXCL);
            this.state = 2455;
            this.match(KotlinParser.EXCL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2456;
            this.callSuffix();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2457;
            this.arrayAccess();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2461;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2458;
                this.match(KotlinParser.NL);
                this.state = 2463;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2464;
            this.memberAccessOperator();
            this.state = 2465;
            this.postfixUnaryExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MemberAccessOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_memberAccessOperator;
    return this;
}

MemberAccessOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberAccessOperatorContext.prototype.constructor = MemberAccessOperatorContext;

MemberAccessOperatorContext.prototype.DOT = function() {
    return this.getToken(KotlinParser.DOT, 0);
};

MemberAccessOperatorContext.prototype.QUEST = function() {
    return this.getToken(KotlinParser.QUEST, 0);
};

MemberAccessOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterMemberAccessOperator(this);
	}
};

MemberAccessOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitMemberAccessOperator(this);
	}
};




KotlinParser.MemberAccessOperatorContext = MemberAccessOperatorContext;

KotlinParser.prototype.memberAccessOperator = function() {

    var localctx = new MemberAccessOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, KotlinParser.RULE_memberAccessOperator);
    try {
        this.state = 2472;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.DOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2469;
            this.match(KotlinParser.DOT);
            break;
        case KotlinParser.QUEST:
            this.enterOuterAlt(localctx, 2);
            this.state = 2470;
            this.match(KotlinParser.QUEST);
            this.state = 2471;
            this.match(KotlinParser.DOT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_modifierList;
    return this;
}

ModifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierListContext.prototype.constructor = ModifierListContext;

ModifierListContext.prototype.annotations = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationsContext);
    } else {
        return this.getTypedRuleContext(AnnotationsContext,i);
    }
};

ModifierListContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

ModifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterModifierList(this);
	}
};

ModifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitModifierList(this);
	}
};




KotlinParser.ModifierListContext = ModifierListContext;

KotlinParser.prototype.modifierList = function() {

    var localctx = new ModifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, KotlinParser.RULE_modifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2476; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2476;
        		this._errHandler.sync(this);
        		switch(this._input.LA(1)) {
        		case KotlinParser.AT:
        		case KotlinParser.FILE:
        		case KotlinParser.FIELD:
        		case KotlinParser.PROPERTY:
        		case KotlinParser.GET:
        		case KotlinParser.SET:
        		case KotlinParser.RECEIVER:
        		case KotlinParser.PARAM:
        		case KotlinParser.SETPARAM:
        		case KotlinParser.DELEGATE:
        		case KotlinParser.LabelReference:
        		    this.state = 2474;
        		    this.annotations();
        		    break;
        		case KotlinParser.IN:
        		case KotlinParser.OUT:
        		case KotlinParser.PUBLIC:
        		case KotlinParser.PRIVATE:
        		case KotlinParser.PROTECTED:
        		case KotlinParser.INTERNAL:
        		case KotlinParser.ENUM:
        		case KotlinParser.SEALED:
        		case KotlinParser.ANNOTATION:
        		case KotlinParser.DATA:
        		case KotlinParser.INNER:
        		case KotlinParser.TAILREC:
        		case KotlinParser.OPERATOR:
        		case KotlinParser.INLINE:
        		case KotlinParser.INFIX:
        		case KotlinParser.EXTERNAL:
        		case KotlinParser.SUSPEND:
        		case KotlinParser.OVERRIDE:
        		case KotlinParser.ABSTRACT:
        		case KotlinParser.FINAL:
        		case KotlinParser.OPEN:
        		case KotlinParser.CONST:
        		case KotlinParser.LATEINIT:
        		case KotlinParser.VARARG:
        		case KotlinParser.NOINLINE:
        		case KotlinParser.CROSSINLINE:
        		case KotlinParser.REIFIED:
        		    this.state = 2475;
        		    this.modifier();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2478; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,372, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_modifier;
    return this;
}

ModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierContext.prototype.constructor = ModifierContext;

ModifierContext.prototype.classModifier = function() {
    return this.getTypedRuleContext(ClassModifierContext,0);
};

ModifierContext.prototype.memberModifier = function() {
    return this.getTypedRuleContext(MemberModifierContext,0);
};

ModifierContext.prototype.visibilityModifier = function() {
    return this.getTypedRuleContext(VisibilityModifierContext,0);
};

ModifierContext.prototype.varianceAnnotation = function() {
    return this.getTypedRuleContext(VarianceAnnotationContext,0);
};

ModifierContext.prototype.functionModifier = function() {
    return this.getTypedRuleContext(FunctionModifierContext,0);
};

ModifierContext.prototype.propertyModifier = function() {
    return this.getTypedRuleContext(PropertyModifierContext,0);
};

ModifierContext.prototype.inheritanceModifier = function() {
    return this.getTypedRuleContext(InheritanceModifierContext,0);
};

ModifierContext.prototype.parameterModifier = function() {
    return this.getTypedRuleContext(ParameterModifierContext,0);
};

ModifierContext.prototype.typeParameterModifier = function() {
    return this.getTypedRuleContext(TypeParameterModifierContext,0);
};

ModifierContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


ModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterModifier(this);
	}
};

ModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitModifier(this);
	}
};




KotlinParser.ModifierContext = ModifierContext;

KotlinParser.prototype.modifier = function() {

    var localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, KotlinParser.RULE_modifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2489;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.ENUM:
        case KotlinParser.SEALED:
        case KotlinParser.ANNOTATION:
        case KotlinParser.DATA:
        case KotlinParser.INNER:
            this.state = 2480;
            this.classModifier();
            break;
        case KotlinParser.OVERRIDE:
        case KotlinParser.LATEINIT:
            this.state = 2481;
            this.memberModifier();
            break;
        case KotlinParser.PUBLIC:
        case KotlinParser.PRIVATE:
        case KotlinParser.PROTECTED:
        case KotlinParser.INTERNAL:
            this.state = 2482;
            this.visibilityModifier();
            break;
        case KotlinParser.IN:
        case KotlinParser.OUT:
            this.state = 2483;
            this.varianceAnnotation();
            break;
        case KotlinParser.TAILREC:
        case KotlinParser.OPERATOR:
        case KotlinParser.INLINE:
        case KotlinParser.INFIX:
        case KotlinParser.EXTERNAL:
        case KotlinParser.SUSPEND:
            this.state = 2484;
            this.functionModifier();
            break;
        case KotlinParser.CONST:
            this.state = 2485;
            this.propertyModifier();
            break;
        case KotlinParser.ABSTRACT:
        case KotlinParser.FINAL:
        case KotlinParser.OPEN:
            this.state = 2486;
            this.inheritanceModifier();
            break;
        case KotlinParser.VARARG:
        case KotlinParser.NOINLINE:
        case KotlinParser.CROSSINLINE:
            this.state = 2487;
            this.parameterModifier();
            break;
        case KotlinParser.REIFIED:
            this.state = 2488;
            this.typeParameterModifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2494;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,374,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2491;
                this.match(KotlinParser.NL); 
            }
            this.state = 2496;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,374,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_classModifier;
    return this;
}

ClassModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassModifierContext.prototype.constructor = ClassModifierContext;

ClassModifierContext.prototype.ENUM = function() {
    return this.getToken(KotlinParser.ENUM, 0);
};

ClassModifierContext.prototype.SEALED = function() {
    return this.getToken(KotlinParser.SEALED, 0);
};

ClassModifierContext.prototype.ANNOTATION = function() {
    return this.getToken(KotlinParser.ANNOTATION, 0);
};

ClassModifierContext.prototype.DATA = function() {
    return this.getToken(KotlinParser.DATA, 0);
};

ClassModifierContext.prototype.INNER = function() {
    return this.getToken(KotlinParser.INNER, 0);
};

ClassModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterClassModifier(this);
	}
};

ClassModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitClassModifier(this);
	}
};




KotlinParser.ClassModifierContext = ClassModifierContext;

KotlinParser.prototype.classModifier = function() {

    var localctx = new ClassModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, KotlinParser.RULE_classModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2497;
        _la = this._input.LA(1);
        if(!(((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (KotlinParser.ENUM - 108)) | (1 << (KotlinParser.SEALED - 108)) | (1 << (KotlinParser.ANNOTATION - 108)) | (1 << (KotlinParser.DATA - 108)) | (1 << (KotlinParser.INNER - 108)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MemberModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_memberModifier;
    return this;
}

MemberModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberModifierContext.prototype.constructor = MemberModifierContext;

MemberModifierContext.prototype.OVERRIDE = function() {
    return this.getToken(KotlinParser.OVERRIDE, 0);
};

MemberModifierContext.prototype.LATEINIT = function() {
    return this.getToken(KotlinParser.LATEINIT, 0);
};

MemberModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterMemberModifier(this);
	}
};

MemberModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitMemberModifier(this);
	}
};




KotlinParser.MemberModifierContext = MemberModifierContext;

KotlinParser.prototype.memberModifier = function() {

    var localctx = new MemberModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, KotlinParser.RULE_memberModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2499;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.OVERRIDE || _la===KotlinParser.LATEINIT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VisibilityModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_visibilityModifier;
    return this;
}

VisibilityModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilityModifierContext.prototype.constructor = VisibilityModifierContext;

VisibilityModifierContext.prototype.PUBLIC = function() {
    return this.getToken(KotlinParser.PUBLIC, 0);
};

VisibilityModifierContext.prototype.PRIVATE = function() {
    return this.getToken(KotlinParser.PRIVATE, 0);
};

VisibilityModifierContext.prototype.INTERNAL = function() {
    return this.getToken(KotlinParser.INTERNAL, 0);
};

VisibilityModifierContext.prototype.PROTECTED = function() {
    return this.getToken(KotlinParser.PROTECTED, 0);
};

VisibilityModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterVisibilityModifier(this);
	}
};

VisibilityModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitVisibilityModifier(this);
	}
};




KotlinParser.VisibilityModifierContext = VisibilityModifierContext;

KotlinParser.prototype.visibilityModifier = function() {

    var localctx = new VisibilityModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, KotlinParser.RULE_visibilityModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2501;
        _la = this._input.LA(1);
        if(!(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarianceAnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_varianceAnnotation;
    return this;
}

VarianceAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarianceAnnotationContext.prototype.constructor = VarianceAnnotationContext;

VarianceAnnotationContext.prototype.IN = function() {
    return this.getToken(KotlinParser.IN, 0);
};

VarianceAnnotationContext.prototype.OUT = function() {
    return this.getToken(KotlinParser.OUT, 0);
};

VarianceAnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterVarianceAnnotation(this);
	}
};

VarianceAnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitVarianceAnnotation(this);
	}
};




KotlinParser.VarianceAnnotationContext = VarianceAnnotationContext;

KotlinParser.prototype.varianceAnnotation = function() {

    var localctx = new VarianceAnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, KotlinParser.RULE_varianceAnnotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2503;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.IN || _la===KotlinParser.OUT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_functionModifier;
    return this;
}

FunctionModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionModifierContext.prototype.constructor = FunctionModifierContext;

FunctionModifierContext.prototype.TAILREC = function() {
    return this.getToken(KotlinParser.TAILREC, 0);
};

FunctionModifierContext.prototype.OPERATOR = function() {
    return this.getToken(KotlinParser.OPERATOR, 0);
};

FunctionModifierContext.prototype.INFIX = function() {
    return this.getToken(KotlinParser.INFIX, 0);
};

FunctionModifierContext.prototype.INLINE = function() {
    return this.getToken(KotlinParser.INLINE, 0);
};

FunctionModifierContext.prototype.EXTERNAL = function() {
    return this.getToken(KotlinParser.EXTERNAL, 0);
};

FunctionModifierContext.prototype.SUSPEND = function() {
    return this.getToken(KotlinParser.SUSPEND, 0);
};

FunctionModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterFunctionModifier(this);
	}
};

FunctionModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitFunctionModifier(this);
	}
};




KotlinParser.FunctionModifierContext = FunctionModifierContext;

KotlinParser.prototype.functionModifier = function() {

    var localctx = new FunctionModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, KotlinParser.RULE_functionModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2505;
        _la = this._input.LA(1);
        if(!(((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (KotlinParser.TAILREC - 113)) | (1 << (KotlinParser.OPERATOR - 113)) | (1 << (KotlinParser.INLINE - 113)) | (1 << (KotlinParser.INFIX - 113)) | (1 << (KotlinParser.EXTERNAL - 113)) | (1 << (KotlinParser.SUSPEND - 113)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_propertyModifier;
    return this;
}

PropertyModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyModifierContext.prototype.constructor = PropertyModifierContext;

PropertyModifierContext.prototype.CONST = function() {
    return this.getToken(KotlinParser.CONST, 0);
};

PropertyModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterPropertyModifier(this);
	}
};

PropertyModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitPropertyModifier(this);
	}
};




KotlinParser.PropertyModifierContext = PropertyModifierContext;

KotlinParser.prototype.propertyModifier = function() {

    var localctx = new PropertyModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, KotlinParser.RULE_propertyModifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2507;
        this.match(KotlinParser.CONST);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InheritanceModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_inheritanceModifier;
    return this;
}

InheritanceModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritanceModifierContext.prototype.constructor = InheritanceModifierContext;

InheritanceModifierContext.prototype.ABSTRACT = function() {
    return this.getToken(KotlinParser.ABSTRACT, 0);
};

InheritanceModifierContext.prototype.FINAL = function() {
    return this.getToken(KotlinParser.FINAL, 0);
};

InheritanceModifierContext.prototype.OPEN = function() {
    return this.getToken(KotlinParser.OPEN, 0);
};

InheritanceModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterInheritanceModifier(this);
	}
};

InheritanceModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitInheritanceModifier(this);
	}
};




KotlinParser.InheritanceModifierContext = InheritanceModifierContext;

KotlinParser.prototype.inheritanceModifier = function() {

    var localctx = new InheritanceModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, KotlinParser.RULE_inheritanceModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2509;
        _la = this._input.LA(1);
        if(!(((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (KotlinParser.ABSTRACT - 120)) | (1 << (KotlinParser.FINAL - 120)) | (1 << (KotlinParser.OPEN - 120)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_parameterModifier;
    return this;
}

ParameterModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterModifierContext.prototype.constructor = ParameterModifierContext;

ParameterModifierContext.prototype.VARARG = function() {
    return this.getToken(KotlinParser.VARARG, 0);
};

ParameterModifierContext.prototype.NOINLINE = function() {
    return this.getToken(KotlinParser.NOINLINE, 0);
};

ParameterModifierContext.prototype.CROSSINLINE = function() {
    return this.getToken(KotlinParser.CROSSINLINE, 0);
};

ParameterModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterParameterModifier(this);
	}
};

ParameterModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitParameterModifier(this);
	}
};




KotlinParser.ParameterModifierContext = ParameterModifierContext;

KotlinParser.prototype.parameterModifier = function() {

    var localctx = new ParameterModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, KotlinParser.RULE_parameterModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2511;
        _la = this._input.LA(1);
        if(!(((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (KotlinParser.VARARG - 125)) | (1 << (KotlinParser.NOINLINE - 125)) | (1 << (KotlinParser.CROSSINLINE - 125)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParameterModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_typeParameterModifier;
    return this;
}

TypeParameterModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterModifierContext.prototype.constructor = TypeParameterModifierContext;

TypeParameterModifierContext.prototype.REIFIED = function() {
    return this.getToken(KotlinParser.REIFIED, 0);
};

TypeParameterModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterTypeParameterModifier(this);
	}
};

TypeParameterModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitTypeParameterModifier(this);
	}
};




KotlinParser.TypeParameterModifierContext = TypeParameterModifierContext;

KotlinParser.prototype.typeParameterModifier = function() {

    var localctx = new TypeParameterModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, KotlinParser.RULE_typeParameterModifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2513;
        this.match(KotlinParser.REIFIED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_labelDefinition;
    return this;
}

LabelDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelDefinitionContext.prototype.constructor = LabelDefinitionContext;

LabelDefinitionContext.prototype.LabelDefinition = function() {
    return this.getToken(KotlinParser.LabelDefinition, 0);
};

LabelDefinitionContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


LabelDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterLabelDefinition(this);
	}
};

LabelDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitLabelDefinition(this);
	}
};




KotlinParser.LabelDefinitionContext = LabelDefinitionContext;

KotlinParser.prototype.labelDefinition = function() {

    var localctx = new LabelDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, KotlinParser.RULE_labelDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2515;
        this.match(KotlinParser.LabelDefinition);
        this.state = 2519;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,375,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2516;
                this.match(KotlinParser.NL); 
            }
            this.state = 2521;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,375,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_annotations;
    return this;
}

AnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationsContext.prototype.constructor = AnnotationsContext;

AnnotationsContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

AnnotationsContext.prototype.annotationList = function() {
    return this.getTypedRuleContext(AnnotationListContext,0);
};

AnnotationsContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


AnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAnnotations(this);
	}
};

AnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAnnotations(this);
	}
};




KotlinParser.AnnotationsContext = AnnotationsContext;

KotlinParser.prototype.annotations = function() {

    var localctx = new AnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, KotlinParser.RULE_annotations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2524;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2522;
            this.annotation();
            break;

        case 2:
            this.state = 2523;
            this.annotationList();
            break;

        }
        this.state = 2529;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,377,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2526;
                this.match(KotlinParser.NL); 
            }
            this.state = 2531;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,377,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.annotationUseSiteTarget = function() {
    return this.getTypedRuleContext(AnnotationUseSiteTargetContext,0);
};

AnnotationContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

AnnotationContext.prototype.unescapedAnnotation = function() {
    return this.getTypedRuleContext(UnescapedAnnotationContext,0);
};

AnnotationContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


AnnotationContext.prototype.LabelReference = function() {
    return this.getToken(KotlinParser.LabelReference, 0);
};

AnnotationContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

AnnotationContext.prototype.valueArguments = function() {
    return this.getTypedRuleContext(ValueArgumentsContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAnnotation(this);
	}
};




KotlinParser.AnnotationContext = AnnotationContext;

KotlinParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, KotlinParser.RULE_annotation);
    var _la = 0; // Token type
    try {
        this.state = 2567;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.FILE:
        case KotlinParser.FIELD:
        case KotlinParser.PROPERTY:
        case KotlinParser.GET:
        case KotlinParser.SET:
        case KotlinParser.RECEIVER:
        case KotlinParser.PARAM:
        case KotlinParser.SETPARAM:
        case KotlinParser.DELEGATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2532;
            this.annotationUseSiteTarget();
            this.state = 2536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2533;
                this.match(KotlinParser.NL);
                this.state = 2538;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2539;
            this.match(KotlinParser.COLON);
            this.state = 2543;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2540;
                this.match(KotlinParser.NL);
                this.state = 2545;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2546;
            this.unescapedAnnotation();
            break;
        case KotlinParser.LabelReference:
            this.enterOuterAlt(localctx, 2);
            this.state = 2548;
            this.match(KotlinParser.LabelReference);
            this.state = 2556;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
            if(la_===1) {
                this.state = 2552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 2549;
                    this.match(KotlinParser.NL);
                    this.state = 2554;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2555;
                this.typeArguments();

            }
            this.state = 2565;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,383,this._ctx);
            if(la_===1) {
                this.state = 2561;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 2558;
                    this.match(KotlinParser.NL);
                    this.state = 2563;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2564;
                this.valueArguments();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_annotationList;
    return this;
}

AnnotationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationListContext.prototype.constructor = AnnotationListContext;

AnnotationListContext.prototype.annotationUseSiteTarget = function() {
    return this.getTypedRuleContext(AnnotationUseSiteTargetContext,0);
};

AnnotationListContext.prototype.COLON = function() {
    return this.getToken(KotlinParser.COLON, 0);
};

AnnotationListContext.prototype.LSQUARE = function() {
    return this.getToken(KotlinParser.LSQUARE, 0);
};

AnnotationListContext.prototype.RSQUARE = function() {
    return this.getToken(KotlinParser.RSQUARE, 0);
};

AnnotationListContext.prototype.unescapedAnnotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnescapedAnnotationContext);
    } else {
        return this.getTypedRuleContext(UnescapedAnnotationContext,i);
    }
};

AnnotationListContext.prototype.AT = function() {
    return this.getToken(KotlinParser.AT, 0);
};

AnnotationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAnnotationList(this);
	}
};

AnnotationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAnnotationList(this);
	}
};




KotlinParser.AnnotationListContext = AnnotationListContext;

KotlinParser.prototype.annotationList = function() {

    var localctx = new AnnotationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, KotlinParser.RULE_annotationList);
    var _la = 0; // Token type
    try {
        this.state = 2588;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case KotlinParser.FILE:
        case KotlinParser.FIELD:
        case KotlinParser.PROPERTY:
        case KotlinParser.GET:
        case KotlinParser.SET:
        case KotlinParser.RECEIVER:
        case KotlinParser.PARAM:
        case KotlinParser.SETPARAM:
        case KotlinParser.DELEGATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2569;
            this.annotationUseSiteTarget();
            this.state = 2570;
            this.match(KotlinParser.COLON);
            this.state = 2571;
            this.match(KotlinParser.LSQUARE);
            this.state = 2573; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2572;
                this.unescapedAnnotation();
                this.state = 2575; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (KotlinParser.OUT - 92)) | (1 << (KotlinParser.GETTER - 92)) | (1 << (KotlinParser.SETTER - 92)) | (1 << (KotlinParser.DYNAMIC - 92)) | (1 << (KotlinParser.PUBLIC - 92)) | (1 << (KotlinParser.PRIVATE - 92)) | (1 << (KotlinParser.PROTECTED - 92)) | (1 << (KotlinParser.INTERNAL - 92)) | (1 << (KotlinParser.ENUM - 92)) | (1 << (KotlinParser.SEALED - 92)) | (1 << (KotlinParser.ANNOTATION - 92)) | (1 << (KotlinParser.DATA - 92)) | (1 << (KotlinParser.INNER - 92)) | (1 << (KotlinParser.TAILREC - 92)) | (1 << (KotlinParser.OPERATOR - 92)) | (1 << (KotlinParser.INLINE - 92)) | (1 << (KotlinParser.INFIX - 92)) | (1 << (KotlinParser.EXTERNAL - 92)) | (1 << (KotlinParser.SUSPEND - 92)) | (1 << (KotlinParser.OVERRIDE - 92)) | (1 << (KotlinParser.ABSTRACT - 92)) | (1 << (KotlinParser.FINAL - 92)) | (1 << (KotlinParser.OPEN - 92)) | (1 << (KotlinParser.CONST - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (KotlinParser.LATEINIT - 124)) | (1 << (KotlinParser.VARARG - 124)) | (1 << (KotlinParser.NOINLINE - 124)) | (1 << (KotlinParser.CROSSINLINE - 124)) | (1 << (KotlinParser.REIFIED - 124)) | (1 << (KotlinParser.Identifier - 124)))) !== 0));
            this.state = 2577;
            this.match(KotlinParser.RSQUARE);
            break;
        case KotlinParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2579;
            this.match(KotlinParser.AT);
            this.state = 2580;
            this.match(KotlinParser.LSQUARE);
            this.state = 2582; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2581;
                this.unescapedAnnotation();
                this.state = 2584; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (KotlinParser.OUT - 92)) | (1 << (KotlinParser.GETTER - 92)) | (1 << (KotlinParser.SETTER - 92)) | (1 << (KotlinParser.DYNAMIC - 92)) | (1 << (KotlinParser.PUBLIC - 92)) | (1 << (KotlinParser.PRIVATE - 92)) | (1 << (KotlinParser.PROTECTED - 92)) | (1 << (KotlinParser.INTERNAL - 92)) | (1 << (KotlinParser.ENUM - 92)) | (1 << (KotlinParser.SEALED - 92)) | (1 << (KotlinParser.ANNOTATION - 92)) | (1 << (KotlinParser.DATA - 92)) | (1 << (KotlinParser.INNER - 92)) | (1 << (KotlinParser.TAILREC - 92)) | (1 << (KotlinParser.OPERATOR - 92)) | (1 << (KotlinParser.INLINE - 92)) | (1 << (KotlinParser.INFIX - 92)) | (1 << (KotlinParser.EXTERNAL - 92)) | (1 << (KotlinParser.SUSPEND - 92)) | (1 << (KotlinParser.OVERRIDE - 92)) | (1 << (KotlinParser.ABSTRACT - 92)) | (1 << (KotlinParser.FINAL - 92)) | (1 << (KotlinParser.OPEN - 92)) | (1 << (KotlinParser.CONST - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (KotlinParser.LATEINIT - 124)) | (1 << (KotlinParser.VARARG - 124)) | (1 << (KotlinParser.NOINLINE - 124)) | (1 << (KotlinParser.CROSSINLINE - 124)) | (1 << (KotlinParser.REIFIED - 124)) | (1 << (KotlinParser.Identifier - 124)))) !== 0));
            this.state = 2586;
            this.match(KotlinParser.RSQUARE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationUseSiteTargetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_annotationUseSiteTarget;
    return this;
}

AnnotationUseSiteTargetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationUseSiteTargetContext.prototype.constructor = AnnotationUseSiteTargetContext;

AnnotationUseSiteTargetContext.prototype.FIELD = function() {
    return this.getToken(KotlinParser.FIELD, 0);
};

AnnotationUseSiteTargetContext.prototype.FILE = function() {
    return this.getToken(KotlinParser.FILE, 0);
};

AnnotationUseSiteTargetContext.prototype.PROPERTY = function() {
    return this.getToken(KotlinParser.PROPERTY, 0);
};

AnnotationUseSiteTargetContext.prototype.GET = function() {
    return this.getToken(KotlinParser.GET, 0);
};

AnnotationUseSiteTargetContext.prototype.SET = function() {
    return this.getToken(KotlinParser.SET, 0);
};

AnnotationUseSiteTargetContext.prototype.RECEIVER = function() {
    return this.getToken(KotlinParser.RECEIVER, 0);
};

AnnotationUseSiteTargetContext.prototype.PARAM = function() {
    return this.getToken(KotlinParser.PARAM, 0);
};

AnnotationUseSiteTargetContext.prototype.SETPARAM = function() {
    return this.getToken(KotlinParser.SETPARAM, 0);
};

AnnotationUseSiteTargetContext.prototype.DELEGATE = function() {
    return this.getToken(KotlinParser.DELEGATE, 0);
};

AnnotationUseSiteTargetContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAnnotationUseSiteTarget(this);
	}
};

AnnotationUseSiteTargetContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAnnotationUseSiteTarget(this);
	}
};




KotlinParser.AnnotationUseSiteTargetContext = AnnotationUseSiteTargetContext;

KotlinParser.prototype.annotationUseSiteTarget = function() {

    var localctx = new AnnotationUseSiteTargetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, KotlinParser.RULE_annotationUseSiteTarget);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2590;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.FILE || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnescapedAnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_unescapedAnnotation;
    return this;
}

UnescapedAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnescapedAnnotationContext.prototype.constructor = UnescapedAnnotationContext;

UnescapedAnnotationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

UnescapedAnnotationContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

UnescapedAnnotationContext.prototype.valueArguments = function() {
    return this.getTypedRuleContext(ValueArgumentsContext,0);
};

UnescapedAnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterUnescapedAnnotation(this);
	}
};

UnescapedAnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitUnescapedAnnotation(this);
	}
};




KotlinParser.UnescapedAnnotationContext = UnescapedAnnotationContext;

KotlinParser.prototype.unescapedAnnotation = function() {

    var localctx = new UnescapedAnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, KotlinParser.RULE_unescapedAnnotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2592;
        this.identifier();
        this.state = 2594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===KotlinParser.LANGLE) {
            this.state = 2593;
            this.typeArguments();
        }

        this.state = 2597;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,389,this._ctx);
        if(la_===1) {
            this.state = 2596;
            this.valueArguments();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.simpleIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimpleIdentifierContext);
    } else {
        return this.getTypedRuleContext(SimpleIdentifierContext,i);
    }
};

IdentifierContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.DOT);
    } else {
        return this.getToken(KotlinParser.DOT, i);
    }
};


IdentifierContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitIdentifier(this);
	}
};




KotlinParser.IdentifierContext = IdentifierContext;

KotlinParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, KotlinParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2599;
        this.simpleIdentifier();
        this.state = 2610;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,391,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2603;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===KotlinParser.NL) {
                    this.state = 2600;
                    this.match(KotlinParser.NL);
                    this.state = 2605;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2606;
                this.match(KotlinParser.DOT);
                this.state = 2607;
                this.simpleIdentifier(); 
            }
            this.state = 2612;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,391,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_simpleIdentifier;
    return this;
}

SimpleIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleIdentifierContext.prototype.constructor = SimpleIdentifierContext;

SimpleIdentifierContext.prototype.Identifier = function() {
    return this.getToken(KotlinParser.Identifier, 0);
};

SimpleIdentifierContext.prototype.ABSTRACT = function() {
    return this.getToken(KotlinParser.ABSTRACT, 0);
};

SimpleIdentifierContext.prototype.ANNOTATION = function() {
    return this.getToken(KotlinParser.ANNOTATION, 0);
};

SimpleIdentifierContext.prototype.BY = function() {
    return this.getToken(KotlinParser.BY, 0);
};

SimpleIdentifierContext.prototype.CATCH = function() {
    return this.getToken(KotlinParser.CATCH, 0);
};

SimpleIdentifierContext.prototype.COMPANION = function() {
    return this.getToken(KotlinParser.COMPANION, 0);
};

SimpleIdentifierContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(KotlinParser.CONSTRUCTOR, 0);
};

SimpleIdentifierContext.prototype.CROSSINLINE = function() {
    return this.getToken(KotlinParser.CROSSINLINE, 0);
};

SimpleIdentifierContext.prototype.DATA = function() {
    return this.getToken(KotlinParser.DATA, 0);
};

SimpleIdentifierContext.prototype.DYNAMIC = function() {
    return this.getToken(KotlinParser.DYNAMIC, 0);
};

SimpleIdentifierContext.prototype.ENUM = function() {
    return this.getToken(KotlinParser.ENUM, 0);
};

SimpleIdentifierContext.prototype.EXTERNAL = function() {
    return this.getToken(KotlinParser.EXTERNAL, 0);
};

SimpleIdentifierContext.prototype.FINAL = function() {
    return this.getToken(KotlinParser.FINAL, 0);
};

SimpleIdentifierContext.prototype.FINALLY = function() {
    return this.getToken(KotlinParser.FINALLY, 0);
};

SimpleIdentifierContext.prototype.GETTER = function() {
    return this.getToken(KotlinParser.GETTER, 0);
};

SimpleIdentifierContext.prototype.IMPORT = function() {
    return this.getToken(KotlinParser.IMPORT, 0);
};

SimpleIdentifierContext.prototype.INFIX = function() {
    return this.getToken(KotlinParser.INFIX, 0);
};

SimpleIdentifierContext.prototype.INIT = function() {
    return this.getToken(KotlinParser.INIT, 0);
};

SimpleIdentifierContext.prototype.INLINE = function() {
    return this.getToken(KotlinParser.INLINE, 0);
};

SimpleIdentifierContext.prototype.INNER = function() {
    return this.getToken(KotlinParser.INNER, 0);
};

SimpleIdentifierContext.prototype.INTERNAL = function() {
    return this.getToken(KotlinParser.INTERNAL, 0);
};

SimpleIdentifierContext.prototype.LATEINIT = function() {
    return this.getToken(KotlinParser.LATEINIT, 0);
};

SimpleIdentifierContext.prototype.NOINLINE = function() {
    return this.getToken(KotlinParser.NOINLINE, 0);
};

SimpleIdentifierContext.prototype.OPEN = function() {
    return this.getToken(KotlinParser.OPEN, 0);
};

SimpleIdentifierContext.prototype.OPERATOR = function() {
    return this.getToken(KotlinParser.OPERATOR, 0);
};

SimpleIdentifierContext.prototype.OUT = function() {
    return this.getToken(KotlinParser.OUT, 0);
};

SimpleIdentifierContext.prototype.OVERRIDE = function() {
    return this.getToken(KotlinParser.OVERRIDE, 0);
};

SimpleIdentifierContext.prototype.PRIVATE = function() {
    return this.getToken(KotlinParser.PRIVATE, 0);
};

SimpleIdentifierContext.prototype.PROTECTED = function() {
    return this.getToken(KotlinParser.PROTECTED, 0);
};

SimpleIdentifierContext.prototype.PUBLIC = function() {
    return this.getToken(KotlinParser.PUBLIC, 0);
};

SimpleIdentifierContext.prototype.REIFIED = function() {
    return this.getToken(KotlinParser.REIFIED, 0);
};

SimpleIdentifierContext.prototype.SEALED = function() {
    return this.getToken(KotlinParser.SEALED, 0);
};

SimpleIdentifierContext.prototype.TAILREC = function() {
    return this.getToken(KotlinParser.TAILREC, 0);
};

SimpleIdentifierContext.prototype.SETTER = function() {
    return this.getToken(KotlinParser.SETTER, 0);
};

SimpleIdentifierContext.prototype.VARARG = function() {
    return this.getToken(KotlinParser.VARARG, 0);
};

SimpleIdentifierContext.prototype.WHERE = function() {
    return this.getToken(KotlinParser.WHERE, 0);
};

SimpleIdentifierContext.prototype.CONST = function() {
    return this.getToken(KotlinParser.CONST, 0);
};

SimpleIdentifierContext.prototype.SUSPEND = function() {
    return this.getToken(KotlinParser.SUSPEND, 0);
};

SimpleIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterSimpleIdentifier(this);
	}
};

SimpleIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitSimpleIdentifier(this);
	}
};




KotlinParser.SimpleIdentifierContext = SimpleIdentifierContext;

KotlinParser.prototype.simpleIdentifier = function() {

    var localctx = new SimpleIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, KotlinParser.RULE_simpleIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2613;
        _la = this._input.LA(1);
        if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (KotlinParser.OUT - 92)) | (1 << (KotlinParser.GETTER - 92)) | (1 << (KotlinParser.SETTER - 92)) | (1 << (KotlinParser.DYNAMIC - 92)) | (1 << (KotlinParser.PUBLIC - 92)) | (1 << (KotlinParser.PRIVATE - 92)) | (1 << (KotlinParser.PROTECTED - 92)) | (1 << (KotlinParser.INTERNAL - 92)) | (1 << (KotlinParser.ENUM - 92)) | (1 << (KotlinParser.SEALED - 92)) | (1 << (KotlinParser.ANNOTATION - 92)) | (1 << (KotlinParser.DATA - 92)) | (1 << (KotlinParser.INNER - 92)) | (1 << (KotlinParser.TAILREC - 92)) | (1 << (KotlinParser.OPERATOR - 92)) | (1 << (KotlinParser.INLINE - 92)) | (1 << (KotlinParser.INFIX - 92)) | (1 << (KotlinParser.EXTERNAL - 92)) | (1 << (KotlinParser.SUSPEND - 92)) | (1 << (KotlinParser.OVERRIDE - 92)) | (1 << (KotlinParser.ABSTRACT - 92)) | (1 << (KotlinParser.FINAL - 92)) | (1 << (KotlinParser.OPEN - 92)) | (1 << (KotlinParser.CONST - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (KotlinParser.LATEINIT - 124)) | (1 << (KotlinParser.VARARG - 124)) | (1 << (KotlinParser.NOINLINE - 124)) | (1 << (KotlinParser.CROSSINLINE - 124)) | (1 << (KotlinParser.REIFIED - 124)) | (1 << (KotlinParser.Identifier - 124)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SemiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_semi;
    return this;
}

SemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SemiContext.prototype.constructor = SemiContext;

SemiContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(KotlinParser.NL);
    } else {
        return this.getToken(KotlinParser.NL, i);
    }
};


SemiContext.prototype.SEMICOLON = function() {
    return this.getToken(KotlinParser.SEMICOLON, 0);
};

SemiContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterSemi(this);
	}
};

SemiContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitSemi(this);
	}
};




KotlinParser.SemiContext = SemiContext;

KotlinParser.prototype.semi = function() {

    var localctx = new SemiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, KotlinParser.RULE_semi);
    var _la = 0; // Token type
    try {
        this.state = 2633;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2616; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 2615;
            		this.match(KotlinParser.NL);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 2618; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,392, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2623;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===KotlinParser.NL) {
                this.state = 2620;
                this.match(KotlinParser.NL);
                this.state = 2625;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2626;
            this.match(KotlinParser.SEMICOLON);
            this.state = 2630;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,394,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2627;
                    this.match(KotlinParser.NL); 
                }
                this.state = 2632;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,394,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnysemiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = KotlinParser.RULE_anysemi;
    return this;
}

AnysemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnysemiContext.prototype.constructor = AnysemiContext;

AnysemiContext.prototype.NL = function() {
    return this.getToken(KotlinParser.NL, 0);
};

AnysemiContext.prototype.SEMICOLON = function() {
    return this.getToken(KotlinParser.SEMICOLON, 0);
};

AnysemiContext.prototype.enterRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.enterAnysemi(this);
	}
};

AnysemiContext.prototype.exitRule = function(listener) {
    if(listener instanceof KotlinParserListener ) {
        listener.exitAnysemi(this);
	}
};




KotlinParser.AnysemiContext = AnysemiContext;

KotlinParser.prototype.anysemi = function() {

    var localctx = new AnysemiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, KotlinParser.RULE_anysemi);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2635;
        _la = this._input.LA(1);
        if(!(_la===KotlinParser.NL || _la===KotlinParser.SEMICOLON)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.KotlinParser = KotlinParser;
