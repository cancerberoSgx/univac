// @ts-nocheck
// Generated from WatParser.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var WatParserListener = require('./WatParserListener').WatParserListener;
var grammarFileName = "WatParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003N\u03ee\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
    "\u0097\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\b\u0003\b\u0003\b\u0007\b\u00a1\n\b\f\b\u000e\b\u00a4\u000b",
    "\b\u0003\b\u0003\b\u0007\b\u00a8\n\b\f\b\u000e\b\u00ab\u000b\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0005\b\u00b1\n\b\u0003\b\u0007\b\u00b4\n",
    "\b\f\b\u000e\b\u00b7\u000b\b\u0003\t\u0003\t\u0005\t\u00bb\n\t\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0005\n\u00c1\n\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r",
    "\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u00d2\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0006\u0010\u00de\n\u0010\r\u0010\u000e\u0010\u00df\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u00f1\n\u0010\u0003\u0010\u0005",
    "\u0010\u00f4\n\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u00f8\n\u0010",
    "\u0003\u0010\u0005\u0010\u00fb\n\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u0106\n\u0010\u0003\u0011\u0003\u0011\u0005\u0011",
    "\u010a\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u0111\n\u0012\f\u0012\u000e\u0012\u0114\u000b\u0012",
    "\u0003\u0012\u0007\u0012\u0117\n\u0012\f\u0012\u000e\u0012\u011a\u000b",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u011f\n\u0012",
    "\f\u0012\u000e\u0012\u0122\u000b\u0012\u0003\u0012\u0007\u0012\u0125",
    "\n\u0012\f\u0012\u000e\u0012\u0128\u000b\u0012\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u012c\n\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0007\u0014\u0133\n\u0014\f\u0014\u000e\u0014\u0136",
    "\u000b\u0014\u0003\u0014\u0007\u0014\u0139\n\u0014\f\u0014\u000e\u0014",
    "\u013c\u000b\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0007\u0015\u0143\n\u0015\f\u0015\u000e\u0015\u0146\u000b\u0015",
    "\u0003\u0015\u0007\u0015\u0149\n\u0015\f\u0015\u000e\u0015\u014c\u000b",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0005\u0016\u0152",
    "\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0157\n\u0016",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u015b\n\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u0160\n\u0016\u0003\u0016\u0005\u0016",
    "\u0163\n\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0167\n\u0016\u0005",
    "\u0016\u0169\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0018\u0005\u0018\u0171\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0007\u001a\u017b\n\u001a\f\u001a\u000e\u001a\u017e\u000b\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0184\n",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0189\n\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u018e\n\u001a\u0003",
    "\u001a\u0005\u001a\u0191\n\u001a\u0003\u001b\u0005\u001b\u0194\n\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c",
    "\u019b\n\u001c\f\u001c\u000e\u001c\u019e\u000b\u001c\u0003\u001c\u0007",
    "\u001c\u01a1\n\u001c\f\u001c\u000e\u001c\u01a4\u000b\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01ab\n",
    "\u001d\f\u001d\u000e\u001d\u01ae\u000b\u001d\u0003\u001d\u0007\u001d",
    "\u01b1\n\u001d\f\u001d\u000e\u001d\u01b4\u000b\u001d\u0003\u001d\u0007",
    "\u001d\u01b7\n\u001d\f\u001d\u000e\u001d\u01ba\u000b\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01c0\n\u001e\f\u001e",
    "\u000e\u001e\u01c3\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u01ce\n\u001e\u0005\u001e\u01d0\n\u001e\u0003\u001f\u0007\u001f",
    "\u01d3\n\u001f\f\u001f\u000e\u001f\u01d6\u000b\u001f\u0003\u001f\u0005",
    "\u001f\u01d9\n\u001f\u0003 \u0003 \u0003!\u0003!\u0003!\u0005!\u01e0",
    "\n!\u0003!\u0003!\u0003!\u0003\"\u0005\"\u01e6\n\"\u0003\"\u0003\"\u0003",
    "\"\u0005\"\u01eb\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"",
    "\u01f2\n\"\u0003#\u0003#\u0003#\u0007#\u01f7\n#\f#\u000e#\u01fa\u000b",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u0203\n#\u0003",
    "#\u0003#\u0003$\u0003$\u0003$\u0007$\u020a\n$\f$\u000e$\u020d\u000b",
    "$\u0003$\u0007$\u0210\n$\f$\u000e$\u0213\u000b$\u0003%\u0003%\u0003",
    "%\u0007%\u0218\n%\f%\u000e%\u021b\u000b%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0007%\u0224\n%\f%\u000e%\u0227\u000b%\u0003",
    "%\u0003%\u0003&\u0003&\u0003&\u0007&\u022e\n&\f&\u000e&\u0231\u000b",
    "&\u0003&\u0007&\u0234\n&\f&\u000e&\u0237\u000b&\u0003&\u0003&\u0003",
    "\'\u0003\'\u0003\'\u0007\'\u023e\n\'\f\'\u000e\'\u0241\u000b\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u024a\n\'",
    "\f\'\u000e\'\u024d\u000b\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0005(\u0257\n(\u0003)\u0003)\u0003)\u0005)\u025c\n",
    ")\u0003)\u0003)\u0007)\u0260\n)\f)\u000e)\u0263\u000b)\u0003)\u0003",
    ")\u0003*\u0003*\u0003*\u0005*\u026a\n*\u0003*\u0003*\u0003*\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007",
    "+\u027a\n+\f+\u000e+\u027d\u000b+\u0003+\u0003+\u0005+\u0281\n+\u0003",
    ",\u0003,\u0003,\u0005,\u0286\n,\u0003,\u0003,\u0007,\u028a\n,\f,\u000e",
    ",\u028d\u000b,\u0003,\u0003,\u0003-\u0003-\u0003-\u0005-\u0294\n-\u0003",
    "-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0007.\u02a3\n.\f.\u000e.\u02a6\u000b.\u0003.\u0005",
    ".\u02a9\n.\u0003/\u0003/\u0003/\u0005/\u02ae\n/\u0003/\u0003/\u0003",
    "/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0005",
    "0\u02bc\n0\u00031\u00031\u00031\u00051\u02c1\n1\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00051\u02c9\n1\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00051\u02d1\n1\u00031\u00031\u00031\u00031\u00031\u00031\u0005",
    "1\u02d9\n1\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u02e1\n",
    "1\u00031\u00031\u00031\u00051\u02e6\n1\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00033\u00033\u00033\u00033\u00033\u00033\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00054\u0309",
    "\n4\u00035\u00035\u00035\u00035\u00035\u00035\u00036\u00036\u00036\u0003",
    "6\u00036\u00037\u00037\u00038\u00038\u00038\u00058\u031b\n8\u00038\u0003",
    "8\u00038\u00039\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u032f\n:\u0003;\u0003",
    ";\u0003;\u0005;\u0334\n;\u0003;\u0007;\u0337\n;\f;\u000e;\u033a\u000b",
    ";\u0003;\u0003;\u0003<\u0003<\u0003<\u0003<\u0005<\u0342\n<\u0003<\u0003",
    "<\u0007<\u0346\n<\f<\u000e<\u0349\u000b<\u0003<\u0005<\u034c\n<\u0003",
    "=\u0003=\u0003=\u0005=\u0351\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0005=\u035a\n=\u0003=\u0003=\u0003=\u0005=\u035f\n=\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0005>\u0395\n>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0005?\u039e\n?\u0003?\u0003?\u0003?\u0005?\u03a3\n?\u0003@\u0003",
    "@\u0003@\u0005@\u03a8\n@\u0003@\u0007@\u03ab\n@\f@\u000e@\u03ae\u000b",
    "@\u0003@\u0003@\u0003@\u0003@\u0005@\u03b4\n@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0005@\u03bb\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u03c2",
    "\n@\u0003@\u0005@\u03c5\n@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "B\u0007B\u03cd\nB\fB\u000eB\u03d0\u000bB\u0003C\u0007C\u03d3\nC\fC\u000e",
    "C\u03d6\u000bC\u0003C\u0003C\u0006C\u03da\nC\rC\u000eC\u03db\u0003C",
    "\u0003C\u0005C\u03e0\nC\u0003D\u0003D\u0003D\u0003D\u0007D\u03e6\nD",
    "\fD\u000eD\u03e9\u000bD\u0003D\u0005D\u03ec\nD\u0003D\u0002\u0002E\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0002\u0007\u0003\u0002\u0006\u0007\u0003\u0002\u0005\u0007\u0004",
    "\u0002\u0005\u0005LL\u0003\u0002\u0010\u0011\u0003\u0002<=\u0002\u0452",
    "\u0002\u0088\u0003\u0002\u0002\u0002\u0004\u008a\u0003\u0002\u0002\u0002",
    "\u0006\u008c\u0003\u0002\u0002\u0002\b\u008e\u0003\u0002\u0002\u0002",
    "\n\u0096\u0003\u0002\u0002\u0002\f\u0098\u0003\u0002\u0002\u0002\u000e",
    "\u00b5\u0003\u0002\u0002\u0002\u0010\u00b8\u0003\u0002\u0002\u0002\u0012",
    "\u00be\u0003\u0002\u0002\u0002\u0014\u00c2\u0003\u0002\u0002\u0002\u0016",
    "\u00c7\u0003\u0002\u0002\u0002\u0018\u00c9\u0003\u0002\u0002\u0002\u001a",
    "\u00cb\u0003\u0002\u0002\u0002\u001c\u00d1\u0003\u0002\u0002\u0002\u001e",
    "\u0105\u0003\u0002\u0002\u0002 \u0107\u0003\u0002\u0002\u0002\"\u0118",
    "\u0003\u0002\u0002\u0002$\u0129\u0003\u0002\u0002\u0002&\u013a\u0003",
    "\u0002\u0002\u0002(\u014a\u0003\u0002\u0002\u0002*\u0168\u0003\u0002",
    "\u0002\u0002,\u016a\u0003\u0002\u0002\u0002.\u0170\u0003\u0002\u0002",
    "\u00020\u0174\u0003\u0002\u0002\u00022\u0190\u0003\u0002\u0002\u0002",
    "4\u0193\u0003\u0002\u0002\u00026\u01a2\u0003\u0002\u0002\u00028\u01b2",
    "\u0003\u0002\u0002\u0002:\u01cf\u0003\u0002\u0002\u0002<\u01d4\u0003",
    "\u0002\u0002\u0002>\u01da\u0003\u0002\u0002\u0002@\u01dc\u0003\u0002",
    "\u0002\u0002B\u01f1\u0003\u0002\u0002\u0002D\u0202\u0003\u0002\u0002",
    "\u0002F\u0211\u0003\u0002\u0002\u0002H\u0225\u0003\u0002\u0002\u0002",
    "J\u0235\u0003\u0002\u0002\u0002L\u024b\u0003\u0002\u0002\u0002N\u0256",
    "\u0003\u0002\u0002\u0002P\u0258\u0003\u0002\u0002\u0002R\u0266\u0003",
    "\u0002\u0002\u0002T\u0280\u0003\u0002\u0002\u0002V\u0282\u0003\u0002",
    "\u0002\u0002X\u0290\u0003\u0002\u0002\u0002Z\u02a8\u0003\u0002\u0002",
    "\u0002\\\u02aa\u0003\u0002\u0002\u0002^\u02bb\u0003\u0002\u0002\u0002",
    "`\u02e5\u0003\u0002\u0002\u0002b\u02e7\u0003\u0002\u0002\u0002d\u02ee",
    "\u0003\u0002\u0002\u0002f\u0308\u0003\u0002\u0002\u0002h\u030a\u0003",
    "\u0002\u0002\u0002j\u0310\u0003\u0002\u0002\u0002l\u0315\u0003\u0002",
    "\u0002\u0002n\u0317\u0003\u0002\u0002\u0002p\u031f\u0003\u0002\u0002",
    "\u0002r\u032e\u0003\u0002\u0002\u0002t\u0330\u0003\u0002\u0002\u0002",
    "v\u034b\u0003\u0002\u0002\u0002x\u035e\u0003\u0002\u0002\u0002z\u0394",
    "\u0003\u0002\u0002\u0002|\u03a2\u0003\u0002\u0002\u0002~\u03c4\u0003",
    "\u0002\u0002\u0002\u0080\u03c6\u0003\u0002\u0002\u0002\u0082\u03ce\u0003",
    "\u0002\u0002\u0002\u0084\u03df\u0003\u0002\u0002\u0002\u0086\u03eb\u0003",
    "\u0002\u0002\u0002\u0088\u0089\t\u0002\u0002\u0002\u0089\u0003\u0003",
    "\u0002\u0002\u0002\u008a\u008b\u0007\b\u0002\u0002\u008b\u0005\u0003",
    "\u0002\u0002\u0002\u008c\u008d\u0007\t\u0002\u0002\u008d\u0007\u0003",
    "\u0002\u0002\u0002\u008e\u008f\u0007\u000b\u0002\u0002\u008f\t\u0003",
    "\u0002\u0002\u0002\u0090\u0097\u0005\u0006\u0004\u0002\u0091\u0092\u0007",
    "\u0003\u0002\u0002\u0092\u0093\u0007\f\u0002\u0002\u0093\u0094\u0005",
    "\u0006\u0004\u0002\u0094\u0095\u0007\u0004\u0002\u0002\u0095\u0097\u0003",
    "\u0002\u0002\u0002\u0096\u0090\u0003\u0002\u0002\u0002\u0096\u0091\u0003",
    "\u0002\u0002\u0002\u0097\u000b\u0003\u0002\u0002\u0002\u0098\u0099\u0007",
    "\u0003\u0002\u0002\u0099\u009a\u0007.\u0002\u0002\u009a\u009b\u0005",
    "\u000e\b\u0002\u009b\u009c\u0007\u0004\u0002\u0002\u009c\r\u0003\u0002",
    "\u0002\u0002\u009d\u00b0\u0007\u0003\u0002\u0002\u009e\u00a2\u00071",
    "\u0002\u0002\u009f\u00a1\u0005\u0006\u0004\u0002\u00a0\u009f\u0003\u0002",
    "\u0002\u0002\u00a1\u00a4\u0003\u0002\u0002\u0002\u00a2\u00a0\u0003\u0002",
    "\u0002\u0002\u00a2\u00a3\u0003\u0002\u0002\u0002\u00a3\u00b1\u0003\u0002",
    "\u0002\u0002\u00a4\u00a2\u0003\u0002\u0002\u0002\u00a5\u00a9\u00070",
    "\u0002\u0002\u00a6\u00a8\u0005\u0006\u0004\u0002\u00a7\u00a6\u0003\u0002",
    "\u0002\u0002\u00a8\u00ab\u0003\u0002\u0002\u0002\u00a9\u00a7\u0003\u0002",
    "\u0002\u0002\u00a9\u00aa\u0003\u0002\u0002\u0002\u00aa\u00b1\u0003\u0002",
    "\u0002\u0002\u00ab\u00a9\u0003\u0002\u0002\u0002\u00ac\u00ad\u00070",
    "\u0002\u0002\u00ad\u00ae\u0005\u001a\u000e\u0002\u00ae\u00af\u0005\u0006",
    "\u0004\u0002\u00af\u00b1\u0003\u0002\u0002\u0002\u00b0\u009e\u0003\u0002",
    "\u0002\u0002\u00b0\u00a5\u0003\u0002\u0002\u0002\u00b0\u00ac\u0003\u0002",
    "\u0002\u0002\u00b1\u00b2\u0003\u0002\u0002\u0002\u00b2\u00b4\u0007\u0004",
    "\u0002\u0002\u00b3\u009d\u0003\u0002\u0002\u0002\u00b4\u00b7\u0003\u0002",
    "\u0002\u0002\u00b5\u00b3\u0003\u0002\u0002\u0002\u00b5\u00b6\u0003\u0002",
    "\u0002\u0002\u00b6\u000f\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003\u0002",
    "\u0002\u0002\u00b8\u00ba\u0007\u0005\u0002\u0002\u00b9\u00bb\u0007\u0005",
    "\u0002\u0002\u00ba\u00b9\u0003\u0002\u0002\u0002\u00ba\u00bb\u0003\u0002",
    "\u0002\u0002\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc\u00bd\u0005\b",
    "\u0005\u0002\u00bd\u0011\u0003\u0002\u0002\u0002\u00be\u00c0\u0007\u0005",
    "\u0002\u0002\u00bf\u00c1\u0007\u0005\u0002\u0002\u00c0\u00bf\u0003\u0002",
    "\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002\u00c1\u0013\u0003\u0002",
    "\u0002\u0002\u00c2\u00c3\u0007\u0003\u0002\u0002\u00c3\u00c4\u0007-",
    "\u0002\u0002\u00c4\u00c5\u0005\u0018\r\u0002\u00c5\u00c6\u0007\u0004",
    "\u0002\u0002\u00c6\u0015\u0003\u0002\u0002\u0002\u00c7\u00c8\t\u0003",
    "\u0002\u0002\u00c8\u0017\u0003\u0002\u0002\u0002\u00c9\u00ca\t\u0004",
    "\u0002\u0002\u00ca\u0019\u0003\u0002\u0002\u0002\u00cb\u00cc\u0007L",
    "\u0002\u0002\u00cc\u001b\u0003\u0002\u0002\u0002\u00cd\u00d2\u0005\u001e",
    "\u0010\u0002\u00ce\u00d2\u0005$\u0013\u0002\u00cf\u00d2\u0005*\u0016",
    "\u0002\u00d0\u00d2\u00050\u0019\u0002\u00d1\u00cd\u0003\u0002\u0002",
    "\u0002\u00d1\u00ce\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002\u0002",
    "\u0002\u00d1\u00d0\u0003\u0002\u0002\u0002\u00d2\u001d\u0003\u0002\u0002",
    "\u0002\u00d3\u0106\u0007\u000e\u0002\u0002\u00d4\u0106\u0007\r\u0002",
    "\u0002\u00d5\u0106\u0007\u000f\u0002\u0002\u00d6\u0106\u0007\u001a\u0002",
    "\u0002\u00d7\u00d8\u0007\u0013\u0002\u0002\u00d8\u0106\u0005\u0018\r",
    "\u0002\u00d9\u00da\u0007\u0014\u0002\u0002\u00da\u0106\u0005\u0018\r",
    "\u0002\u00db\u00dd\u0007\u0015\u0002\u0002\u00dc\u00de\u0005\u0018\r",
    "\u0002\u00dd\u00dc\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002",
    "\u0002\u00df\u00dd\u0003\u0002\u0002\u0002\u00df\u00e0\u0003\u0002\u0002",
    "\u0002\u00e0\u0106\u0003\u0002\u0002\u0002\u00e1\u0106\u0007\u0016\u0002",
    "\u0002\u00e2\u00e3\u0007\u001b\u0002\u0002\u00e3\u0106\u0005\u0018\r",
    "\u0002\u00e4\u00e5\u0007\u001d\u0002\u0002\u00e5\u0106\u0005\u0018\r",
    "\u0002\u00e6\u00e7\u0007\u001e\u0002\u0002\u00e7\u0106\u0005\u0018\r",
    "\u0002\u00e8\u00e9\u0007\u001f\u0002\u0002\u00e9\u0106\u0005\u0018\r",
    "\u0002\u00ea\u00eb\u0007 \u0002\u0002\u00eb\u0106\u0005\u0018\r\u0002",
    "\u00ec\u00ed\u0007!\u0002\u0002\u00ed\u0106\u0005\u0018\r\u0002\u00ee",
    "\u00f0\u0007\"\u0002\u0002\u00ef\u00f1\u0007$\u0002\u0002\u00f0\u00ef",
    "\u0003\u0002\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1\u00f3",
    "\u0003\u0002\u0002\u0002\u00f2\u00f4\u0007%\u0002\u0002\u00f3\u00f2",
    "\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002\u0002\u0002\u00f4\u0106",
    "\u0003\u0002\u0002\u0002\u00f5\u00f7\u0007#\u0002\u0002\u00f6\u00f8",
    "\u0007$\u0002\u0002\u00f7\u00f6\u0003\u0002\u0002\u0002\u00f7\u00f8",
    "\u0003\u0002\u0002\u0002\u00f8\u00fa\u0003\u0002\u0002\u0002\u00f9\u00fb",
    "\u0007%\u0002\u0002\u00fa\u00f9\u0003\u0002\u0002\u0002\u00fa\u00fb",
    "\u0003\u0002\u0002\u0002\u00fb\u0106\u0003\u0002\u0002\u0002\u00fc\u0106",
    "\u0007+\u0002\u0002\u00fd\u0106\u0007,\u0002\u0002\u00fe\u00ff\u0007",
    "\n\u0002\u0002\u00ff\u0106\u0005\u0016\f\u0002\u0100\u0106\u0007(\u0002",
    "\u0002\u0101\u0106\u0007)\u0002\u0002\u0102\u0106\u0007&\u0002\u0002",
    "\u0103\u0106\u0007\'\u0002\u0002\u0104\u0106\u0007*\u0002\u0002\u0105",
    "\u00d3\u0003\u0002\u0002\u0002\u0105\u00d4\u0003\u0002\u0002\u0002\u0105",
    "\u00d5\u0003\u0002\u0002\u0002\u0105\u00d6\u0003\u0002\u0002\u0002\u0105",
    "\u00d7\u0003\u0002\u0002\u0002\u0105\u00d9\u0003\u0002\u0002\u0002\u0105",
    "\u00db\u0003\u0002\u0002\u0002\u0105\u00e1\u0003\u0002\u0002\u0002\u0105",
    "\u00e2\u0003\u0002\u0002\u0002\u0105\u00e4\u0003\u0002\u0002\u0002\u0105",
    "\u00e6\u0003\u0002\u0002\u0002\u0105\u00e8\u0003\u0002\u0002\u0002\u0105",
    "\u00ea\u0003\u0002\u0002\u0002\u0105\u00ec\u0003\u0002\u0002\u0002\u0105",
    "\u00ee\u0003\u0002\u0002\u0002\u0105\u00f5\u0003\u0002\u0002\u0002\u0105",
    "\u00fc\u0003\u0002\u0002\u0002\u0105\u00fd\u0003\u0002\u0002\u0002\u0105",
    "\u00fe\u0003\u0002\u0002\u0002\u0105\u0100\u0003\u0002\u0002\u0002\u0105",
    "\u0101\u0003\u0002\u0002\u0002\u0105\u0102\u0003\u0002\u0002\u0002\u0105",
    "\u0103\u0003\u0002\u0002\u0002\u0105\u0104\u0003\u0002\u0002\u0002\u0106",
    "\u001f\u0003\u0002\u0002\u0002\u0107\u0109\u0007\u001c\u0002\u0002\u0108",
    "\u010a\u0005\u0014\u000b\u0002\u0109\u0108\u0003\u0002\u0002\u0002\u0109",
    "\u010a\u0003\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b",
    "\u010c\u0005\"\u0012\u0002\u010c!\u0003\u0002\u0002\u0002\u010d\u010e",
    "\u0007\u0003\u0002\u0002\u010e\u0112\u00070\u0002\u0002\u010f\u0111",
    "\u0005\u0006\u0004\u0002\u0110\u010f\u0003\u0002\u0002\u0002\u0111\u0114",
    "\u0003\u0002\u0002\u0002\u0112\u0110\u0003\u0002\u0002\u0002\u0112\u0113",
    "\u0003\u0002\u0002\u0002\u0113\u0115\u0003\u0002\u0002\u0002\u0114\u0112",
    "\u0003\u0002\u0002\u0002\u0115\u0117\u0007\u0004\u0002\u0002\u0116\u010d",
    "\u0003\u0002\u0002\u0002\u0117\u011a\u0003\u0002\u0002\u0002\u0118\u0116",
    "\u0003\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u0126",
    "\u0003\u0002\u0002\u0002\u011a\u0118\u0003\u0002\u0002\u0002\u011b\u011c",
    "\u0007\u0003\u0002\u0002\u011c\u0120\u00071\u0002\u0002\u011d\u011f",
    "\u0005\u0006\u0004\u0002\u011e\u011d\u0003\u0002\u0002\u0002\u011f\u0122",
    "\u0003\u0002\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0120\u0121",
    "\u0003\u0002\u0002\u0002\u0121\u0123\u0003\u0002\u0002\u0002\u0122\u0120",
    "\u0003\u0002\u0002\u0002\u0123\u0125\u0007\u0004\u0002\u0002\u0124\u011b",
    "\u0003\u0002\u0002\u0002\u0125\u0128\u0003\u0002\u0002\u0002\u0126\u0124",
    "\u0003\u0002\u0002\u0002\u0126\u0127\u0003\u0002\u0002\u0002\u0127#",
    "\u0003\u0002\u0002\u0002\u0128\u0126\u0003\u0002\u0002\u0002\u0129\u012b",
    "\u0007\u001c\u0002\u0002\u012a\u012c\u0005\u0014\u000b\u0002\u012b\u012a",
    "\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002\u012c\u012d",
    "\u0003\u0002\u0002\u0002\u012d\u012e\u0005&\u0014\u0002\u012e%\u0003",
    "\u0002\u0002\u0002\u012f\u0130\u0007\u0003\u0002\u0002\u0130\u0134\u0007",
    "0\u0002\u0002\u0131\u0133\u0005\u0006\u0004\u0002\u0132\u0131\u0003",
    "\u0002\u0002\u0002\u0133\u0136\u0003\u0002\u0002\u0002\u0134\u0132\u0003",
    "\u0002\u0002\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0137\u0003",
    "\u0002\u0002\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0137\u0139\u0007",
    "\u0004\u0002\u0002\u0138\u012f\u0003\u0002\u0002\u0002\u0139\u013c\u0003",
    "\u0002\u0002\u0002\u013a\u0138\u0003\u0002\u0002\u0002\u013a\u013b\u0003",
    "\u0002\u0002\u0002\u013b\u013d\u0003\u0002\u0002\u0002\u013c\u013a\u0003",
    "\u0002\u0002\u0002\u013d\u013e\u0005(\u0015\u0002\u013e\'\u0003\u0002",
    "\u0002\u0002\u013f\u0140\u0007\u0003\u0002\u0002\u0140\u0144\u00071",
    "\u0002\u0002\u0141\u0143\u0005\u0006\u0004\u0002\u0142\u0141\u0003\u0002",
    "\u0002\u0002\u0143\u0146\u0003\u0002\u0002\u0002\u0144\u0142\u0003\u0002",
    "\u0002\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0147\u0003\u0002",
    "\u0002\u0002\u0146\u0144\u0003\u0002\u0002\u0002\u0147\u0149\u0007\u0004",
    "\u0002\u0002\u0148\u013f\u0003\u0002\u0002\u0002\u0149\u014c\u0003\u0002",
    "\u0002\u0002\u014a\u0148\u0003\u0002\u0002\u0002\u014a\u014b\u0003\u0002",
    "\u0002\u0002\u014b\u014d\u0003\u0002\u0002\u0002\u014c\u014a\u0003\u0002",
    "\u0002\u0002\u014d\u014e\u0005\u001c\u000f\u0002\u014e)\u0003\u0002",
    "\u0002\u0002\u014f\u0151\t\u0005\u0002\u0002\u0150\u0152\u0005\u001a",
    "\u000e\u0002\u0151\u0150\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002",
    "\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0154\u0005.",
    "\u0018\u0002\u0154\u0156\u0007\u0012\u0002\u0002\u0155\u0157\u0005\u001a",
    "\u000e\u0002\u0156\u0155\u0003\u0002\u0002\u0002\u0156\u0157\u0003\u0002",
    "\u0002\u0002\u0157\u0169\u0003\u0002\u0002\u0002\u0158\u015a\u0007\u0017",
    "\u0002\u0002\u0159\u015b\u0005\u001a\u000e\u0002\u015a\u0159\u0003\u0002",
    "\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002",
    "\u0002\u0002\u015c\u0162\u0005.\u0018\u0002\u015d\u015f\u0007\u0019",
    "\u0002\u0002\u015e\u0160\u0005\u001a\u000e\u0002\u015f\u015e\u0003\u0002",
    "\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002",
    "\u0002\u0002\u0161\u0163\u0005<\u001f\u0002\u0162\u015d\u0003\u0002",
    "\u0002\u0002\u0162\u0163\u0003\u0002\u0002\u0002\u0163\u0164\u0003\u0002",
    "\u0002\u0002\u0164\u0166\u0007\u0012\u0002\u0002\u0165\u0167\u0005\u001a",
    "\u000e\u0002\u0166\u0165\u0003\u0002\u0002\u0002\u0166\u0167\u0003\u0002",
    "\u0002\u0002\u0167\u0169\u0003\u0002\u0002\u0002\u0168\u014f\u0003\u0002",
    "\u0002\u0002\u0168\u0158\u0003\u0002\u0002\u0002\u0169+\u0003\u0002",
    "\u0002\u0002\u016a\u016b\u0007\u0003\u0002\u0002\u016b\u016c\u00071",
    "\u0002\u0002\u016c\u016d\u0005\u0006\u0004\u0002\u016d\u016e\u0007\u0004",
    "\u0002\u0002\u016e-\u0003\u0002\u0002\u0002\u016f\u0171\u0005,\u0017",
    "\u0002\u0170\u016f\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002",
    "\u0002\u0171\u0172\u0003\u0002\u0002\u0002\u0172\u0173\u0005<\u001f",
    "\u0002\u0173/\u0003\u0002\u0002\u0002\u0174\u0175\u0007\u0003\u0002",
    "\u0002\u0175\u0176\u00052\u001a\u0002\u0176\u0177\u0007\u0004\u0002",
    "\u0002\u01771\u0003\u0002\u0002\u0002\u0178\u017c\u0005\u001e\u0010",
    "\u0002\u0179\u017b\u00050\u0019\u0002\u017a\u0179\u0003\u0002\u0002",
    "\u0002\u017b\u017e\u0003\u0002\u0002\u0002\u017c\u017a\u0003\u0002\u0002",
    "\u0002\u017c\u017d\u0003\u0002\u0002\u0002\u017d\u0191\u0003\u0002\u0002",
    "\u0002\u017e\u017c\u0003\u0002\u0002\u0002\u017f\u0180\u0007\u001c\u0002",
    "\u0002\u0180\u0191\u00054\u001b\u0002\u0181\u0183\u0007\u0010\u0002",
    "\u0002\u0182\u0184\u0005\u001a\u000e\u0002\u0183\u0182\u0003\u0002\u0002",
    "\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002\u0002",
    "\u0002\u0185\u0191\u0005.\u0018\u0002\u0186\u0188\u0007\u0011\u0002",
    "\u0002\u0187\u0189\u0005\u001a\u000e\u0002\u0188\u0187\u0003\u0002\u0002",
    "\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002",
    "\u0002\u018a\u0191\u0005.\u0018\u0002\u018b\u018d\u0007\u0017\u0002",
    "\u0002\u018c\u018e\u0005\u001a\u000e\u0002\u018d\u018c\u0003\u0002\u0002",
    "\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u018f\u0003\u0002\u0002",
    "\u0002\u018f\u0191\u0005:\u001e\u0002\u0190\u0178\u0003\u0002\u0002",
    "\u0002\u0190\u017f\u0003\u0002\u0002\u0002\u0190\u0181\u0003\u0002\u0002",
    "\u0002\u0190\u0186\u0003\u0002\u0002\u0002\u0190\u018b\u0003\u0002\u0002",
    "\u0002\u01913\u0003\u0002\u0002\u0002\u0192\u0194\u0005\u0014\u000b",
    "\u0002\u0193\u0192\u0003\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002",
    "\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u0196\u00056\u001c",
    "\u0002\u01965\u0003\u0002\u0002\u0002\u0197\u0198\u0007\u0003\u0002",
    "\u0002\u0198\u019c\u00070\u0002\u0002\u0199\u019b\u0005\u0006\u0004",
    "\u0002\u019a\u0199\u0003\u0002\u0002\u0002\u019b\u019e\u0003\u0002\u0002",
    "\u0002\u019c\u019a\u0003\u0002\u0002\u0002\u019c\u019d\u0003\u0002\u0002",
    "\u0002\u019d\u019f\u0003\u0002\u0002\u0002\u019e\u019c\u0003\u0002\u0002",
    "\u0002\u019f\u01a1\u0007\u0004\u0002\u0002\u01a0\u0197\u0003\u0002\u0002",
    "\u0002\u01a1\u01a4\u0003\u0002\u0002\u0002\u01a2\u01a0\u0003\u0002\u0002",
    "\u0002\u01a2\u01a3\u0003\u0002\u0002\u0002\u01a3\u01a5\u0003\u0002\u0002",
    "\u0002\u01a4\u01a2\u0003\u0002\u0002\u0002\u01a5\u01a6\u00058\u001d",
    "\u0002\u01a67\u0003\u0002\u0002\u0002\u01a7\u01a8\u0007\u0003\u0002",
    "\u0002\u01a8\u01ac\u00071\u0002\u0002\u01a9\u01ab\u0005\u0006\u0004",
    "\u0002\u01aa\u01a9\u0003\u0002\u0002\u0002\u01ab\u01ae\u0003\u0002\u0002",
    "\u0002\u01ac\u01aa\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002",
    "\u0002\u01ad\u01af\u0003\u0002\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002",
    "\u0002\u01af\u01b1\u0007\u0004\u0002\u0002\u01b0\u01a7\u0003\u0002\u0002",
    "\u0002\u01b1\u01b4\u0003\u0002\u0002\u0002\u01b2\u01b0\u0003\u0002\u0002",
    "\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b8\u0003\u0002\u0002",
    "\u0002\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b5\u01b7\u00050\u0019",
    "\u0002\u01b6\u01b5\u0003\u0002\u0002\u0002\u01b7\u01ba\u0003\u0002\u0002",
    "\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002",
    "\u0002\u01b99\u0003\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002",
    "\u0002\u01bb\u01bc\u0005,\u0017\u0002\u01bc\u01bd\u0005:\u001e\u0002",
    "\u01bd\u01d0\u0003\u0002\u0002\u0002\u01be\u01c0\u00050\u0019\u0002",
    "\u01bf\u01be\u0003\u0002\u0002\u0002\u01c0\u01c3\u0003\u0002\u0002\u0002",
    "\u01c1\u01bf\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002",
    "\u01c2\u01c4\u0003\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002",
    "\u01c4\u01c5\u0007\u0003\u0002\u0002\u01c5\u01c6\u0007\u0018\u0002\u0002",
    "\u01c6\u01c7\u0005<\u001f\u0002\u01c7\u01cd\u0007\u0004\u0002\u0002",
    "\u01c8\u01c9\u0007\u0003\u0002\u0002\u01c9\u01ca\u0007\u0019\u0002\u0002",
    "\u01ca\u01cb\u0005<\u001f\u0002\u01cb\u01cc\u0007\u0004\u0002\u0002",
    "\u01cc\u01ce\u0003\u0002\u0002\u0002\u01cd\u01c8\u0003\u0002\u0002\u0002",
    "\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u01d0\u0003\u0002\u0002\u0002",
    "\u01cf\u01bb\u0003\u0002\u0002\u0002\u01cf\u01c1\u0003\u0002\u0002\u0002",
    "\u01d0;\u0003\u0002\u0002\u0002\u01d1\u01d3\u0005\u001c\u000f\u0002",
    "\u01d2\u01d1\u0003\u0002\u0002\u0002\u01d3\u01d6\u0003\u0002\u0002\u0002",
    "\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002",
    "\u01d5\u01d8\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002",
    "\u01d7\u01d9\u0005 \u0011\u0002\u01d8\u01d7\u0003\u0002\u0002\u0002",
    "\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9=\u0003\u0002\u0002\u0002",
    "\u01da\u01db\u0005<\u001f\u0002\u01db?\u0003\u0002\u0002\u0002\u01dc",
    "\u01dd\u0007\u0003\u0002\u0002\u01dd\u01df\u0007.\u0002\u0002\u01de",
    "\u01e0\u0005\u001a\u000e\u0002\u01df\u01de\u0003\u0002\u0002\u0002\u01df",
    "\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1",
    "\u01e2\u0005B\"\u0002\u01e2\u01e3\u0007\u0004\u0002\u0002\u01e3A\u0003",
    "\u0002\u0002\u0002\u01e4\u01e6\u0005\u0014\u000b\u0002\u01e5\u01e4\u0003",
    "\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003",
    "\u0002\u0002\u0002\u01e7\u01f2\u0005H%\u0002\u01e8\u01ea\u0005d3\u0002",
    "\u01e9\u01eb\u0005\u0014\u000b\u0002\u01ea\u01e9\u0003\u0002\u0002\u0002",
    "\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002",
    "\u01ec\u01ed\u0005D#\u0002\u01ed\u01f2\u0003\u0002\u0002\u0002\u01ee",
    "\u01ef\u0005j6\u0002\u01ef\u01f0\u0005B\"\u0002\u01f0\u01f2\u0003\u0002",
    "\u0002\u0002\u01f1\u01e5\u0003\u0002\u0002\u0002\u01f1\u01e8\u0003\u0002",
    "\u0002\u0002\u01f1\u01ee\u0003\u0002\u0002\u0002\u01f2C\u0003\u0002",
    "\u0002\u0002\u01f3\u01f4\u0007\u0003\u0002\u0002\u01f4\u01f8\u00070",
    "\u0002\u0002\u01f5\u01f7\u0005\u0006\u0004\u0002\u01f6\u01f5\u0003\u0002",
    "\u0002\u0002\u01f7\u01fa\u0003\u0002\u0002\u0002\u01f8\u01f6\u0003\u0002",
    "\u0002\u0002\u01f8\u01f9\u0003\u0002\u0002\u0002\u01f9\u01fb\u0003\u0002",
    "\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fb\u0203\u0007\u0004",
    "\u0002\u0002\u01fc\u01fd\u0007\u0003\u0002\u0002\u01fd\u01fe\u00070",
    "\u0002\u0002\u01fe\u01ff\u0005\u001a\u000e\u0002\u01ff\u0200\u0005\u0006",
    "\u0004\u0002\u0200\u0201\u0007\u0004\u0002\u0002\u0201\u0203\u0003\u0002",
    "\u0002\u0002\u0202\u01f3\u0003\u0002\u0002\u0002\u0202\u01fc\u0003\u0002",
    "\u0002\u0002\u0203\u0204\u0003\u0002\u0002\u0002\u0204\u0205\u0005F",
    "$\u0002\u0205E\u0003\u0002\u0002\u0002\u0206\u0207\u0007\u0003\u0002",
    "\u0002\u0207\u020b\u00071\u0002\u0002\u0208\u020a\u0005\u0006\u0004",
    "\u0002\u0209\u0208\u0003\u0002\u0002\u0002\u020a\u020d\u0003\u0002\u0002",
    "\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002",
    "\u0002\u020c\u020e\u0003\u0002\u0002\u0002\u020d\u020b\u0003\u0002\u0002",
    "\u0002\u020e\u0210\u0007\u0004\u0002\u0002\u020f\u0206\u0003\u0002\u0002",
    "\u0002\u0210\u0213\u0003\u0002\u0002\u0002\u0211\u020f\u0003\u0002\u0002",
    "\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212G\u0003\u0002\u0002",
    "\u0002\u0213\u0211\u0003\u0002\u0002\u0002\u0214\u0215\u0007\u0003\u0002",
    "\u0002\u0215\u0219\u00070\u0002\u0002\u0216\u0218\u0005\u0006\u0004",
    "\u0002\u0217\u0216\u0003\u0002\u0002\u0002\u0218\u021b\u0003\u0002\u0002",
    "\u0002\u0219\u0217\u0003\u0002\u0002\u0002\u0219\u021a\u0003\u0002\u0002",
    "\u0002\u021a\u021c\u0003\u0002\u0002\u0002\u021b\u0219\u0003\u0002\u0002",
    "\u0002\u021c\u0224\u0007\u0004\u0002\u0002\u021d\u021e\u0007\u0003\u0002",
    "\u0002\u021e\u021f\u00070\u0002\u0002\u021f\u0220\u0005\u001a\u000e",
    "\u0002\u0220\u0221\u0005\u0006\u0004\u0002\u0221\u0222\u0007\u0004\u0002",
    "\u0002\u0222\u0224\u0003\u0002\u0002\u0002\u0223\u0214\u0003\u0002\u0002",
    "\u0002\u0223\u021d\u0003\u0002\u0002\u0002\u0224\u0227\u0003\u0002\u0002",
    "\u0002\u0225\u0223\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002\u0002",
    "\u0002\u0226\u0228\u0003\u0002\u0002\u0002\u0227\u0225\u0003\u0002\u0002",
    "\u0002\u0228\u0229\u0005J&\u0002\u0229I\u0003\u0002\u0002\u0002\u022a",
    "\u022b\u0007\u0003\u0002\u0002\u022b\u022f\u00071\u0002\u0002\u022c",
    "\u022e\u0005\u0006\u0004\u0002\u022d\u022c\u0003\u0002\u0002\u0002\u022e",
    "\u0231\u0003\u0002\u0002\u0002\u022f\u022d\u0003\u0002\u0002\u0002\u022f",
    "\u0230\u0003\u0002\u0002\u0002\u0230\u0232\u0003\u0002\u0002\u0002\u0231",
    "\u022f\u0003\u0002\u0002\u0002\u0232\u0234\u0007\u0004\u0002\u0002\u0233",
    "\u022a\u0003\u0002\u0002\u0002\u0234\u0237\u0003\u0002\u0002\u0002\u0235",
    "\u0233\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236",
    "\u0238\u0003\u0002\u0002\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0238",
    "\u0239\u0005L\'\u0002\u0239K\u0003\u0002\u0002\u0002\u023a\u023b\u0007",
    "\u0003\u0002\u0002\u023b\u023f\u00072\u0002\u0002\u023c\u023e\u0005",
    "\u0006\u0004\u0002\u023d\u023c\u0003\u0002\u0002\u0002\u023e\u0241\u0003",
    "\u0002\u0002\u0002\u023f\u023d\u0003\u0002\u0002\u0002\u023f\u0240\u0003",
    "\u0002\u0002\u0002\u0240\u0242\u0003\u0002\u0002\u0002\u0241\u023f\u0003",
    "\u0002\u0002\u0002\u0242\u024a\u0007\u0004\u0002\u0002\u0243\u0244\u0007",
    "\u0003\u0002\u0002\u0244\u0245\u00072\u0002\u0002\u0245\u0246\u0005",
    "\u001a\u000e\u0002\u0246\u0247\u0005\u0006\u0004\u0002\u0247\u0248\u0007",
    "\u0004\u0002\u0002\u0248\u024a\u0003\u0002\u0002\u0002\u0249\u023a\u0003",
    "\u0002\u0002\u0002\u0249\u0243\u0003\u0002\u0002\u0002\u024a\u024d\u0003",
    "\u0002\u0002\u0002\u024b\u0249\u0003\u0002\u0002\u0002\u024b\u024c\u0003",
    "\u0002\u0002\u0002\u024c\u024e\u0003\u0002\u0002\u0002\u024d\u024b\u0003",
    "\u0002\u0002\u0002\u024e\u024f\u0005<\u001f\u0002\u024fM\u0003\u0002",
    "\u0002\u0002\u0250\u0251\u0007\u0003\u0002\u0002\u0251\u0252\u00078",
    "\u0002\u0002\u0252\u0253\u0005> \u0002\u0253\u0254\u0007\u0004\u0002",
    "\u0002\u0254\u0257\u0003\u0002\u0002\u0002\u0255\u0257\u00050\u0019",
    "\u0002\u0256\u0250\u0003\u0002\u0002\u0002\u0256\u0255\u0003\u0002\u0002",
    "\u0002\u0257O\u0003\u0002\u0002\u0002\u0258\u0259\u0007\u0003\u0002",
    "\u0002\u0259\u025b\u00076\u0002\u0002\u025a\u025c\u0005\u0018\r\u0002",
    "\u025b\u025a\u0003\u0002\u0002\u0002\u025b\u025c\u0003\u0002\u0002\u0002",
    "\u025c\u025d\u0003\u0002\u0002\u0002\u025d\u0261\u0005N(\u0002\u025e",
    "\u0260\u0005\u0018\r\u0002\u025f\u025e\u0003\u0002\u0002\u0002\u0260",
    "\u0263\u0003\u0002\u0002\u0002\u0261\u025f\u0003\u0002\u0002\u0002\u0261",
    "\u0262\u0003\u0002\u0002\u0002\u0262\u0264\u0003\u0002\u0002\u0002\u0263",
    "\u0261\u0003\u0002\u0002\u0002\u0264\u0265\u0007\u0004\u0002\u0002\u0265",
    "Q\u0003\u0002\u0002\u0002\u0266\u0267\u0007\u0003\u0002\u0002\u0267",
    "\u0269\u00074\u0002\u0002\u0268\u026a\u0005\u001a\u000e\u0002\u0269",
    "\u0268\u0003\u0002\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a",
    "\u026b\u0003\u0002\u0002\u0002\u026b\u026c\u0005T+\u0002\u026c\u026d",
    "\u0007\u0004\u0002\u0002\u026dS\u0003\u0002\u0002\u0002\u026e\u0281",
    "\u0005\u0010\t\u0002\u026f\u0270\u0005d3\u0002\u0270\u0271\u0005\u0010",
    "\t\u0002\u0271\u0281\u0003\u0002\u0002\u0002\u0272\u0273\u0005j6\u0002",
    "\u0273\u0274\u0005T+\u0002\u0274\u0281\u0003\u0002\u0002\u0002\u0275",
    "\u0276\u0005\b\u0005\u0002\u0276\u0277\u0007\u0003\u0002\u0002\u0277",
    "\u027b\u00076\u0002\u0002\u0278\u027a\u0005\u0018\r\u0002\u0279\u0278",
    "\u0003\u0002\u0002\u0002\u027a\u027d\u0003\u0002\u0002\u0002\u027b\u0279",
    "\u0003\u0002\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027e",
    "\u0003\u0002\u0002\u0002\u027d\u027b\u0003\u0002\u0002\u0002\u027e\u027f",
    "\u0007\u0004\u0002\u0002\u027f\u0281\u0003\u0002\u0002\u0002\u0280\u026e",
    "\u0003\u0002\u0002\u0002\u0280\u026f\u0003\u0002\u0002\u0002\u0280\u0272",
    "\u0003\u0002\u0002\u0002\u0280\u0275\u0003\u0002\u0002\u0002\u0281U",
    "\u0003\u0002\u0002\u0002\u0282\u0283\u0007\u0003\u0002\u0002\u0283\u0285",
    "\u00077\u0002\u0002\u0284\u0286\u0005\u0018\r\u0002\u0285\u0284\u0003",
    "\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0287\u0003",
    "\u0002\u0002\u0002\u0287\u028b\u0005N(\u0002\u0288\u028a\u0007\b\u0002",
    "\u0002\u0289\u0288\u0003\u0002\u0002\u0002\u028a\u028d\u0003\u0002\u0002",
    "\u0002\u028b\u0289\u0003\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002",
    "\u0002\u028c\u028e\u0003\u0002\u0002\u0002\u028d\u028b\u0003\u0002\u0002",
    "\u0002\u028e\u028f\u0007\u0004\u0002\u0002\u028fW\u0003\u0002\u0002",
    "\u0002\u0290\u0291\u0007\u0003\u0002\u0002\u0291\u0293\u00075\u0002",
    "\u0002\u0292\u0294\u0005\u001a\u000e\u0002\u0293\u0292\u0003\u0002\u0002",
    "\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002",
    "\u0002\u0295\u0296\u0005Z.\u0002\u0296\u0297\u0007\u0004\u0002\u0002",
    "\u0297Y\u0003\u0002\u0002\u0002\u0298\u02a9\u0005\u0012\n\u0002\u0299",
    "\u029a\u0005d3\u0002\u029a\u029b\u0005\u0012\n\u0002\u029b\u02a9\u0003",
    "\u0002\u0002\u0002\u029c\u029d\u0005j6\u0002\u029d\u029e\u0005Z.\u0002",
    "\u029e\u02a9\u0003\u0002\u0002\u0002\u029f\u02a0\u0007\u0003\u0002\u0002",
    "\u02a0\u02a4\u00077\u0002\u0002\u02a1\u02a3\u0007\b\u0002\u0002\u02a2",
    "\u02a1\u0003\u0002\u0002\u0002\u02a3\u02a6\u0003\u0002\u0002\u0002\u02a4",
    "\u02a2\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5",
    "\u02a7\u0003\u0002\u0002\u0002\u02a6\u02a4\u0003\u0002\u0002\u0002\u02a7",
    "\u02a9\u0007\u0004\u0002\u0002\u02a8\u0298\u0003\u0002\u0002\u0002\u02a8",
    "\u0299\u0003\u0002\u0002\u0002\u02a8\u029c\u0003\u0002\u0002\u0002\u02a8",
    "\u029f\u0003\u0002\u0002\u0002\u02a9[\u0003\u0002\u0002\u0002\u02aa",
    "\u02ab\u0007\u0003\u0002\u0002\u02ab\u02ad\u00073\u0002\u0002\u02ac",
    "\u02ae\u0005\u001a\u000e\u0002\u02ad\u02ac\u0003\u0002\u0002\u0002\u02ad",
    "\u02ae\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af",
    "\u02b0\u0005^0\u0002\u02b0\u02b1\u0007\u0004\u0002\u0002\u02b1]\u0003",
    "\u0002\u0002\u0002\u02b2\u02b3\u0005\n\u0006\u0002\u02b3\u02b4\u0005",
    "> \u0002\u02b4\u02bc\u0003\u0002\u0002\u0002\u02b5\u02b6\u0005d3\u0002",
    "\u02b6\u02b7\u0005\n\u0006\u0002\u02b7\u02bc\u0003\u0002\u0002\u0002",
    "\u02b8\u02b9\u0005j6\u0002\u02b9\u02ba\u0005^0\u0002\u02ba\u02bc\u0003",
    "\u0002\u0002\u0002\u02bb\u02b2\u0003\u0002\u0002\u0002\u02bb\u02b5\u0003",
    "\u0002\u0002\u0002\u02bb\u02b8\u0003\u0002\u0002\u0002\u02bc_\u0003",
    "\u0002\u0002\u0002\u02bd\u02be\u0007\u0003\u0002\u0002\u02be\u02c0\u0007",
    ".\u0002\u0002\u02bf\u02c1\u0005\u001a\u000e\u0002\u02c0\u02bf\u0003",
    "\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003",
    "\u0002\u0002\u0002\u02c2\u02c3\u0005\u0014\u000b\u0002\u02c3\u02c4\u0007",
    "\u0004\u0002\u0002\u02c4\u02e6\u0003\u0002\u0002\u0002\u02c5\u02c6\u0007",
    "\u0003\u0002\u0002\u02c6\u02c8\u0007.\u0002\u0002\u02c7\u02c9\u0005",
    "\u001a\u000e\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002\u02c8\u02c9\u0003",
    "\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca\u02cb\u0005",
    "\u000e\b\u0002\u02cb\u02cc\u0007\u0004\u0002\u0002\u02cc\u02e6\u0003",
    "\u0002\u0002\u0002\u02cd\u02ce\u0007\u0003\u0002\u0002\u02ce\u02d0\u0007",
    "4\u0002\u0002\u02cf\u02d1\u0005\u001a\u000e\u0002\u02d0\u02cf\u0003",
    "\u0002\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003",
    "\u0002\u0002\u0002\u02d2\u02d3\u0005\u0010\t\u0002\u02d3\u02d4\u0007",
    "\u0004\u0002\u0002\u02d4\u02e6\u0003\u0002\u0002\u0002\u02d5\u02d6\u0007",
    "\u0003\u0002\u0002\u02d6\u02d8\u00075\u0002\u0002\u02d7\u02d9\u0005",
    "\u001a\u000e\u0002\u02d8\u02d7\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003",
    "\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da\u02db\u0005",
    "\u0012\n\u0002\u02db\u02dc\u0007\u0004\u0002\u0002\u02dc\u02e6\u0003",
    "\u0002\u0002\u0002\u02dd\u02de\u0007\u0003\u0002\u0002\u02de\u02e0\u0007",
    "3\u0002\u0002\u02df\u02e1\u0005\u001a\u000e\u0002\u02e0\u02df\u0003",
    "\u0002\u0002\u0002\u02e0\u02e1\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003",
    "\u0002\u0002\u0002\u02e2\u02e3\u0005\n\u0006\u0002\u02e3\u02e4\u0007",
    "\u0004\u0002\u0002\u02e4\u02e6\u0003\u0002\u0002\u0002\u02e5\u02bd\u0003",
    "\u0002\u0002\u0002\u02e5\u02c5\u0003\u0002\u0002\u0002\u02e5\u02cd\u0003",
    "\u0002\u0002\u0002\u02e5\u02d5\u0003\u0002\u0002\u0002\u02e5\u02dd\u0003",
    "\u0002\u0002\u0002\u02e6a\u0003\u0002\u0002\u0002\u02e7\u02e8\u0007",
    "\u0003\u0002\u0002\u02e8\u02e9\u00079\u0002\u0002\u02e9\u02ea\u0005",
    "\u0004\u0003\u0002\u02ea\u02eb\u0005\u0004\u0003\u0002\u02eb\u02ec\u0005",
    "`1\u0002\u02ec\u02ed\u0007\u0004\u0002\u0002\u02edc\u0003\u0002\u0002",
    "\u0002\u02ee\u02ef\u0007\u0003\u0002\u0002\u02ef\u02f0\u00079\u0002",
    "\u0002\u02f0\u02f1\u0005\u0004\u0003\u0002\u02f1\u02f2\u0005\u0004\u0003",
    "\u0002\u02f2\u02f3\u0007\u0004\u0002\u0002\u02f3e\u0003\u0002\u0002",
    "\u0002\u02f4\u02f5\u0007\u0003\u0002\u0002\u02f5\u02f6\u0007.\u0002",
    "\u0002\u02f6\u02f7\u0005\u0018\r\u0002\u02f7\u02f8\u0007\u0004\u0002",
    "\u0002\u02f8\u0309\u0003\u0002\u0002\u0002\u02f9\u02fa\u0007\u0003\u0002",
    "\u0002\u02fa\u02fb\u00074\u0002\u0002\u02fb\u02fc\u0005\u0018\r\u0002",
    "\u02fc\u02fd\u0007\u0004\u0002\u0002\u02fd\u0309\u0003\u0002\u0002\u0002",
    "\u02fe\u02ff\u0007\u0003\u0002\u0002\u02ff\u0300\u00075\u0002\u0002",
    "\u0300\u0301\u0005\u0018\r\u0002\u0301\u0302\u0007\u0004\u0002\u0002",
    "\u0302\u0309\u0003\u0002\u0002\u0002\u0303\u0304\u0007\u0003\u0002\u0002",
    "\u0304\u0305\u00073\u0002\u0002\u0305\u0306\u0005\u0018\r\u0002\u0306",
    "\u0307\u0007\u0004\u0002\u0002\u0307\u0309\u0003\u0002\u0002\u0002\u0308",
    "\u02f4\u0003\u0002\u0002\u0002\u0308\u02f9\u0003\u0002\u0002\u0002\u0308",
    "\u02fe\u0003\u0002\u0002\u0002\u0308\u0303\u0003\u0002\u0002\u0002\u0309",
    "g\u0003\u0002\u0002\u0002\u030a\u030b\u0007\u0003\u0002\u0002\u030b",
    "\u030c\u0007:\u0002\u0002\u030c\u030d\u0005\u0004\u0003\u0002\u030d",
    "\u030e\u0005f4\u0002\u030e\u030f\u0007\u0004\u0002\u0002\u030fi\u0003",
    "\u0002\u0002\u0002\u0310\u0311\u0007\u0003\u0002\u0002\u0311\u0312\u0007",
    ":\u0002\u0002\u0312\u0313\u0005\u0004\u0003\u0002\u0313\u0314\u0007",
    "\u0004\u0002\u0002\u0314k\u0003\u0002\u0002\u0002\u0315\u0316\u0005",
    "\f\u0007\u0002\u0316m\u0003\u0002\u0002\u0002\u0317\u0318\u0007\u0003",
    "\u0002\u0002\u0318\u031a\u0007-\u0002\u0002\u0319\u031b\u0005\u001a",
    "\u000e\u0002\u031a\u0319\u0003\u0002\u0002\u0002\u031a\u031b\u0003\u0002",
    "\u0002\u0002\u031b\u031c\u0003\u0002\u0002\u0002\u031c\u031d\u0005l",
    "7\u0002\u031d\u031e\u0007\u0004\u0002\u0002\u031eo\u0003\u0002\u0002",
    "\u0002\u031f\u0320\u0007\u0003\u0002\u0002\u0320\u0321\u0007/\u0002",
    "\u0002\u0321\u0322\u0005\u0018\r\u0002\u0322\u0323\u0007\u0004\u0002",
    "\u0002\u0323q\u0003\u0002\u0002\u0002\u0324\u032f\u0005n8\u0002\u0325",
    "\u032f\u0005\\/\u0002\u0326\u032f\u0005R*\u0002\u0327\u032f\u0005X-",
    "\u0002\u0328\u032f\u0005@!\u0002\u0329\u032f\u0005P)\u0002\u032a\u032f",
    "\u0005V,\u0002\u032b\u032f\u0005p9\u0002\u032c\u032f\u0005b2\u0002\u032d",
    "\u032f\u0005h5\u0002\u032e\u0324\u0003\u0002\u0002\u0002\u032e\u0325",
    "\u0003\u0002\u0002\u0002\u032e\u0326\u0003\u0002\u0002\u0002\u032e\u0327",
    "\u0003\u0002\u0002\u0002\u032e\u0328\u0003\u0002\u0002\u0002\u032e\u0329",
    "\u0003\u0002\u0002\u0002\u032e\u032a\u0003\u0002\u0002\u0002\u032e\u032b",
    "\u0003\u0002\u0002\u0002\u032e\u032c\u0003\u0002\u0002\u0002\u032e\u032d",
    "\u0003\u0002\u0002\u0002\u032fs\u0003\u0002\u0002\u0002\u0330\u0331",
    "\u0007\u0003\u0002\u0002\u0331\u0333\u0007;\u0002\u0002\u0332\u0334",
    "\u0007L\u0002\u0002\u0333\u0332\u0003\u0002\u0002\u0002\u0333\u0334",
    "\u0003\u0002\u0002\u0002\u0334\u0338\u0003\u0002\u0002\u0002\u0335\u0337",
    "\u0005r:\u0002\u0336\u0335\u0003\u0002\u0002\u0002\u0337\u033a\u0003",
    "\u0002\u0002\u0002\u0338\u0336\u0003\u0002\u0002\u0002\u0338\u0339\u0003",
    "\u0002\u0002\u0002\u0339\u033b\u0003\u0002\u0002\u0002\u033a\u0338\u0003",
    "\u0002\u0002\u0002\u033b\u033c\u0007\u0004\u0002\u0002\u033cu\u0003",
    "\u0002\u0002\u0002\u033d\u034c\u0005t;\u0002\u033e\u033f\u0007\u0003",
    "\u0002\u0002\u033f\u0341\u0007;\u0002\u0002\u0340\u0342\u0007L\u0002",
    "\u0002\u0341\u0340\u0003\u0002\u0002\u0002\u0341\u0342\u0003\u0002\u0002",
    "\u0002\u0342\u0343\u0003\u0002\u0002\u0002\u0343\u0347\t\u0006\u0002",
    "\u0002\u0344\u0346\u0007\b\u0002\u0002\u0345\u0344\u0003\u0002\u0002",
    "\u0002\u0346\u0349\u0003\u0002\u0002\u0002\u0347\u0345\u0003\u0002\u0002",
    "\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u034a\u0003\u0002\u0002",
    "\u0002\u0349\u0347\u0003\u0002\u0002\u0002\u034a\u034c\u0007\u0004\u0002",
    "\u0002\u034b\u033d\u0003\u0002\u0002\u0002\u034b\u033e\u0003\u0002\u0002",
    "\u0002\u034cw\u0003\u0002\u0002\u0002\u034d\u034e\u0007\u0003\u0002",
    "\u0002\u034e\u0350\u0007@\u0002\u0002\u034f\u0351\u0007L\u0002\u0002",
    "\u0350\u034f\u0003\u0002\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002",
    "\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u0353\u0005\u0004\u0003\u0002",
    "\u0353\u0354\u0005\u0082B\u0002\u0354\u0355\u0007\u0004\u0002\u0002",
    "\u0355\u035f\u0003\u0002\u0002\u0002\u0356\u0357\u0007\u0003\u0002\u0002",
    "\u0357\u0359\u0007A\u0002\u0002\u0358\u035a\u0007L\u0002\u0002\u0359",
    "\u0358\u0003\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a",
    "\u035b\u0003\u0002\u0002\u0002\u035b\u035c\u0005\u0004\u0003\u0002\u035c",
    "\u035d\u0007\u0004\u0002\u0002\u035d\u035f\u0003\u0002\u0002\u0002\u035e",
    "\u034d\u0003\u0002\u0002\u0002\u035e\u0356\u0003\u0002\u0002\u0002\u035f",
    "y\u0003\u0002\u0002\u0002\u0360\u0361\u0007\u0003\u0002\u0002\u0361",
    "\u0362\u0007B\u0002\u0002\u0362\u0363\u0005v<\u0002\u0363\u0364\u0007",
    "\b\u0002\u0002\u0364\u0365\u0007\u0004\u0002\u0002\u0365\u0395\u0003",
    "\u0002\u0002\u0002\u0366\u0367\u0007\u0003\u0002\u0002\u0367\u0368\u0007",
    "C\u0002\u0002\u0368\u0369\u0005v<\u0002\u0369\u036a\u0007\b\u0002\u0002",
    "\u036a\u036b\u0007\u0004\u0002\u0002\u036b\u0395\u0003\u0002\u0002\u0002",
    "\u036c\u036d\u0007\u0003\u0002\u0002\u036d\u036e\u0007D\u0002\u0002",
    "\u036e\u036f\u0005v<\u0002\u036f\u0370\u0007\b\u0002\u0002\u0370\u0371",
    "\u0007\u0004\u0002\u0002\u0371\u0395\u0003\u0002\u0002\u0002\u0372\u0373",
    "\u0007\u0003\u0002\u0002\u0373\u0374\u0007H\u0002\u0002\u0374\u0375",
    "\u0005v<\u0002\u0375\u0376\u0007\b\u0002\u0002\u0376\u0377\u0007\u0004",
    "\u0002\u0002\u0377\u0395\u0003\u0002\u0002\u0002\u0378\u0379\u0007\u0003",
    "\u0002\u0002\u0379\u037a\u0007E\u0002\u0002\u037a\u037b\u0005x=\u0002",
    "\u037b\u037c\u0005\u0082B\u0002\u037c\u037d\u0007\u0004\u0002\u0002",
    "\u037d\u0395\u0003\u0002\u0002\u0002\u037e\u037f\u0007\u0003\u0002\u0002",
    "\u037f\u0380\u0007F\u0002\u0002\u0380\u0381\u0005x=\u0002\u0381\u0382",
    "\u0007\u0004\u0002\u0002\u0382\u0395\u0003\u0002\u0002\u0002\u0383\u0384",
    "\u0007\u0003\u0002\u0002\u0384\u0385\u0007G\u0002\u0002\u0385\u0386",
    "\u0005x=\u0002\u0386\u0387\u0007\u0004\u0002\u0002\u0387\u0395\u0003",
    "\u0002\u0002\u0002\u0388\u0389\u0007\u0003\u0002\u0002\u0389\u038a\u0007",
    "H\u0002\u0002\u038a\u038b\u0005x=\u0002\u038b\u038c\u0007\b\u0002\u0002",
    "\u038c\u038d\u0007\u0004\u0002\u0002\u038d\u0395\u0003\u0002\u0002\u0002",
    "\u038e\u038f\u0007\u0003\u0002\u0002\u038f\u0390\u0007I\u0002\u0002",
    "\u0390\u0391\u0005x=\u0002\u0391\u0392\u0007\b\u0002\u0002\u0392\u0393",
    "\u0007\u0004\u0002\u0002\u0393\u0395\u0003\u0002\u0002\u0002\u0394\u0360",
    "\u0003\u0002\u0002\u0002\u0394\u0366\u0003\u0002\u0002\u0002\u0394\u036c",
    "\u0003\u0002\u0002\u0002\u0394\u0372\u0003\u0002\u0002\u0002\u0394\u0378",
    "\u0003\u0002\u0002\u0002\u0394\u037e\u0003\u0002\u0002\u0002\u0394\u0383",
    "\u0003\u0002\u0002\u0002\u0394\u0388\u0003\u0002\u0002\u0002\u0394\u038e",
    "\u0003\u0002\u0002\u0002\u0395{\u0003\u0002\u0002\u0002\u0396\u03a3",
    "\u0005x=\u0002\u0397\u03a3\u0005z>\u0002\u0398\u03a3\u0005v<\u0002\u0399",
    "\u039a\u0007\u0003\u0002\u0002\u039a\u039b\u0007?\u0002\u0002\u039b",
    "\u039d\u0005\u0004\u0003\u0002\u039c\u039e\u0007L\u0002\u0002\u039d",
    "\u039c\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002\u0002\u0002\u039e",
    "\u039f\u0003\u0002\u0002\u0002\u039f\u03a0\u0007\u0004\u0002\u0002\u03a0",
    "\u03a3\u0003\u0002\u0002\u0002\u03a1\u03a3\u0005~@\u0002\u03a2\u0396",
    "\u0003\u0002\u0002\u0002\u03a2\u0397\u0003\u0002\u0002\u0002\u03a2\u0398",
    "\u0003\u0002\u0002\u0002\u03a2\u0399\u0003\u0002\u0002\u0002\u03a2\u03a1",
    "\u0003\u0002\u0002\u0002\u03a3}\u0003\u0002\u0002\u0002\u03a4\u03a5",
    "\u0007\u0003\u0002\u0002\u03a5\u03a7\u0007>\u0002\u0002\u03a6\u03a8",
    "\u0007L\u0002\u0002\u03a7\u03a6\u0003\u0002\u0002\u0002\u03a7\u03a8",
    "\u0003\u0002\u0002\u0002\u03a8\u03ac\u0003\u0002\u0002\u0002\u03a9\u03ab",
    "\u0005|?\u0002\u03aa\u03a9\u0003\u0002\u0002\u0002\u03ab\u03ae\u0003",
    "\u0002\u0002\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003",
    "\u0002\u0002\u0002\u03ad\u03af\u0003\u0002\u0002\u0002\u03ae\u03ac\u0003",
    "\u0002\u0002\u0002\u03af\u03c5\u0007\u0004\u0002\u0002\u03b0\u03b1\u0007",
    "\u0003\u0002\u0002\u03b1\u03b3\u0007J\u0002\u0002\u03b2\u03b4\u0007",
    "L\u0002\u0002\u03b3\u03b2\u0003\u0002\u0002\u0002\u03b3\u03b4\u0003",
    "\u0002\u0002\u0002\u03b4\u03b5\u0003\u0002\u0002\u0002\u03b5\u03b6\u0007",
    "\b\u0002\u0002\u03b6\u03c5\u0007\u0004\u0002\u0002\u03b7\u03b8\u0007",
    "\u0003\u0002\u0002\u03b8\u03ba\u0007K\u0002\u0002\u03b9\u03bb\u0007",
    "L\u0002\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003",
    "\u0002\u0002\u0002\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03bd\u0007",
    "\b\u0002\u0002\u03bd\u03c5\u0007\u0004\u0002\u0002\u03be\u03bf\u0007",
    "\u0003\u0002\u0002\u03bf\u03c1\u0007K\u0002\u0002\u03c0\u03c2\u0007",
    "L\u0002\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003",
    "\u0002\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002\u03c3\u03c5\u0007",
    "\u0004\u0002\u0002\u03c4\u03a4\u0003\u0002\u0002\u0002\u03c4\u03b0\u0003",
    "\u0002\u0002\u0002\u03c4\u03b7\u0003\u0002\u0002\u0002\u03c4\u03be\u0003",
    "\u0002\u0002\u0002\u03c5\u007f\u0003\u0002\u0002\u0002\u03c6\u03c7\u0007",
    "\u0003\u0002\u0002\u03c7\u03c8\u0007\n\u0002\u0002\u03c8\u03c9\u0005",
    "\u0016\f\u0002\u03c9\u03ca\u0007\u0004\u0002\u0002\u03ca\u0081\u0003",
    "\u0002\u0002\u0002\u03cb\u03cd\u0005\u0080A\u0002\u03cc\u03cb\u0003",
    "\u0002\u0002\u0002\u03cd\u03d0\u0003\u0002\u0002\u0002\u03ce\u03cc\u0003",
    "\u0002\u0002\u0002\u03ce\u03cf\u0003\u0002\u0002\u0002\u03cf\u0083\u0003",
    "\u0002\u0002\u0002\u03d0\u03ce\u0003\u0002\u0002\u0002\u03d1\u03d3\u0005",
    "|?\u0002\u03d2\u03d1\u0003\u0002\u0002\u0002\u03d3\u03d6\u0003\u0002",
    "\u0002\u0002\u03d4\u03d2\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002",
    "\u0002\u0002\u03d5\u03d7\u0003\u0002\u0002\u0002\u03d6\u03d4\u0003\u0002",
    "\u0002\u0002\u03d7\u03e0\u0007\u0002\u0002\u0003\u03d8\u03da\u0005r",
    ":\u0002\u03d9\u03d8\u0003\u0002\u0002\u0002\u03da\u03db\u0003\u0002",
    "\u0002\u0002\u03db\u03d9\u0003\u0002\u0002\u0002\u03db\u03dc\u0003\u0002",
    "\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03de\u0007\u0002",
    "\u0002\u0003\u03de\u03e0\u0003\u0002\u0002\u0002\u03df\u03d4\u0003\u0002",
    "\u0002\u0002\u03df\u03d9\u0003\u0002\u0002\u0002\u03e0\u0085\u0003\u0002",
    "\u0002\u0002\u03e1\u03e2\u0005t;\u0002\u03e2\u03e3\u0007\u0002\u0002",
    "\u0003\u03e3\u03ec\u0003\u0002\u0002\u0002\u03e4\u03e6\u0005r:\u0002",
    "\u03e5\u03e4\u0003\u0002\u0002\u0002\u03e6\u03e9\u0003\u0002\u0002\u0002",
    "\u03e7\u03e5\u0003\u0002\u0002\u0002\u03e7\u03e8\u0003\u0002\u0002\u0002",
    "\u03e8\u03ea\u0003\u0002\u0002\u0002\u03e9\u03e7\u0003\u0002\u0002\u0002",
    "\u03ea\u03ec\u0007\u0002\u0002\u0003\u03eb\u03e1\u0003\u0002\u0002\u0002",
    "\u03eb\u03e7\u0003\u0002\u0002\u0002\u03ec\u0087\u0003\u0002\u0002\u0002",
    "o\u0096\u00a2\u00a9\u00b0\u00b5\u00ba\u00c0\u00d1\u00df\u00f0\u00f3",
    "\u00f7\u00fa\u0105\u0109\u0112\u0118\u0120\u0126\u012b\u0134\u013a\u0144",
    "\u014a\u0151\u0156\u015a\u015f\u0162\u0166\u0168\u0170\u017c\u0183\u0188",
    "\u018d\u0190\u0193\u019c\u01a2\u01ac\u01b2\u01b8\u01c1\u01cd\u01cf\u01d4",
    "\u01d8\u01df\u01e5\u01ea\u01f1\u01f8\u0202\u020b\u0211\u0219\u0223\u0225",
    "\u022f\u0235\u023f\u0249\u024b\u0256\u025b\u0261\u0269\u027b\u0280\u0285",
    "\u028b\u0293\u02a4\u02a8\u02ad\u02bb\u02c0\u02c8\u02d0\u02d8\u02e0\u02e5",
    "\u0308\u031a\u032e\u0333\u0338\u0341\u0347\u034b\u0350\u0359\u035e\u0394",
    "\u039d\u03a2\u03a7\u03ac\u03b3\u03ba\u03c1\u03c4\u03ce\u03d4\u03db\u03df",
    "\u03e7\u03eb"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'('", "')'", null, null, null, null, null, null, 
                     "'funcref'", "'mut'", "'nop'", "'unreachable'", "'drop'", 
                     "'block'", "'loop'", "'end'", "'br'", "'br_if'", "'br_table'", 
                     "'return'", "'if'", "'then'", "'else'", "'select'", 
                     "'call'", "'call_indirect'", "'local.get'", "'local.set'", 
                     "'local.tee'", "'global.get'", "'global.set'", null, 
                     null, null, null, null, null, null, null, null, "'memory.size'", 
                     "'memory.grow'", "'type'", "'func'", "'start'", "'param'", 
                     "'result'", "'local'", "'global'", "'table'", "'memory'", 
                     "'elem'", "'data'", "'offset'", "'import'", "'export'", 
                     "'module'", "'binary'", "'quote'", "'script'", "'register'", 
                     "'invoke'", "'get'", "'assert_malformed'", "'assert_invalid'", 
                     "'assert_unlinkable'", "'assert_return'", "'assert_return_canonical_nan'", 
                     "'assert_return_arithmetic_nan'", "'assert_trap'", 
                     "'assert_exhaustion'", "'input'", "'output'" ];

var symbolicNames = [ null, "LPAR", "RPAR", "NAT", "INT", "FLOAT", "STRING", 
                      "VALUE_TYPE", "CONST", "FUNCREF", "MUT", "NOP", "UNREACHABLE", 
                      "DROP", "BLOCK", "LOOP", "END", "BR", "BR_IF", "BR_TABLE", 
                      "RETURN", "IF", "THEN", "ELSE", "SELECT", "CALL", 
                      "CALL_INDIRECT", "LOCAL_GET", "LOCAL_SET", "LOCAL_TEE", 
                      "GLOBAL_GET", "GLOBAL_SET", "LOAD", "STORE", "OFFSET_EQ_NAT", 
                      "ALIGN_EQ_NAT", "UNARY", "BINARY", "TEST", "COMPARE", 
                      "CONVERT", "MEMORY_SIZE", "MEMORY_GROW", "TYPE", "FUNC", 
                      "START", "PARAM", "RESULT", "LOCAL", "GLOBAL", "TABLE", 
                      "MEMORY", "ELEM", "DATA", "OFFSET", "IMPORT", "EXPORT", 
                      "MODULE", "BIN", "QUOTE", "SCRIPT", "REGISTER", "INVOKE", 
                      "GET", "ASSERT_MALFORMED", "ASSERT_INVALID", "ASSERT_UNLINKABLE", 
                      "ASSERT_RETURN", "ASSERT_RETURN_CANONICAL_NAN", "ASSERT_RETURN_ARITHMETIC_NAN", 
                      "ASSERT_TRAP", "ASSERT_EXHAUSTION", "INPUT", "OUTPUT", 
                      "VAR", "SPACE", "COMMENT" ];

var ruleNames =  [ "value", "name", "value_type", "elem_type", "global_type", 
                   "def_type", "func_type", "table_type", "memory_type", 
                   "type_use", "literal", "var", "bind_var", "instr", "plain_instr", 
                   "call_instr", "call_instr_params", "call_instr_instr", 
                   "call_instr_params_instr", "call_instr_results_instr", 
                   "block_instr", "block_type", "block", "expr", "expr1", 
                   "call_expr_type", "call_expr_params", "call_expr_results", 
                   "if_block", "instr_list", "const_expr", "func", "func_fields", 
                   "func_fields_import", "func_fields_import_result", "func_fields_body", 
                   "func_result_body", "func_body", "offset", "elem", "table", 
                   "table_fields", "data", "memory", "memory_fields", "sglobal", 
                   "global_fields", "import_desc", "simport", "inline_import", 
                   "export_desc", "export", "inline_export", "type_", "type_def", 
                   "start", "module_field", "module_", "script_module", 
                   "action", "assertion", "cmd", "meta", "wconst", "const_list", 
                   "script", "module" ];

function WatParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

WatParser.prototype = Object.create(antlr4.Parser.prototype);
WatParser.prototype.constructor = WatParser;

Object.defineProperty(WatParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

WatParser.EOF = antlr4.Token.EOF;
WatParser.LPAR = 1;
WatParser.RPAR = 2;
WatParser.NAT = 3;
WatParser.INT = 4;
WatParser.FLOAT = 5;
WatParser.STRING = 6;
WatParser.VALUE_TYPE = 7;
WatParser.CONST = 8;
WatParser.FUNCREF = 9;
WatParser.MUT = 10;
WatParser.NOP = 11;
WatParser.UNREACHABLE = 12;
WatParser.DROP = 13;
WatParser.BLOCK = 14;
WatParser.LOOP = 15;
WatParser.END = 16;
WatParser.BR = 17;
WatParser.BR_IF = 18;
WatParser.BR_TABLE = 19;
WatParser.RETURN = 20;
WatParser.IF = 21;
WatParser.THEN = 22;
WatParser.ELSE = 23;
WatParser.SELECT = 24;
WatParser.CALL = 25;
WatParser.CALL_INDIRECT = 26;
WatParser.LOCAL_GET = 27;
WatParser.LOCAL_SET = 28;
WatParser.LOCAL_TEE = 29;
WatParser.GLOBAL_GET = 30;
WatParser.GLOBAL_SET = 31;
WatParser.LOAD = 32;
WatParser.STORE = 33;
WatParser.OFFSET_EQ_NAT = 34;
WatParser.ALIGN_EQ_NAT = 35;
WatParser.UNARY = 36;
WatParser.BINARY = 37;
WatParser.TEST = 38;
WatParser.COMPARE = 39;
WatParser.CONVERT = 40;
WatParser.MEMORY_SIZE = 41;
WatParser.MEMORY_GROW = 42;
WatParser.TYPE = 43;
WatParser.FUNC = 44;
WatParser.START = 45;
WatParser.PARAM = 46;
WatParser.RESULT = 47;
WatParser.LOCAL = 48;
WatParser.GLOBAL = 49;
WatParser.TABLE = 50;
WatParser.MEMORY = 51;
WatParser.ELEM = 52;
WatParser.DATA = 53;
WatParser.OFFSET = 54;
WatParser.IMPORT = 55;
WatParser.EXPORT = 56;
WatParser.MODULE = 57;
WatParser.BIN = 58;
WatParser.QUOTE = 59;
WatParser.SCRIPT = 60;
WatParser.REGISTER = 61;
WatParser.INVOKE = 62;
WatParser.GET = 63;
WatParser.ASSERT_MALFORMED = 64;
WatParser.ASSERT_INVALID = 65;
WatParser.ASSERT_UNLINKABLE = 66;
WatParser.ASSERT_RETURN = 67;
WatParser.ASSERT_RETURN_CANONICAL_NAN = 68;
WatParser.ASSERT_RETURN_ARITHMETIC_NAN = 69;
WatParser.ASSERT_TRAP = 70;
WatParser.ASSERT_EXHAUSTION = 71;
WatParser.INPUT = 72;
WatParser.OUTPUT = 73;
WatParser.VAR = 74;
WatParser.SPACE = 75;
WatParser.COMMENT = 76;

WatParser.RULE_value = 0;
WatParser.RULE_name = 1;
WatParser.RULE_value_type = 2;
WatParser.RULE_elem_type = 3;
WatParser.RULE_global_type = 4;
WatParser.RULE_def_type = 5;
WatParser.RULE_func_type = 6;
WatParser.RULE_table_type = 7;
WatParser.RULE_memory_type = 8;
WatParser.RULE_type_use = 9;
WatParser.RULE_literal = 10;
WatParser.RULE_var = 11;
WatParser.RULE_bind_var = 12;
WatParser.RULE_instr = 13;
WatParser.RULE_plain_instr = 14;
WatParser.RULE_call_instr = 15;
WatParser.RULE_call_instr_params = 16;
WatParser.RULE_call_instr_instr = 17;
WatParser.RULE_call_instr_params_instr = 18;
WatParser.RULE_call_instr_results_instr = 19;
WatParser.RULE_block_instr = 20;
WatParser.RULE_block_type = 21;
WatParser.RULE_block = 22;
WatParser.RULE_expr = 23;
WatParser.RULE_expr1 = 24;
WatParser.RULE_call_expr_type = 25;
WatParser.RULE_call_expr_params = 26;
WatParser.RULE_call_expr_results = 27;
WatParser.RULE_if_block = 28;
WatParser.RULE_instr_list = 29;
WatParser.RULE_const_expr = 30;
WatParser.RULE_func = 31;
WatParser.RULE_func_fields = 32;
WatParser.RULE_func_fields_import = 33;
WatParser.RULE_func_fields_import_result = 34;
WatParser.RULE_func_fields_body = 35;
WatParser.RULE_func_result_body = 36;
WatParser.RULE_func_body = 37;
WatParser.RULE_offset = 38;
WatParser.RULE_elem = 39;
WatParser.RULE_table = 40;
WatParser.RULE_table_fields = 41;
WatParser.RULE_data = 42;
WatParser.RULE_memory = 43;
WatParser.RULE_memory_fields = 44;
WatParser.RULE_sglobal = 45;
WatParser.RULE_global_fields = 46;
WatParser.RULE_import_desc = 47;
WatParser.RULE_simport = 48;
WatParser.RULE_inline_import = 49;
WatParser.RULE_export_desc = 50;
WatParser.RULE_export = 51;
WatParser.RULE_inline_export = 52;
WatParser.RULE_type_ = 53;
WatParser.RULE_type_def = 54;
WatParser.RULE_start = 55;
WatParser.RULE_module_field = 56;
WatParser.RULE_module_ = 57;
WatParser.RULE_script_module = 58;
WatParser.RULE_action = 59;
WatParser.RULE_assertion = 60;
WatParser.RULE_cmd = 61;
WatParser.RULE_meta = 62;
WatParser.RULE_wconst = 63;
WatParser.RULE_const_list = 64;
WatParser.RULE_script = 65;
WatParser.RULE_module = 66;


function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.INT = function() {
    return this.getToken(WatParser.INT, 0);
};

ValueContext.prototype.FLOAT = function() {
    return this.getToken(WatParser.FLOAT, 0);
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitValue(this);
	}
};




WatParser.ValueContext = ValueContext;

WatParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, WatParser.RULE_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 134;
        _la = this._input.LA(1);
        if(!(_la===WatParser.INT || _la===WatParser.FLOAT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_name;
    return this;
}

NameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameContext.prototype.constructor = NameContext;

NameContext.prototype.STRING = function() {
    return this.getToken(WatParser.STRING, 0);
};

NameContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterName(this);
	}
};

NameContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitName(this);
	}
};




WatParser.NameContext = NameContext;

WatParser.prototype.name = function() {

    var localctx = new NameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, WatParser.RULE_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 136;
        this.match(WatParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Value_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_value_type;
    return this;
}

Value_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_typeContext.prototype.constructor = Value_typeContext;

Value_typeContext.prototype.VALUE_TYPE = function() {
    return this.getToken(WatParser.VALUE_TYPE, 0);
};

Value_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterValue_type(this);
	}
};

Value_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitValue_type(this);
	}
};




WatParser.Value_typeContext = Value_typeContext;

WatParser.prototype.value_type = function() {

    var localctx = new Value_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, WatParser.RULE_value_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 138;
        this.match(WatParser.VALUE_TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Elem_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_elem_type;
    return this;
}

Elem_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Elem_typeContext.prototype.constructor = Elem_typeContext;

Elem_typeContext.prototype.FUNCREF = function() {
    return this.getToken(WatParser.FUNCREF, 0);
};

Elem_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterElem_type(this);
	}
};

Elem_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitElem_type(this);
	}
};




WatParser.Elem_typeContext = Elem_typeContext;

WatParser.prototype.elem_type = function() {

    var localctx = new Elem_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, WatParser.RULE_elem_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 140;
        this.match(WatParser.FUNCREF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Global_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_global_type;
    return this;
}

Global_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_typeContext.prototype.constructor = Global_typeContext;

Global_typeContext.prototype.value_type = function() {
    return this.getTypedRuleContext(Value_typeContext,0);
};

Global_typeContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Global_typeContext.prototype.MUT = function() {
    return this.getToken(WatParser.MUT, 0);
};

Global_typeContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Global_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterGlobal_type(this);
	}
};

Global_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitGlobal_type(this);
	}
};




WatParser.Global_typeContext = Global_typeContext;

WatParser.prototype.global_type = function() {

    var localctx = new Global_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, WatParser.RULE_global_type);
    try {
        this.state = 148;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WatParser.VALUE_TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 142;
            this.value_type();
            break;
        case WatParser.LPAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 143;
            this.match(WatParser.LPAR);
            this.state = 144;
            this.match(WatParser.MUT);
            this.state = 145;
            this.value_type();
            this.state = 146;
            this.match(WatParser.RPAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Def_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_def_type;
    return this;
}

Def_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Def_typeContext.prototype.constructor = Def_typeContext;

Def_typeContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Def_typeContext.prototype.FUNC = function() {
    return this.getToken(WatParser.FUNC, 0);
};

Def_typeContext.prototype.func_type = function() {
    return this.getTypedRuleContext(Func_typeContext,0);
};

Def_typeContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Def_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterDef_type(this);
	}
};

Def_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitDef_type(this);
	}
};




WatParser.Def_typeContext = Def_typeContext;

WatParser.prototype.def_type = function() {

    var localctx = new Def_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, WatParser.RULE_def_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 150;
        this.match(WatParser.LPAR);
        this.state = 151;
        this.match(WatParser.FUNC);
        this.state = 152;
        this.func_type();
        this.state = 153;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Func_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_func_type;
    return this;
}

Func_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_typeContext.prototype.constructor = Func_typeContext;

Func_typeContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Func_typeContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Func_typeContext.prototype.RESULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RESULT);
    } else {
        return this.getToken(WatParser.RESULT, i);
    }
};


Func_typeContext.prototype.PARAM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.PARAM);
    } else {
        return this.getToken(WatParser.PARAM, i);
    }
};


Func_typeContext.prototype.bind_var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bind_varContext);
    } else {
        return this.getTypedRuleContext(Bind_varContext,i);
    }
};

Func_typeContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Func_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterFunc_type(this);
	}
};

Func_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitFunc_type(this);
	}
};




WatParser.Func_typeContext = Func_typeContext;

WatParser.prototype.func_type = function() {

    var localctx = new Func_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, WatParser.RULE_func_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 179;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WatParser.LPAR) {
            this.state = 155;
            this.match(WatParser.LPAR);
            this.state = 174;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
            switch(la_) {
            case 1:
                this.state = 156;
                this.match(WatParser.RESULT);
                this.state = 160;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===WatParser.VALUE_TYPE) {
                    this.state = 157;
                    this.value_type();
                    this.state = 162;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 2:
                this.state = 163;
                this.match(WatParser.PARAM);
                this.state = 167;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===WatParser.VALUE_TYPE) {
                    this.state = 164;
                    this.value_type();
                    this.state = 169;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 3:
                this.state = 170;
                this.match(WatParser.PARAM);
                this.state = 171;
                this.bind_var();
                this.state = 172;
                this.value_type();
                break;

            }
            this.state = 176;
            this.match(WatParser.RPAR);
            this.state = 181;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Table_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_table_type;
    return this;
}

Table_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_typeContext.prototype.constructor = Table_typeContext;

Table_typeContext.prototype.NAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.NAT);
    } else {
        return this.getToken(WatParser.NAT, i);
    }
};


Table_typeContext.prototype.elem_type = function() {
    return this.getTypedRuleContext(Elem_typeContext,0);
};

Table_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterTable_type(this);
	}
};

Table_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitTable_type(this);
	}
};




WatParser.Table_typeContext = Table_typeContext;

WatParser.prototype.table_type = function() {

    var localctx = new Table_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, WatParser.RULE_table_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 182;
        this.match(WatParser.NAT);
        this.state = 184;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.NAT) {
            this.state = 183;
            this.match(WatParser.NAT);
        }

        this.state = 186;
        this.elem_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Memory_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_memory_type;
    return this;
}

Memory_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Memory_typeContext.prototype.constructor = Memory_typeContext;

Memory_typeContext.prototype.NAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.NAT);
    } else {
        return this.getToken(WatParser.NAT, i);
    }
};


Memory_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterMemory_type(this);
	}
};

Memory_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitMemory_type(this);
	}
};




WatParser.Memory_typeContext = Memory_typeContext;

WatParser.prototype.memory_type = function() {

    var localctx = new Memory_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, WatParser.RULE_memory_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 188;
        this.match(WatParser.NAT);
        this.state = 190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.NAT) {
            this.state = 189;
            this.match(WatParser.NAT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_useContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_type_use;
    return this;
}

Type_useContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_useContext.prototype.constructor = Type_useContext;

Type_useContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Type_useContext.prototype.TYPE = function() {
    return this.getToken(WatParser.TYPE, 0);
};

Type_useContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

Type_useContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Type_useContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterType_use(this);
	}
};

Type_useContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitType_use(this);
	}
};




WatParser.Type_useContext = Type_useContext;

WatParser.prototype.type_use = function() {

    var localctx = new Type_useContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, WatParser.RULE_type_use);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 192;
        this.match(WatParser.LPAR);
        this.state = 193;
        this.match(WatParser.TYPE);
        this.state = 194;
        this.var();
        this.state = 195;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NAT = function() {
    return this.getToken(WatParser.NAT, 0);
};

LiteralContext.prototype.INT = function() {
    return this.getToken(WatParser.INT, 0);
};

LiteralContext.prototype.FLOAT = function() {
    return this.getToken(WatParser.FLOAT, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitLiteral(this);
	}
};




WatParser.LiteralContext = LiteralContext;

WatParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, WatParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 197;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WatParser.NAT) | (1 << WatParser.INT) | (1 << WatParser.FLOAT))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_var;
    return this;
}

VarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarContext.prototype.constructor = VarContext;

VarContext.prototype.NAT = function() {
    return this.getToken(WatParser.NAT, 0);
};

VarContext.prototype.VAR = function() {
    return this.getToken(WatParser.VAR, 0);
};

VarContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterVar(this);
	}
};

VarContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitVar(this);
	}
};




WatParser.VarContext = VarContext;

WatParser.prototype.var = function() {

    var localctx = new VarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, WatParser.RULE_var);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 199;
        _la = this._input.LA(1);
        if(!(_la===WatParser.NAT || _la===WatParser.VAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Bind_varContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_bind_var;
    return this;
}

Bind_varContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bind_varContext.prototype.constructor = Bind_varContext;

Bind_varContext.prototype.VAR = function() {
    return this.getToken(WatParser.VAR, 0);
};

Bind_varContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterBind_var(this);
	}
};

Bind_varContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitBind_var(this);
	}
};




WatParser.Bind_varContext = Bind_varContext;

WatParser.prototype.bind_var = function() {

    var localctx = new Bind_varContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, WatParser.RULE_bind_var);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 201;
        this.match(WatParser.VAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_instr;
    return this;
}

InstrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstrContext.prototype.constructor = InstrContext;

InstrContext.prototype.plain_instr = function() {
    return this.getTypedRuleContext(Plain_instrContext,0);
};

InstrContext.prototype.call_instr_instr = function() {
    return this.getTypedRuleContext(Call_instr_instrContext,0);
};

InstrContext.prototype.block_instr = function() {
    return this.getTypedRuleContext(Block_instrContext,0);
};

InstrContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

InstrContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterInstr(this);
	}
};

InstrContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitInstr(this);
	}
};




WatParser.InstrContext = InstrContext;

WatParser.prototype.instr = function() {

    var localctx = new InstrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, WatParser.RULE_instr);
    try {
        this.state = 207;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WatParser.CONST:
        case WatParser.NOP:
        case WatParser.UNREACHABLE:
        case WatParser.DROP:
        case WatParser.BR:
        case WatParser.BR_IF:
        case WatParser.BR_TABLE:
        case WatParser.RETURN:
        case WatParser.SELECT:
        case WatParser.CALL:
        case WatParser.LOCAL_GET:
        case WatParser.LOCAL_SET:
        case WatParser.LOCAL_TEE:
        case WatParser.GLOBAL_GET:
        case WatParser.GLOBAL_SET:
        case WatParser.LOAD:
        case WatParser.STORE:
        case WatParser.UNARY:
        case WatParser.BINARY:
        case WatParser.TEST:
        case WatParser.COMPARE:
        case WatParser.CONVERT:
        case WatParser.MEMORY_SIZE:
        case WatParser.MEMORY_GROW:
            this.enterOuterAlt(localctx, 1);
            this.state = 203;
            this.plain_instr();
            break;
        case WatParser.CALL_INDIRECT:
            this.enterOuterAlt(localctx, 2);
            this.state = 204;
            this.call_instr_instr();
            break;
        case WatParser.BLOCK:
        case WatParser.LOOP:
        case WatParser.IF:
            this.enterOuterAlt(localctx, 3);
            this.state = 205;
            this.block_instr();
            break;
        case WatParser.LPAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 206;
            this.expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Plain_instrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_plain_instr;
    return this;
}

Plain_instrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Plain_instrContext.prototype.constructor = Plain_instrContext;

Plain_instrContext.prototype.UNREACHABLE = function() {
    return this.getToken(WatParser.UNREACHABLE, 0);
};

Plain_instrContext.prototype.NOP = function() {
    return this.getToken(WatParser.NOP, 0);
};

Plain_instrContext.prototype.DROP = function() {
    return this.getToken(WatParser.DROP, 0);
};

Plain_instrContext.prototype.SELECT = function() {
    return this.getToken(WatParser.SELECT, 0);
};

Plain_instrContext.prototype.BR = function() {
    return this.getToken(WatParser.BR, 0);
};

Plain_instrContext.prototype.var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarContext);
    } else {
        return this.getTypedRuleContext(VarContext,i);
    }
};

Plain_instrContext.prototype.BR_IF = function() {
    return this.getToken(WatParser.BR_IF, 0);
};

Plain_instrContext.prototype.BR_TABLE = function() {
    return this.getToken(WatParser.BR_TABLE, 0);
};

Plain_instrContext.prototype.RETURN = function() {
    return this.getToken(WatParser.RETURN, 0);
};

Plain_instrContext.prototype.CALL = function() {
    return this.getToken(WatParser.CALL, 0);
};

Plain_instrContext.prototype.LOCAL_GET = function() {
    return this.getToken(WatParser.LOCAL_GET, 0);
};

Plain_instrContext.prototype.LOCAL_SET = function() {
    return this.getToken(WatParser.LOCAL_SET, 0);
};

Plain_instrContext.prototype.LOCAL_TEE = function() {
    return this.getToken(WatParser.LOCAL_TEE, 0);
};

Plain_instrContext.prototype.GLOBAL_GET = function() {
    return this.getToken(WatParser.GLOBAL_GET, 0);
};

Plain_instrContext.prototype.GLOBAL_SET = function() {
    return this.getToken(WatParser.GLOBAL_SET, 0);
};

Plain_instrContext.prototype.LOAD = function() {
    return this.getToken(WatParser.LOAD, 0);
};

Plain_instrContext.prototype.OFFSET_EQ_NAT = function() {
    return this.getToken(WatParser.OFFSET_EQ_NAT, 0);
};

Plain_instrContext.prototype.ALIGN_EQ_NAT = function() {
    return this.getToken(WatParser.ALIGN_EQ_NAT, 0);
};

Plain_instrContext.prototype.STORE = function() {
    return this.getToken(WatParser.STORE, 0);
};

Plain_instrContext.prototype.MEMORY_SIZE = function() {
    return this.getToken(WatParser.MEMORY_SIZE, 0);
};

Plain_instrContext.prototype.MEMORY_GROW = function() {
    return this.getToken(WatParser.MEMORY_GROW, 0);
};

Plain_instrContext.prototype.CONST = function() {
    return this.getToken(WatParser.CONST, 0);
};

Plain_instrContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

Plain_instrContext.prototype.TEST = function() {
    return this.getToken(WatParser.TEST, 0);
};

Plain_instrContext.prototype.COMPARE = function() {
    return this.getToken(WatParser.COMPARE, 0);
};

Plain_instrContext.prototype.UNARY = function() {
    return this.getToken(WatParser.UNARY, 0);
};

Plain_instrContext.prototype.BINARY = function() {
    return this.getToken(WatParser.BINARY, 0);
};

Plain_instrContext.prototype.CONVERT = function() {
    return this.getToken(WatParser.CONVERT, 0);
};

Plain_instrContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterPlain_instr(this);
	}
};

Plain_instrContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitPlain_instr(this);
	}
};




WatParser.Plain_instrContext = Plain_instrContext;

WatParser.prototype.plain_instr = function() {

    var localctx = new Plain_instrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, WatParser.RULE_plain_instr);
    var _la = 0; // Token type
    try {
        this.state = 259;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WatParser.UNREACHABLE:
            this.enterOuterAlt(localctx, 1);
            this.state = 209;
            this.match(WatParser.UNREACHABLE);
            break;
        case WatParser.NOP:
            this.enterOuterAlt(localctx, 2);
            this.state = 210;
            this.match(WatParser.NOP);
            break;
        case WatParser.DROP:
            this.enterOuterAlt(localctx, 3);
            this.state = 211;
            this.match(WatParser.DROP);
            break;
        case WatParser.SELECT:
            this.enterOuterAlt(localctx, 4);
            this.state = 212;
            this.match(WatParser.SELECT);
            break;
        case WatParser.BR:
            this.enterOuterAlt(localctx, 5);
            this.state = 213;
            this.match(WatParser.BR);
            this.state = 214;
            this.var();
            break;
        case WatParser.BR_IF:
            this.enterOuterAlt(localctx, 6);
            this.state = 215;
            this.match(WatParser.BR_IF);
            this.state = 216;
            this.var();
            break;
        case WatParser.BR_TABLE:
            this.enterOuterAlt(localctx, 7);
            this.state = 217;
            this.match(WatParser.BR_TABLE);
            this.state = 219; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 218;
                this.var();
                this.state = 221; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===WatParser.NAT || _la===WatParser.VAR);
            break;
        case WatParser.RETURN:
            this.enterOuterAlt(localctx, 8);
            this.state = 223;
            this.match(WatParser.RETURN);
            break;
        case WatParser.CALL:
            this.enterOuterAlt(localctx, 9);
            this.state = 224;
            this.match(WatParser.CALL);
            this.state = 225;
            this.var();
            break;
        case WatParser.LOCAL_GET:
            this.enterOuterAlt(localctx, 10);
            this.state = 226;
            this.match(WatParser.LOCAL_GET);
            this.state = 227;
            this.var();
            break;
        case WatParser.LOCAL_SET:
            this.enterOuterAlt(localctx, 11);
            this.state = 228;
            this.match(WatParser.LOCAL_SET);
            this.state = 229;
            this.var();
            break;
        case WatParser.LOCAL_TEE:
            this.enterOuterAlt(localctx, 12);
            this.state = 230;
            this.match(WatParser.LOCAL_TEE);
            this.state = 231;
            this.var();
            break;
        case WatParser.GLOBAL_GET:
            this.enterOuterAlt(localctx, 13);
            this.state = 232;
            this.match(WatParser.GLOBAL_GET);
            this.state = 233;
            this.var();
            break;
        case WatParser.GLOBAL_SET:
            this.enterOuterAlt(localctx, 14);
            this.state = 234;
            this.match(WatParser.GLOBAL_SET);
            this.state = 235;
            this.var();
            break;
        case WatParser.LOAD:
            this.enterOuterAlt(localctx, 15);
            this.state = 236;
            this.match(WatParser.LOAD);
            this.state = 238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.OFFSET_EQ_NAT) {
                this.state = 237;
                this.match(WatParser.OFFSET_EQ_NAT);
            }

            this.state = 241;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.ALIGN_EQ_NAT) {
                this.state = 240;
                this.match(WatParser.ALIGN_EQ_NAT);
            }

            break;
        case WatParser.STORE:
            this.enterOuterAlt(localctx, 16);
            this.state = 243;
            this.match(WatParser.STORE);
            this.state = 245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.OFFSET_EQ_NAT) {
                this.state = 244;
                this.match(WatParser.OFFSET_EQ_NAT);
            }

            this.state = 248;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.ALIGN_EQ_NAT) {
                this.state = 247;
                this.match(WatParser.ALIGN_EQ_NAT);
            }

            break;
        case WatParser.MEMORY_SIZE:
            this.enterOuterAlt(localctx, 17);
            this.state = 250;
            this.match(WatParser.MEMORY_SIZE);
            break;
        case WatParser.MEMORY_GROW:
            this.enterOuterAlt(localctx, 18);
            this.state = 251;
            this.match(WatParser.MEMORY_GROW);
            break;
        case WatParser.CONST:
            this.enterOuterAlt(localctx, 19);
            this.state = 252;
            this.match(WatParser.CONST);
            this.state = 253;
            this.literal();
            break;
        case WatParser.TEST:
            this.enterOuterAlt(localctx, 20);
            this.state = 254;
            this.match(WatParser.TEST);
            break;
        case WatParser.COMPARE:
            this.enterOuterAlt(localctx, 21);
            this.state = 255;
            this.match(WatParser.COMPARE);
            break;
        case WatParser.UNARY:
            this.enterOuterAlt(localctx, 22);
            this.state = 256;
            this.match(WatParser.UNARY);
            break;
        case WatParser.BINARY:
            this.enterOuterAlt(localctx, 23);
            this.state = 257;
            this.match(WatParser.BINARY);
            break;
        case WatParser.CONVERT:
            this.enterOuterAlt(localctx, 24);
            this.state = 258;
            this.match(WatParser.CONVERT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_instrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_call_instr;
    return this;
}

Call_instrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_instrContext.prototype.constructor = Call_instrContext;

Call_instrContext.prototype.CALL_INDIRECT = function() {
    return this.getToken(WatParser.CALL_INDIRECT, 0);
};

Call_instrContext.prototype.call_instr_params = function() {
    return this.getTypedRuleContext(Call_instr_paramsContext,0);
};

Call_instrContext.prototype.type_use = function() {
    return this.getTypedRuleContext(Type_useContext,0);
};

Call_instrContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterCall_instr(this);
	}
};

Call_instrContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitCall_instr(this);
	}
};




WatParser.Call_instrContext = Call_instrContext;

WatParser.prototype.call_instr = function() {

    var localctx = new Call_instrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, WatParser.RULE_call_instr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 261;
        this.match(WatParser.CALL_INDIRECT);
        this.state = 263;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        if(la_===1) {
            this.state = 262;
            this.type_use();

        }
        this.state = 265;
        this.call_instr_params();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_instr_paramsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_call_instr_params;
    return this;
}

Call_instr_paramsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_instr_paramsContext.prototype.constructor = Call_instr_paramsContext;

Call_instr_paramsContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Call_instr_paramsContext.prototype.PARAM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.PARAM);
    } else {
        return this.getToken(WatParser.PARAM, i);
    }
};


Call_instr_paramsContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Call_instr_paramsContext.prototype.RESULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RESULT);
    } else {
        return this.getToken(WatParser.RESULT, i);
    }
};


Call_instr_paramsContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Call_instr_paramsContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterCall_instr_params(this);
	}
};

Call_instr_paramsContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitCall_instr_params(this);
	}
};




WatParser.Call_instr_paramsContext = Call_instr_paramsContext;

WatParser.prototype.call_instr_params = function() {

    var localctx = new Call_instr_paramsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, WatParser.RULE_call_instr_params);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 267;
                this.match(WatParser.LPAR);
                this.state = 268;
                this.match(WatParser.PARAM);
                this.state = 272;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===WatParser.VALUE_TYPE) {
                    this.state = 269;
                    this.value_type();
                    this.state = 274;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 275;
                this.match(WatParser.RPAR); 
            }
            this.state = 280;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
        }

        this.state = 292;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WatParser.LPAR) {
            this.state = 281;
            this.match(WatParser.LPAR);
            this.state = 282;
            this.match(WatParser.RESULT);
            this.state = 286;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.VALUE_TYPE) {
                this.state = 283;
                this.value_type();
                this.state = 288;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 289;
            this.match(WatParser.RPAR);
            this.state = 294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_instr_instrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_call_instr_instr;
    return this;
}

Call_instr_instrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_instr_instrContext.prototype.constructor = Call_instr_instrContext;

Call_instr_instrContext.prototype.CALL_INDIRECT = function() {
    return this.getToken(WatParser.CALL_INDIRECT, 0);
};

Call_instr_instrContext.prototype.call_instr_params_instr = function() {
    return this.getTypedRuleContext(Call_instr_params_instrContext,0);
};

Call_instr_instrContext.prototype.type_use = function() {
    return this.getTypedRuleContext(Type_useContext,0);
};

Call_instr_instrContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterCall_instr_instr(this);
	}
};

Call_instr_instrContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitCall_instr_instr(this);
	}
};




WatParser.Call_instr_instrContext = Call_instr_instrContext;

WatParser.prototype.call_instr_instr = function() {

    var localctx = new Call_instr_instrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, WatParser.RULE_call_instr_instr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 295;
        this.match(WatParser.CALL_INDIRECT);
        this.state = 297;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 296;
            this.type_use();

        }
        this.state = 299;
        this.call_instr_params_instr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_instr_params_instrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_call_instr_params_instr;
    return this;
}

Call_instr_params_instrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_instr_params_instrContext.prototype.constructor = Call_instr_params_instrContext;

Call_instr_params_instrContext.prototype.call_instr_results_instr = function() {
    return this.getTypedRuleContext(Call_instr_results_instrContext,0);
};

Call_instr_params_instrContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Call_instr_params_instrContext.prototype.PARAM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.PARAM);
    } else {
        return this.getToken(WatParser.PARAM, i);
    }
};


Call_instr_params_instrContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Call_instr_params_instrContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Call_instr_params_instrContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterCall_instr_params_instr(this);
	}
};

Call_instr_params_instrContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitCall_instr_params_instr(this);
	}
};




WatParser.Call_instr_params_instrContext = Call_instr_params_instrContext;

WatParser.prototype.call_instr_params_instr = function() {

    var localctx = new Call_instr_params_instrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, WatParser.RULE_call_instr_params_instr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 312;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 301;
                this.match(WatParser.LPAR);
                this.state = 302;
                this.match(WatParser.PARAM);
                this.state = 306;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===WatParser.VALUE_TYPE) {
                    this.state = 303;
                    this.value_type();
                    this.state = 308;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 309;
                this.match(WatParser.RPAR); 
            }
            this.state = 314;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

        this.state = 315;
        this.call_instr_results_instr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_instr_results_instrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_call_instr_results_instr;
    return this;
}

Call_instr_results_instrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_instr_results_instrContext.prototype.constructor = Call_instr_results_instrContext;

Call_instr_results_instrContext.prototype.instr = function() {
    return this.getTypedRuleContext(InstrContext,0);
};

Call_instr_results_instrContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Call_instr_results_instrContext.prototype.RESULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RESULT);
    } else {
        return this.getToken(WatParser.RESULT, i);
    }
};


Call_instr_results_instrContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Call_instr_results_instrContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Call_instr_results_instrContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterCall_instr_results_instr(this);
	}
};

Call_instr_results_instrContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitCall_instr_results_instr(this);
	}
};




WatParser.Call_instr_results_instrContext = Call_instr_results_instrContext;

WatParser.prototype.call_instr_results_instr = function() {

    var localctx = new Call_instr_results_instrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, WatParser.RULE_call_instr_results_instr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 328;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 317;
                this.match(WatParser.LPAR);
                this.state = 318;
                this.match(WatParser.RESULT);
                this.state = 322;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===WatParser.VALUE_TYPE) {
                    this.state = 319;
                    this.value_type();
                    this.state = 324;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 325;
                this.match(WatParser.RPAR); 
            }
            this.state = 330;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
        }

        this.state = 331;
        this.instr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_instrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_block_instr;
    return this;
}

Block_instrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_instrContext.prototype.constructor = Block_instrContext;

Block_instrContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Block_instrContext.prototype.END = function() {
    return this.getToken(WatParser.END, 0);
};

Block_instrContext.prototype.BLOCK = function() {
    return this.getToken(WatParser.BLOCK, 0);
};

Block_instrContext.prototype.LOOP = function() {
    return this.getToken(WatParser.LOOP, 0);
};

Block_instrContext.prototype.bind_var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bind_varContext);
    } else {
        return this.getTypedRuleContext(Bind_varContext,i);
    }
};

Block_instrContext.prototype.IF = function() {
    return this.getToken(WatParser.IF, 0);
};

Block_instrContext.prototype.ELSE = function() {
    return this.getToken(WatParser.ELSE, 0);
};

Block_instrContext.prototype.instr_list = function() {
    return this.getTypedRuleContext(Instr_listContext,0);
};

Block_instrContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterBlock_instr(this);
	}
};

Block_instrContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitBlock_instr(this);
	}
};




WatParser.Block_instrContext = Block_instrContext;

WatParser.prototype.block_instr = function() {

    var localctx = new Block_instrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, WatParser.RULE_block_instr);
    var _la = 0; // Token type
    try {
        this.state = 358;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WatParser.BLOCK:
        case WatParser.LOOP:
            this.enterOuterAlt(localctx, 1);
            this.state = 333;
            _la = this._input.LA(1);
            if(!(_la===WatParser.BLOCK || _la===WatParser.LOOP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 334;
                this.bind_var();
            }

            this.state = 337;
            this.block();
            this.state = 338;
            this.match(WatParser.END);
            this.state = 340;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 339;
                this.bind_var();
            }

            break;
        case WatParser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 342;
            this.match(WatParser.IF);
            this.state = 344;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 343;
                this.bind_var();
            }

            this.state = 346;
            this.block();
            this.state = 352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.ELSE) {
                this.state = 347;
                this.match(WatParser.ELSE);
                this.state = 349;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===WatParser.VAR) {
                    this.state = 348;
                    this.bind_var();
                }

                this.state = 351;
                this.instr_list();
            }

            this.state = 354;
            this.match(WatParser.END);
            this.state = 356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 355;
                this.bind_var();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_block_type;
    return this;
}

Block_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_typeContext.prototype.constructor = Block_typeContext;

Block_typeContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Block_typeContext.prototype.RESULT = function() {
    return this.getToken(WatParser.RESULT, 0);
};

Block_typeContext.prototype.value_type = function() {
    return this.getTypedRuleContext(Value_typeContext,0);
};

Block_typeContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Block_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterBlock_type(this);
	}
};

Block_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitBlock_type(this);
	}
};




WatParser.Block_typeContext = Block_typeContext;

WatParser.prototype.block_type = function() {

    var localctx = new Block_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, WatParser.RULE_block_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        this.match(WatParser.LPAR);
        this.state = 361;
        this.match(WatParser.RESULT);
        this.state = 362;
        this.value_type();
        this.state = 363;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.instr_list = function() {
    return this.getTypedRuleContext(Instr_listContext,0);
};

BlockContext.prototype.block_type = function() {
    return this.getTypedRuleContext(Block_typeContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitBlock(this);
	}
};




WatParser.BlockContext = BlockContext;

WatParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, WatParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 365;
            this.block_type();

        }
        this.state = 368;
        this.instr_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

ExprContext.prototype.expr1 = function() {
    return this.getTypedRuleContext(Expr1Context,0);
};

ExprContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitExpr(this);
	}
};




WatParser.ExprContext = ExprContext;

WatParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, WatParser.RULE_expr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(WatParser.LPAR);
        this.state = 371;
        this.expr1();
        this.state = 372;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_expr1;
    return this;
}

Expr1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr1Context.prototype.constructor = Expr1Context;

Expr1Context.prototype.plain_instr = function() {
    return this.getTypedRuleContext(Plain_instrContext,0);
};

Expr1Context.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Expr1Context.prototype.CALL_INDIRECT = function() {
    return this.getToken(WatParser.CALL_INDIRECT, 0);
};

Expr1Context.prototype.call_expr_type = function() {
    return this.getTypedRuleContext(Call_expr_typeContext,0);
};

Expr1Context.prototype.BLOCK = function() {
    return this.getToken(WatParser.BLOCK, 0);
};

Expr1Context.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Expr1Context.prototype.bind_var = function() {
    return this.getTypedRuleContext(Bind_varContext,0);
};

Expr1Context.prototype.LOOP = function() {
    return this.getToken(WatParser.LOOP, 0);
};

Expr1Context.prototype.IF = function() {
    return this.getToken(WatParser.IF, 0);
};

Expr1Context.prototype.if_block = function() {
    return this.getTypedRuleContext(If_blockContext,0);
};

Expr1Context.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterExpr1(this);
	}
};

Expr1Context.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitExpr1(this);
	}
};




WatParser.Expr1Context = Expr1Context;

WatParser.prototype.expr1 = function() {

    var localctx = new Expr1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 48, WatParser.RULE_expr1);
    var _la = 0; // Token type
    try {
        this.state = 398;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WatParser.CONST:
        case WatParser.NOP:
        case WatParser.UNREACHABLE:
        case WatParser.DROP:
        case WatParser.BR:
        case WatParser.BR_IF:
        case WatParser.BR_TABLE:
        case WatParser.RETURN:
        case WatParser.SELECT:
        case WatParser.CALL:
        case WatParser.LOCAL_GET:
        case WatParser.LOCAL_SET:
        case WatParser.LOCAL_TEE:
        case WatParser.GLOBAL_GET:
        case WatParser.GLOBAL_SET:
        case WatParser.LOAD:
        case WatParser.STORE:
        case WatParser.UNARY:
        case WatParser.BINARY:
        case WatParser.TEST:
        case WatParser.COMPARE:
        case WatParser.CONVERT:
        case WatParser.MEMORY_SIZE:
        case WatParser.MEMORY_GROW:
            this.enterOuterAlt(localctx, 1);
            this.state = 374;
            this.plain_instr();
            this.state = 378;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.LPAR) {
                this.state = 375;
                this.expr();
                this.state = 380;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case WatParser.CALL_INDIRECT:
            this.enterOuterAlt(localctx, 2);
            this.state = 381;
            this.match(WatParser.CALL_INDIRECT);
            this.state = 382;
            this.call_expr_type();
            break;
        case WatParser.BLOCK:
            this.enterOuterAlt(localctx, 3);
            this.state = 383;
            this.match(WatParser.BLOCK);
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 384;
                this.bind_var();
            }

            this.state = 387;
            this.block();
            break;
        case WatParser.LOOP:
            this.enterOuterAlt(localctx, 4);
            this.state = 388;
            this.match(WatParser.LOOP);
            this.state = 390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 389;
                this.bind_var();
            }

            this.state = 392;
            this.block();
            break;
        case WatParser.IF:
            this.enterOuterAlt(localctx, 5);
            this.state = 393;
            this.match(WatParser.IF);
            this.state = 395;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 394;
                this.bind_var();
            }

            this.state = 397;
            this.if_block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_expr_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_call_expr_type;
    return this;
}

Call_expr_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_expr_typeContext.prototype.constructor = Call_expr_typeContext;

Call_expr_typeContext.prototype.call_expr_params = function() {
    return this.getTypedRuleContext(Call_expr_paramsContext,0);
};

Call_expr_typeContext.prototype.type_use = function() {
    return this.getTypedRuleContext(Type_useContext,0);
};

Call_expr_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterCall_expr_type(this);
	}
};

Call_expr_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitCall_expr_type(this);
	}
};




WatParser.Call_expr_typeContext = Call_expr_typeContext;

WatParser.prototype.call_expr_type = function() {

    var localctx = new Call_expr_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, WatParser.RULE_call_expr_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 401;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        if(la_===1) {
            this.state = 400;
            this.type_use();

        }
        this.state = 403;
        this.call_expr_params();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_expr_paramsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_call_expr_params;
    return this;
}

Call_expr_paramsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_expr_paramsContext.prototype.constructor = Call_expr_paramsContext;

Call_expr_paramsContext.prototype.call_expr_results = function() {
    return this.getTypedRuleContext(Call_expr_resultsContext,0);
};

Call_expr_paramsContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Call_expr_paramsContext.prototype.PARAM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.PARAM);
    } else {
        return this.getToken(WatParser.PARAM, i);
    }
};


Call_expr_paramsContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Call_expr_paramsContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Call_expr_paramsContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterCall_expr_params(this);
	}
};

Call_expr_paramsContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitCall_expr_params(this);
	}
};




WatParser.Call_expr_paramsContext = Call_expr_paramsContext;

WatParser.prototype.call_expr_params = function() {

    var localctx = new Call_expr_paramsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, WatParser.RULE_call_expr_params);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 405;
                this.match(WatParser.LPAR);
                this.state = 406;
                this.match(WatParser.PARAM);
                this.state = 410;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===WatParser.VALUE_TYPE) {
                    this.state = 407;
                    this.value_type();
                    this.state = 412;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 413;
                this.match(WatParser.RPAR); 
            }
            this.state = 418;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

        this.state = 419;
        this.call_expr_results();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_expr_resultsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_call_expr_results;
    return this;
}

Call_expr_resultsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_expr_resultsContext.prototype.constructor = Call_expr_resultsContext;

Call_expr_resultsContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Call_expr_resultsContext.prototype.RESULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RESULT);
    } else {
        return this.getToken(WatParser.RESULT, i);
    }
};


Call_expr_resultsContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Call_expr_resultsContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Call_expr_resultsContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Call_expr_resultsContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterCall_expr_results(this);
	}
};

Call_expr_resultsContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitCall_expr_results(this);
	}
};




WatParser.Call_expr_resultsContext = Call_expr_resultsContext;

WatParser.prototype.call_expr_results = function() {

    var localctx = new Call_expr_resultsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, WatParser.RULE_call_expr_results);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 421;
                this.match(WatParser.LPAR);
                this.state = 422;
                this.match(WatParser.RESULT);
                this.state = 426;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===WatParser.VALUE_TYPE) {
                    this.state = 423;
                    this.value_type();
                    this.state = 428;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 429;
                this.match(WatParser.RPAR); 
            }
            this.state = 434;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
        }

        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WatParser.LPAR) {
            this.state = 435;
            this.expr();
            this.state = 440;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_if_block;
    return this;
}

If_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_blockContext.prototype.constructor = If_blockContext;

If_blockContext.prototype.block_type = function() {
    return this.getTypedRuleContext(Block_typeContext,0);
};

If_blockContext.prototype.if_block = function() {
    return this.getTypedRuleContext(If_blockContext,0);
};

If_blockContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


If_blockContext.prototype.THEN = function() {
    return this.getToken(WatParser.THEN, 0);
};

If_blockContext.prototype.instr_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Instr_listContext);
    } else {
        return this.getTypedRuleContext(Instr_listContext,i);
    }
};

If_blockContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


If_blockContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

If_blockContext.prototype.ELSE = function() {
    return this.getToken(WatParser.ELSE, 0);
};

If_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterIf_block(this);
	}
};

If_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitIf_block(this);
	}
};




WatParser.If_blockContext = If_blockContext;

WatParser.prototype.if_block = function() {

    var localctx = new If_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, WatParser.RULE_if_block);
    var _la = 0; // Token type
    try {
        this.state = 461;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 441;
            this.block_type();
            this.state = 442;
            this.if_block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 447;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 444;
                    this.expr(); 
                }
                this.state = 449;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
            }

            this.state = 450;
            this.match(WatParser.LPAR);
            this.state = 451;
            this.match(WatParser.THEN);
            this.state = 452;
            this.instr_list();
            this.state = 453;
            this.match(WatParser.RPAR);
            this.state = 459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.LPAR) {
                this.state = 454;
                this.match(WatParser.LPAR);
                this.state = 455;
                this.match(WatParser.ELSE);
                this.state = 456;
                this.instr_list();
                this.state = 457;
                this.match(WatParser.RPAR);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Instr_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_instr_list;
    return this;
}

Instr_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instr_listContext.prototype.constructor = Instr_listContext;

Instr_listContext.prototype.instr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstrContext);
    } else {
        return this.getTypedRuleContext(InstrContext,i);
    }
};

Instr_listContext.prototype.call_instr = function() {
    return this.getTypedRuleContext(Call_instrContext,0);
};

Instr_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterInstr_list(this);
	}
};

Instr_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitInstr_list(this);
	}
};




WatParser.Instr_listContext = Instr_listContext;

WatParser.prototype.instr_list = function() {

    var localctx = new Instr_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, WatParser.RULE_instr_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 466;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 463;
                this.instr(); 
            }
            this.state = 468;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
        }

        this.state = 470;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.CALL_INDIRECT) {
            this.state = 469;
            this.call_instr();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Const_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_const_expr;
    return this;
}

Const_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Const_exprContext.prototype.constructor = Const_exprContext;

Const_exprContext.prototype.instr_list = function() {
    return this.getTypedRuleContext(Instr_listContext,0);
};

Const_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterConst_expr(this);
	}
};

Const_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitConst_expr(this);
	}
};




WatParser.Const_exprContext = Const_exprContext;

WatParser.prototype.const_expr = function() {

    var localctx = new Const_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, WatParser.RULE_const_expr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 472;
        this.instr_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_func;
    return this;
}

FuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncContext.prototype.constructor = FuncContext;

FuncContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

FuncContext.prototype.FUNC = function() {
    return this.getToken(WatParser.FUNC, 0);
};

FuncContext.prototype.func_fields = function() {
    return this.getTypedRuleContext(Func_fieldsContext,0);
};

FuncContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

FuncContext.prototype.bind_var = function() {
    return this.getTypedRuleContext(Bind_varContext,0);
};

FuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterFunc(this);
	}
};

FuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitFunc(this);
	}
};




WatParser.FuncContext = FuncContext;

WatParser.prototype.func = function() {

    var localctx = new FuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, WatParser.RULE_func);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 474;
        this.match(WatParser.LPAR);
        this.state = 475;
        this.match(WatParser.FUNC);
        this.state = 477;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.VAR) {
            this.state = 476;
            this.bind_var();
        }

        this.state = 479;
        this.func_fields();
        this.state = 480;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Func_fieldsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_func_fields;
    return this;
}

Func_fieldsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_fieldsContext.prototype.constructor = Func_fieldsContext;

Func_fieldsContext.prototype.func_fields_body = function() {
    return this.getTypedRuleContext(Func_fields_bodyContext,0);
};

Func_fieldsContext.prototype.type_use = function() {
    return this.getTypedRuleContext(Type_useContext,0);
};

Func_fieldsContext.prototype.inline_import = function() {
    return this.getTypedRuleContext(Inline_importContext,0);
};

Func_fieldsContext.prototype.func_fields_import = function() {
    return this.getTypedRuleContext(Func_fields_importContext,0);
};

Func_fieldsContext.prototype.inline_export = function() {
    return this.getTypedRuleContext(Inline_exportContext,0);
};

Func_fieldsContext.prototype.func_fields = function() {
    return this.getTypedRuleContext(Func_fieldsContext,0);
};

Func_fieldsContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterFunc_fields(this);
	}
};

Func_fieldsContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitFunc_fields(this);
	}
};




WatParser.Func_fieldsContext = Func_fieldsContext;

WatParser.prototype.func_fields = function() {

    var localctx = new Func_fieldsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, WatParser.RULE_func_fields);
    try {
        this.state = 495;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 483;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
            if(la_===1) {
                this.state = 482;
                this.type_use();

            }
            this.state = 485;
            this.func_fields_body();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 486;
            this.inline_import();
            this.state = 488;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            if(la_===1) {
                this.state = 487;
                this.type_use();

            }
            this.state = 490;
            this.func_fields_import();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 492;
            this.inline_export();
            this.state = 493;
            this.func_fields();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Func_fields_importContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_func_fields_import;
    return this;
}

Func_fields_importContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_fields_importContext.prototype.constructor = Func_fields_importContext;

Func_fields_importContext.prototype.func_fields_import_result = function() {
    return this.getTypedRuleContext(Func_fields_import_resultContext,0);
};

Func_fields_importContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Func_fields_importContext.prototype.PARAM = function() {
    return this.getToken(WatParser.PARAM, 0);
};

Func_fields_importContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Func_fields_importContext.prototype.bind_var = function() {
    return this.getTypedRuleContext(Bind_varContext,0);
};

Func_fields_importContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Func_fields_importContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterFunc_fields_import(this);
	}
};

Func_fields_importContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitFunc_fields_import(this);
	}
};




WatParser.Func_fields_importContext = Func_fields_importContext;

WatParser.prototype.func_fields_import = function() {

    var localctx = new Func_fields_importContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, WatParser.RULE_func_fields_import);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            this.state = 497;
            this.match(WatParser.LPAR);
            this.state = 498;
            this.match(WatParser.PARAM);
            this.state = 502;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.VALUE_TYPE) {
                this.state = 499;
                this.value_type();
                this.state = 504;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 505;
            this.match(WatParser.RPAR);
            break;

        case 2:
            this.state = 506;
            this.match(WatParser.LPAR);
            this.state = 507;
            this.match(WatParser.PARAM);
            this.state = 508;
            this.bind_var();
            this.state = 509;
            this.value_type();
            this.state = 510;
            this.match(WatParser.RPAR);
            break;

        }
        this.state = 514;
        this.func_fields_import_result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Func_fields_import_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_func_fields_import_result;
    return this;
}

Func_fields_import_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_fields_import_resultContext.prototype.constructor = Func_fields_import_resultContext;

Func_fields_import_resultContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Func_fields_import_resultContext.prototype.RESULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RESULT);
    } else {
        return this.getToken(WatParser.RESULT, i);
    }
};


Func_fields_import_resultContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Func_fields_import_resultContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Func_fields_import_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterFunc_fields_import_result(this);
	}
};

Func_fields_import_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitFunc_fields_import_result(this);
	}
};




WatParser.Func_fields_import_resultContext = Func_fields_import_resultContext;

WatParser.prototype.func_fields_import_result = function() {

    var localctx = new Func_fields_import_resultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, WatParser.RULE_func_fields_import_result);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 527;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WatParser.LPAR) {
            this.state = 516;
            this.match(WatParser.LPAR);
            this.state = 517;
            this.match(WatParser.RESULT);
            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.VALUE_TYPE) {
                this.state = 518;
                this.value_type();
                this.state = 523;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 524;
            this.match(WatParser.RPAR);
            this.state = 529;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Func_fields_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_func_fields_body;
    return this;
}

Func_fields_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_fields_bodyContext.prototype.constructor = Func_fields_bodyContext;

Func_fields_bodyContext.prototype.func_result_body = function() {
    return this.getTypedRuleContext(Func_result_bodyContext,0);
};

Func_fields_bodyContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Func_fields_bodyContext.prototype.PARAM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.PARAM);
    } else {
        return this.getToken(WatParser.PARAM, i);
    }
};


Func_fields_bodyContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Func_fields_bodyContext.prototype.bind_var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bind_varContext);
    } else {
        return this.getTypedRuleContext(Bind_varContext,i);
    }
};

Func_fields_bodyContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Func_fields_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterFunc_fields_body(this);
	}
};

Func_fields_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitFunc_fields_body(this);
	}
};




WatParser.Func_fields_bodyContext = Func_fields_bodyContext;

WatParser.prototype.func_fields_body = function() {

    var localctx = new Func_fields_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, WatParser.RULE_func_fields_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 545;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 530;
                    this.match(WatParser.LPAR);
                    this.state = 531;
                    this.match(WatParser.PARAM);
                    this.state = 535;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===WatParser.VALUE_TYPE) {
                        this.state = 532;
                        this.value_type();
                        this.state = 537;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 538;
                    this.match(WatParser.RPAR);
                    break;

                case 2:
                    this.state = 539;
                    this.match(WatParser.LPAR);
                    this.state = 540;
                    this.match(WatParser.PARAM);
                    this.state = 541;
                    this.bind_var();
                    this.state = 542;
                    this.value_type();
                    this.state = 543;
                    this.match(WatParser.RPAR);
                    break;

                } 
            }
            this.state = 549;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

        this.state = 550;
        this.func_result_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Func_result_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_func_result_body;
    return this;
}

Func_result_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_result_bodyContext.prototype.constructor = Func_result_bodyContext;

Func_result_bodyContext.prototype.func_body = function() {
    return this.getTypedRuleContext(Func_bodyContext,0);
};

Func_result_bodyContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Func_result_bodyContext.prototype.RESULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RESULT);
    } else {
        return this.getToken(WatParser.RESULT, i);
    }
};


Func_result_bodyContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Func_result_bodyContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Func_result_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterFunc_result_body(this);
	}
};

Func_result_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitFunc_result_body(this);
	}
};




WatParser.Func_result_bodyContext = Func_result_bodyContext;

WatParser.prototype.func_result_body = function() {

    var localctx = new Func_result_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, WatParser.RULE_func_result_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 552;
                this.match(WatParser.LPAR);
                this.state = 553;
                this.match(WatParser.RESULT);
                this.state = 557;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===WatParser.VALUE_TYPE) {
                    this.state = 554;
                    this.value_type();
                    this.state = 559;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 560;
                this.match(WatParser.RPAR); 
            }
            this.state = 565;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

        this.state = 566;
        this.func_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Func_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_func_body;
    return this;
}

Func_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_bodyContext.prototype.constructor = Func_bodyContext;

Func_bodyContext.prototype.instr_list = function() {
    return this.getTypedRuleContext(Instr_listContext,0);
};

Func_bodyContext.prototype.LPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LPAR);
    } else {
        return this.getToken(WatParser.LPAR, i);
    }
};


Func_bodyContext.prototype.LOCAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.LOCAL);
    } else {
        return this.getToken(WatParser.LOCAL, i);
    }
};


Func_bodyContext.prototype.RPAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.RPAR);
    } else {
        return this.getToken(WatParser.RPAR, i);
    }
};


Func_bodyContext.prototype.bind_var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bind_varContext);
    } else {
        return this.getTypedRuleContext(Bind_varContext,i);
    }
};

Func_bodyContext.prototype.value_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_typeContext);
    } else {
        return this.getTypedRuleContext(Value_typeContext,i);
    }
};

Func_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterFunc_body(this);
	}
};

Func_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitFunc_body(this);
	}
};




WatParser.Func_bodyContext = Func_bodyContext;

WatParser.prototype.func_body = function() {

    var localctx = new Func_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, WatParser.RULE_func_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 585;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 583;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 568;
                    this.match(WatParser.LPAR);
                    this.state = 569;
                    this.match(WatParser.LOCAL);
                    this.state = 573;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===WatParser.VALUE_TYPE) {
                        this.state = 570;
                        this.value_type();
                        this.state = 575;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 576;
                    this.match(WatParser.RPAR);
                    break;

                case 2:
                    this.state = 577;
                    this.match(WatParser.LPAR);
                    this.state = 578;
                    this.match(WatParser.LOCAL);
                    this.state = 579;
                    this.bind_var();
                    this.state = 580;
                    this.value_type();
                    this.state = 581;
                    this.match(WatParser.RPAR);
                    break;

                } 
            }
            this.state = 587;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
        }

        this.state = 588;
        this.instr_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OffsetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_offset;
    return this;
}

OffsetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OffsetContext.prototype.constructor = OffsetContext;

OffsetContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

OffsetContext.prototype.OFFSET = function() {
    return this.getToken(WatParser.OFFSET, 0);
};

OffsetContext.prototype.const_expr = function() {
    return this.getTypedRuleContext(Const_exprContext,0);
};

OffsetContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

OffsetContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

OffsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterOffset(this);
	}
};

OffsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitOffset(this);
	}
};




WatParser.OffsetContext = OffsetContext;

WatParser.prototype.offset = function() {

    var localctx = new OffsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, WatParser.RULE_offset);
    try {
        this.state = 596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 590;
            this.match(WatParser.LPAR);
            this.state = 591;
            this.match(WatParser.OFFSET);
            this.state = 592;
            this.const_expr();
            this.state = 593;
            this.match(WatParser.RPAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 595;
            this.expr();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_elem;
    return this;
}

ElemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElemContext.prototype.constructor = ElemContext;

ElemContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

ElemContext.prototype.ELEM = function() {
    return this.getToken(WatParser.ELEM, 0);
};

ElemContext.prototype.offset = function() {
    return this.getTypedRuleContext(OffsetContext,0);
};

ElemContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

ElemContext.prototype.var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarContext);
    } else {
        return this.getTypedRuleContext(VarContext,i);
    }
};

ElemContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterElem(this);
	}
};

ElemContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitElem(this);
	}
};




WatParser.ElemContext = ElemContext;

WatParser.prototype.elem = function() {

    var localctx = new ElemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, WatParser.RULE_elem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.match(WatParser.LPAR);
        this.state = 599;
        this.match(WatParser.ELEM);
        this.state = 601;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.NAT || _la===WatParser.VAR) {
            this.state = 600;
            this.var();
        }

        this.state = 603;
        this.offset();
        this.state = 607;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WatParser.NAT || _la===WatParser.VAR) {
            this.state = 604;
            this.var();
            this.state = 609;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 610;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_table;
    return this;
}

TableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableContext.prototype.constructor = TableContext;

TableContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

TableContext.prototype.TABLE = function() {
    return this.getToken(WatParser.TABLE, 0);
};

TableContext.prototype.table_fields = function() {
    return this.getTypedRuleContext(Table_fieldsContext,0);
};

TableContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

TableContext.prototype.bind_var = function() {
    return this.getTypedRuleContext(Bind_varContext,0);
};

TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitTable(this);
	}
};




WatParser.TableContext = TableContext;

WatParser.prototype.table = function() {

    var localctx = new TableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, WatParser.RULE_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 612;
        this.match(WatParser.LPAR);
        this.state = 613;
        this.match(WatParser.TABLE);
        this.state = 615;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.VAR) {
            this.state = 614;
            this.bind_var();
        }

        this.state = 617;
        this.table_fields();
        this.state = 618;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Table_fieldsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_table_fields;
    return this;
}

Table_fieldsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_fieldsContext.prototype.constructor = Table_fieldsContext;

Table_fieldsContext.prototype.table_type = function() {
    return this.getTypedRuleContext(Table_typeContext,0);
};

Table_fieldsContext.prototype.inline_import = function() {
    return this.getTypedRuleContext(Inline_importContext,0);
};

Table_fieldsContext.prototype.inline_export = function() {
    return this.getTypedRuleContext(Inline_exportContext,0);
};

Table_fieldsContext.prototype.table_fields = function() {
    return this.getTypedRuleContext(Table_fieldsContext,0);
};

Table_fieldsContext.prototype.elem_type = function() {
    return this.getTypedRuleContext(Elem_typeContext,0);
};

Table_fieldsContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Table_fieldsContext.prototype.ELEM = function() {
    return this.getToken(WatParser.ELEM, 0);
};

Table_fieldsContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Table_fieldsContext.prototype.var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarContext);
    } else {
        return this.getTypedRuleContext(VarContext,i);
    }
};

Table_fieldsContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterTable_fields(this);
	}
};

Table_fieldsContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitTable_fields(this);
	}
};




WatParser.Table_fieldsContext = Table_fieldsContext;

WatParser.prototype.table_fields = function() {

    var localctx = new Table_fieldsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, WatParser.RULE_table_fields);
    var _la = 0; // Token type
    try {
        this.state = 638;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 620;
            this.table_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 621;
            this.inline_import();
            this.state = 622;
            this.table_type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 624;
            this.inline_export();
            this.state = 625;
            this.table_fields();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 627;
            this.elem_type();
            this.state = 628;
            this.match(WatParser.LPAR);
            this.state = 629;
            this.match(WatParser.ELEM);
            this.state = 633;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.NAT || _la===WatParser.VAR) {
                this.state = 630;
                this.var();
                this.state = 635;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 636;
            this.match(WatParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_data;
    return this;
}

DataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataContext.prototype.constructor = DataContext;

DataContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

DataContext.prototype.DATA = function() {
    return this.getToken(WatParser.DATA, 0);
};

DataContext.prototype.offset = function() {
    return this.getTypedRuleContext(OffsetContext,0);
};

DataContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

DataContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

DataContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.STRING);
    } else {
        return this.getToken(WatParser.STRING, i);
    }
};


DataContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterData(this);
	}
};

DataContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitData(this);
	}
};




WatParser.DataContext = DataContext;

WatParser.prototype.data = function() {

    var localctx = new DataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, WatParser.RULE_data);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        this.match(WatParser.LPAR);
        this.state = 641;
        this.match(WatParser.DATA);
        this.state = 643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.NAT || _la===WatParser.VAR) {
            this.state = 642;
            this.var();
        }

        this.state = 645;
        this.offset();
        this.state = 649;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WatParser.STRING) {
            this.state = 646;
            this.match(WatParser.STRING);
            this.state = 651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 652;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MemoryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_memory;
    return this;
}

MemoryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemoryContext.prototype.constructor = MemoryContext;

MemoryContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

MemoryContext.prototype.MEMORY = function() {
    return this.getToken(WatParser.MEMORY, 0);
};

MemoryContext.prototype.memory_fields = function() {
    return this.getTypedRuleContext(Memory_fieldsContext,0);
};

MemoryContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

MemoryContext.prototype.bind_var = function() {
    return this.getTypedRuleContext(Bind_varContext,0);
};

MemoryContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterMemory(this);
	}
};

MemoryContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitMemory(this);
	}
};




WatParser.MemoryContext = MemoryContext;

WatParser.prototype.memory = function() {

    var localctx = new MemoryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, WatParser.RULE_memory);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        this.match(WatParser.LPAR);
        this.state = 655;
        this.match(WatParser.MEMORY);
        this.state = 657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.VAR) {
            this.state = 656;
            this.bind_var();
        }

        this.state = 659;
        this.memory_fields();
        this.state = 660;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Memory_fieldsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_memory_fields;
    return this;
}

Memory_fieldsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Memory_fieldsContext.prototype.constructor = Memory_fieldsContext;

Memory_fieldsContext.prototype.memory_type = function() {
    return this.getTypedRuleContext(Memory_typeContext,0);
};

Memory_fieldsContext.prototype.inline_import = function() {
    return this.getTypedRuleContext(Inline_importContext,0);
};

Memory_fieldsContext.prototype.inline_export = function() {
    return this.getTypedRuleContext(Inline_exportContext,0);
};

Memory_fieldsContext.prototype.memory_fields = function() {
    return this.getTypedRuleContext(Memory_fieldsContext,0);
};

Memory_fieldsContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Memory_fieldsContext.prototype.DATA = function() {
    return this.getToken(WatParser.DATA, 0);
};

Memory_fieldsContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Memory_fieldsContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.STRING);
    } else {
        return this.getToken(WatParser.STRING, i);
    }
};


Memory_fieldsContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterMemory_fields(this);
	}
};

Memory_fieldsContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitMemory_fields(this);
	}
};




WatParser.Memory_fieldsContext = Memory_fieldsContext;

WatParser.prototype.memory_fields = function() {

    var localctx = new Memory_fieldsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, WatParser.RULE_memory_fields);
    var _la = 0; // Token type
    try {
        this.state = 678;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 662;
            this.memory_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 663;
            this.inline_import();
            this.state = 664;
            this.memory_type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 666;
            this.inline_export();
            this.state = 667;
            this.memory_fields();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 669;
            this.match(WatParser.LPAR);
            this.state = 670;
            this.match(WatParser.DATA);
            this.state = 674;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.STRING) {
                this.state = 671;
                this.match(WatParser.STRING);
                this.state = 676;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 677;
            this.match(WatParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SglobalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_sglobal;
    return this;
}

SglobalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SglobalContext.prototype.constructor = SglobalContext;

SglobalContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

SglobalContext.prototype.GLOBAL = function() {
    return this.getToken(WatParser.GLOBAL, 0);
};

SglobalContext.prototype.global_fields = function() {
    return this.getTypedRuleContext(Global_fieldsContext,0);
};

SglobalContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

SglobalContext.prototype.bind_var = function() {
    return this.getTypedRuleContext(Bind_varContext,0);
};

SglobalContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterSglobal(this);
	}
};

SglobalContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitSglobal(this);
	}
};




WatParser.SglobalContext = SglobalContext;

WatParser.prototype.sglobal = function() {

    var localctx = new SglobalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, WatParser.RULE_sglobal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 680;
        this.match(WatParser.LPAR);
        this.state = 681;
        this.match(WatParser.GLOBAL);
        this.state = 683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.VAR) {
            this.state = 682;
            this.bind_var();
        }

        this.state = 685;
        this.global_fields();
        this.state = 686;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Global_fieldsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_global_fields;
    return this;
}

Global_fieldsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_fieldsContext.prototype.constructor = Global_fieldsContext;

Global_fieldsContext.prototype.global_type = function() {
    return this.getTypedRuleContext(Global_typeContext,0);
};

Global_fieldsContext.prototype.const_expr = function() {
    return this.getTypedRuleContext(Const_exprContext,0);
};

Global_fieldsContext.prototype.inline_import = function() {
    return this.getTypedRuleContext(Inline_importContext,0);
};

Global_fieldsContext.prototype.inline_export = function() {
    return this.getTypedRuleContext(Inline_exportContext,0);
};

Global_fieldsContext.prototype.global_fields = function() {
    return this.getTypedRuleContext(Global_fieldsContext,0);
};

Global_fieldsContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterGlobal_fields(this);
	}
};

Global_fieldsContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitGlobal_fields(this);
	}
};




WatParser.Global_fieldsContext = Global_fieldsContext;

WatParser.prototype.global_fields = function() {

    var localctx = new Global_fieldsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, WatParser.RULE_global_fields);
    try {
        this.state = 697;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 688;
            this.global_type();
            this.state = 689;
            this.const_expr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            this.inline_import();
            this.state = 692;
            this.global_type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 694;
            this.inline_export();
            this.state = 695;
            this.global_fields();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Import_descContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_import_desc;
    return this;
}

Import_descContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_descContext.prototype.constructor = Import_descContext;

Import_descContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Import_descContext.prototype.FUNC = function() {
    return this.getToken(WatParser.FUNC, 0);
};

Import_descContext.prototype.type_use = function() {
    return this.getTypedRuleContext(Type_useContext,0);
};

Import_descContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Import_descContext.prototype.bind_var = function() {
    return this.getTypedRuleContext(Bind_varContext,0);
};

Import_descContext.prototype.func_type = function() {
    return this.getTypedRuleContext(Func_typeContext,0);
};

Import_descContext.prototype.TABLE = function() {
    return this.getToken(WatParser.TABLE, 0);
};

Import_descContext.prototype.table_type = function() {
    return this.getTypedRuleContext(Table_typeContext,0);
};

Import_descContext.prototype.MEMORY = function() {
    return this.getToken(WatParser.MEMORY, 0);
};

Import_descContext.prototype.memory_type = function() {
    return this.getTypedRuleContext(Memory_typeContext,0);
};

Import_descContext.prototype.GLOBAL = function() {
    return this.getToken(WatParser.GLOBAL, 0);
};

Import_descContext.prototype.global_type = function() {
    return this.getTypedRuleContext(Global_typeContext,0);
};

Import_descContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterImport_desc(this);
	}
};

Import_descContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitImport_desc(this);
	}
};




WatParser.Import_descContext = Import_descContext;

WatParser.prototype.import_desc = function() {

    var localctx = new Import_descContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, WatParser.RULE_import_desc);
    var _la = 0; // Token type
    try {
        this.state = 739;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 699;
            this.match(WatParser.LPAR);
            this.state = 700;
            this.match(WatParser.FUNC);
            this.state = 702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 701;
                this.bind_var();
            }

            this.state = 704;
            this.type_use();
            this.state = 705;
            this.match(WatParser.RPAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 707;
            this.match(WatParser.LPAR);
            this.state = 708;
            this.match(WatParser.FUNC);
            this.state = 710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 709;
                this.bind_var();
            }

            this.state = 712;
            this.func_type();
            this.state = 713;
            this.match(WatParser.RPAR);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 715;
            this.match(WatParser.LPAR);
            this.state = 716;
            this.match(WatParser.TABLE);
            this.state = 718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 717;
                this.bind_var();
            }

            this.state = 720;
            this.table_type();
            this.state = 721;
            this.match(WatParser.RPAR);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 723;
            this.match(WatParser.LPAR);
            this.state = 724;
            this.match(WatParser.MEMORY);
            this.state = 726;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 725;
                this.bind_var();
            }

            this.state = 728;
            this.memory_type();
            this.state = 729;
            this.match(WatParser.RPAR);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 731;
            this.match(WatParser.LPAR);
            this.state = 732;
            this.match(WatParser.GLOBAL);
            this.state = 734;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 733;
                this.bind_var();
            }

            this.state = 736;
            this.global_type();
            this.state = 737;
            this.match(WatParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_simport;
    return this;
}

SimportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimportContext.prototype.constructor = SimportContext;

SimportContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

SimportContext.prototype.IMPORT = function() {
    return this.getToken(WatParser.IMPORT, 0);
};

SimportContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

SimportContext.prototype.import_desc = function() {
    return this.getTypedRuleContext(Import_descContext,0);
};

SimportContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

SimportContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterSimport(this);
	}
};

SimportContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitSimport(this);
	}
};




WatParser.SimportContext = SimportContext;

WatParser.prototype.simport = function() {

    var localctx = new SimportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, WatParser.RULE_simport);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 741;
        this.match(WatParser.LPAR);
        this.state = 742;
        this.match(WatParser.IMPORT);
        this.state = 743;
        this.name();
        this.state = 744;
        this.name();
        this.state = 745;
        this.import_desc();
        this.state = 746;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Inline_importContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_inline_import;
    return this;
}

Inline_importContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inline_importContext.prototype.constructor = Inline_importContext;

Inline_importContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Inline_importContext.prototype.IMPORT = function() {
    return this.getToken(WatParser.IMPORT, 0);
};

Inline_importContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Inline_importContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Inline_importContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterInline_import(this);
	}
};

Inline_importContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitInline_import(this);
	}
};




WatParser.Inline_importContext = Inline_importContext;

WatParser.prototype.inline_import = function() {

    var localctx = new Inline_importContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, WatParser.RULE_inline_import);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 748;
        this.match(WatParser.LPAR);
        this.state = 749;
        this.match(WatParser.IMPORT);
        this.state = 750;
        this.name();
        this.state = 751;
        this.name();
        this.state = 752;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Export_descContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_export_desc;
    return this;
}

Export_descContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Export_descContext.prototype.constructor = Export_descContext;

Export_descContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Export_descContext.prototype.FUNC = function() {
    return this.getToken(WatParser.FUNC, 0);
};

Export_descContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

Export_descContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Export_descContext.prototype.TABLE = function() {
    return this.getToken(WatParser.TABLE, 0);
};

Export_descContext.prototype.MEMORY = function() {
    return this.getToken(WatParser.MEMORY, 0);
};

Export_descContext.prototype.GLOBAL = function() {
    return this.getToken(WatParser.GLOBAL, 0);
};

Export_descContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterExport_desc(this);
	}
};

Export_descContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitExport_desc(this);
	}
};




WatParser.Export_descContext = Export_descContext;

WatParser.prototype.export_desc = function() {

    var localctx = new Export_descContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, WatParser.RULE_export_desc);
    try {
        this.state = 774;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 754;
            this.match(WatParser.LPAR);
            this.state = 755;
            this.match(WatParser.FUNC);
            this.state = 756;
            this.var();
            this.state = 757;
            this.match(WatParser.RPAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 759;
            this.match(WatParser.LPAR);
            this.state = 760;
            this.match(WatParser.TABLE);
            this.state = 761;
            this.var();
            this.state = 762;
            this.match(WatParser.RPAR);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 764;
            this.match(WatParser.LPAR);
            this.state = 765;
            this.match(WatParser.MEMORY);
            this.state = 766;
            this.var();
            this.state = 767;
            this.match(WatParser.RPAR);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 769;
            this.match(WatParser.LPAR);
            this.state = 770;
            this.match(WatParser.GLOBAL);
            this.state = 771;
            this.var();
            this.state = 772;
            this.match(WatParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_export;
    return this;
}

ExportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportContext.prototype.constructor = ExportContext;

ExportContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

ExportContext.prototype.EXPORT = function() {
    return this.getToken(WatParser.EXPORT, 0);
};

ExportContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ExportContext.prototype.export_desc = function() {
    return this.getTypedRuleContext(Export_descContext,0);
};

ExportContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

ExportContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterExport(this);
	}
};

ExportContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitExport(this);
	}
};




WatParser.ExportContext = ExportContext;

WatParser.prototype.export = function() {

    var localctx = new ExportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, WatParser.RULE_export);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 776;
        this.match(WatParser.LPAR);
        this.state = 777;
        this.match(WatParser.EXPORT);
        this.state = 778;
        this.name();
        this.state = 779;
        this.export_desc();
        this.state = 780;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Inline_exportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_inline_export;
    return this;
}

Inline_exportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inline_exportContext.prototype.constructor = Inline_exportContext;

Inline_exportContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Inline_exportContext.prototype.EXPORT = function() {
    return this.getToken(WatParser.EXPORT, 0);
};

Inline_exportContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Inline_exportContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Inline_exportContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterInline_export(this);
	}
};

Inline_exportContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitInline_export(this);
	}
};




WatParser.Inline_exportContext = Inline_exportContext;

WatParser.prototype.inline_export = function() {

    var localctx = new Inline_exportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, WatParser.RULE_inline_export);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 782;
        this.match(WatParser.LPAR);
        this.state = 783;
        this.match(WatParser.EXPORT);
        this.state = 784;
        this.name();
        this.state = 785;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_type_;
    return this;
}

Type_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_Context.prototype.constructor = Type_Context;

Type_Context.prototype.def_type = function() {
    return this.getTypedRuleContext(Def_typeContext,0);
};

Type_Context.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterType_(this);
	}
};

Type_Context.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitType_(this);
	}
};




WatParser.Type_Context = Type_Context;

WatParser.prototype.type_ = function() {

    var localctx = new Type_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 106, WatParser.RULE_type_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 787;
        this.def_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_type_def;
    return this;
}

Type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_defContext.prototype.constructor = Type_defContext;

Type_defContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Type_defContext.prototype.TYPE = function() {
    return this.getToken(WatParser.TYPE, 0);
};

Type_defContext.prototype.type_ = function() {
    return this.getTypedRuleContext(Type_Context,0);
};

Type_defContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Type_defContext.prototype.bind_var = function() {
    return this.getTypedRuleContext(Bind_varContext,0);
};

Type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterType_def(this);
	}
};

Type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitType_def(this);
	}
};




WatParser.Type_defContext = Type_defContext;

WatParser.prototype.type_def = function() {

    var localctx = new Type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, WatParser.RULE_type_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 789;
        this.match(WatParser.LPAR);
        this.state = 790;
        this.match(WatParser.TYPE);
        this.state = 792;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.VAR) {
            this.state = 791;
            this.bind_var();
        }

        this.state = 794;
        this.type_();
        this.state = 795;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_start;
    return this;
}

StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartContext.prototype.constructor = StartContext;

StartContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

StartContext.prototype.START = function() {
    return this.getToken(WatParser.START, 0);
};

StartContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

StartContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

StartContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterStart(this);
	}
};

StartContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitStart(this);
	}
};




WatParser.StartContext = StartContext;

WatParser.prototype.start = function() {

    var localctx = new StartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, WatParser.RULE_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 797;
        this.match(WatParser.LPAR);
        this.state = 798;
        this.match(WatParser.START);
        this.state = 799;
        this.var();
        this.state = 800;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_module_field;
    return this;
}

Module_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_fieldContext.prototype.constructor = Module_fieldContext;

Module_fieldContext.prototype.type_def = function() {
    return this.getTypedRuleContext(Type_defContext,0);
};

Module_fieldContext.prototype.sglobal = function() {
    return this.getTypedRuleContext(SglobalContext,0);
};

Module_fieldContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

Module_fieldContext.prototype.memory = function() {
    return this.getTypedRuleContext(MemoryContext,0);
};

Module_fieldContext.prototype.func = function() {
    return this.getTypedRuleContext(FuncContext,0);
};

Module_fieldContext.prototype.elem = function() {
    return this.getTypedRuleContext(ElemContext,0);
};

Module_fieldContext.prototype.data = function() {
    return this.getTypedRuleContext(DataContext,0);
};

Module_fieldContext.prototype.start = function() {
    return this.getTypedRuleContext(StartContext,0);
};

Module_fieldContext.prototype.simport = function() {
    return this.getTypedRuleContext(SimportContext,0);
};

Module_fieldContext.prototype.export = function() {
    return this.getTypedRuleContext(ExportContext,0);
};

Module_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterModule_field(this);
	}
};

Module_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitModule_field(this);
	}
};




WatParser.Module_fieldContext = Module_fieldContext;

WatParser.prototype.module_field = function() {

    var localctx = new Module_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, WatParser.RULE_module_field);
    try {
        this.state = 812;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 802;
            this.type_def();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 803;
            this.sglobal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 804;
            this.table();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 805;
            this.memory();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 806;
            this.func();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 807;
            this.elem();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 808;
            this.data();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 809;
            this.start();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 810;
            this.simport();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 811;
            this.export();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_module_;
    return this;
}

Module_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_Context.prototype.constructor = Module_Context;

Module_Context.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Module_Context.prototype.MODULE = function() {
    return this.getToken(WatParser.MODULE, 0);
};

Module_Context.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Module_Context.prototype.VAR = function() {
    return this.getToken(WatParser.VAR, 0);
};

Module_Context.prototype.module_field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_fieldContext);
    } else {
        return this.getTypedRuleContext(Module_fieldContext,i);
    }
};

Module_Context.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterModule_(this);
	}
};

Module_Context.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitModule_(this);
	}
};




WatParser.Module_Context = Module_Context;

WatParser.prototype.module_ = function() {

    var localctx = new Module_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 114, WatParser.RULE_module_);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 814;
        this.match(WatParser.LPAR);
        this.state = 815;
        this.match(WatParser.MODULE);
        this.state = 817;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WatParser.VAR) {
            this.state = 816;
            this.match(WatParser.VAR);
        }

        this.state = 822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WatParser.LPAR) {
            this.state = 819;
            this.module_field();
            this.state = 824;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 825;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Script_moduleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_script_module;
    return this;
}

Script_moduleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Script_moduleContext.prototype.constructor = Script_moduleContext;

Script_moduleContext.prototype.module_ = function() {
    return this.getTypedRuleContext(Module_Context,0);
};

Script_moduleContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

Script_moduleContext.prototype.MODULE = function() {
    return this.getToken(WatParser.MODULE, 0);
};

Script_moduleContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

Script_moduleContext.prototype.BIN = function() {
    return this.getToken(WatParser.BIN, 0);
};

Script_moduleContext.prototype.QUOTE = function() {
    return this.getToken(WatParser.QUOTE, 0);
};

Script_moduleContext.prototype.VAR = function() {
    return this.getToken(WatParser.VAR, 0);
};

Script_moduleContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WatParser.STRING);
    } else {
        return this.getToken(WatParser.STRING, i);
    }
};


Script_moduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterScript_module(this);
	}
};

Script_moduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitScript_module(this);
	}
};




WatParser.Script_moduleContext = Script_moduleContext;

WatParser.prototype.script_module = function() {

    var localctx = new Script_moduleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, WatParser.RULE_script_module);
    var _la = 0; // Token type
    try {
        this.state = 841;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 827;
            this.module_();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 828;
            this.match(WatParser.LPAR);
            this.state = 829;
            this.match(WatParser.MODULE);
            this.state = 831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 830;
                this.match(WatParser.VAR);
            }

            this.state = 833;
            _la = this._input.LA(1);
            if(!(_la===WatParser.BIN || _la===WatParser.QUOTE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 837;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.STRING) {
                this.state = 834;
                this.match(WatParser.STRING);
                this.state = 839;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 840;
            this.match(WatParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_action;
    return this;
}

ActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionContext.prototype.constructor = ActionContext;

ActionContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

ActionContext.prototype.INVOKE = function() {
    return this.getToken(WatParser.INVOKE, 0);
};

ActionContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ActionContext.prototype.const_list = function() {
    return this.getTypedRuleContext(Const_listContext,0);
};

ActionContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

ActionContext.prototype.VAR = function() {
    return this.getToken(WatParser.VAR, 0);
};

ActionContext.prototype.GET = function() {
    return this.getToken(WatParser.GET, 0);
};

ActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterAction(this);
	}
};

ActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitAction(this);
	}
};




WatParser.ActionContext = ActionContext;

WatParser.prototype.action = function() {

    var localctx = new ActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, WatParser.RULE_action);
    var _la = 0; // Token type
    try {
        this.state = 860;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 843;
            this.match(WatParser.LPAR);
            this.state = 844;
            this.match(WatParser.INVOKE);
            this.state = 846;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 845;
                this.match(WatParser.VAR);
            }

            this.state = 848;
            this.name();
            this.state = 849;
            this.const_list();
            this.state = 850;
            this.match(WatParser.RPAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 852;
            this.match(WatParser.LPAR);
            this.state = 853;
            this.match(WatParser.GET);
            this.state = 855;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 854;
                this.match(WatParser.VAR);
            }

            this.state = 857;
            this.name();
            this.state = 858;
            this.match(WatParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssertionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_assertion;
    return this;
}

AssertionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertionContext.prototype.constructor = AssertionContext;

AssertionContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

AssertionContext.prototype.ASSERT_MALFORMED = function() {
    return this.getToken(WatParser.ASSERT_MALFORMED, 0);
};

AssertionContext.prototype.script_module = function() {
    return this.getTypedRuleContext(Script_moduleContext,0);
};

AssertionContext.prototype.STRING = function() {
    return this.getToken(WatParser.STRING, 0);
};

AssertionContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

AssertionContext.prototype.ASSERT_INVALID = function() {
    return this.getToken(WatParser.ASSERT_INVALID, 0);
};

AssertionContext.prototype.ASSERT_UNLINKABLE = function() {
    return this.getToken(WatParser.ASSERT_UNLINKABLE, 0);
};

AssertionContext.prototype.ASSERT_TRAP = function() {
    return this.getToken(WatParser.ASSERT_TRAP, 0);
};

AssertionContext.prototype.ASSERT_RETURN = function() {
    return this.getToken(WatParser.ASSERT_RETURN, 0);
};

AssertionContext.prototype.action = function() {
    return this.getTypedRuleContext(ActionContext,0);
};

AssertionContext.prototype.const_list = function() {
    return this.getTypedRuleContext(Const_listContext,0);
};

AssertionContext.prototype.ASSERT_RETURN_CANONICAL_NAN = function() {
    return this.getToken(WatParser.ASSERT_RETURN_CANONICAL_NAN, 0);
};

AssertionContext.prototype.ASSERT_RETURN_ARITHMETIC_NAN = function() {
    return this.getToken(WatParser.ASSERT_RETURN_ARITHMETIC_NAN, 0);
};

AssertionContext.prototype.ASSERT_EXHAUSTION = function() {
    return this.getToken(WatParser.ASSERT_EXHAUSTION, 0);
};

AssertionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterAssertion(this);
	}
};

AssertionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitAssertion(this);
	}
};




WatParser.AssertionContext = AssertionContext;

WatParser.prototype.assertion = function() {

    var localctx = new AssertionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, WatParser.RULE_assertion);
    try {
        this.state = 914;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 862;
            this.match(WatParser.LPAR);
            this.state = 863;
            this.match(WatParser.ASSERT_MALFORMED);
            this.state = 864;
            this.script_module();
            this.state = 865;
            this.match(WatParser.STRING);
            this.state = 866;
            this.match(WatParser.RPAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 868;
            this.match(WatParser.LPAR);
            this.state = 869;
            this.match(WatParser.ASSERT_INVALID);
            this.state = 870;
            this.script_module();
            this.state = 871;
            this.match(WatParser.STRING);
            this.state = 872;
            this.match(WatParser.RPAR);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 874;
            this.match(WatParser.LPAR);
            this.state = 875;
            this.match(WatParser.ASSERT_UNLINKABLE);
            this.state = 876;
            this.script_module();
            this.state = 877;
            this.match(WatParser.STRING);
            this.state = 878;
            this.match(WatParser.RPAR);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 880;
            this.match(WatParser.LPAR);
            this.state = 881;
            this.match(WatParser.ASSERT_TRAP);
            this.state = 882;
            this.script_module();
            this.state = 883;
            this.match(WatParser.STRING);
            this.state = 884;
            this.match(WatParser.RPAR);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 886;
            this.match(WatParser.LPAR);
            this.state = 887;
            this.match(WatParser.ASSERT_RETURN);
            this.state = 888;
            this.action();
            this.state = 889;
            this.const_list();
            this.state = 890;
            this.match(WatParser.RPAR);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 892;
            this.match(WatParser.LPAR);
            this.state = 893;
            this.match(WatParser.ASSERT_RETURN_CANONICAL_NAN);
            this.state = 894;
            this.action();
            this.state = 895;
            this.match(WatParser.RPAR);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 897;
            this.match(WatParser.LPAR);
            this.state = 898;
            this.match(WatParser.ASSERT_RETURN_ARITHMETIC_NAN);
            this.state = 899;
            this.action();
            this.state = 900;
            this.match(WatParser.RPAR);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 902;
            this.match(WatParser.LPAR);
            this.state = 903;
            this.match(WatParser.ASSERT_TRAP);
            this.state = 904;
            this.action();
            this.state = 905;
            this.match(WatParser.STRING);
            this.state = 906;
            this.match(WatParser.RPAR);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 908;
            this.match(WatParser.LPAR);
            this.state = 909;
            this.match(WatParser.ASSERT_EXHAUSTION);
            this.state = 910;
            this.action();
            this.state = 911;
            this.match(WatParser.STRING);
            this.state = 912;
            this.match(WatParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CmdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_cmd;
    return this;
}

CmdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CmdContext.prototype.constructor = CmdContext;

CmdContext.prototype.action = function() {
    return this.getTypedRuleContext(ActionContext,0);
};

CmdContext.prototype.assertion = function() {
    return this.getTypedRuleContext(AssertionContext,0);
};

CmdContext.prototype.script_module = function() {
    return this.getTypedRuleContext(Script_moduleContext,0);
};

CmdContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

CmdContext.prototype.REGISTER = function() {
    return this.getToken(WatParser.REGISTER, 0);
};

CmdContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

CmdContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

CmdContext.prototype.VAR = function() {
    return this.getToken(WatParser.VAR, 0);
};

CmdContext.prototype.meta = function() {
    return this.getTypedRuleContext(MetaContext,0);
};

CmdContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterCmd(this);
	}
};

CmdContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitCmd(this);
	}
};




WatParser.CmdContext = CmdContext;

WatParser.prototype.cmd = function() {

    var localctx = new CmdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, WatParser.RULE_cmd);
    var _la = 0; // Token type
    try {
        this.state = 928;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 916;
            this.action();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 917;
            this.assertion();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 918;
            this.script_module();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 919;
            this.match(WatParser.LPAR);
            this.state = 920;
            this.match(WatParser.REGISTER);
            this.state = 921;
            this.name();
            this.state = 923;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 922;
                this.match(WatParser.VAR);
            }

            this.state = 925;
            this.match(WatParser.RPAR);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 927;
            this.meta();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MetaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_meta;
    return this;
}

MetaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MetaContext.prototype.constructor = MetaContext;

MetaContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

MetaContext.prototype.SCRIPT = function() {
    return this.getToken(WatParser.SCRIPT, 0);
};

MetaContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

MetaContext.prototype.VAR = function() {
    return this.getToken(WatParser.VAR, 0);
};

MetaContext.prototype.cmd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CmdContext);
    } else {
        return this.getTypedRuleContext(CmdContext,i);
    }
};

MetaContext.prototype.INPUT = function() {
    return this.getToken(WatParser.INPUT, 0);
};

MetaContext.prototype.STRING = function() {
    return this.getToken(WatParser.STRING, 0);
};

MetaContext.prototype.OUTPUT = function() {
    return this.getToken(WatParser.OUTPUT, 0);
};

MetaContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterMeta(this);
	}
};

MetaContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitMeta(this);
	}
};




WatParser.MetaContext = MetaContext;

WatParser.prototype.meta = function() {

    var localctx = new MetaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, WatParser.RULE_meta);
    var _la = 0; // Token type
    try {
        this.state = 962;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 930;
            this.match(WatParser.LPAR);
            this.state = 931;
            this.match(WatParser.SCRIPT);
            this.state = 933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 932;
                this.match(WatParser.VAR);
            }

            this.state = 938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.LPAR) {
                this.state = 935;
                this.cmd();
                this.state = 940;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 941;
            this.match(WatParser.RPAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 942;
            this.match(WatParser.LPAR);
            this.state = 943;
            this.match(WatParser.INPUT);
            this.state = 945;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 944;
                this.match(WatParser.VAR);
            }

            this.state = 947;
            this.match(WatParser.STRING);
            this.state = 948;
            this.match(WatParser.RPAR);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 949;
            this.match(WatParser.LPAR);
            this.state = 950;
            this.match(WatParser.OUTPUT);
            this.state = 952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 951;
                this.match(WatParser.VAR);
            }

            this.state = 954;
            this.match(WatParser.STRING);
            this.state = 955;
            this.match(WatParser.RPAR);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 956;
            this.match(WatParser.LPAR);
            this.state = 957;
            this.match(WatParser.OUTPUT);
            this.state = 959;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WatParser.VAR) {
                this.state = 958;
                this.match(WatParser.VAR);
            }

            this.state = 961;
            this.match(WatParser.RPAR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WconstContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_wconst;
    return this;
}

WconstContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WconstContext.prototype.constructor = WconstContext;

WconstContext.prototype.LPAR = function() {
    return this.getToken(WatParser.LPAR, 0);
};

WconstContext.prototype.CONST = function() {
    return this.getToken(WatParser.CONST, 0);
};

WconstContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

WconstContext.prototype.RPAR = function() {
    return this.getToken(WatParser.RPAR, 0);
};

WconstContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterWconst(this);
	}
};

WconstContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitWconst(this);
	}
};




WatParser.WconstContext = WconstContext;

WatParser.prototype.wconst = function() {

    var localctx = new WconstContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, WatParser.RULE_wconst);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 964;
        this.match(WatParser.LPAR);
        this.state = 965;
        this.match(WatParser.CONST);
        this.state = 966;
        this.literal();
        this.state = 967;
        this.match(WatParser.RPAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Const_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_const_list;
    return this;
}

Const_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Const_listContext.prototype.constructor = Const_listContext;

Const_listContext.prototype.wconst = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WconstContext);
    } else {
        return this.getTypedRuleContext(WconstContext,i);
    }
};

Const_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterConst_list(this);
	}
};

Const_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitConst_list(this);
	}
};




WatParser.Const_listContext = Const_listContext;

WatParser.prototype.const_list = function() {

    var localctx = new Const_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, WatParser.RULE_const_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 972;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WatParser.LPAR) {
            this.state = 969;
            this.wconst();
            this.state = 974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_script;
    return this;
}

ScriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptContext.prototype.constructor = ScriptContext;

ScriptContext.prototype.EOF = function() {
    return this.getToken(WatParser.EOF, 0);
};

ScriptContext.prototype.cmd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CmdContext);
    } else {
        return this.getTypedRuleContext(CmdContext,i);
    }
};

ScriptContext.prototype.module_field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_fieldContext);
    } else {
        return this.getTypedRuleContext(Module_fieldContext,i);
    }
};

ScriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterScript(this);
	}
};

ScriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitScript(this);
	}
};




WatParser.ScriptContext = ScriptContext;

WatParser.prototype.script = function() {

    var localctx = new ScriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, WatParser.RULE_script);
    var _la = 0; // Token type
    try {
        this.state = 989;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 978;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.LPAR) {
                this.state = 975;
                this.cmd();
                this.state = 980;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 981;
            this.match(WatParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 983; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 982;
                this.module_field();
                this.state = 985; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===WatParser.LPAR);
            this.state = 987;
            this.match(WatParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WatParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.module_ = function() {
    return this.getTypedRuleContext(Module_Context,0);
};

ModuleContext.prototype.EOF = function() {
    return this.getToken(WatParser.EOF, 0);
};

ModuleContext.prototype.module_field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_fieldContext);
    } else {
        return this.getTypedRuleContext(Module_fieldContext,i);
    }
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof WatParserListener ) {
        listener.exitModule(this);
	}
};




WatParser.ModuleContext = ModuleContext;

WatParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, WatParser.RULE_module);
    var _la = 0; // Token type
    try {
        this.state = 1001;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 991;
            this.module_();
            this.state = 992;
            this.match(WatParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 997;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WatParser.LPAR) {
                this.state = 994;
                this.module_field();
                this.state = 999;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1000;
            this.match(WatParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.WatParser = WatParser;
