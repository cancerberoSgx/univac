// @ts-nocheck
// antlr4 output from Golang.g4 needed to be fixed since it contained Java embedded expressions
// Generated from Golang.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var GolangListener = require('./GolangListener').GolangListener;
var grammarFileName = "Golang.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003M\u039d\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0007\u0002\u00d2\n\u0002\f\u0002\u000e\u0002\u00d5\u000b",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u00da\n\u0002",
    "\f\u0002\u000e\u0002\u00dd\u000b\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0007\u0004\u00e8\n\u0004\f\u0004\u000e\u0004\u00eb\u000b\u0004",
    "\u0003\u0004\u0005\u0004\u00ee\n\u0004\u0003\u0005\u0005\u0005\u00f1",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0005\u0007\u00fa\n\u0007\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u00ff\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0007\t\u0107\n\t\f\t\u000e\t\u010a\u000b\t\u0003\t\u0005\t\u010d\n",
    "\t\u0003\n\u0003\n\u0005\n\u0111\n\n\u0003\n\u0003\n\u0005\n\u0115\n",
    "\n\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u011a\n\u000b\f\u000b",
    "\u000e\u000b\u011d\u000b\u000b\u0003\f\u0003\f\u0003\f\u0007\f\u0122",
    "\n\f\f\f\u000e\f\u0125\u000b\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0007\r\u012d\n\r\f\r\u000e\r\u0130\u000b\r\u0003\r\u0005",
    "\r\u0133\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0005\u000f\u013c\n\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u0146\n\u0011\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013",
    "\u0150\n\u0013\f\u0013\u000e\u0013\u0153\u000b\u0013\u0003\u0013\u0005",
    "\u0013\u0156\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u015c\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0160",
    "\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0007\u0016\u0169\n\u0016\f\u0016\u000e\u0016",
    "\u016c\u000b\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u017d",
    "\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u0185\n\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0005",
    "\u001d\u0195\n\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0003!\u0003!\u0005!\u01a5\n!\u0003\"\u0003\"\u0005\"\u01a9",
    "\n\"\u0003#\u0003#\u0005#\u01ad\n#\u0003$\u0003$\u0003$\u0003%\u0003",
    "%\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u01bb",
    "\n\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u01c2\n\'\u0005",
    "\'\u01c4\n\'\u0003(\u0003(\u0005(\u01c8\n(\u0003)\u0003)\u0003)\u0003",
    ")\u0005)\u01ce\n)\u0003)\u0005)\u01d1\n)\u0003)\u0003)\u0007)\u01d5",
    "\n)\f)\u000e)\u01d8\u000b)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003",
    "*\u0003+\u0003+\u0003+\u0005+\u01e3\n+\u0003,\u0003,\u0003,\u0003,\u0005",
    ",\u01e9\n,\u0003,\u0003,\u0003,\u0007,\u01ee\n,\f,\u000e,\u01f1\u000b",
    ",\u0003,\u0003,\u0003-\u0003-\u0005-\u01f7\n-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0005",
    "/\u0206\n/\u00030\u00030\u00030\u00070\u020b\n0\f0\u000e0\u020e\u000b",
    "0\u00031\u00031\u00031\u00071\u0213\n1\f1\u000e1\u0216\u000b1\u0003",
    "1\u00031\u00032\u00032\u00032\u00032\u00033\u00033\u00033\u00053\u0221",
    "\n3\u00033\u00053\u0224\n3\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00054\u022c\n4\u00034\u00034\u00035\u00035\u00035\u00035\u00055\u0234",
    "\n5\u00035\u00035\u00036\u00056\u0239\n6\u00036\u00036\u00056\u023d",
    "\n6\u00036\u00036\u00056\u0241\n6\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00057\u0249\n7\u00037\u00037\u00037\u00038\u00038\u00038\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00059\u0257\n9\u0003:\u0003:\u0005",
    ":\u025b\n:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005",
    ";\u0265\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003>\u0003",
    ">\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0007@\u0278",
    "\n@\f@\u000e@\u027b\u000b@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003",
    "A\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0005C\u028e\nC\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0005D\u029a\nD\u0003E\u0003E\u0003E\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0005F\u02a4\nF\u0003G\u0003G\u0005G\u02a8\n",
    "G\u0003H\u0003H\u0003H\u0005H\u02ad\nH\u0005H\u02af\nH\u0003H\u0003",
    "H\u0003I\u0003I\u0003I\u0007I\u02b6\nI\fI\u000eI\u02b9\u000bI\u0003",
    "J\u0005J\u02bc\nJ\u0003J\u0005J\u02bf\nJ\u0003J\u0003J\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u02ca\nK\u0003L\u0003L\u0003",
    "L\u0005L\u02cf\nL\u0003M\u0003M\u0003N\u0003N\u0005N\u02d5\nN\u0003",
    "O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u02e7\nQ\u0003R\u0003R\u0003",
    "R\u0005R\u02ec\nR\u0005R\u02ee\nR\u0003R\u0003R\u0003S\u0003S\u0003",
    "S\u0007S\u02f5\nS\fS\u000eS\u02f8\u000bS\u0003T\u0003T\u0003T\u0005",
    "T\u02fd\nT\u0003T\u0003T\u0003U\u0003U\u0003U\u0005U\u0304\nU\u0003",
    "V\u0003V\u0005V\u0308\nV\u0003W\u0003W\u0003W\u0003W\u0003W\u0007W\u030f",
    "\nW\fW\u000eW\u0312\u000bW\u0003W\u0003W\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0005X\u031b\nX\u0003X\u0005X\u031e\nX\u0003Y\u0005Y\u0321",
    "\nY\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0005[\u032b",
    "\n[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0007[\u0337\n[\f[\u000e[\u033a\u000b[\u0003\\\u0003\\\u0003\\\u0003",
    "]\u0003]\u0003]\u0003]\u0003^\u0003^\u0005^\u0345\n^\u0003^\u0003^\u0005",
    "^\u0349\n^\u0003^\u0005^\u034c\n^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0005^\u0353\n^\u0003^\u0003^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0005`\u0361\n`\u0005`\u0363\n`\u0003",
    "`\u0005`\u0366\n`\u0003`\u0005`\u0369\n`\u0005`\u036b\n`\u0003`\u0003",
    "`\u0003a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0005b\u037d\nb\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0007c\u0385\nc\fc\u000ec\u0388\u000bc\u0003d\u0003",
    "d\u0003d\u0005d\u038d\nd\u0003e\u0003e\u0003e\u0003e\u0005e\u0393\n",
    "e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0005f\u039b\nf\u0003f\u0002",
    "\u0004\u00b4\u00c4g\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8",
    "\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0",
    "\u00c2\u00c4\u00c6\u00c8\u00ca\u0002\b\u0004\u0002\u0007\u0007@@\u0003",
    "\u0002\u0011\u0012\u0003\u0002\u0013\u001d\u0004\u0002CFII\u0004\u0002",
    "\u0013\u001d7>\u0007\u0002\u0010\u0010\u0013\u0014\u0016\u0017\u001c",
    "\u001c??\u0002\u03c3\u0002\u00cc\u0003\u0002\u0002\u0002\u0004\u00de",
    "\u0003\u0002\u0002\u0002\u0006\u00e1\u0003\u0002\u0002\u0002\b\u00f0",
    "\u0003\u0002\u0002\u0002\n\u00f4\u0003\u0002\u0002\u0002\f\u00f9\u0003",
    "\u0002\u0002\u0002\u000e\u00fe\u0003\u0002\u0002\u0002\u0010\u0100\u0003",
    "\u0002\u0002\u0002\u0012\u010e\u0003\u0002\u0002\u0002\u0014\u0116\u0003",
    "\u0002\u0002\u0002\u0016\u011e\u0003\u0002\u0002\u0002\u0018\u0126\u0003",
    "\u0002\u0002\u0002\u001a\u0134\u0003\u0002\u0002\u0002\u001c\u0137\u0003",
    "\u0002\u0002\u0002\u001e\u013d\u0003\u0002\u0002\u0002 \u0140\u0003",
    "\u0002\u0002\u0002\"\u0147\u0003\u0002\u0002\u0002$\u0149\u0003\u0002",
    "\u0002\u0002&\u0157\u0003\u0002\u0002\u0002(\u0161\u0003\u0002\u0002",
    "\u0002*\u016a\u0003\u0002\u0002\u0002,\u017c\u0003\u0002\u0002\u0002",
    ".\u0184\u0003\u0002\u0002\u00020\u0186\u0003\u0002\u0002\u00022\u0188",
    "\u0003\u0002\u0002\u00024\u018c\u0003\u0002\u0002\u00026\u018f\u0003",
    "\u0002\u0002\u00028\u0194\u0003\u0002\u0002\u0002:\u0198\u0003\u0002",
    "\u0002\u0002<\u019c\u0003\u0002\u0002\u0002>\u019e\u0003\u0002\u0002",
    "\u0002@\u01a2\u0003\u0002\u0002\u0002B\u01a6\u0003\u0002\u0002\u0002",
    "D\u01aa\u0003\u0002\u0002\u0002F\u01ae\u0003\u0002\u0002\u0002H\u01b1",
    "\u0003\u0002\u0002\u0002J\u01b3\u0003\u0002\u0002\u0002L\u01b6\u0003",
    "\u0002\u0002\u0002N\u01c7\u0003\u0002\u0002\u0002P\u01c9\u0003\u0002",
    "\u0002\u0002R\u01db\u0003\u0002\u0002\u0002T\u01e2\u0003\u0002\u0002",
    "\u0002V\u01e4\u0003\u0002\u0002\u0002X\u01f6\u0003\u0002\u0002\u0002",
    "Z\u01fe\u0003\u0002\u0002\u0002\\\u0205\u0003\u0002\u0002\u0002^\u0207",
    "\u0003\u0002\u0002\u0002`\u020f\u0003\u0002\u0002\u0002b\u0219\u0003",
    "\u0002\u0002\u0002d\u0223\u0003\u0002\u0002\u0002f\u022b\u0003\u0002",
    "\u0002\u0002h\u022f\u0003\u0002\u0002\u0002j\u0238\u0003\u0002\u0002",
    "\u0002l\u0248\u0003\u0002\u0002\u0002n\u024d\u0003\u0002\u0002\u0002",
    "p\u0256\u0003\u0002\u0002\u0002r\u025a\u0003\u0002\u0002\u0002t\u0264",
    "\u0003\u0002\u0002\u0002v\u0266\u0003\u0002\u0002\u0002x\u026b\u0003",
    "\u0002\u0002\u0002z\u026d\u0003\u0002\u0002\u0002|\u026f\u0003\u0002",
    "\u0002\u0002~\u0272\u0003\u0002\u0002\u0002\u0080\u027e\u0003\u0002",
    "\u0002\u0002\u0082\u0282\u0003\u0002\u0002\u0002\u0084\u028d\u0003\u0002",
    "\u0002\u0002\u0086\u0299\u0003\u0002\u0002\u0002\u0088\u029b\u0003\u0002",
    "\u0002\u0002\u008a\u02a3\u0003\u0002\u0002\u0002\u008c\u02a7\u0003\u0002",
    "\u0002\u0002\u008e\u02a9\u0003\u0002\u0002\u0002\u0090\u02b2\u0003\u0002",
    "\u0002\u0002\u0092\u02bb\u0003\u0002\u0002\u0002\u0094\u02c9\u0003\u0002",
    "\u0002\u0002\u0096\u02ce\u0003\u0002\u0002\u0002\u0098\u02d0\u0003\u0002",
    "\u0002\u0002\u009a\u02d4\u0003\u0002\u0002\u0002\u009c\u02d6\u0003\u0002",
    "\u0002\u0002\u009e\u02da\u0003\u0002\u0002\u0002\u00a0\u02e6\u0003\u0002",
    "\u0002\u0002\u00a2\u02e8\u0003\u0002\u0002\u0002\u00a4\u02f1\u0003\u0002",
    "\u0002\u0002\u00a6\u02fc\u0003\u0002\u0002\u0002\u00a8\u0303\u0003\u0002",
    "\u0002\u0002\u00aa\u0307\u0003\u0002\u0002\u0002\u00ac\u0309\u0003\u0002",
    "\u0002\u0002\u00ae\u031a\u0003\u0002\u0002\u0002\u00b0\u0320\u0003\u0002",
    "\u0002\u0002\u00b2\u0324\u0003\u0002\u0002\u0002\u00b4\u032a\u0003\u0002",
    "\u0002\u0002\u00b6\u033b\u0003\u0002\u0002\u0002\u00b8\u033e\u0003\u0002",
    "\u0002\u0002\u00ba\u0342\u0003\u0002\u0002\u0002\u00bc\u0356\u0003\u0002",
    "\u0002\u0002\u00be\u035b\u0003\u0002\u0002\u0002\u00c0\u036e\u0003\u0002",
    "\u0002\u0002\u00c2\u037c\u0003\u0002\u0002\u0002\u00c4\u037e\u0003\u0002",
    "\u0002\u0002\u00c6\u038c\u0003\u0002\u0002\u0002\u00c8\u038e\u0003\u0002",
    "\u0002\u0002\u00ca\u039a\u0003\u0002\u0002\u0002\u00cc\u00cd\u0005\u0004",
    "\u0003\u0002\u00cd\u00d3\u0005\u00caf\u0002\u00ce\u00cf\u0005\u0006",
    "\u0004\u0002\u00cf\u00d0\u0005\u00caf\u0002\u00d0\u00d2\u0003\u0002",
    "\u0002\u0002\u00d1\u00ce\u0003\u0002\u0002\u0002\u00d2\u00d5\u0003\u0002",
    "\u0002\u0002\u00d3\u00d1\u0003\u0002\u0002\u0002\u00d3\u00d4\u0003\u0002",
    "\u0002\u0002\u00d4\u00db\u0003\u0002\u0002\u0002\u00d5\u00d3\u0003\u0002",
    "\u0002\u0002\u00d6\u00d7\u0005\f\u0007\u0002\u00d7\u00d8\u0005\u00ca",
    "f\u0002\u00d8\u00da\u0003\u0002\u0002\u0002\u00d9\u00d6\u0003\u0002",
    "\u0002\u0002\u00da\u00dd\u0003\u0002\u0002\u0002\u00db\u00d9\u0003\u0002",
    "\u0002\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u0003\u0003\u0002",
    "\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00de\u00df\u0007\u0003",
    "\u0002\u0002\u00df\u00e0\u0007@\u0002\u0002\u00e0\u0005\u0003\u0002",
    "\u0002\u0002\u00e1\u00ed\u0007\u0004\u0002\u0002\u00e2\u00ee\u0005\b",
    "\u0005\u0002\u00e3\u00e9\u0007\u0005\u0002\u0002\u00e4\u00e5\u0005\b",
    "\u0005\u0002\u00e5\u00e6\u0005\u00caf\u0002\u00e6\u00e8\u0003\u0002",
    "\u0002\u0002\u00e7\u00e4\u0003\u0002\u0002\u0002\u00e8\u00eb\u0003\u0002",
    "\u0002\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002\u00e9\u00ea\u0003\u0002",
    "\u0002\u0002\u00ea\u00ec\u0003\u0002\u0002\u0002\u00eb\u00e9\u0003\u0002",
    "\u0002\u0002\u00ec\u00ee\u0007\u0006\u0002\u0002\u00ed\u00e2\u0003\u0002",
    "\u0002\u0002\u00ed\u00e3\u0003\u0002\u0002\u0002\u00ee\u0007\u0003\u0002",
    "\u0002\u0002\u00ef\u00f1\t\u0002\u0002\u0002\u00f0\u00ef\u0003\u0002",
    "\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002",
    "\u0002\u0002\u00f2\u00f3\u0005\n\u0006\u0002\u00f3\t\u0003\u0002\u0002",
    "\u0002\u00f4\u00f5\u0007I\u0002\u0002\u00f5\u000b\u0003\u0002\u0002",
    "\u0002\u00f6\u00fa\u0005\u000e\b\u0002\u00f7\u00fa\u0005\u001c\u000f",
    "\u0002\u00f8\u00fa\u0005 \u0011\u0002\u00f9\u00f6\u0003\u0002\u0002",
    "\u0002\u00f9\u00f7\u0003\u0002\u0002\u0002\u00f9\u00f8\u0003\u0002\u0002",
    "\u0002\u00fa\r\u0003\u0002\u0002\u0002\u00fb\u00ff\u0005\u0010\t\u0002",
    "\u00fc\u00ff\u0005\u0018\r\u0002\u00fd\u00ff\u0005$\u0013\u0002\u00fe",
    "\u00fb\u0003\u0002\u0002\u0002\u00fe\u00fc\u0003\u0002\u0002\u0002\u00fe",
    "\u00fd\u0003\u0002\u0002\u0002\u00ff\u000f\u0003\u0002\u0002\u0002\u0100",
    "\u010c\u0007\b\u0002\u0002\u0101\u010d\u0005\u0012\n\u0002\u0102\u0108",
    "\u0007\u0005\u0002\u0002\u0103\u0104\u0005\u0012\n\u0002\u0104\u0105",
    "\u0005\u00caf\u0002\u0105\u0107\u0003\u0002\u0002\u0002\u0106\u0103",
    "\u0003\u0002\u0002\u0002\u0107\u010a\u0003\u0002\u0002\u0002\u0108\u0106",
    "\u0003\u0002\u0002\u0002\u0108\u0109\u0003\u0002\u0002\u0002\u0109\u010b",
    "\u0003\u0002\u0002\u0002\u010a\u0108\u0003\u0002\u0002\u0002\u010b\u010d",
    "\u0007\u0006\u0002\u0002\u010c\u0101\u0003\u0002\u0002\u0002\u010c\u0102",
    "\u0003\u0002\u0002\u0002\u010d\u0011\u0003\u0002\u0002\u0002\u010e\u0114",
    "\u0005\u0014\u000b\u0002\u010f\u0111\u0005p9\u0002\u0110\u010f\u0003",
    "\u0002\u0002\u0002\u0110\u0111\u0003\u0002\u0002\u0002\u0111\u0112\u0003",
    "\u0002\u0002\u0002\u0112\u0113\u0007\t\u0002\u0002\u0113\u0115\u0005",
    "\u0016\f\u0002\u0114\u0110\u0003\u0002\u0002\u0002\u0114\u0115\u0003",
    "\u0002\u0002\u0002\u0115\u0013\u0003\u0002\u0002\u0002\u0116\u011b\u0007",
    "@\u0002\u0002\u0117\u0118\u0007\n\u0002\u0002\u0118\u011a\u0007@\u0002",
    "\u0002\u0119\u0117\u0003\u0002\u0002\u0002\u011a\u011d\u0003\u0002\u0002",
    "\u0002\u011b\u0119\u0003\u0002\u0002\u0002\u011b\u011c\u0003\u0002\u0002",
    "\u0002\u011c\u0015\u0003\u0002\u0002\u0002\u011d\u011b\u0003\u0002\u0002",
    "\u0002\u011e\u0123\u0005\u00c4c\u0002\u011f\u0120\u0007\n\u0002\u0002",
    "\u0120\u0122\u0005\u00c4c\u0002\u0121\u011f\u0003\u0002\u0002\u0002",
    "\u0122\u0125\u0003\u0002\u0002\u0002\u0123\u0121\u0003\u0002\u0002\u0002",
    "\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u0017\u0003\u0002\u0002\u0002",
    "\u0125\u0123\u0003\u0002\u0002\u0002\u0126\u0132\u0007\u000b\u0002\u0002",
    "\u0127\u0133\u0005\u001a\u000e\u0002\u0128\u012e\u0007\u0005\u0002\u0002",
    "\u0129\u012a\u0005\u001a\u000e\u0002\u012a\u012b\u0005\u00caf\u0002",
    "\u012b\u012d\u0003\u0002\u0002\u0002\u012c\u0129\u0003\u0002\u0002\u0002",
    "\u012d\u0130\u0003\u0002\u0002\u0002\u012e\u012c\u0003\u0002\u0002\u0002",
    "\u012e\u012f\u0003\u0002\u0002\u0002\u012f\u0131\u0003\u0002\u0002\u0002",
    "\u0130\u012e\u0003\u0002\u0002\u0002\u0131\u0133\u0007\u0006\u0002\u0002",
    "\u0132\u0127\u0003\u0002\u0002\u0002\u0132\u0128\u0003\u0002\u0002\u0002",
    "\u0133\u0019\u0003\u0002\u0002\u0002\u0134\u0135\u0007@\u0002\u0002",
    "\u0135\u0136\u0005p9\u0002\u0136\u001b\u0003\u0002\u0002\u0002\u0137",
    "\u0138\u0007\f\u0002\u0002\u0138\u013b\u0007@\u0002\u0002\u0139\u013c",
    "\u0005\u001e\u0010\u0002\u013a\u013c\u0005\u008aF\u0002\u013b\u0139",
    "\u0003\u0002\u0002\u0002\u013b\u013a\u0003\u0002\u0002\u0002\u013c\u001d",
    "\u0003\u0002\u0002\u0002\u013d\u013e\u0005\u008aF\u0002\u013e\u013f",
    "\u0005(\u0015\u0002\u013f\u001f\u0003\u0002\u0002\u0002\u0140\u0141",
    "\u0007\f\u0002\u0002\u0141\u0142\u0005\"\u0012\u0002\u0142\u0145\u0007",
    "@\u0002\u0002\u0143\u0146\u0005\u001e\u0010\u0002\u0144\u0146\u0005",
    "\u008aF\u0002\u0145\u0143\u0003\u0002\u0002\u0002\u0145\u0144\u0003",
    "\u0002\u0002\u0002\u0146!\u0003\u0002\u0002\u0002\u0147\u0148\u0005",
    "\u008eH\u0002\u0148#\u0003\u0002\u0002\u0002\u0149\u0155\u0007\r\u0002",
    "\u0002\u014a\u0156\u0005&\u0014\u0002\u014b\u0151\u0007\u0005\u0002",
    "\u0002\u014c\u014d\u0005&\u0014\u0002\u014d\u014e\u0005\u00caf\u0002",
    "\u014e\u0150\u0003\u0002\u0002\u0002\u014f\u014c\u0003\u0002\u0002\u0002",
    "\u0150\u0153\u0003\u0002\u0002\u0002\u0151\u014f\u0003\u0002\u0002\u0002",
    "\u0151\u0152\u0003\u0002\u0002\u0002\u0152\u0154\u0003\u0002\u0002\u0002",
    "\u0153\u0151\u0003\u0002\u0002\u0002\u0154\u0156\u0007\u0006\u0002\u0002",
    "\u0155\u014a\u0003\u0002\u0002\u0002\u0155\u014b\u0003\u0002\u0002\u0002",
    "\u0156%\u0003\u0002\u0002\u0002\u0157\u015f\u0005\u0014\u000b\u0002",
    "\u0158\u015b\u0005p9\u0002\u0159\u015a\u0007\t\u0002\u0002\u015a\u015c",
    "\u0005\u0016\f\u0002\u015b\u0159\u0003\u0002\u0002\u0002\u015b\u015c",
    "\u0003\u0002\u0002\u0002\u015c\u0160\u0003\u0002\u0002\u0002\u015d\u015e",
    "\u0007\t\u0002\u0002\u015e\u0160\u0005\u0016\f\u0002\u015f\u0158\u0003",
    "\u0002\u0002\u0002\u015f\u015d\u0003\u0002\u0002\u0002\u0160\'\u0003",
    "\u0002\u0002\u0002\u0161\u0162\u0007\u000e\u0002\u0002\u0162\u0163\u0005",
    "*\u0016\u0002\u0163\u0164\u0007\u000f\u0002\u0002\u0164)\u0003\u0002",
    "\u0002\u0002\u0165\u0166\u0005,\u0017\u0002\u0166\u0167\u0005\u00ca",
    "f\u0002\u0167\u0169\u0003\u0002\u0002\u0002\u0168\u0165\u0003\u0002",
    "\u0002\u0002\u0169\u016c\u0003\u0002\u0002\u0002\u016a\u0168\u0003\u0002",
    "\u0002\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b+\u0003\u0002",
    "\u0002\u0002\u016c\u016a\u0003\u0002\u0002\u0002\u016d\u017d\u0005\u000e",
    "\b\u0002\u016e\u017d\u0005> \u0002\u016f\u017d\u0005.\u0018\u0002\u0170",
    "\u017d\u0005n8\u0002\u0171\u017d\u0005@!\u0002\u0172\u017d\u0005B\"",
    "\u0002\u0173\u017d\u0005D#\u0002\u0174\u017d\u0005F$\u0002\u0175\u017d",
    "\u0005H%\u0002\u0176\u017d\u0005(\u0015\u0002\u0177\u017d\u0005L\'\u0002",
    "\u0178\u017d\u0005N(\u0002\u0179\u017d\u0005`1\u0002\u017a\u017d\u0005",
    "h5\u0002\u017b\u017d\u0005J&\u0002\u017c\u016d\u0003\u0002\u0002\u0002",
    "\u017c\u016e\u0003\u0002\u0002\u0002\u017c\u016f\u0003\u0002\u0002\u0002",
    "\u017c\u0170\u0003\u0002\u0002\u0002\u017c\u0171\u0003\u0002\u0002\u0002",
    "\u017c\u0172\u0003\u0002\u0002\u0002\u017c\u0173\u0003\u0002\u0002\u0002",
    "\u017c\u0174\u0003\u0002\u0002\u0002\u017c\u0175\u0003\u0002\u0002\u0002",
    "\u017c\u0176\u0003\u0002\u0002\u0002\u017c\u0177\u0003\u0002\u0002\u0002",
    "\u017c\u0178\u0003\u0002\u0002\u0002\u017c\u0179\u0003\u0002\u0002\u0002",
    "\u017c\u017a\u0003\u0002\u0002\u0002\u017c\u017b\u0003\u0002\u0002\u0002",
    "\u017d-\u0003\u0002\u0002\u0002\u017e\u0185\u00052\u001a\u0002\u017f",
    "\u0185\u00050\u0019\u0002\u0180\u0185\u00054\u001b\u0002\u0181\u0185",
    "\u00056\u001c\u0002\u0182\u0185\u0005:\u001e\u0002\u0183\u0185\u0005",
    "<\u001f\u0002\u0184\u017e\u0003\u0002\u0002\u0002\u0184\u017f\u0003",
    "\u0002\u0002\u0002\u0184\u0180\u0003\u0002\u0002\u0002\u0184\u0181\u0003",
    "\u0002\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184\u0183\u0003",
    "\u0002\u0002\u0002\u0185/\u0003\u0002\u0002\u0002\u0186\u0187\u0005",
    "\u00c4c\u0002\u01871\u0003\u0002\u0002\u0002\u0188\u0189\u0005\u00c4",
    "c\u0002\u0189\u018a\u0007\u0010\u0002\u0002\u018a\u018b\u0005\u00c4",
    "c\u0002\u018b3\u0003\u0002\u0002\u0002\u018c\u018d\u0005\u00c4c\u0002",
    "\u018d\u018e\t\u0003\u0002\u0002\u018e5\u0003\u0002\u0002\u0002\u018f",
    "\u0190\u0005\u0016\f\u0002\u0190\u0191\u00058\u001d\u0002\u0191\u0192",
    "\u0005\u0016\f\u0002\u01927\u0003\u0002\u0002\u0002\u0193\u0195\t\u0004",
    "\u0002\u0002\u0194\u0193\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002",
    "\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0197\u0007\t",
    "\u0002\u0002\u01979\u0003\u0002\u0002\u0002\u0198\u0199\u0005\u0014",
    "\u000b\u0002\u0199\u019a\u0007\u001e\u0002\u0002\u019a\u019b\u0005\u0016",
    "\f\u0002\u019b;\u0003\u0002\u0002\u0002\u019c\u019d\u0007\u001f\u0002",
    "\u0002\u019d=\u0003\u0002\u0002\u0002\u019e\u019f\u0007@\u0002\u0002",
    "\u019f\u01a0\u0007 \u0002\u0002\u01a0\u01a1\u0005,\u0017\u0002\u01a1",
    "?\u0003\u0002\u0002\u0002\u01a2\u01a4\u0007!\u0002\u0002\u01a3\u01a5",
    "\u0005\u0016\f\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002\u01a4\u01a5",
    "\u0003\u0002\u0002\u0002\u01a5A\u0003\u0002\u0002\u0002\u01a6\u01a8",
    "\u0007\"\u0002\u0002\u01a7\u01a9\u0007@\u0002\u0002\u01a8\u01a7\u0003",
    "\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9C\u0003",
    "\u0002\u0002\u0002\u01aa\u01ac\u0007#\u0002\u0002\u01ab\u01ad\u0007",
    "@\u0002\u0002\u01ac\u01ab\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003",
    "\u0002\u0002\u0002\u01adE\u0003\u0002\u0002\u0002\u01ae\u01af\u0007",
    "$\u0002\u0002\u01af\u01b0\u0007@\u0002\u0002\u01b0G\u0003\u0002\u0002",
    "\u0002\u01b1\u01b2\u0007%\u0002\u0002\u01b2I\u0003\u0002\u0002\u0002",
    "\u01b3\u01b4\u0007&\u0002\u0002\u01b4\u01b5\u0005\u00c4c\u0002\u01b5",
    "K\u0003\u0002\u0002\u0002\u01b6\u01ba\u0007\'\u0002\u0002\u01b7\u01b8",
    "\u0005.\u0018\u0002\u01b8\u01b9\u0007\u001f\u0002\u0002\u01b9\u01bb",
    "\u0003\u0002\u0002\u0002\u01ba\u01b7\u0003\u0002\u0002\u0002\u01ba\u01bb",
    "\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bd",
    "\u0005\u00c4c\u0002\u01bd\u01c3\u0005(\u0015\u0002\u01be\u01c1\u0007",
    "(\u0002\u0002\u01bf\u01c2\u0005L\'\u0002\u01c0\u01c2\u0005(\u0015\u0002",
    "\u01c1\u01bf\u0003\u0002\u0002\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002",
    "\u01c2\u01c4\u0003\u0002\u0002\u0002\u01c3\u01be\u0003\u0002\u0002\u0002",
    "\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4M\u0003\u0002\u0002\u0002",
    "\u01c5\u01c8\u0005P)\u0002\u01c6\u01c8\u0005V,\u0002\u01c7\u01c5\u0003",
    "\u0002\u0002\u0002\u01c7\u01c6\u0003\u0002\u0002\u0002\u01c8O\u0003",
    "\u0002\u0002\u0002\u01c9\u01cd\u0007)\u0002\u0002\u01ca\u01cb\u0005",
    ".\u0018\u0002\u01cb\u01cc\u0007\u001f\u0002\u0002\u01cc\u01ce\u0003",
    "\u0002\u0002\u0002\u01cd\u01ca\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003",
    "\u0002\u0002\u0002\u01ce\u01d0\u0003\u0002\u0002\u0002\u01cf\u01d1\u0005",
    "\u00c4c\u0002\u01d0\u01cf\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003",
    "\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d6\u0007",
    "\u000e\u0002\u0002\u01d3\u01d5\u0005R*\u0002\u01d4\u01d3\u0003\u0002",
    "\u0002\u0002\u01d5\u01d8\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002",
    "\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d9\u0003\u0002",
    "\u0002\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d9\u01da\u0007\u000f",
    "\u0002\u0002\u01daQ\u0003\u0002\u0002\u0002\u01db\u01dc\u0005T+\u0002",
    "\u01dc\u01dd\u0007 \u0002\u0002\u01dd\u01de\u0005*\u0016\u0002\u01de",
    "S\u0003\u0002\u0002\u0002\u01df\u01e0\u0007*\u0002\u0002\u01e0\u01e3",
    "\u0005\u0016\f\u0002\u01e1\u01e3\u0007+\u0002\u0002\u01e2\u01df\u0003",
    "\u0002\u0002\u0002\u01e2\u01e1\u0003\u0002\u0002\u0002\u01e3U\u0003",
    "\u0002\u0002\u0002\u01e4\u01e8\u0007)\u0002\u0002\u01e5\u01e6\u0005",
    ".\u0018\u0002\u01e6\u01e7\u0007\u001f\u0002\u0002\u01e7\u01e9\u0003",
    "\u0002\u0002\u0002\u01e8\u01e5\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003",
    "\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01eb\u0005",
    "X-\u0002\u01eb\u01ef\u0007\u000e\u0002\u0002\u01ec\u01ee\u0005Z.\u0002",
    "\u01ed\u01ec\u0003\u0002\u0002\u0002\u01ee\u01f1\u0003\u0002\u0002\u0002",
    "\u01ef\u01ed\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002\u0002",
    "\u01f0\u01f2\u0003\u0002\u0002\u0002\u01f1\u01ef\u0003\u0002\u0002\u0002",
    "\u01f2\u01f3\u0007\u000f\u0002\u0002\u01f3W\u0003\u0002\u0002\u0002",
    "\u01f4\u01f5\u0007@\u0002\u0002\u01f5\u01f7\u0007\u001e\u0002\u0002",
    "\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002\u0002\u0002",
    "\u01f7\u01f8\u0003\u0002\u0002\u0002\u01f8\u01f9\u0005\u00b4[\u0002",
    "\u01f9\u01fa\u0007\u0007\u0002\u0002\u01fa\u01fb\u0007\u0005\u0002\u0002",
    "\u01fb\u01fc\u0007\u000b\u0002\u0002\u01fc\u01fd\u0007\u0006\u0002\u0002",
    "\u01fdY\u0003\u0002\u0002\u0002\u01fe\u01ff\u0005\\/\u0002\u01ff\u0200",
    "\u0007 \u0002\u0002\u0200\u0201\u0005*\u0016\u0002\u0201[\u0003\u0002",
    "\u0002\u0002\u0202\u0203\u0007*\u0002\u0002\u0203\u0206\u0005^0\u0002",
    "\u0204\u0206\u0007+\u0002\u0002\u0205\u0202\u0003\u0002\u0002\u0002",
    "\u0205\u0204\u0003\u0002\u0002\u0002\u0206]\u0003\u0002\u0002\u0002",
    "\u0207\u020c\u0005p9\u0002\u0208\u0209\u0007\n\u0002\u0002\u0209\u020b",
    "\u0005p9\u0002\u020a\u0208\u0003\u0002\u0002\u0002\u020b\u020e\u0003",
    "\u0002\u0002\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020c\u020d\u0003",
    "\u0002\u0002\u0002\u020d_\u0003\u0002\u0002\u0002\u020e\u020c\u0003",
    "\u0002\u0002\u0002\u020f\u0210\u0007,\u0002\u0002\u0210\u0214\u0007",
    "\u000e\u0002\u0002\u0211\u0213\u0005b2\u0002\u0212\u0211\u0003\u0002",
    "\u0002\u0002\u0213\u0216\u0003\u0002\u0002\u0002\u0214\u0212\u0003\u0002",
    "\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u0217\u0003\u0002",
    "\u0002\u0002\u0216\u0214\u0003\u0002\u0002\u0002\u0217\u0218\u0007\u000f",
    "\u0002\u0002\u0218a\u0003\u0002\u0002\u0002\u0219\u021a\u0005d3\u0002",
    "\u021a\u021b\u0007 \u0002\u0002\u021b\u021c\u0005*\u0016\u0002\u021c",
    "c\u0003\u0002\u0002\u0002\u021d\u0220\u0007*\u0002\u0002\u021e\u0221",
    "\u00052\u001a\u0002\u021f\u0221\u0005f4\u0002\u0220\u021e\u0003\u0002",
    "\u0002\u0002\u0220\u021f\u0003\u0002\u0002\u0002\u0221\u0224\u0003\u0002",
    "\u0002\u0002\u0222\u0224\u0007+\u0002\u0002\u0223\u021d\u0003\u0002",
    "\u0002\u0002\u0223\u0222\u0003\u0002\u0002\u0002\u0224e\u0003\u0002",
    "\u0002\u0002\u0225\u0226\u0005\u0016\f\u0002\u0226\u0227\u0007\t\u0002",
    "\u0002\u0227\u022c\u0003\u0002\u0002\u0002\u0228\u0229\u0005\u0014\u000b",
    "\u0002\u0229\u022a\u0007\u001e\u0002\u0002\u022a\u022c\u0003\u0002\u0002",
    "\u0002\u022b\u0225\u0003\u0002\u0002\u0002\u022b\u0228\u0003\u0002\u0002",
    "\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c\u022d\u0003\u0002\u0002",
    "\u0002\u022d\u022e\u0005\u00c4c\u0002\u022eg\u0003\u0002\u0002\u0002",
    "\u022f\u0233\u0007-\u0002\u0002\u0230\u0234\u0005\u00c4c\u0002\u0231",
    "\u0234\u0005j6\u0002\u0232\u0234\u0005l7\u0002\u0233\u0230\u0003\u0002",
    "\u0002\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0233\u0232\u0003\u0002",
    "\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002",
    "\u0002\u0002\u0235\u0236\u0005(\u0015\u0002\u0236i\u0003\u0002\u0002",
    "\u0002\u0237\u0239\u0005.\u0018\u0002\u0238\u0237\u0003\u0002\u0002",
    "\u0002\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u023a\u0003\u0002\u0002",
    "\u0002\u023a\u023c\u0007\u001f\u0002\u0002\u023b\u023d\u0005\u00c4c",
    "\u0002\u023c\u023b\u0003\u0002\u0002\u0002\u023c\u023d\u0003\u0002\u0002",
    "\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e\u0240\u0007\u001f\u0002",
    "\u0002\u023f\u0241\u0005.\u0018\u0002\u0240\u023f\u0003\u0002\u0002",
    "\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241k\u0003\u0002\u0002",
    "\u0002\u0242\u0243\u0005\u0016\f\u0002\u0243\u0244\u0007\t\u0002\u0002",
    "\u0244\u0249\u0003\u0002\u0002\u0002\u0245\u0246\u0005\u0014\u000b\u0002",
    "\u0246\u0247\u0007\u001e\u0002\u0002\u0247\u0249\u0003\u0002\u0002\u0002",
    "\u0248\u0242\u0003\u0002\u0002\u0002\u0248\u0245\u0003\u0002\u0002\u0002",
    "\u0248\u0249\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002",
    "\u024a\u024b\u0007.\u0002\u0002\u024b\u024c\u0005\u00c4c\u0002\u024c",
    "m\u0003\u0002\u0002\u0002\u024d\u024e\u0007/\u0002\u0002\u024e\u024f",
    "\u0005\u00c4c\u0002\u024fo\u0003\u0002\u0002\u0002\u0250\u0257\u0005",
    "r:\u0002\u0251\u0257\u0005t;\u0002\u0252\u0253\u0007\u0005\u0002\u0002",
    "\u0253\u0254\u0005p9\u0002\u0254\u0255\u0007\u0006\u0002\u0002\u0255",
    "\u0257\u0003\u0002\u0002\u0002\u0256\u0250\u0003\u0002\u0002\u0002\u0256",
    "\u0251\u0003\u0002\u0002\u0002\u0256\u0252\u0003\u0002\u0002\u0002\u0257",
    "q\u0003\u0002\u0002\u0002\u0258\u025b\u0007@\u0002\u0002\u0259\u025b",
    "\u0005\u009cO\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u0259",
    "\u0003\u0002\u0002\u0002\u025bs\u0003\u0002\u0002\u0002\u025c\u0265",
    "\u0005v<\u0002\u025d\u0265\u0005\u00acW\u0002\u025e\u0265\u0005|?\u0002",
    "\u025f\u0265\u0005\u0088E\u0002\u0260\u0265\u0005~@\u0002\u0261\u0265",
    "\u0005\u0080A\u0002\u0262\u0265\u0005\u0082B\u0002\u0263\u0265\u0005",
    "\u0084C\u0002\u0264\u025c\u0003\u0002\u0002\u0002\u0264\u025d\u0003",
    "\u0002\u0002\u0002\u0264\u025e\u0003\u0002\u0002\u0002\u0264\u025f\u0003",
    "\u0002\u0002\u0002\u0264\u0260\u0003\u0002\u0002\u0002\u0264\u0261\u0003",
    "\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0264\u0263\u0003",
    "\u0002\u0002\u0002\u0265u\u0003\u0002\u0002\u0002\u0266\u0267\u0007",
    "0\u0002\u0002\u0267\u0268\u0005x=\u0002\u0268\u0269\u00071\u0002\u0002",
    "\u0269\u026a\u0005z>\u0002\u026aw\u0003\u0002\u0002\u0002\u026b\u026c",
    "\u0005\u00c4c\u0002\u026cy\u0003\u0002\u0002\u0002\u026d\u026e\u0005",
    "p9\u0002\u026e{\u0003\u0002\u0002\u0002\u026f\u0270\u0007\u0017\u0002",
    "\u0002\u0270\u0271\u0005p9\u0002\u0271}\u0003\u0002\u0002\u0002\u0272",
    "\u0273\u00072\u0002\u0002\u0273\u0279\u0007\u000e\u0002\u0002\u0274",
    "\u0275\u0005\u0086D\u0002\u0275\u0276\u0005\u00caf\u0002\u0276\u0278",
    "\u0003\u0002\u0002\u0002\u0277\u0274\u0003\u0002\u0002\u0002\u0278\u027b",
    "\u0003\u0002\u0002\u0002\u0279\u0277\u0003\u0002\u0002\u0002\u0279\u027a",
    "\u0003\u0002\u0002\u0002\u027a\u027c\u0003\u0002\u0002\u0002\u027b\u0279",
    "\u0003\u0002\u0002\u0002\u027c\u027d\u0007\u000f\u0002\u0002\u027d\u007f",
    "\u0003\u0002\u0002\u0002\u027e\u027f\u00070\u0002\u0002\u027f\u0280",
    "\u00071\u0002\u0002\u0280\u0281\u0005z>\u0002\u0281\u0081\u0003\u0002",
    "\u0002\u0002\u0282\u0283\u00073\u0002\u0002\u0283\u0284\u00070\u0002",
    "\u0002\u0284\u0285\u0005p9\u0002\u0285\u0286\u00071\u0002\u0002\u0286",
    "\u0287\u0005z>\u0002\u0287\u0083\u0003\u0002\u0002\u0002\u0288\u028e",
    "\u00074\u0002\u0002\u0289\u028a\u00074\u0002\u0002\u028a\u028e\u0007",
    "\u0010\u0002\u0002\u028b\u028c\u0007\u0010\u0002\u0002\u028c\u028e\u0007",
    "4\u0002\u0002\u028d\u0288\u0003\u0002\u0002\u0002\u028d\u0289\u0003",
    "\u0002\u0002\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u028f\u0003",
    "\u0002\u0002\u0002\u028f\u0290\u0005z>\u0002\u0290\u0085\u0003\u0002",
    "\u0002\u0002\u0291\u0292\u0006D\u0002\u0002\u0292\u0293\u0007@\u0002",
    "\u0002\u0293\u0294\u0005\u008eH\u0002\u0294\u0295\u0005\u008cG\u0002",
    "\u0295\u029a\u0003\u0002\u0002\u0002\u0296\u029a\u0005r:\u0002\u0297",
    "\u0298\u0007@\u0002\u0002\u0298\u029a\u0005\u008eH\u0002\u0299\u0291",
    "\u0003\u0002\u0002\u0002\u0299\u0296\u0003\u0002\u0002\u0002\u0299\u0297",
    "\u0003\u0002\u0002\u0002\u029a\u0087\u0003\u0002\u0002\u0002\u029b\u029c",
    "\u0007\f\u0002\u0002\u029c\u029d\u0005\u008aF\u0002\u029d\u0089\u0003",
    "\u0002\u0002\u0002\u029e\u029f\u0006F\u0003\u0002\u029f\u02a0\u0005",
    "\u008eH\u0002\u02a0\u02a1\u0005\u008cG\u0002\u02a1\u02a4\u0003\u0002",
    "\u0002\u0002\u02a2\u02a4\u0005\u008eH\u0002\u02a3\u029e\u0003\u0002",
    "\u0002\u0002\u02a3\u02a2\u0003\u0002\u0002\u0002\u02a4\u008b\u0003\u0002",
    "\u0002\u0002\u02a5\u02a8\u0005\u008eH\u0002\u02a6\u02a8\u0005p9\u0002",
    "\u02a7\u02a5\u0003\u0002\u0002\u0002\u02a7\u02a6\u0003\u0002\u0002\u0002",
    "\u02a8\u008d\u0003\u0002\u0002\u0002\u02a9\u02ae\u0007\u0005\u0002\u0002",
    "\u02aa\u02ac\u0005\u0090I\u0002\u02ab\u02ad\u0007\n\u0002\u0002\u02ac",
    "\u02ab\u0003\u0002\u0002\u0002\u02ac\u02ad\u0003\u0002\u0002\u0002\u02ad",
    "\u02af\u0003\u0002\u0002\u0002\u02ae\u02aa\u0003\u0002\u0002\u0002\u02ae",
    "\u02af\u0003\u0002\u0002\u0002\u02af\u02b0\u0003\u0002\u0002\u0002\u02b0",
    "\u02b1\u0007\u0006\u0002\u0002\u02b1\u008f\u0003\u0002\u0002\u0002\u02b2",
    "\u02b7\u0005\u0092J\u0002\u02b3\u02b4\u0007\n\u0002\u0002\u02b4\u02b6",
    "\u0005\u0092J\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002\u02b6\u02b9",
    "\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b7\u02b8",
    "\u0003\u0002\u0002\u0002\u02b8\u0091\u0003\u0002\u0002\u0002\u02b9\u02b7",
    "\u0003\u0002\u0002\u0002\u02ba\u02bc\u0005\u0014\u000b\u0002\u02bb\u02ba",
    "\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02be",
    "\u0003\u0002\u0002\u0002\u02bd\u02bf\u00075\u0002\u0002\u02be\u02bd",
    "\u0003\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c0",
    "\u0003\u0002\u0002\u0002\u02c0\u02c1\u0005p9\u0002\u02c1\u0093\u0003",
    "\u0002\u0002\u0002\u02c2\u02ca\u0005\u0096L\u0002\u02c3\u02ca\u0005",
    "\u009aN\u0002\u02c4\u02ca\u0005\u00c0a\u0002\u02c5\u02c6\u0007\u0005",
    "\u0002\u0002\u02c6\u02c7\u0005\u00c4c\u0002\u02c7\u02c8\u0007\u0006",
    "\u0002\u0002\u02c8\u02ca\u0003\u0002\u0002\u0002\u02c9\u02c2\u0003\u0002",
    "\u0002\u0002\u02c9\u02c3\u0003\u0002\u0002\u0002\u02c9\u02c4\u0003\u0002",
    "\u0002\u0002\u02c9\u02c5\u0003\u0002\u0002\u0002\u02ca\u0095\u0003\u0002",
    "\u0002\u0002\u02cb\u02cf\u0005\u0098M\u0002\u02cc\u02cf\u0005\u009e",
    "P\u0002\u02cd\u02cf\u0005\u00b2Z\u0002\u02ce\u02cb\u0003\u0002\u0002",
    "\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002\u02ce\u02cd\u0003\u0002\u0002",
    "\u0002\u02cf\u0097\u0003\u0002\u0002\u0002\u02d0\u02d1\t\u0005\u0002",
    "\u0002\u02d1\u0099\u0003\u0002\u0002\u0002\u02d2\u02d5\u0007@\u0002",
    "\u0002\u02d3\u02d5\u0005\u009cO\u0002\u02d4\u02d2\u0003\u0002\u0002",
    "\u0002\u02d4\u02d3\u0003\u0002\u0002\u0002\u02d5\u009b\u0003\u0002\u0002",
    "\u0002\u02d6\u02d7\u0007@\u0002\u0002\u02d7\u02d8\u0007\u0007\u0002",
    "\u0002\u02d8\u02d9\u0007@\u0002\u0002\u02d9\u009d\u0003\u0002\u0002",
    "\u0002\u02da\u02db\u0005\u00a0Q\u0002\u02db\u02dc\u0005\u00a2R\u0002",
    "\u02dc\u009f\u0003\u0002\u0002\u0002\u02dd\u02e7\u0005\u00acW\u0002",
    "\u02de\u02e7\u0005v<\u0002\u02df\u02e0\u00070\u0002\u0002\u02e0\u02e1",
    "\u00075\u0002\u0002\u02e1\u02e2\u00071\u0002\u0002\u02e2\u02e7\u0005",
    "z>\u0002\u02e3\u02e7\u0005\u0080A\u0002\u02e4\u02e7\u0005\u0082B\u0002",
    "\u02e5\u02e7\u0005r:\u0002\u02e6\u02dd\u0003\u0002\u0002\u0002\u02e6",
    "\u02de\u0003\u0002\u0002\u0002\u02e6\u02df\u0003\u0002\u0002\u0002\u02e6",
    "\u02e3\u0003\u0002\u0002\u0002\u02e6\u02e4\u0003\u0002\u0002\u0002\u02e6",
    "\u02e5\u0003\u0002\u0002\u0002\u02e7\u00a1\u0003\u0002\u0002\u0002\u02e8",
    "\u02ed\u0007\u000e\u0002\u0002\u02e9\u02eb\u0005\u00a4S\u0002\u02ea",
    "\u02ec\u0007\n\u0002\u0002\u02eb\u02ea\u0003\u0002\u0002\u0002\u02eb",
    "\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ee\u0003\u0002\u0002\u0002\u02ed",
    "\u02e9\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee",
    "\u02ef\u0003\u0002\u0002\u0002\u02ef\u02f0\u0007\u000f\u0002\u0002\u02f0",
    "\u00a3\u0003\u0002\u0002\u0002\u02f1\u02f6\u0005\u00a6T\u0002\u02f2",
    "\u02f3\u0007\n\u0002\u0002\u02f3\u02f5\u0005\u00a6T\u0002\u02f4\u02f2",
    "\u0003\u0002\u0002\u0002\u02f5\u02f8\u0003\u0002\u0002\u0002\u02f6\u02f4",
    "\u0003\u0002\u0002\u0002\u02f6\u02f7\u0003\u0002\u0002\u0002\u02f7\u00a5",
    "\u0003\u0002\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002\u0002\u02f9\u02fa",
    "\u0005\u00a8U\u0002\u02fa\u02fb\u0007 \u0002\u0002\u02fb\u02fd\u0003",
    "\u0002\u0002\u0002\u02fc\u02f9\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003",
    "\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u02ff\u0005",
    "\u00aaV\u0002\u02ff\u00a7\u0003\u0002\u0002\u0002\u0300\u0304\u0007",
    "@\u0002\u0002\u0301\u0304\u0005\u00c4c\u0002\u0302\u0304\u0005\u00a2",
    "R\u0002\u0303\u0300\u0003\u0002\u0002\u0002\u0303\u0301\u0003\u0002",
    "\u0002\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0304\u00a9\u0003\u0002",
    "\u0002\u0002\u0305\u0308\u0005\u00c4c\u0002\u0306\u0308\u0005\u00a2",
    "R\u0002\u0307\u0305\u0003\u0002\u0002\u0002\u0307\u0306\u0003\u0002",
    "\u0002\u0002\u0308\u00ab\u0003\u0002\u0002\u0002\u0309\u030a\u00076",
    "\u0002\u0002\u030a\u0310\u0007\u000e\u0002\u0002\u030b\u030c\u0005\u00ae",
    "X\u0002\u030c\u030d\u0005\u00caf\u0002\u030d\u030f\u0003\u0002\u0002",
    "\u0002\u030e\u030b\u0003\u0002\u0002\u0002\u030f\u0312\u0003\u0002\u0002",
    "\u0002\u0310\u030e\u0003\u0002\u0002\u0002\u0310\u0311\u0003\u0002\u0002",
    "\u0002\u0311\u0313\u0003\u0002\u0002\u0002\u0312\u0310\u0003\u0002\u0002",
    "\u0002\u0313\u0314\u0007\u000f\u0002\u0002\u0314\u00ad\u0003\u0002\u0002",
    "\u0002\u0315\u0316\u0006X\u0004\u0002\u0316\u0317\u0005\u0014\u000b",
    "\u0002\u0317\u0318\u0005p9\u0002\u0318\u031b\u0003\u0002\u0002\u0002",
    "\u0319\u031b\u0005\u00b0Y\u0002\u031a\u0315\u0003\u0002\u0002\u0002",
    "\u031a\u0319\u0003\u0002\u0002\u0002\u031b\u031d\u0003\u0002\u0002\u0002",
    "\u031c\u031e\u0007I\u0002\u0002\u031d\u031c\u0003\u0002\u0002\u0002",
    "\u031d\u031e\u0003\u0002\u0002\u0002\u031e\u00af\u0003\u0002\u0002\u0002",
    "\u031f\u0321\u0007\u0017\u0002\u0002\u0320\u031f\u0003\u0002\u0002\u0002",
    "\u0320\u0321\u0003\u0002\u0002\u0002\u0321\u0322\u0003\u0002\u0002\u0002",
    "\u0322\u0323\u0005r:\u0002\u0323\u00b1\u0003\u0002\u0002\u0002\u0324",
    "\u0325\u0007\f\u0002\u0002\u0325\u0326\u0005\u001e\u0010\u0002\u0326",
    "\u00b3\u0003\u0002\u0002\u0002\u0327\u0328\b[\u0001\u0002\u0328\u032b",
    "\u0005\u0094K\u0002\u0329\u032b\u0005\u00c8e\u0002\u032a\u0327\u0003",
    "\u0002\u0002\u0002\u032a\u0329\u0003\u0002\u0002\u0002\u032b\u0338\u0003",
    "\u0002\u0002\u0002\u032c\u032d\f\u0007\u0002\u0002\u032d\u0337\u0005",
    "\u00b6\\\u0002\u032e\u032f\f\u0006\u0002\u0002\u032f\u0337\u0005\u00b8",
    "]\u0002\u0330\u0331\f\u0005\u0002\u0002\u0331\u0337\u0005\u00ba^\u0002",
    "\u0332\u0333\f\u0004\u0002\u0002\u0333\u0337\u0005\u00bc_\u0002\u0334",
    "\u0335\f\u0003\u0002\u0002\u0335\u0337\u0005\u00be`\u0002\u0336\u032c",
    "\u0003\u0002\u0002\u0002\u0336\u032e\u0003\u0002\u0002\u0002\u0336\u0330",
    "\u0003\u0002\u0002\u0002\u0336\u0332\u0003\u0002\u0002\u0002\u0336\u0334",
    "\u0003\u0002\u0002\u0002\u0337\u033a\u0003\u0002\u0002\u0002\u0338\u0336",
    "\u0003\u0002\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002\u0339\u00b5",
    "\u0003\u0002\u0002\u0002\u033a\u0338\u0003\u0002\u0002\u0002\u033b\u033c",
    "\u0007\u0007\u0002\u0002\u033c\u033d\u0007@\u0002\u0002\u033d\u00b7",
    "\u0003\u0002\u0002\u0002\u033e\u033f\u00070\u0002\u0002\u033f\u0340",
    "\u0005\u00c4c\u0002\u0340\u0341\u00071\u0002\u0002\u0341\u00b9\u0003",
    "\u0002\u0002\u0002\u0342\u0352\u00070\u0002\u0002\u0343\u0345\u0005",
    "\u00c4c\u0002\u0344\u0343\u0003\u0002\u0002\u0002\u0344\u0345\u0003",
    "\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0348\u0007",
    " \u0002\u0002\u0347\u0349\u0005\u00c4c\u0002\u0348\u0347\u0003\u0002",
    "\u0002\u0002\u0348\u0349\u0003\u0002\u0002\u0002\u0349\u0353\u0003\u0002",
    "\u0002\u0002\u034a\u034c\u0005\u00c4c\u0002\u034b\u034a\u0003\u0002",
    "\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002\u034c\u034d\u0003\u0002",
    "\u0002\u0002\u034d\u034e\u0007 \u0002\u0002\u034e\u034f\u0005\u00c4",
    "c\u0002\u034f\u0350\u0007 \u0002\u0002\u0350\u0351\u0005\u00c4c\u0002",
    "\u0351\u0353\u0003\u0002\u0002\u0002\u0352\u0344\u0003\u0002\u0002\u0002",
    "\u0352\u034b\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002",
    "\u0354\u0355\u00071\u0002\u0002\u0355\u00bb\u0003\u0002\u0002\u0002",
    "\u0356\u0357\u0007\u0007\u0002\u0002\u0357\u0358\u0007\u0005\u0002\u0002",
    "\u0358\u0359\u0005p9\u0002\u0359\u035a\u0007\u0006\u0002\u0002\u035a",
    "\u00bd\u0003\u0002\u0002\u0002\u035b\u036a\u0007\u0005\u0002\u0002\u035c",
    "\u0363\u0005\u0016\f\u0002\u035d\u0360\u0005p9\u0002\u035e\u035f\u0007",
    "\n\u0002\u0002\u035f\u0361\u0005\u0016\f\u0002\u0360\u035e\u0003\u0002",
    "\u0002\u0002\u0360\u0361\u0003\u0002\u0002\u0002\u0361\u0363\u0003\u0002",
    "\u0002\u0002\u0362\u035c\u0003\u0002\u0002\u0002\u0362\u035d\u0003\u0002",
    "\u0002\u0002\u0363\u0365\u0003\u0002\u0002\u0002\u0364\u0366\u00075",
    "\u0002\u0002\u0365\u0364\u0003\u0002\u0002\u0002\u0365\u0366\u0003\u0002",
    "\u0002\u0002\u0366\u0368\u0003\u0002\u0002\u0002\u0367\u0369\u0007\n",
    "\u0002\u0002\u0368\u0367\u0003\u0002\u0002\u0002\u0368\u0369\u0003\u0002",
    "\u0002\u0002\u0369\u036b\u0003\u0002\u0002\u0002\u036a\u0362\u0003\u0002",
    "\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u036c\u0003\u0002",
    "\u0002\u0002\u036c\u036d\u0007\u0006\u0002\u0002\u036d\u00bf\u0003\u0002",
    "\u0002\u0002\u036e\u036f\u0005\u00c2b\u0002\u036f\u0370\u0007\u0007",
    "\u0002\u0002\u0370\u0371\u0007@\u0002\u0002\u0371\u00c1\u0003\u0002",
    "\u0002\u0002\u0372\u037d\u0005r:\u0002\u0373\u0374\u0007\u0005\u0002",
    "\u0002\u0374\u0375\u0007\u0017\u0002\u0002\u0375\u0376\u0005r:\u0002",
    "\u0376\u0377\u0007\u0006\u0002\u0002\u0377\u037d\u0003\u0002\u0002\u0002",
    "\u0378\u0379\u0007\u0005\u0002\u0002\u0379\u037a\u0005\u00c2b\u0002",
    "\u037a\u037b\u0007\u0006\u0002\u0002\u037b\u037d\u0003\u0002\u0002\u0002",
    "\u037c\u0372\u0003\u0002\u0002\u0002\u037c\u0373\u0003\u0002\u0002\u0002",
    "\u037c\u0378\u0003\u0002\u0002\u0002\u037d\u00c3\u0003\u0002\u0002\u0002",
    "\u037e\u037f\bc\u0001\u0002\u037f\u0380\u0005\u00c6d\u0002\u0380\u0386",
    "\u0003\u0002\u0002\u0002\u0381\u0382\f\u0003\u0002\u0002\u0382\u0383",
    "\t\u0006\u0002\u0002\u0383\u0385\u0005\u00c4c\u0004\u0384\u0381\u0003",
    "\u0002\u0002\u0002\u0385\u0388\u0003\u0002\u0002\u0002\u0386\u0384\u0003",
    "\u0002\u0002\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387\u00c5\u0003",
    "\u0002\u0002\u0002\u0388\u0386\u0003\u0002\u0002\u0002\u0389\u038d\u0005",
    "\u00b4[\u0002\u038a\u038b\t\u0007\u0002\u0002\u038b\u038d\u0005\u00c6",
    "d\u0002\u038c\u0389\u0003\u0002\u0002\u0002\u038c\u038a\u0003\u0002",
    "\u0002\u0002\u038d\u00c7\u0003\u0002\u0002\u0002\u038e\u038f\u0005p",
    "9\u0002\u038f\u0390\u0007\u0005\u0002\u0002\u0390\u0392\u0005\u00c4",
    "c\u0002\u0391\u0393\u0007\n\u0002\u0002\u0392\u0391\u0003\u0002\u0002",
    "\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002",
    "\u0002\u0394\u0395\u0007\u0006\u0002\u0002\u0395\u00c9\u0003\u0002\u0002",
    "\u0002\u0396\u039b\u0007\u001f\u0002\u0002\u0397\u039b\u0007\u0002\u0002",
    "\u0003\u0398\u039b\u0006f\u000b\u0002\u0399\u039b\u0006f\f\u0002\u039a",
    "\u0396\u0003\u0002\u0002\u0002\u039a\u0397\u0003\u0002\u0002\u0002\u039a",
    "\u0398\u0003\u0002\u0002\u0002\u039a\u0399\u0003\u0002\u0002\u0002\u039b",
    "\u00cb\u0003\u0002\u0002\u0002`\u00d3\u00db\u00e9\u00ed\u00f0\u00f9",
    "\u00fe\u0108\u010c\u0110\u0114\u011b\u0123\u012e\u0132\u013b\u0145\u0151",
    "\u0155\u015b\u015f\u016a\u017c\u0184\u0194\u01a4\u01a8\u01ac\u01ba\u01c1",
    "\u01c3\u01c7\u01cd\u01d0\u01d6\u01e2\u01e8\u01ef\u01f6\u0205\u020c\u0214",
    "\u0220\u0223\u022b\u0233\u0238\u023c\u0240\u0248\u0256\u025a\u0264\u0279",
    "\u028d\u0299\u02a3\u02a7\u02ac\u02ae\u02b7\u02bb\u02be\u02c9\u02ce\u02d4",
    "\u02e6\u02eb\u02ed\u02f6\u02fc\u0303\u0307\u0310\u031a\u031d\u0320\u032a",
    "\u0336\u0338\u0344\u0348\u034b\u0352\u0360\u0362\u0365\u0368\u036a\u037c",
    "\u0386\u038c\u0392\u039a"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'package'", "'import'", "'('", "')'", "'.'", 
                     "'const'", "'='", "','", "'type'", "'func'", "'var'", 
                     "'{'", "'}'", "'<-'", "'++'", "'--'", "'+'", "'-'", 
                     "'|'", "'^'", "'*'", "'/'", "'%'", "'<<'", "'>>'", 
                     "'&'", "'&^'", "':='", "';'", "':'", "'return'", "'break'", 
                     "'continue'", "'goto'", "'fallthrough'", "'defer'", 
                     "'if'", "'else'", "'switch'", "'case'", "'default'", 
                     "'select'", "'for'", "'range'", "'go'", "'['", "']'", 
                     "'interface'", "'map'", "'chan'", "'...'", "'struct'", 
                     "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", "'>'", 
                     "'>='", "'!'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, "IDENTIFIER", 
                      "KEYWORD", "BINARY_OP", "INT_LIT", "FLOAT_LIT", "IMAGINARY_LIT", 
                      "RUNE_LIT", "LITTLE_U_VALUE", "BIG_U_VALUE", "STRING_LIT", 
                      "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT" ];

var ruleNames =  [ "sourceFile", "packageClause", "importDecl", "importSpec", 
                   "importPath", "topLevelDecl", "declaration", "constDecl", 
                   "constSpec", "identifierList", "expressionList", "typeDecl", 
                   "typeSpec", "functionDecl", "function_", "methodDecl", 
                   "receiver", "varDecl", "varSpec", "block", "statementList", 
                   "statement", "simpleStmt", "expressionStmt", "sendStmt", 
                   "incDecStmt", "assignment", "assign_op", "shortVarDecl", 
                   "emptyStmt", "labeledStmt", "returnStmt", "breakStmt", 
                   "continueStmt", "gotoStmt", "fallthroughStmt", "deferStmt", 
                   "ifStmt", "switchStmt", "exprSwitchStmt", "exprCaseClause", 
                   "exprSwitchCase", "typeSwitchStmt", "typeSwitchGuard", 
                   "typeCaseClause", "typeSwitchCase", "typeList", "selectStmt", 
                   "commClause", "commCase", "recvStmt", "forStmt", "forClause", 
                   "rangeClause", "goStmt", "type", "typeName", "typeLit", 
                   "arrayType", "arrayLength", "elementType", "pointerType", 
                   "interfaceType", "sliceType", "mapType", "channelType", 
                   "methodSpec", "functionType", "signature", "result", 
                   "parameters", "parameterList", "parameterDecl", "operand", 
                   "literal", "basicLit", "operandName", "qualifiedIdent", 
                   "compositeLit", "literalType", "literalValue", "elementList", 
                   "keyedElement", "key", "element", "structType", "fieldDecl", 
                   "anonymousField", "functionLit", "primaryExpr", "selector", 
                   "index", "slice", "typeAssertion", "arguments", "methodExpr", 
                   "receiverType", "expression", "unaryExpr", "conversion", 
                   "eos" ];

function GolangParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;


    return this;
}

GolangParser.prototype = Object.create(antlr4.Parser.prototype);
GolangParser.prototype.constructor = GolangParser;

Object.defineProperty(GolangParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

GolangParser.EOF = antlr4.Token.EOF;
GolangParser.T__0 = 1;
GolangParser.T__1 = 2;
GolangParser.T__2 = 3;
GolangParser.T__3 = 4;
GolangParser.T__4 = 5;
GolangParser.T__5 = 6;
GolangParser.T__6 = 7;
GolangParser.T__7 = 8;
GolangParser.T__8 = 9;
GolangParser.T__9 = 10;
GolangParser.T__10 = 11;
GolangParser.T__11 = 12;
GolangParser.T__12 = 13;
GolangParser.T__13 = 14;
GolangParser.T__14 = 15;
GolangParser.T__15 = 16;
GolangParser.T__16 = 17;
GolangParser.T__17 = 18;
GolangParser.T__18 = 19;
GolangParser.T__19 = 20;
GolangParser.T__20 = 21;
GolangParser.T__21 = 22;
GolangParser.T__22 = 23;
GolangParser.T__23 = 24;
GolangParser.T__24 = 25;
GolangParser.T__25 = 26;
GolangParser.T__26 = 27;
GolangParser.T__27 = 28;
GolangParser.T__28 = 29;
GolangParser.T__29 = 30;
GolangParser.T__30 = 31;
GolangParser.T__31 = 32;
GolangParser.T__32 = 33;
GolangParser.T__33 = 34;
GolangParser.T__34 = 35;
GolangParser.T__35 = 36;
GolangParser.T__36 = 37;
GolangParser.T__37 = 38;
GolangParser.T__38 = 39;
GolangParser.T__39 = 40;
GolangParser.T__40 = 41;
GolangParser.T__41 = 42;
GolangParser.T__42 = 43;
GolangParser.T__43 = 44;
GolangParser.T__44 = 45;
GolangParser.T__45 = 46;
GolangParser.T__46 = 47;
GolangParser.T__47 = 48;
GolangParser.T__48 = 49;
GolangParser.T__49 = 50;
GolangParser.T__50 = 51;
GolangParser.T__51 = 52;
GolangParser.T__52 = 53;
GolangParser.T__53 = 54;
GolangParser.T__54 = 55;
GolangParser.T__55 = 56;
GolangParser.T__56 = 57;
GolangParser.T__57 = 58;
GolangParser.T__58 = 59;
GolangParser.T__59 = 60;
GolangParser.T__60 = 61;
GolangParser.IDENTIFIER = 62;
GolangParser.KEYWORD = 63;
GolangParser.BINARY_OP = 64;
GolangParser.INT_LIT = 65;
GolangParser.FLOAT_LIT = 66;
GolangParser.IMAGINARY_LIT = 67;
GolangParser.RUNE_LIT = 68;
GolangParser.LITTLE_U_VALUE = 69;
GolangParser.BIG_U_VALUE = 70;
GolangParser.STRING_LIT = 71;
GolangParser.WS = 72;
GolangParser.COMMENT = 73;
GolangParser.TERMINATOR = 74;
GolangParser.LINE_COMMENT = 75;

GolangParser.RULE_sourceFile = 0;
GolangParser.RULE_packageClause = 1;
GolangParser.RULE_importDecl = 2;
GolangParser.RULE_importSpec = 3;
GolangParser.RULE_importPath = 4;
GolangParser.RULE_topLevelDecl = 5;
GolangParser.RULE_declaration = 6;
GolangParser.RULE_constDecl = 7;
GolangParser.RULE_constSpec = 8;
GolangParser.RULE_identifierList = 9;
GolangParser.RULE_expressionList = 10;
GolangParser.RULE_typeDecl = 11;
GolangParser.RULE_typeSpec = 12;
GolangParser.RULE_functionDecl = 13;
GolangParser.RULE_function_ = 14;
GolangParser.RULE_methodDecl = 15;
GolangParser.RULE_receiver = 16;
GolangParser.RULE_varDecl = 17;
GolangParser.RULE_varSpec = 18;
GolangParser.RULE_block = 19;
GolangParser.RULE_statementList = 20;
GolangParser.RULE_statement = 21;
GolangParser.RULE_simpleStmt = 22;
GolangParser.RULE_expressionStmt = 23;
GolangParser.RULE_sendStmt = 24;
GolangParser.RULE_incDecStmt = 25;
GolangParser.RULE_assignment = 26;
GolangParser.RULE_assign_op = 27;
GolangParser.RULE_shortVarDecl = 28;
GolangParser.RULE_emptyStmt = 29;
GolangParser.RULE_labeledStmt = 30;
GolangParser.RULE_returnStmt = 31;
GolangParser.RULE_breakStmt = 32;
GolangParser.RULE_continueStmt = 33;
GolangParser.RULE_gotoStmt = 34;
GolangParser.RULE_fallthroughStmt = 35;
GolangParser.RULE_deferStmt = 36;
GolangParser.RULE_ifStmt = 37;
GolangParser.RULE_switchStmt = 38;
GolangParser.RULE_exprSwitchStmt = 39;
GolangParser.RULE_exprCaseClause = 40;
GolangParser.RULE_exprSwitchCase = 41;
GolangParser.RULE_typeSwitchStmt = 42;
GolangParser.RULE_typeSwitchGuard = 43;
GolangParser.RULE_typeCaseClause = 44;
GolangParser.RULE_typeSwitchCase = 45;
GolangParser.RULE_typeList = 46;
GolangParser.RULE_selectStmt = 47;
GolangParser.RULE_commClause = 48;
GolangParser.RULE_commCase = 49;
GolangParser.RULE_recvStmt = 50;
GolangParser.RULE_forStmt = 51;
GolangParser.RULE_forClause = 52;
GolangParser.RULE_rangeClause = 53;
GolangParser.RULE_goStmt = 54;
GolangParser.RULE_type = 55;
GolangParser.RULE_typeName = 56;
GolangParser.RULE_typeLit = 57;
GolangParser.RULE_arrayType = 58;
GolangParser.RULE_arrayLength = 59;
GolangParser.RULE_elementType = 60;
GolangParser.RULE_pointerType = 61;
GolangParser.RULE_interfaceType = 62;
GolangParser.RULE_sliceType = 63;
GolangParser.RULE_mapType = 64;
GolangParser.RULE_channelType = 65;
GolangParser.RULE_methodSpec = 66;
GolangParser.RULE_functionType = 67;
GolangParser.RULE_signature = 68;
GolangParser.RULE_result = 69;
GolangParser.RULE_parameters = 70;
GolangParser.RULE_parameterList = 71;
GolangParser.RULE_parameterDecl = 72;
GolangParser.RULE_operand = 73;
GolangParser.RULE_literal = 74;
GolangParser.RULE_basicLit = 75;
GolangParser.RULE_operandName = 76;
GolangParser.RULE_qualifiedIdent = 77;
GolangParser.RULE_compositeLit = 78;
GolangParser.RULE_literalType = 79;
GolangParser.RULE_literalValue = 80;
GolangParser.RULE_elementList = 81;
GolangParser.RULE_keyedElement = 82;
GolangParser.RULE_key = 83;
GolangParser.RULE_element = 84;
GolangParser.RULE_structType = 85;
GolangParser.RULE_fieldDecl = 86;
GolangParser.RULE_anonymousField = 87;
GolangParser.RULE_functionLit = 88;
GolangParser.RULE_primaryExpr = 89;
GolangParser.RULE_selector = 90;
GolangParser.RULE_index = 91;
GolangParser.RULE_slice = 92;
GolangParser.RULE_typeAssertion = 93;
GolangParser.RULE_arguments = 94;
GolangParser.RULE_methodExpr = 95;
GolangParser.RULE_receiverType = 96;
GolangParser.RULE_expression = 97;
GolangParser.RULE_unaryExpr = 98;
GolangParser.RULE_conversion = 99;
GolangParser.RULE_eos = 100;


function SourceFileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_sourceFile;
    return this;
}

SourceFileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceFileContext.prototype.constructor = SourceFileContext;

SourceFileContext.prototype.packageClause = function() {
    return this.getTypedRuleContext(PackageClauseContext,0);
};

SourceFileContext.prototype.eos = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EosContext);
    } else {
        return this.getTypedRuleContext(EosContext,i);
    }
};

SourceFileContext.prototype.importDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDeclContext);
    } else {
        return this.getTypedRuleContext(ImportDeclContext,i);
    }
};

SourceFileContext.prototype.topLevelDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopLevelDeclContext);
    } else {
        return this.getTypedRuleContext(TopLevelDeclContext,i);
    }
};

SourceFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterSourceFile(this);
	}
};

SourceFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitSourceFile(this);
	}
};




GolangParser.SourceFileContext = SourceFileContext;

GolangParser.prototype.sourceFile = function() {

    var localctx = new SourceFileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, GolangParser.RULE_sourceFile);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 202;
        this.packageClause();
        this.state = 203;
        this.eos();
        this.state = 209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GolangParser.T__1) {
            this.state = 204;
            this.importDecl();
            this.state = 205;
            this.eos();
            this.state = 211;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__5) | (1 << GolangParser.T__8) | (1 << GolangParser.T__9) | (1 << GolangParser.T__10))) !== 0)) {
            this.state = 212;
            this.topLevelDecl();
            this.state = 213;
            this.eos();
            this.state = 219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PackageClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_packageClause;
    return this;
}

PackageClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageClauseContext.prototype.constructor = PackageClauseContext;

PackageClauseContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

PackageClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterPackageClause(this);
	}
};

PackageClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitPackageClause(this);
	}
};




GolangParser.PackageClauseContext = PackageClauseContext;

GolangParser.prototype.packageClause = function() {

    var localctx = new PackageClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, GolangParser.RULE_packageClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 220;
        this.match(GolangParser.T__0);
        this.state = 221;
        this.match(GolangParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_importDecl;
    return this;
}

ImportDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclContext.prototype.constructor = ImportDeclContext;

ImportDeclContext.prototype.importSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportSpecContext);
    } else {
        return this.getTypedRuleContext(ImportSpecContext,i);
    }
};

ImportDeclContext.prototype.eos = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EosContext);
    } else {
        return this.getTypedRuleContext(EosContext,i);
    }
};

ImportDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterImportDecl(this);
	}
};

ImportDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitImportDecl(this);
	}
};




GolangParser.ImportDeclContext = ImportDeclContext;

GolangParser.prototype.importDecl = function() {

    var localctx = new ImportDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, GolangParser.RULE_importDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 223;
        this.match(GolangParser.T__1);
        this.state = 235;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.T__4:
        case GolangParser.IDENTIFIER:
        case GolangParser.STRING_LIT:
            this.state = 224;
            this.importSpec();
            break;
        case GolangParser.T__2:
            this.state = 225;
            this.match(GolangParser.T__2);
            this.state = 231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===GolangParser.T__4 || _la===GolangParser.IDENTIFIER || _la===GolangParser.STRING_LIT) {
                this.state = 226;
                this.importSpec();
                this.state = 227;
                this.eos();
                this.state = 233;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 234;
            this.match(GolangParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_importSpec;
    return this;
}

ImportSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportSpecContext.prototype.constructor = ImportSpecContext;

ImportSpecContext.prototype.importPath = function() {
    return this.getTypedRuleContext(ImportPathContext,0);
};

ImportSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

ImportSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterImportSpec(this);
	}
};

ImportSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitImportSpec(this);
	}
};




GolangParser.ImportSpecContext = ImportSpecContext;

GolangParser.prototype.importSpec = function() {

    var localctx = new ImportSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, GolangParser.RULE_importSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GolangParser.T__4 || _la===GolangParser.IDENTIFIER) {
            this.state = 237;
            _la = this._input.LA(1);
            if(!(_la===GolangParser.T__4 || _la===GolangParser.IDENTIFIER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 240;
        this.importPath();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_importPath;
    return this;
}

ImportPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportPathContext.prototype.constructor = ImportPathContext;

ImportPathContext.prototype.STRING_LIT = function() {
    return this.getToken(GolangParser.STRING_LIT, 0);
};

ImportPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterImportPath(this);
	}
};

ImportPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitImportPath(this);
	}
};




GolangParser.ImportPathContext = ImportPathContext;

GolangParser.prototype.importPath = function() {

    var localctx = new ImportPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, GolangParser.RULE_importPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 242;
        this.match(GolangParser.STRING_LIT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopLevelDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_topLevelDecl;
    return this;
}

TopLevelDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopLevelDeclContext.prototype.constructor = TopLevelDeclContext;

TopLevelDeclContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

TopLevelDeclContext.prototype.functionDecl = function() {
    return this.getTypedRuleContext(FunctionDeclContext,0);
};

TopLevelDeclContext.prototype.methodDecl = function() {
    return this.getTypedRuleContext(MethodDeclContext,0);
};

TopLevelDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTopLevelDecl(this);
	}
};

TopLevelDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTopLevelDecl(this);
	}
};




GolangParser.TopLevelDeclContext = TopLevelDeclContext;

GolangParser.prototype.topLevelDecl = function() {

    var localctx = new TopLevelDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, GolangParser.RULE_topLevelDecl);
    try {
        this.state = 247;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 244;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 245;
            this.functionDecl();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 246;
            this.methodDecl();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.constDecl = function() {
    return this.getTypedRuleContext(ConstDeclContext,0);
};

DeclarationContext.prototype.typeDecl = function() {
    return this.getTypedRuleContext(TypeDeclContext,0);
};

DeclarationContext.prototype.varDecl = function() {
    return this.getTypedRuleContext(VarDeclContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitDeclaration(this);
	}
};




GolangParser.DeclarationContext = DeclarationContext;

GolangParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, GolangParser.RULE_declaration);
    try {
        this.state = 252;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.T__5:
            this.enterOuterAlt(localctx, 1);
            this.state = 249;
            this.constDecl();
            break;
        case GolangParser.T__8:
            this.enterOuterAlt(localctx, 2);
            this.state = 250;
            this.typeDecl();
            break;
        case GolangParser.T__10:
            this.enterOuterAlt(localctx, 3);
            this.state = 251;
            this.varDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_constDecl;
    return this;
}

ConstDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDeclContext.prototype.constructor = ConstDeclContext;

ConstDeclContext.prototype.constSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstSpecContext);
    } else {
        return this.getTypedRuleContext(ConstSpecContext,i);
    }
};

ConstDeclContext.prototype.eos = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EosContext);
    } else {
        return this.getTypedRuleContext(EosContext,i);
    }
};

ConstDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterConstDecl(this);
	}
};

ConstDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitConstDecl(this);
	}
};




GolangParser.ConstDeclContext = ConstDeclContext;

GolangParser.prototype.constDecl = function() {

    var localctx = new ConstDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, GolangParser.RULE_constDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        this.match(GolangParser.T__5);
        this.state = 266;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.IDENTIFIER:
            this.state = 255;
            this.constSpec();
            break;
        case GolangParser.T__2:
            this.state = 256;
            this.match(GolangParser.T__2);
            this.state = 262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===GolangParser.IDENTIFIER) {
                this.state = 257;
                this.constSpec();
                this.state = 258;
                this.eos();
                this.state = 264;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 265;
            this.match(GolangParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_constSpec;
    return this;
}

ConstSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstSpecContext.prototype.constructor = ConstSpecContext;

ConstSpecContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

ConstSpecContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ConstSpecContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ConstSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterConstSpec(this);
	}
};

ConstSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitConstSpec(this);
	}
};




GolangParser.ConstSpecContext = ConstSpecContext;

GolangParser.prototype.constSpec = function() {

    var localctx = new ConstSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, GolangParser.RULE_constSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.identifierList();
        this.state = 274;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        if(la_===1) {
            this.state = 270;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__13) | (1 << GolangParser.T__20))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)))) !== 0)) {
                this.state = 269;
                this.type();
            }

            this.state = 272;
            this.match(GolangParser.T__6);
            this.state = 273;
            this.expressionList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GolangParser.IDENTIFIER);
    } else {
        return this.getToken(GolangParser.IDENTIFIER, i);
    }
};


IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitIdentifierList(this);
	}
};




GolangParser.IdentifierListContext = IdentifierListContext;

GolangParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, GolangParser.RULE_identifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 276;
        this.match(GolangParser.IDENTIFIER);
        this.state = 281;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 277;
                this.match(GolangParser.T__7);
                this.state = 278;
                this.match(GolangParser.IDENTIFIER); 
            }
            this.state = 283;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitExpressionList(this);
	}
};




GolangParser.ExpressionListContext = ExpressionListContext;

GolangParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, GolangParser.RULE_expressionList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.expression(0);
        this.state = 289;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 285;
                this.match(GolangParser.T__7);
                this.state = 286;
                this.expression(0); 
            }
            this.state = 291;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeDecl;
    return this;
}

TypeDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclContext.prototype.constructor = TypeDeclContext;

TypeDeclContext.prototype.typeSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeSpecContext);
    } else {
        return this.getTypedRuleContext(TypeSpecContext,i);
    }
};

TypeDeclContext.prototype.eos = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EosContext);
    } else {
        return this.getTypedRuleContext(EosContext,i);
    }
};

TypeDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeDecl(this);
	}
};

TypeDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeDecl(this);
	}
};




GolangParser.TypeDeclContext = TypeDeclContext;

GolangParser.prototype.typeDecl = function() {

    var localctx = new TypeDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, GolangParser.RULE_typeDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        this.match(GolangParser.T__8);
        this.state = 304;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.IDENTIFIER:
            this.state = 293;
            this.typeSpec();
            break;
        case GolangParser.T__2:
            this.state = 294;
            this.match(GolangParser.T__2);
            this.state = 300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===GolangParser.IDENTIFIER) {
                this.state = 295;
                this.typeSpec();
                this.state = 296;
                this.eos();
                this.state = 302;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 303;
            this.match(GolangParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeSpec;
    return this;
}

TypeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecContext.prototype.constructor = TypeSpecContext;

TypeSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

TypeSpecContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeSpec(this);
	}
};

TypeSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeSpec(this);
	}
};




GolangParser.TypeSpecContext = TypeSpecContext;

GolangParser.prototype.typeSpec = function() {

    var localctx = new TypeSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, GolangParser.RULE_typeSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 306;
        this.match(GolangParser.IDENTIFIER);
        this.state = 307;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_functionDecl;
    return this;
}

FunctionDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclContext.prototype.constructor = FunctionDeclContext;

FunctionDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

FunctionDeclContext.prototype.function_ = function() {
    return this.getTypedRuleContext(Function_Context,0);
};

FunctionDeclContext.prototype.signature = function() {
    return this.getTypedRuleContext(SignatureContext,0);
};

FunctionDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterFunctionDecl(this);
	}
};

FunctionDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitFunctionDecl(this);
	}
};




GolangParser.FunctionDeclContext = FunctionDeclContext;

GolangParser.prototype.functionDecl = function() {

    var localctx = new FunctionDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, GolangParser.RULE_functionDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 309;
        this.match(GolangParser.T__9);
        this.state = 310;
        this.match(GolangParser.IDENTIFIER);
        this.state = 313;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.state = 311;
            this.function_();
            break;

        case 2:
            this.state = 312;
            this.signature();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_function_;
    return this;
}

Function_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_Context.prototype.constructor = Function_Context;

Function_Context.prototype.signature = function() {
    return this.getTypedRuleContext(SignatureContext,0);
};

Function_Context.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Function_Context.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterFunction_(this);
	}
};

Function_Context.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitFunction_(this);
	}
};




GolangParser.Function_Context = Function_Context;

GolangParser.prototype.function_ = function() {

    var localctx = new Function_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 28, GolangParser.RULE_function_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 315;
        this.signature();
        this.state = 316;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_methodDecl;
    return this;
}

MethodDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclContext.prototype.constructor = MethodDeclContext;

MethodDeclContext.prototype.receiver = function() {
    return this.getTypedRuleContext(ReceiverContext,0);
};

MethodDeclContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

MethodDeclContext.prototype.function_ = function() {
    return this.getTypedRuleContext(Function_Context,0);
};

MethodDeclContext.prototype.signature = function() {
    return this.getTypedRuleContext(SignatureContext,0);
};

MethodDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterMethodDecl(this);
	}
};

MethodDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitMethodDecl(this);
	}
};




GolangParser.MethodDeclContext = MethodDeclContext;

GolangParser.prototype.methodDecl = function() {

    var localctx = new MethodDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, GolangParser.RULE_methodDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this.match(GolangParser.T__9);
        this.state = 319;
        this.receiver();
        this.state = 320;
        this.match(GolangParser.IDENTIFIER);
        this.state = 323;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.state = 321;
            this.function_();
            break;

        case 2:
            this.state = 322;
            this.signature();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReceiverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_receiver;
    return this;
}

ReceiverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReceiverContext.prototype.constructor = ReceiverContext;

ReceiverContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

ReceiverContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterReceiver(this);
	}
};

ReceiverContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitReceiver(this);
	}
};




GolangParser.ReceiverContext = ReceiverContext;

GolangParser.prototype.receiver = function() {

    var localctx = new ReceiverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, GolangParser.RULE_receiver);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this.parameters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_varDecl;
    return this;
}

VarDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarDeclContext.prototype.constructor = VarDeclContext;

VarDeclContext.prototype.varSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarSpecContext);
    } else {
        return this.getTypedRuleContext(VarSpecContext,i);
    }
};

VarDeclContext.prototype.eos = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EosContext);
    } else {
        return this.getTypedRuleContext(EosContext,i);
    }
};

VarDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterVarDecl(this);
	}
};

VarDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitVarDecl(this);
	}
};




GolangParser.VarDeclContext = VarDeclContext;

GolangParser.prototype.varDecl = function() {

    var localctx = new VarDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, GolangParser.RULE_varDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this.match(GolangParser.T__10);
        this.state = 339;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.IDENTIFIER:
            this.state = 328;
            this.varSpec();
            break;
        case GolangParser.T__2:
            this.state = 329;
            this.match(GolangParser.T__2);
            this.state = 335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===GolangParser.IDENTIFIER) {
                this.state = 330;
                this.varSpec();
                this.state = 331;
                this.eos();
                this.state = 337;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 338;
            this.match(GolangParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_varSpec;
    return this;
}

VarSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarSpecContext.prototype.constructor = VarSpecContext;

VarSpecContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

VarSpecContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

VarSpecContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

VarSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterVarSpec(this);
	}
};

VarSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitVarSpec(this);
	}
};




GolangParser.VarSpecContext = VarSpecContext;

GolangParser.prototype.varSpec = function() {

    var localctx = new VarSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, GolangParser.RULE_varSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 341;
        this.identifierList();
        this.state = 349;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.T__2:
        case GolangParser.T__9:
        case GolangParser.T__13:
        case GolangParser.T__20:
        case GolangParser.T__45:
        case GolangParser.T__47:
        case GolangParser.T__48:
        case GolangParser.T__49:
        case GolangParser.T__51:
        case GolangParser.IDENTIFIER:
            this.state = 342;
            this.type();
            this.state = 345;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            if(la_===1) {
                this.state = 343;
                this.match(GolangParser.T__6);
                this.state = 344;
                this.expressionList();

            }
            break;
        case GolangParser.T__6:
            this.state = 347;
            this.match(GolangParser.T__6);
            this.state = 348;
            this.expressionList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitBlock(this);
	}
};




GolangParser.BlockContext = BlockContext;

GolangParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, GolangParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this.match(GolangParser.T__11);
        this.state = 352;
        this.statementList();
        this.state = 353;
        this.match(GolangParser.T__12);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_statementList;
    return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementListContext.prototype.eos = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EosContext);
    } else {
        return this.getTypedRuleContext(EosContext,i);
    }
};

StatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterStatementList(this);
	}
};

StatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitStatementList(this);
	}
};




GolangParser.StatementListContext = StatementListContext;

GolangParser.prototype.statementList = function() {

    var localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, GolangParser.RULE_statementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__5) | (1 << GolangParser.T__8) | (1 << GolangParser.T__9) | (1 << GolangParser.T__10) | (1 << GolangParser.T__11) | (1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25) | (1 << GolangParser.T__28) | (1 << GolangParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GolangParser.T__31 - 32)) | (1 << (GolangParser.T__32 - 32)) | (1 << (GolangParser.T__33 - 32)) | (1 << (GolangParser.T__34 - 32)) | (1 << (GolangParser.T__35 - 32)) | (1 << (GolangParser.T__36 - 32)) | (1 << (GolangParser.T__38 - 32)) | (1 << (GolangParser.T__41 - 32)) | (1 << (GolangParser.T__42 - 32)) | (1 << (GolangParser.T__44 - 32)) | (1 << (GolangParser.T__45 - 32)) | (1 << (GolangParser.T__47 - 32)) | (1 << (GolangParser.T__48 - 32)) | (1 << (GolangParser.T__49 - 32)) | (1 << (GolangParser.T__51 - 32)) | (1 << (GolangParser.T__60 - 32)) | (1 << (GolangParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GolangParser.INT_LIT - 65)) | (1 << (GolangParser.FLOAT_LIT - 65)) | (1 << (GolangParser.IMAGINARY_LIT - 65)) | (1 << (GolangParser.RUNE_LIT - 65)) | (1 << (GolangParser.STRING_LIT - 65)))) !== 0)) {
            this.state = 355;
            this.statement();
            this.state = 356;
            this.eos();
            this.state = 362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementContext.prototype.labeledStmt = function() {
    return this.getTypedRuleContext(LabeledStmtContext,0);
};

StatementContext.prototype.simpleStmt = function() {
    return this.getTypedRuleContext(SimpleStmtContext,0);
};

StatementContext.prototype.goStmt = function() {
    return this.getTypedRuleContext(GoStmtContext,0);
};

StatementContext.prototype.returnStmt = function() {
    return this.getTypedRuleContext(ReturnStmtContext,0);
};

StatementContext.prototype.breakStmt = function() {
    return this.getTypedRuleContext(BreakStmtContext,0);
};

StatementContext.prototype.continueStmt = function() {
    return this.getTypedRuleContext(ContinueStmtContext,0);
};

StatementContext.prototype.gotoStmt = function() {
    return this.getTypedRuleContext(GotoStmtContext,0);
};

StatementContext.prototype.fallthroughStmt = function() {
    return this.getTypedRuleContext(FallthroughStmtContext,0);
};

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.ifStmt = function() {
    return this.getTypedRuleContext(IfStmtContext,0);
};

StatementContext.prototype.switchStmt = function() {
    return this.getTypedRuleContext(SwitchStmtContext,0);
};

StatementContext.prototype.selectStmt = function() {
    return this.getTypedRuleContext(SelectStmtContext,0);
};

StatementContext.prototype.forStmt = function() {
    return this.getTypedRuleContext(ForStmtContext,0);
};

StatementContext.prototype.deferStmt = function() {
    return this.getTypedRuleContext(DeferStmtContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitStatement(this);
	}
};




GolangParser.StatementContext = StatementContext;

GolangParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, GolangParser.RULE_statement);
    try {
        this.state = 378;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 363;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 364;
            this.labeledStmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 365;
            this.simpleStmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 366;
            this.goStmt();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 367;
            this.returnStmt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 368;
            this.breakStmt();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 369;
            this.continueStmt();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 370;
            this.gotoStmt();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 371;
            this.fallthroughStmt();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 372;
            this.block();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 373;
            this.ifStmt();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 374;
            this.switchStmt();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 375;
            this.selectStmt();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 376;
            this.forStmt();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 377;
            this.deferStmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_simpleStmt;
    return this;
}

SimpleStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleStmtContext.prototype.constructor = SimpleStmtContext;

SimpleStmtContext.prototype.sendStmt = function() {
    return this.getTypedRuleContext(SendStmtContext,0);
};

SimpleStmtContext.prototype.expressionStmt = function() {
    return this.getTypedRuleContext(ExpressionStmtContext,0);
};

SimpleStmtContext.prototype.incDecStmt = function() {
    return this.getTypedRuleContext(IncDecStmtContext,0);
};

SimpleStmtContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

SimpleStmtContext.prototype.shortVarDecl = function() {
    return this.getTypedRuleContext(ShortVarDeclContext,0);
};

SimpleStmtContext.prototype.emptyStmt = function() {
    return this.getTypedRuleContext(EmptyStmtContext,0);
};

SimpleStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterSimpleStmt(this);
	}
};

SimpleStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitSimpleStmt(this);
	}
};




GolangParser.SimpleStmtContext = SimpleStmtContext;

GolangParser.prototype.simpleStmt = function() {

    var localctx = new SimpleStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, GolangParser.RULE_simpleStmt);
    try {
        this.state = 386;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 380;
            this.sendStmt();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 381;
            this.expressionStmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 382;
            this.incDecStmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 383;
            this.assignment();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 384;
            this.shortVarDecl();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 385;
            this.emptyStmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_expressionStmt;
    return this;
}

ExpressionStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStmtContext.prototype.constructor = ExpressionStmtContext;

ExpressionStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterExpressionStmt(this);
	}
};

ExpressionStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitExpressionStmt(this);
	}
};




GolangParser.ExpressionStmtContext = ExpressionStmtContext;

GolangParser.prototype.expressionStmt = function() {

    var localctx = new ExpressionStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, GolangParser.RULE_expressionStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SendStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_sendStmt;
    return this;
}

SendStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SendStmtContext.prototype.constructor = SendStmtContext;

SendStmtContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SendStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterSendStmt(this);
	}
};

SendStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitSendStmt(this);
	}
};




GolangParser.SendStmtContext = SendStmtContext;

GolangParser.prototype.sendStmt = function() {

    var localctx = new SendStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, GolangParser.RULE_sendStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        this.expression(0);
        this.state = 391;
        this.match(GolangParser.T__13);
        this.state = 392;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncDecStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_incDecStmt;
    return this;
}

IncDecStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncDecStmtContext.prototype.constructor = IncDecStmtContext;

IncDecStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IncDecStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterIncDecStmt(this);
	}
};

IncDecStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitIncDecStmt(this);
	}
};




GolangParser.IncDecStmtContext = IncDecStmtContext;

GolangParser.prototype.incDecStmt = function() {

    var localctx = new IncDecStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, GolangParser.RULE_incDecStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this.expression(0);
        this.state = 395;
        _la = this._input.LA(1);
        if(!(_la===GolangParser.T__14 || _la===GolangParser.T__15)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.expressionList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionListContext);
    } else {
        return this.getTypedRuleContext(ExpressionListContext,i);
    }
};

AssignmentContext.prototype.assign_op = function() {
    return this.getTypedRuleContext(Assign_opContext,0);
};

AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitAssignment(this);
	}
};




GolangParser.AssignmentContext = AssignmentContext;

GolangParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, GolangParser.RULE_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        this.expressionList();
        this.state = 398;
        this.assign_op();
        this.state = 399;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Assign_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_assign_op;
    return this;
}

Assign_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_opContext.prototype.constructor = Assign_opContext;


Assign_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterAssign_op(this);
	}
};

Assign_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitAssign_op(this);
	}
};




GolangParser.Assign_opContext = Assign_opContext;

GolangParser.prototype.assign_op = function() {

    var localctx = new Assign_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, GolangParser.RULE_assign_op);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__18) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__21) | (1 << GolangParser.T__22) | (1 << GolangParser.T__23) | (1 << GolangParser.T__24) | (1 << GolangParser.T__25) | (1 << GolangParser.T__26))) !== 0)) {
            this.state = 401;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__18) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__21) | (1 << GolangParser.T__22) | (1 << GolangParser.T__23) | (1 << GolangParser.T__24) | (1 << GolangParser.T__25) | (1 << GolangParser.T__26))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 404;
        this.match(GolangParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShortVarDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_shortVarDecl;
    return this;
}

ShortVarDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortVarDeclContext.prototype.constructor = ShortVarDeclContext;

ShortVarDeclContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

ShortVarDeclContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ShortVarDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterShortVarDecl(this);
	}
};

ShortVarDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitShortVarDecl(this);
	}
};




GolangParser.ShortVarDeclContext = ShortVarDeclContext;

GolangParser.prototype.shortVarDecl = function() {

    var localctx = new ShortVarDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, GolangParser.RULE_shortVarDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 406;
        this.identifierList();
        this.state = 407;
        this.match(GolangParser.T__27);
        this.state = 408;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_emptyStmt;
    return this;
}

EmptyStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStmtContext.prototype.constructor = EmptyStmtContext;


EmptyStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterEmptyStmt(this);
	}
};

EmptyStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitEmptyStmt(this);
	}
};




GolangParser.EmptyStmtContext = EmptyStmtContext;

GolangParser.prototype.emptyStmt = function() {

    var localctx = new EmptyStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, GolangParser.RULE_emptyStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.match(GolangParser.T__28);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabeledStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_labeledStmt;
    return this;
}

LabeledStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledStmtContext.prototype.constructor = LabeledStmtContext;

LabeledStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

LabeledStmtContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabeledStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterLabeledStmt(this);
	}
};

LabeledStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitLabeledStmt(this);
	}
};




GolangParser.LabeledStmtContext = LabeledStmtContext;

GolangParser.prototype.labeledStmt = function() {

    var localctx = new LabeledStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, GolangParser.RULE_labeledStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 412;
        this.match(GolangParser.IDENTIFIER);
        this.state = 413;
        this.match(GolangParser.T__29);
        this.state = 414;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_returnStmt;
    return this;
}

ReturnStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStmtContext.prototype.constructor = ReturnStmtContext;

ReturnStmtContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ReturnStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterReturnStmt(this);
	}
};

ReturnStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitReturnStmt(this);
	}
};




GolangParser.ReturnStmtContext = ReturnStmtContext;

GolangParser.prototype.returnStmt = function() {

    var localctx = new ReturnStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, GolangParser.RULE_returnStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.match(GolangParser.T__30);
        this.state = 418;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 417;
            this.expressionList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BreakStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_breakStmt;
    return this;
}

BreakStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStmtContext.prototype.constructor = BreakStmtContext;

BreakStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

BreakStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterBreakStmt(this);
	}
};

BreakStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitBreakStmt(this);
	}
};




GolangParser.BreakStmtContext = BreakStmtContext;

GolangParser.prototype.breakStmt = function() {

    var localctx = new BreakStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, GolangParser.RULE_breakStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 420;
        this.match(GolangParser.T__31);
        this.state = 422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 421;
            this.match(GolangParser.IDENTIFIER);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContinueStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_continueStmt;
    return this;
}

ContinueStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStmtContext.prototype.constructor = ContinueStmtContext;

ContinueStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

ContinueStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterContinueStmt(this);
	}
};

ContinueStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitContinueStmt(this);
	}
};




GolangParser.ContinueStmtContext = ContinueStmtContext;

GolangParser.prototype.continueStmt = function() {

    var localctx = new ContinueStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, GolangParser.RULE_continueStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 424;
        this.match(GolangParser.T__32);
        this.state = 426;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 425;
            this.match(GolangParser.IDENTIFIER);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GotoStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_gotoStmt;
    return this;
}

GotoStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GotoStmtContext.prototype.constructor = GotoStmtContext;

GotoStmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

GotoStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterGotoStmt(this);
	}
};

GotoStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitGotoStmt(this);
	}
};




GolangParser.GotoStmtContext = GotoStmtContext;

GolangParser.prototype.gotoStmt = function() {

    var localctx = new GotoStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, GolangParser.RULE_gotoStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428;
        this.match(GolangParser.T__33);
        this.state = 429;
        this.match(GolangParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FallthroughStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_fallthroughStmt;
    return this;
}

FallthroughStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FallthroughStmtContext.prototype.constructor = FallthroughStmtContext;


FallthroughStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterFallthroughStmt(this);
	}
};

FallthroughStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitFallthroughStmt(this);
	}
};




GolangParser.FallthroughStmtContext = FallthroughStmtContext;

GolangParser.prototype.fallthroughStmt = function() {

    var localctx = new FallthroughStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, GolangParser.RULE_fallthroughStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.match(GolangParser.T__34);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeferStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_deferStmt;
    return this;
}

DeferStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeferStmtContext.prototype.constructor = DeferStmtContext;

DeferStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DeferStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterDeferStmt(this);
	}
};

DeferStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitDeferStmt(this);
	}
};




GolangParser.DeferStmtContext = DeferStmtContext;

GolangParser.prototype.deferStmt = function() {

    var localctx = new DeferStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, GolangParser.RULE_deferStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.match(GolangParser.T__35);
        this.state = 434;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_ifStmt;
    return this;
}

IfStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStmtContext.prototype.constructor = IfStmtContext;

IfStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStmtContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

IfStmtContext.prototype.simpleStmt = function() {
    return this.getTypedRuleContext(SimpleStmtContext,0);
};

IfStmtContext.prototype.ifStmt = function() {
    return this.getTypedRuleContext(IfStmtContext,0);
};

IfStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterIfStmt(this);
	}
};

IfStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitIfStmt(this);
	}
};




GolangParser.IfStmtContext = IfStmtContext;

GolangParser.prototype.ifStmt = function() {

    var localctx = new IfStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, GolangParser.RULE_ifStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 436;
        this.match(GolangParser.T__36);
        this.state = 440;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 437;
            this.simpleStmt();
            this.state = 438;
            this.match(GolangParser.T__28);

        }
        this.state = 442;
        this.expression(0);
        this.state = 443;
        this.block();
        this.state = 449;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 444;
            this.match(GolangParser.T__37);
            this.state = 447;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case GolangParser.T__36:
                this.state = 445;
                this.ifStmt();
                break;
            case GolangParser.T__11:
                this.state = 446;
                this.block();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_switchStmt;
    return this;
}

SwitchStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStmtContext.prototype.constructor = SwitchStmtContext;

SwitchStmtContext.prototype.exprSwitchStmt = function() {
    return this.getTypedRuleContext(ExprSwitchStmtContext,0);
};

SwitchStmtContext.prototype.typeSwitchStmt = function() {
    return this.getTypedRuleContext(TypeSwitchStmtContext,0);
};

SwitchStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterSwitchStmt(this);
	}
};

SwitchStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitSwitchStmt(this);
	}
};




GolangParser.SwitchStmtContext = SwitchStmtContext;

GolangParser.prototype.switchStmt = function() {

    var localctx = new SwitchStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, GolangParser.RULE_switchStmt);
    try {
        this.state = 453;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 451;
            this.exprSwitchStmt();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 452;
            this.typeSwitchStmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprSwitchStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_exprSwitchStmt;
    return this;
}

ExprSwitchStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprSwitchStmtContext.prototype.constructor = ExprSwitchStmtContext;

ExprSwitchStmtContext.prototype.simpleStmt = function() {
    return this.getTypedRuleContext(SimpleStmtContext,0);
};

ExprSwitchStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExprSwitchStmtContext.prototype.exprCaseClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprCaseClauseContext);
    } else {
        return this.getTypedRuleContext(ExprCaseClauseContext,i);
    }
};

ExprSwitchStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterExprSwitchStmt(this);
	}
};

ExprSwitchStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitExprSwitchStmt(this);
	}
};




GolangParser.ExprSwitchStmtContext = ExprSwitchStmtContext;

GolangParser.prototype.exprSwitchStmt = function() {

    var localctx = new ExprSwitchStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, GolangParser.RULE_exprSwitchStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455;
        this.match(GolangParser.T__38);
        this.state = 459;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 456;
            this.simpleStmt();
            this.state = 457;
            this.match(GolangParser.T__28);

        }
        this.state = 462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.T__60 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)) | (1 << (GolangParser.INT_LIT - 46)) | (1 << (GolangParser.FLOAT_LIT - 46)) | (1 << (GolangParser.IMAGINARY_LIT - 46)) | (1 << (GolangParser.RUNE_LIT - 46)) | (1 << (GolangParser.STRING_LIT - 46)))) !== 0)) {
            this.state = 461;
            this.expression(0);
        }

        this.state = 464;
        this.match(GolangParser.T__11);
        this.state = 468;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GolangParser.T__39 || _la===GolangParser.T__40) {
            this.state = 465;
            this.exprCaseClause();
            this.state = 470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 471;
        this.match(GolangParser.T__12);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprCaseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_exprCaseClause;
    return this;
}

ExprCaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprCaseClauseContext.prototype.constructor = ExprCaseClauseContext;

ExprCaseClauseContext.prototype.exprSwitchCase = function() {
    return this.getTypedRuleContext(ExprSwitchCaseContext,0);
};

ExprCaseClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

ExprCaseClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterExprCaseClause(this);
	}
};

ExprCaseClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitExprCaseClause(this);
	}
};




GolangParser.ExprCaseClauseContext = ExprCaseClauseContext;

GolangParser.prototype.exprCaseClause = function() {

    var localctx = new ExprCaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, GolangParser.RULE_exprCaseClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.exprSwitchCase();
        this.state = 474;
        this.match(GolangParser.T__29);
        this.state = 475;
        this.statementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprSwitchCaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_exprSwitchCase;
    return this;
}

ExprSwitchCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprSwitchCaseContext.prototype.constructor = ExprSwitchCaseContext;

ExprSwitchCaseContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExprSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterExprSwitchCase(this);
	}
};

ExprSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitExprSwitchCase(this);
	}
};




GolangParser.ExprSwitchCaseContext = ExprSwitchCaseContext;

GolangParser.prototype.exprSwitchCase = function() {

    var localctx = new ExprSwitchCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, GolangParser.RULE_exprSwitchCase);
    try {
        this.state = 480;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.T__39:
            this.enterOuterAlt(localctx, 1);
            this.state = 477;
            this.match(GolangParser.T__39);
            this.state = 478;
            this.expressionList();
            break;
        case GolangParser.T__40:
            this.enterOuterAlt(localctx, 2);
            this.state = 479;
            this.match(GolangParser.T__40);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSwitchStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeSwitchStmt;
    return this;
}

TypeSwitchStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSwitchStmtContext.prototype.constructor = TypeSwitchStmtContext;

TypeSwitchStmtContext.prototype.typeSwitchGuard = function() {
    return this.getTypedRuleContext(TypeSwitchGuardContext,0);
};

TypeSwitchStmtContext.prototype.simpleStmt = function() {
    return this.getTypedRuleContext(SimpleStmtContext,0);
};

TypeSwitchStmtContext.prototype.typeCaseClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeCaseClauseContext);
    } else {
        return this.getTypedRuleContext(TypeCaseClauseContext,i);
    }
};

TypeSwitchStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeSwitchStmt(this);
	}
};

TypeSwitchStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeSwitchStmt(this);
	}
};




GolangParser.TypeSwitchStmtContext = TypeSwitchStmtContext;

GolangParser.prototype.typeSwitchStmt = function() {

    var localctx = new TypeSwitchStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, GolangParser.RULE_typeSwitchStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 482;
        this.match(GolangParser.T__38);
        this.state = 486;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 483;
            this.simpleStmt();
            this.state = 484;
            this.match(GolangParser.T__28);

        }
        this.state = 488;
        this.typeSwitchGuard();
        this.state = 489;
        this.match(GolangParser.T__11);
        this.state = 493;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GolangParser.T__39 || _la===GolangParser.T__40) {
            this.state = 490;
            this.typeCaseClause();
            this.state = 495;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 496;
        this.match(GolangParser.T__12);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSwitchGuardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeSwitchGuard;
    return this;
}

TypeSwitchGuardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSwitchGuardContext.prototype.constructor = TypeSwitchGuardContext;

TypeSwitchGuardContext.prototype.primaryExpr = function() {
    return this.getTypedRuleContext(PrimaryExprContext,0);
};

TypeSwitchGuardContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

TypeSwitchGuardContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeSwitchGuard(this);
	}
};

TypeSwitchGuardContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeSwitchGuard(this);
	}
};




GolangParser.TypeSwitchGuardContext = TypeSwitchGuardContext;

GolangParser.prototype.typeSwitchGuard = function() {

    var localctx = new TypeSwitchGuardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, GolangParser.RULE_typeSwitchGuard);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 498;
            this.match(GolangParser.IDENTIFIER);
            this.state = 499;
            this.match(GolangParser.T__27);

        }
        this.state = 502;
        this.primaryExpr(0);
        this.state = 503;
        this.match(GolangParser.T__4);
        this.state = 504;
        this.match(GolangParser.T__2);
        this.state = 505;
        this.match(GolangParser.T__8);
        this.state = 506;
        this.match(GolangParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeCaseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeCaseClause;
    return this;
}

TypeCaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeCaseClauseContext.prototype.constructor = TypeCaseClauseContext;

TypeCaseClauseContext.prototype.typeSwitchCase = function() {
    return this.getTypedRuleContext(TypeSwitchCaseContext,0);
};

TypeCaseClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

TypeCaseClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeCaseClause(this);
	}
};

TypeCaseClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeCaseClause(this);
	}
};




GolangParser.TypeCaseClauseContext = TypeCaseClauseContext;

GolangParser.prototype.typeCaseClause = function() {

    var localctx = new TypeCaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, GolangParser.RULE_typeCaseClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 508;
        this.typeSwitchCase();
        this.state = 509;
        this.match(GolangParser.T__29);
        this.state = 510;
        this.statementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSwitchCaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeSwitchCase;
    return this;
}

TypeSwitchCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSwitchCaseContext.prototype.constructor = TypeSwitchCaseContext;

TypeSwitchCaseContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

TypeSwitchCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeSwitchCase(this);
	}
};

TypeSwitchCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeSwitchCase(this);
	}
};




GolangParser.TypeSwitchCaseContext = TypeSwitchCaseContext;

GolangParser.prototype.typeSwitchCase = function() {

    var localctx = new TypeSwitchCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, GolangParser.RULE_typeSwitchCase);
    try {
        this.state = 515;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.T__39:
            this.enterOuterAlt(localctx, 1);
            this.state = 512;
            this.match(GolangParser.T__39);
            this.state = 513;
            this.typeList();
            break;
        case GolangParser.T__40:
            this.enterOuterAlt(localctx, 2);
            this.state = 514;
            this.match(GolangParser.T__40);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeList;
    return this;
}

TypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeListContext.prototype.constructor = TypeListContext;

TypeListContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeList(this);
	}
};

TypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeList(this);
	}
};




GolangParser.TypeListContext = TypeListContext;

GolangParser.prototype.typeList = function() {

    var localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, GolangParser.RULE_typeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 517;
        this.type();
        this.state = 522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GolangParser.T__7) {
            this.state = 518;
            this.match(GolangParser.T__7);
            this.state = 519;
            this.type();
            this.state = 524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_selectStmt;
    return this;
}

SelectStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStmtContext.prototype.constructor = SelectStmtContext;

SelectStmtContext.prototype.commClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommClauseContext);
    } else {
        return this.getTypedRuleContext(CommClauseContext,i);
    }
};

SelectStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterSelectStmt(this);
	}
};

SelectStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitSelectStmt(this);
	}
};




GolangParser.SelectStmtContext = SelectStmtContext;

GolangParser.prototype.selectStmt = function() {

    var localctx = new SelectStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, GolangParser.RULE_selectStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 525;
        this.match(GolangParser.T__41);
        this.state = 526;
        this.match(GolangParser.T__11);
        this.state = 530;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GolangParser.T__39 || _la===GolangParser.T__40) {
            this.state = 527;
            this.commClause();
            this.state = 532;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 533;
        this.match(GolangParser.T__12);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CommClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_commClause;
    return this;
}

CommClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommClauseContext.prototype.constructor = CommClauseContext;

CommClauseContext.prototype.commCase = function() {
    return this.getTypedRuleContext(CommCaseContext,0);
};

CommClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

CommClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterCommClause(this);
	}
};

CommClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitCommClause(this);
	}
};




GolangParser.CommClauseContext = CommClauseContext;

GolangParser.prototype.commClause = function() {

    var localctx = new CommClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, GolangParser.RULE_commClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 535;
        this.commCase();
        this.state = 536;
        this.match(GolangParser.T__29);
        this.state = 537;
        this.statementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CommCaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_commCase;
    return this;
}

CommCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommCaseContext.prototype.constructor = CommCaseContext;

CommCaseContext.prototype.sendStmt = function() {
    return this.getTypedRuleContext(SendStmtContext,0);
};

CommCaseContext.prototype.recvStmt = function() {
    return this.getTypedRuleContext(RecvStmtContext,0);
};

CommCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterCommCase(this);
	}
};

CommCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitCommCase(this);
	}
};




GolangParser.CommCaseContext = CommCaseContext;

GolangParser.prototype.commCase = function() {

    var localctx = new CommCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, GolangParser.RULE_commCase);
    try {
        this.state = 545;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.T__39:
            this.enterOuterAlt(localctx, 1);
            this.state = 539;
            this.match(GolangParser.T__39);
            this.state = 542;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            switch(la_) {
            case 1:
                this.state = 540;
                this.sendStmt();
                break;

            case 2:
                this.state = 541;
                this.recvStmt();
                break;

            }
            break;
        case GolangParser.T__40:
            this.enterOuterAlt(localctx, 2);
            this.state = 544;
            this.match(GolangParser.T__40);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RecvStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_recvStmt;
    return this;
}

RecvStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecvStmtContext.prototype.constructor = RecvStmtContext;

RecvStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

RecvStmtContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

RecvStmtContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

RecvStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterRecvStmt(this);
	}
};

RecvStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitRecvStmt(this);
	}
};




GolangParser.RecvStmtContext = RecvStmtContext;

GolangParser.prototype.recvStmt = function() {

    var localctx = new RecvStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, GolangParser.RULE_recvStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 547;
            this.expressionList();
            this.state = 548;
            this.match(GolangParser.T__6);

        } else if(la_===2) {
            this.state = 550;
            this.identifierList();
            this.state = 551;
            this.match(GolangParser.T__27);

        }
        this.state = 555;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_forStmt;
    return this;
}

ForStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStmtContext.prototype.constructor = ForStmtContext;

ForStmtContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ForStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForStmtContext.prototype.forClause = function() {
    return this.getTypedRuleContext(ForClauseContext,0);
};

ForStmtContext.prototype.rangeClause = function() {
    return this.getTypedRuleContext(RangeClauseContext,0);
};

ForStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterForStmt(this);
	}
};

ForStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitForStmt(this);
	}
};




GolangParser.ForStmtContext = ForStmtContext;

GolangParser.prototype.forStmt = function() {

    var localctx = new ForStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, GolangParser.RULE_forStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 557;
        this.match(GolangParser.T__42);
        this.state = 561;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 558;
            this.expression(0);

        } else if(la_===2) {
            this.state = 559;
            this.forClause();

        } else if(la_===3) {
            this.state = 560;
            this.rangeClause();

        }
        this.state = 563;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_forClause;
    return this;
}

ForClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForClauseContext.prototype.constructor = ForClauseContext;

ForClauseContext.prototype.simpleStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimpleStmtContext);
    } else {
        return this.getTypedRuleContext(SimpleStmtContext,i);
    }
};

ForClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterForClause(this);
	}
};

ForClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitForClause(this);
	}
};




GolangParser.ForClauseContext = ForClauseContext;

GolangParser.prototype.forClause = function() {

    var localctx = new ForClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, GolangParser.RULE_forClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 565;
            this.simpleStmt();

        }
        this.state = 568;
        this.match(GolangParser.T__28);
        this.state = 570;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.T__60 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)) | (1 << (GolangParser.INT_LIT - 46)) | (1 << (GolangParser.FLOAT_LIT - 46)) | (1 << (GolangParser.IMAGINARY_LIT - 46)) | (1 << (GolangParser.RUNE_LIT - 46)) | (1 << (GolangParser.STRING_LIT - 46)))) !== 0)) {
            this.state = 569;
            this.expression(0);
        }

        this.state = 572;
        this.match(GolangParser.T__28);
        this.state = 574;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25) | (1 << GolangParser.T__28))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.T__60 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)) | (1 << (GolangParser.INT_LIT - 46)) | (1 << (GolangParser.FLOAT_LIT - 46)) | (1 << (GolangParser.IMAGINARY_LIT - 46)) | (1 << (GolangParser.RUNE_LIT - 46)) | (1 << (GolangParser.STRING_LIT - 46)))) !== 0)) {
            this.state = 573;
            this.simpleStmt();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RangeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_rangeClause;
    return this;
}

RangeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeClauseContext.prototype.constructor = RangeClauseContext;

RangeClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

RangeClauseContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

RangeClauseContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

RangeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterRangeClause(this);
	}
};

RangeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitRangeClause(this);
	}
};




GolangParser.RangeClauseContext = RangeClauseContext;

GolangParser.prototype.rangeClause = function() {

    var localctx = new RangeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, GolangParser.RULE_rangeClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        if(la_===1) {
            this.state = 576;
            this.expressionList();
            this.state = 577;
            this.match(GolangParser.T__6);

        } else if(la_===2) {
            this.state = 579;
            this.identifierList();
            this.state = 580;
            this.match(GolangParser.T__27);

        }
        this.state = 584;
        this.match(GolangParser.T__43);
        this.state = 585;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GoStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_goStmt;
    return this;
}

GoStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GoStmtContext.prototype.constructor = GoStmtContext;

GoStmtContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GoStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterGoStmt(this);
	}
};

GoStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitGoStmt(this);
	}
};




GolangParser.GoStmtContext = GoStmtContext;

GolangParser.prototype.goStmt = function() {

    var localctx = new GoStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, GolangParser.RULE_goStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 587;
        this.match(GolangParser.T__44);
        this.state = 588;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

TypeContext.prototype.typeLit = function() {
    return this.getTypedRuleContext(TypeLitContext,0);
};

TypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitType(this);
	}
};




GolangParser.TypeContext = TypeContext;

GolangParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, GolangParser.RULE_type);
    try {
        this.state = 596;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 590;
            this.typeName();
            break;
        case GolangParser.T__9:
        case GolangParser.T__13:
        case GolangParser.T__20:
        case GolangParser.T__45:
        case GolangParser.T__47:
        case GolangParser.T__48:
        case GolangParser.T__49:
        case GolangParser.T__51:
            this.enterOuterAlt(localctx, 2);
            this.state = 591;
            this.typeLit();
            break;
        case GolangParser.T__2:
            this.enterOuterAlt(localctx, 3);
            this.state = 592;
            this.match(GolangParser.T__2);
            this.state = 593;
            this.type();
            this.state = 594;
            this.match(GolangParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

TypeNameContext.prototype.qualifiedIdent = function() {
    return this.getTypedRuleContext(QualifiedIdentContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeName(this);
	}
};




GolangParser.TypeNameContext = TypeNameContext;

GolangParser.prototype.typeName = function() {

    var localctx = new TypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, GolangParser.RULE_typeName);
    try {
        this.state = 600;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 598;
            this.match(GolangParser.IDENTIFIER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 599;
            this.qualifiedIdent();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeLitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeLit;
    return this;
}

TypeLitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeLitContext.prototype.constructor = TypeLitContext;

TypeLitContext.prototype.arrayType = function() {
    return this.getTypedRuleContext(ArrayTypeContext,0);
};

TypeLitContext.prototype.structType = function() {
    return this.getTypedRuleContext(StructTypeContext,0);
};

TypeLitContext.prototype.pointerType = function() {
    return this.getTypedRuleContext(PointerTypeContext,0);
};

TypeLitContext.prototype.functionType = function() {
    return this.getTypedRuleContext(FunctionTypeContext,0);
};

TypeLitContext.prototype.interfaceType = function() {
    return this.getTypedRuleContext(InterfaceTypeContext,0);
};

TypeLitContext.prototype.sliceType = function() {
    return this.getTypedRuleContext(SliceTypeContext,0);
};

TypeLitContext.prototype.mapType = function() {
    return this.getTypedRuleContext(MapTypeContext,0);
};

TypeLitContext.prototype.channelType = function() {
    return this.getTypedRuleContext(ChannelTypeContext,0);
};

TypeLitContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeLit(this);
	}
};

TypeLitContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeLit(this);
	}
};




GolangParser.TypeLitContext = TypeLitContext;

GolangParser.prototype.typeLit = function() {

    var localctx = new TypeLitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, GolangParser.RULE_typeLit);
    try {
        this.state = 610;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 602;
            this.arrayType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 603;
            this.structType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 604;
            this.pointerType();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 605;
            this.functionType();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 606;
            this.interfaceType();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 607;
            this.sliceType();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 608;
            this.mapType();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 609;
            this.channelType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_arrayType;
    return this;
}

ArrayTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayTypeContext.prototype.constructor = ArrayTypeContext;

ArrayTypeContext.prototype.arrayLength = function() {
    return this.getTypedRuleContext(ArrayLengthContext,0);
};

ArrayTypeContext.prototype.elementType = function() {
    return this.getTypedRuleContext(ElementTypeContext,0);
};

ArrayTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterArrayType(this);
	}
};

ArrayTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitArrayType(this);
	}
};




GolangParser.ArrayTypeContext = ArrayTypeContext;

GolangParser.prototype.arrayType = function() {

    var localctx = new ArrayTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, GolangParser.RULE_arrayType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 612;
        this.match(GolangParser.T__45);
        this.state = 613;
        this.arrayLength();
        this.state = 614;
        this.match(GolangParser.T__46);
        this.state = 615;
        this.elementType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayLengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_arrayLength;
    return this;
}

ArrayLengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLengthContext.prototype.constructor = ArrayLengthContext;

ArrayLengthContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArrayLengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterArrayLength(this);
	}
};

ArrayLengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitArrayLength(this);
	}
};




GolangParser.ArrayLengthContext = ArrayLengthContext;

GolangParser.prototype.arrayLength = function() {

    var localctx = new ArrayLengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, GolangParser.RULE_arrayLength);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_elementType;
    return this;
}

ElementTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementTypeContext.prototype.constructor = ElementTypeContext;

ElementTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ElementTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterElementType(this);
	}
};

ElementTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitElementType(this);
	}
};




GolangParser.ElementTypeContext = ElementTypeContext;

GolangParser.prototype.elementType = function() {

    var localctx = new ElementTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, GolangParser.RULE_elementType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 619;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PointerTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_pointerType;
    return this;
}

PointerTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointerTypeContext.prototype.constructor = PointerTypeContext;

PointerTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PointerTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterPointerType(this);
	}
};

PointerTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitPointerType(this);
	}
};




GolangParser.PointerTypeContext = PointerTypeContext;

GolangParser.prototype.pointerType = function() {

    var localctx = new PointerTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, GolangParser.RULE_pointerType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.match(GolangParser.T__20);
        this.state = 622;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_interfaceType;
    return this;
}

InterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceTypeContext.prototype.constructor = InterfaceTypeContext;

InterfaceTypeContext.prototype.methodSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodSpecContext);
    } else {
        return this.getTypedRuleContext(MethodSpecContext,i);
    }
};

InterfaceTypeContext.prototype.eos = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EosContext);
    } else {
        return this.getTypedRuleContext(EosContext,i);
    }
};

InterfaceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterInterfaceType(this);
	}
};

InterfaceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitInterfaceType(this);
	}
};




GolangParser.InterfaceTypeContext = InterfaceTypeContext;

GolangParser.prototype.interfaceType = function() {

    var localctx = new InterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, GolangParser.RULE_interfaceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 624;
        this.match(GolangParser.T__47);
        this.state = 625;
        this.match(GolangParser.T__11);
        this.state = 631;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 626;
                this.methodSpec();
                this.state = 627;
                this.eos(); 
            }
            this.state = 633;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
        }

        this.state = 634;
        this.match(GolangParser.T__12);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SliceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_sliceType;
    return this;
}

SliceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SliceTypeContext.prototype.constructor = SliceTypeContext;

SliceTypeContext.prototype.elementType = function() {
    return this.getTypedRuleContext(ElementTypeContext,0);
};

SliceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterSliceType(this);
	}
};

SliceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitSliceType(this);
	}
};




GolangParser.SliceTypeContext = SliceTypeContext;

GolangParser.prototype.sliceType = function() {

    var localctx = new SliceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, GolangParser.RULE_sliceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 636;
        this.match(GolangParser.T__45);
        this.state = 637;
        this.match(GolangParser.T__46);
        this.state = 638;
        this.elementType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MapTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_mapType;
    return this;
}

MapTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapTypeContext.prototype.constructor = MapTypeContext;

MapTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

MapTypeContext.prototype.elementType = function() {
    return this.getTypedRuleContext(ElementTypeContext,0);
};

MapTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterMapType(this);
	}
};

MapTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitMapType(this);
	}
};




GolangParser.MapTypeContext = MapTypeContext;

GolangParser.prototype.mapType = function() {

    var localctx = new MapTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, GolangParser.RULE_mapType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        this.match(GolangParser.T__48);
        this.state = 641;
        this.match(GolangParser.T__45);
        this.state = 642;
        this.type();
        this.state = 643;
        this.match(GolangParser.T__46);
        this.state = 644;
        this.elementType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChannelTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_channelType;
    return this;
}

ChannelTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChannelTypeContext.prototype.constructor = ChannelTypeContext;

ChannelTypeContext.prototype.elementType = function() {
    return this.getTypedRuleContext(ElementTypeContext,0);
};

ChannelTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterChannelType(this);
	}
};

ChannelTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitChannelType(this);
	}
};




GolangParser.ChannelTypeContext = ChannelTypeContext;

GolangParser.prototype.channelType = function() {

    var localctx = new ChannelTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, GolangParser.RULE_channelType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.state = 646;
            this.match(GolangParser.T__49);
            break;

        case 2:
            this.state = 647;
            this.match(GolangParser.T__49);
            this.state = 648;
            this.match(GolangParser.T__13);
            break;

        case 3:
            this.state = 649;
            this.match(GolangParser.T__13);
            this.state = 650;
            this.match(GolangParser.T__49);
            break;

        }
        this.state = 653;
        this.elementType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_methodSpec;
    return this;
}

MethodSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodSpecContext.prototype.constructor = MethodSpecContext;

MethodSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

MethodSpecContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

MethodSpecContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

MethodSpecContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MethodSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterMethodSpec(this);
	}
};

MethodSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitMethodSpec(this);
	}
};




GolangParser.MethodSpecContext = MethodSpecContext;

GolangParser.prototype.methodSpec = function() {

    var localctx = new MethodSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, GolangParser.RULE_methodSpec);
    try {
        this.state = 663;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 655;
            if (!( this.noTerminatorAfterParams(2))) {
                throw new antlr4.error.FailedPredicateException(this, "noTerminatorAfterParams(2)");
            }
            this.state = 656;
            this.match(GolangParser.IDENTIFIER);
            this.state = 657;
            this.parameters();
            this.state = 658;
            this.result();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 660;
            this.typeName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 661;
            this.match(GolangParser.IDENTIFIER);
            this.state = 662;
            this.parameters();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_functionType;
    return this;
}

FunctionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeContext.prototype.constructor = FunctionTypeContext;

FunctionTypeContext.prototype.signature = function() {
    return this.getTypedRuleContext(SignatureContext,0);
};

FunctionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterFunctionType(this);
	}
};

FunctionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitFunctionType(this);
	}
};




GolangParser.FunctionTypeContext = FunctionTypeContext;

GolangParser.prototype.functionType = function() {

    var localctx = new FunctionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, GolangParser.RULE_functionType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.match(GolangParser.T__9);
        this.state = 666;
        this.signature();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_signature;
    return this;
}

SignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignatureContext.prototype.constructor = SignatureContext;

SignatureContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

SignatureContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

SignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterSignature(this);
	}
};

SignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitSignature(this);
	}
};




GolangParser.SignatureContext = SignatureContext;

GolangParser.prototype.signature = function() {

    var localctx = new SignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, GolangParser.RULE_signature);
    try {
        this.state = 673;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 668;
            if (!( this.noTerminatorAfterParams(1))) {
                throw new antlr4.error.FailedPredicateException(this, "noTerminatorAfterParams(1)");
            }
            this.state = 669;
            this.parameters();
            this.state = 670;
            this.result();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 672;
            this.parameters();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_result;
    return this;
}

ResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResultContext.prototype.constructor = ResultContext;

ResultContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

ResultContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterResult(this);
	}
};

ResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitResult(this);
	}
};




GolangParser.ResultContext = ResultContext;

GolangParser.prototype.result = function() {

    var localctx = new ResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, GolangParser.RULE_result);
    try {
        this.state = 677;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 675;
            this.parameters();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 676;
            this.type();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitParameters(this);
	}
};




GolangParser.ParametersContext = ParametersContext;

GolangParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, GolangParser.RULE_parameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 679;
        this.match(GolangParser.T__2);
        this.state = 684;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__13) | (1 << GolangParser.T__20))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__50 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)))) !== 0)) {
            this.state = 680;
            this.parameterList();
            this.state = 682;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GolangParser.T__7) {
                this.state = 681;
                this.match(GolangParser.T__7);
            }

        }

        this.state = 686;
        this.match(GolangParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.parameterDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDeclContext);
    } else {
        return this.getTypedRuleContext(ParameterDeclContext,i);
    }
};

ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitParameterList(this);
	}
};




GolangParser.ParameterListContext = ParameterListContext;

GolangParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, GolangParser.RULE_parameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 688;
        this.parameterDecl();
        this.state = 693;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 689;
                this.match(GolangParser.T__7);
                this.state = 690;
                this.parameterDecl(); 
            }
            this.state = 695;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_parameterDecl;
    return this;
}

ParameterDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclContext.prototype.constructor = ParameterDeclContext;

ParameterDeclContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ParameterDeclContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

ParameterDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterParameterDecl(this);
	}
};

ParameterDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitParameterDecl(this);
	}
};




GolangParser.ParameterDeclContext = ParameterDeclContext;

GolangParser.prototype.parameterDecl = function() {

    var localctx = new ParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, GolangParser.RULE_parameterDecl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        if(la_===1) {
            this.state = 696;
            this.identifierList();

        }
        this.state = 700;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GolangParser.T__50) {
            this.state = 699;
            this.match(GolangParser.T__50);
        }

        this.state = 702;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_operand;
    return this;
}

OperandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperandContext.prototype.constructor = OperandContext;

OperandContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

OperandContext.prototype.operandName = function() {
    return this.getTypedRuleContext(OperandNameContext,0);
};

OperandContext.prototype.methodExpr = function() {
    return this.getTypedRuleContext(MethodExprContext,0);
};

OperandContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OperandContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterOperand(this);
	}
};

OperandContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitOperand(this);
	}
};




GolangParser.OperandContext = OperandContext;

GolangParser.prototype.operand = function() {

    var localctx = new OperandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, GolangParser.RULE_operand);
    try {
        this.state = 711;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 704;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 705;
            this.operandName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 706;
            this.methodExpr();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 707;
            this.match(GolangParser.T__2);
            this.state = 708;
            this.expression(0);
            this.state = 709;
            this.match(GolangParser.T__3);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.basicLit = function() {
    return this.getTypedRuleContext(BasicLitContext,0);
};

LiteralContext.prototype.compositeLit = function() {
    return this.getTypedRuleContext(CompositeLitContext,0);
};

LiteralContext.prototype.functionLit = function() {
    return this.getTypedRuleContext(FunctionLitContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitLiteral(this);
	}
};




GolangParser.LiteralContext = LiteralContext;

GolangParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, GolangParser.RULE_literal);
    try {
        this.state = 716;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.INT_LIT:
        case GolangParser.FLOAT_LIT:
        case GolangParser.IMAGINARY_LIT:
        case GolangParser.RUNE_LIT:
        case GolangParser.STRING_LIT:
            this.enterOuterAlt(localctx, 1);
            this.state = 713;
            this.basicLit();
            break;
        case GolangParser.T__45:
        case GolangParser.T__48:
        case GolangParser.T__51:
        case GolangParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 714;
            this.compositeLit();
            break;
        case GolangParser.T__9:
            this.enterOuterAlt(localctx, 3);
            this.state = 715;
            this.functionLit();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BasicLitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_basicLit;
    return this;
}

BasicLitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasicLitContext.prototype.constructor = BasicLitContext;

BasicLitContext.prototype.INT_LIT = function() {
    return this.getToken(GolangParser.INT_LIT, 0);
};

BasicLitContext.prototype.FLOAT_LIT = function() {
    return this.getToken(GolangParser.FLOAT_LIT, 0);
};

BasicLitContext.prototype.IMAGINARY_LIT = function() {
    return this.getToken(GolangParser.IMAGINARY_LIT, 0);
};

BasicLitContext.prototype.RUNE_LIT = function() {
    return this.getToken(GolangParser.RUNE_LIT, 0);
};

BasicLitContext.prototype.STRING_LIT = function() {
    return this.getToken(GolangParser.STRING_LIT, 0);
};

BasicLitContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterBasicLit(this);
	}
};

BasicLitContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitBasicLit(this);
	}
};




GolangParser.BasicLitContext = BasicLitContext;

GolangParser.prototype.basicLit = function() {

    var localctx = new BasicLitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, GolangParser.RULE_basicLit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 718;
        _la = this._input.LA(1);
        if(!(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GolangParser.INT_LIT - 65)) | (1 << (GolangParser.FLOAT_LIT - 65)) | (1 << (GolangParser.IMAGINARY_LIT - 65)) | (1 << (GolangParser.RUNE_LIT - 65)) | (1 << (GolangParser.STRING_LIT - 65)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperandNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_operandName;
    return this;
}

OperandNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperandNameContext.prototype.constructor = OperandNameContext;

OperandNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

OperandNameContext.prototype.qualifiedIdent = function() {
    return this.getTypedRuleContext(QualifiedIdentContext,0);
};

OperandNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterOperandName(this);
	}
};

OperandNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitOperandName(this);
	}
};




GolangParser.OperandNameContext = OperandNameContext;

GolangParser.prototype.operandName = function() {

    var localctx = new OperandNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, GolangParser.RULE_operandName);
    try {
        this.state = 722;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 720;
            this.match(GolangParser.IDENTIFIER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.qualifiedIdent();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedIdentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_qualifiedIdent;
    return this;
}

QualifiedIdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedIdentContext.prototype.constructor = QualifiedIdentContext;

QualifiedIdentContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GolangParser.IDENTIFIER);
    } else {
        return this.getToken(GolangParser.IDENTIFIER, i);
    }
};


QualifiedIdentContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterQualifiedIdent(this);
	}
};

QualifiedIdentContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitQualifiedIdent(this);
	}
};




GolangParser.QualifiedIdentContext = QualifiedIdentContext;

GolangParser.prototype.qualifiedIdent = function() {

    var localctx = new QualifiedIdentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, GolangParser.RULE_qualifiedIdent);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.match(GolangParser.IDENTIFIER);
        this.state = 725;
        this.match(GolangParser.T__4);
        this.state = 726;
        this.match(GolangParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompositeLitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_compositeLit;
    return this;
}

CompositeLitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompositeLitContext.prototype.constructor = CompositeLitContext;

CompositeLitContext.prototype.literalType = function() {
    return this.getTypedRuleContext(LiteralTypeContext,0);
};

CompositeLitContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

CompositeLitContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterCompositeLit(this);
	}
};

CompositeLitContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitCompositeLit(this);
	}
};




GolangParser.CompositeLitContext = CompositeLitContext;

GolangParser.prototype.compositeLit = function() {

    var localctx = new CompositeLitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, GolangParser.RULE_compositeLit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 728;
        this.literalType();
        this.state = 729;
        this.literalValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_literalType;
    return this;
}

LiteralTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralTypeContext.prototype.constructor = LiteralTypeContext;

LiteralTypeContext.prototype.structType = function() {
    return this.getTypedRuleContext(StructTypeContext,0);
};

LiteralTypeContext.prototype.arrayType = function() {
    return this.getTypedRuleContext(ArrayTypeContext,0);
};

LiteralTypeContext.prototype.elementType = function() {
    return this.getTypedRuleContext(ElementTypeContext,0);
};

LiteralTypeContext.prototype.sliceType = function() {
    return this.getTypedRuleContext(SliceTypeContext,0);
};

LiteralTypeContext.prototype.mapType = function() {
    return this.getTypedRuleContext(MapTypeContext,0);
};

LiteralTypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

LiteralTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterLiteralType(this);
	}
};

LiteralTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitLiteralType(this);
	}
};




GolangParser.LiteralTypeContext = LiteralTypeContext;

GolangParser.prototype.literalType = function() {

    var localctx = new LiteralTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, GolangParser.RULE_literalType);
    try {
        this.state = 740;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 731;
            this.structType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 732;
            this.arrayType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 733;
            this.match(GolangParser.T__45);
            this.state = 734;
            this.match(GolangParser.T__50);
            this.state = 735;
            this.match(GolangParser.T__46);
            this.state = 736;
            this.elementType();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 737;
            this.sliceType();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 738;
            this.mapType();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 739;
            this.typeName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_literalValue;
    return this;
}

LiteralValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralValueContext.prototype.constructor = LiteralValueContext;

LiteralValueContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

LiteralValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterLiteralValue(this);
	}
};

LiteralValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitLiteralValue(this);
	}
};




GolangParser.LiteralValueContext = LiteralValueContext;

GolangParser.prototype.literalValue = function() {

    var localctx = new LiteralValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, GolangParser.RULE_literalValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 742;
        this.match(GolangParser.T__11);
        this.state = 747;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__11) | (1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.T__60 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)) | (1 << (GolangParser.INT_LIT - 46)) | (1 << (GolangParser.FLOAT_LIT - 46)) | (1 << (GolangParser.IMAGINARY_LIT - 46)) | (1 << (GolangParser.RUNE_LIT - 46)) | (1 << (GolangParser.STRING_LIT - 46)))) !== 0)) {
            this.state = 743;
            this.elementList();
            this.state = 745;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GolangParser.T__7) {
                this.state = 744;
                this.match(GolangParser.T__7);
            }

        }

        this.state = 749;
        this.match(GolangParser.T__12);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_elementList;
    return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.keyedElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyedElementContext);
    } else {
        return this.getTypedRuleContext(KeyedElementContext,i);
    }
};

ElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterElementList(this);
	}
};

ElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitElementList(this);
	}
};




GolangParser.ElementListContext = ElementListContext;

GolangParser.prototype.elementList = function() {

    var localctx = new ElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, GolangParser.RULE_elementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 751;
        this.keyedElement();
        this.state = 756;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 752;
                this.match(GolangParser.T__7);
                this.state = 753;
                this.keyedElement(); 
            }
            this.state = 758;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyedElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_keyedElement;
    return this;
}

KeyedElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyedElementContext.prototype.constructor = KeyedElementContext;

KeyedElementContext.prototype.element = function() {
    return this.getTypedRuleContext(ElementContext,0);
};

KeyedElementContext.prototype.key = function() {
    return this.getTypedRuleContext(KeyContext,0);
};

KeyedElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterKeyedElement(this);
	}
};

KeyedElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitKeyedElement(this);
	}
};




GolangParser.KeyedElementContext = KeyedElementContext;

GolangParser.prototype.keyedElement = function() {

    var localctx = new KeyedElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, GolangParser.RULE_keyedElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 762;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 759;
            this.key();
            this.state = 760;
            this.match(GolangParser.T__29);

        }
        this.state = 764;
        this.element();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_key;
    return this;
}

KeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyContext.prototype.constructor = KeyContext;

KeyContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

KeyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

KeyContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

KeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterKey(this);
	}
};

KeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitKey(this);
	}
};




GolangParser.KeyContext = KeyContext;

GolangParser.prototype.key = function() {

    var localctx = new KeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, GolangParser.RULE_key);
    try {
        this.state = 769;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 766;
            this.match(GolangParser.IDENTIFIER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 767;
            this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 768;
            this.literalValue();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_element;
    return this;
}

ElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementContext.prototype.constructor = ElementContext;

ElementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

ElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterElement(this);
	}
};

ElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitElement(this);
	}
};




GolangParser.ElementContext = ElementContext;

GolangParser.prototype.element = function() {

    var localctx = new ElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, GolangParser.RULE_element);
    try {
        this.state = 773;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GolangParser.T__2:
        case GolangParser.T__9:
        case GolangParser.T__13:
        case GolangParser.T__16:
        case GolangParser.T__17:
        case GolangParser.T__19:
        case GolangParser.T__20:
        case GolangParser.T__25:
        case GolangParser.T__45:
        case GolangParser.T__47:
        case GolangParser.T__48:
        case GolangParser.T__49:
        case GolangParser.T__51:
        case GolangParser.T__60:
        case GolangParser.IDENTIFIER:
        case GolangParser.INT_LIT:
        case GolangParser.FLOAT_LIT:
        case GolangParser.IMAGINARY_LIT:
        case GolangParser.RUNE_LIT:
        case GolangParser.STRING_LIT:
            this.enterOuterAlt(localctx, 1);
            this.state = 771;
            this.expression(0);
            break;
        case GolangParser.T__11:
            this.enterOuterAlt(localctx, 2);
            this.state = 772;
            this.literalValue();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_structType;
    return this;
}

StructTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructTypeContext.prototype.constructor = StructTypeContext;

StructTypeContext.prototype.fieldDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldDeclContext);
    } else {
        return this.getTypedRuleContext(FieldDeclContext,i);
    }
};

StructTypeContext.prototype.eos = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EosContext);
    } else {
        return this.getTypedRuleContext(EosContext,i);
    }
};

StructTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterStructType(this);
	}
};

StructTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitStructType(this);
	}
};




GolangParser.StructTypeContext = StructTypeContext;

GolangParser.prototype.structType = function() {

    var localctx = new StructTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, GolangParser.RULE_structType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 775;
        this.match(GolangParser.T__51);
        this.state = 776;
        this.match(GolangParser.T__11);
        this.state = 782;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 777;
                this.fieldDecl();
                this.state = 778;
                this.eos(); 
            }
            this.state = 784;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
        }

        this.state = 785;
        this.match(GolangParser.T__12);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_fieldDecl;
    return this;
}

FieldDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclContext.prototype.constructor = FieldDeclContext;

FieldDeclContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

FieldDeclContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FieldDeclContext.prototype.anonymousField = function() {
    return this.getTypedRuleContext(AnonymousFieldContext,0);
};

FieldDeclContext.prototype.STRING_LIT = function() {
    return this.getToken(GolangParser.STRING_LIT, 0);
};

FieldDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterFieldDecl(this);
	}
};

FieldDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitFieldDecl(this);
	}
};




GolangParser.FieldDeclContext = FieldDeclContext;

GolangParser.prototype.fieldDecl = function() {

    var localctx = new FieldDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, GolangParser.RULE_fieldDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 792;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.state = 787;
            if (!( this.noTerminatorBetween(2))) {
                throw new antlr4.error.FailedPredicateException(this, "noTerminatorBetween(2)");
            }
            this.state = 788;
            this.identifierList();
            this.state = 789;
            this.type();
            break;

        case 2:
            this.state = 791;
            this.anonymousField();
            break;

        }
        this.state = 795;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        if(la_===1) {
            this.state = 794;
            this.match(GolangParser.STRING_LIT);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnonymousFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_anonymousField;
    return this;
}

AnonymousFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonymousFieldContext.prototype.constructor = AnonymousFieldContext;

AnonymousFieldContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

AnonymousFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterAnonymousField(this);
	}
};

AnonymousFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitAnonymousField(this);
	}
};




GolangParser.AnonymousFieldContext = AnonymousFieldContext;

GolangParser.prototype.anonymousField = function() {

    var localctx = new AnonymousFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, GolangParser.RULE_anonymousField);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GolangParser.T__20) {
            this.state = 797;
            this.match(GolangParser.T__20);
        }

        this.state = 800;
        this.typeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionLitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_functionLit;
    return this;
}

FunctionLitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionLitContext.prototype.constructor = FunctionLitContext;

FunctionLitContext.prototype.function_ = function() {
    return this.getTypedRuleContext(Function_Context,0);
};

FunctionLitContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterFunctionLit(this);
	}
};

FunctionLitContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitFunctionLit(this);
	}
};




GolangParser.FunctionLitContext = FunctionLitContext;

GolangParser.prototype.functionLit = function() {

    var localctx = new FunctionLitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, GolangParser.RULE_functionLit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 802;
        this.match(GolangParser.T__9);
        this.state = 803;
        this.function_();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_primaryExpr;
    return this;
}

PrimaryExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExprContext.prototype.constructor = PrimaryExprContext;

PrimaryExprContext.prototype.operand = function() {
    return this.getTypedRuleContext(OperandContext,0);
};

PrimaryExprContext.prototype.conversion = function() {
    return this.getTypedRuleContext(ConversionContext,0);
};

PrimaryExprContext.prototype.primaryExpr = function() {
    return this.getTypedRuleContext(PrimaryExprContext,0);
};

PrimaryExprContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

PrimaryExprContext.prototype.index = function() {
    return this.getTypedRuleContext(IndexContext,0);
};

PrimaryExprContext.prototype.slice = function() {
    return this.getTypedRuleContext(SliceContext,0);
};

PrimaryExprContext.prototype.typeAssertion = function() {
    return this.getTypedRuleContext(TypeAssertionContext,0);
};

PrimaryExprContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

PrimaryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterPrimaryExpr(this);
	}
};

PrimaryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitPrimaryExpr(this);
	}
};



GolangParser.prototype.primaryExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 178;
    this.enterRecursionRule(localctx, 178, GolangParser.RULE_primaryExpr, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        switch(la_) {
        case 1:
            this.state = 806;
            this.operand();
            break;

        case 2:
            this.state = 807;
            this.conversion();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 822;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 820;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PrimaryExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GolangParser.RULE_primaryExpr);
                    this.state = 810;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 811;
                    this.selector();
                    break;

                case 2:
                    localctx = new PrimaryExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GolangParser.RULE_primaryExpr);
                    this.state = 812;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 813;
                    this.index();
                    break;

                case 3:
                    localctx = new PrimaryExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GolangParser.RULE_primaryExpr);
                    this.state = 814;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 815;
                    this.slice();
                    break;

                case 4:
                    localctx = new PrimaryExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GolangParser.RULE_primaryExpr);
                    this.state = 816;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 817;
                    this.typeAssertion();
                    break;

                case 5:
                    localctx = new PrimaryExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, GolangParser.RULE_primaryExpr);
                    this.state = 818;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 819;
                    this.arguments();
                    break;

                } 
            }
            this.state = 824;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function SelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_selector;
    return this;
}

SelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorContext.prototype.constructor = SelectorContext;

SelectorContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

SelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterSelector(this);
	}
};

SelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitSelector(this);
	}
};




GolangParser.SelectorContext = SelectorContext;

GolangParser.prototype.selector = function() {

    var localctx = new SelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, GolangParser.RULE_selector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 825;
        this.match(GolangParser.T__4);
        this.state = 826;
        this.match(GolangParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_index;
    return this;
}

IndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexContext.prototype.constructor = IndexContext;

IndexContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterIndex(this);
	}
};

IndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitIndex(this);
	}
};




GolangParser.IndexContext = IndexContext;

GolangParser.prototype.index = function() {

    var localctx = new IndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, GolangParser.RULE_index);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        this.match(GolangParser.T__45);
        this.state = 829;
        this.expression(0);
        this.state = 830;
        this.match(GolangParser.T__46);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SliceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_slice;
    return this;
}

SliceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SliceContext.prototype.constructor = SliceContext;

SliceContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SliceContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterSlice(this);
	}
};

SliceContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitSlice(this);
	}
};




GolangParser.SliceContext = SliceContext;

GolangParser.prototype.slice = function() {

    var localctx = new SliceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, GolangParser.RULE_slice);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.match(GolangParser.T__45);
        this.state = 848;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.state = 834;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.T__60 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)) | (1 << (GolangParser.INT_LIT - 46)) | (1 << (GolangParser.FLOAT_LIT - 46)) | (1 << (GolangParser.IMAGINARY_LIT - 46)) | (1 << (GolangParser.RUNE_LIT - 46)) | (1 << (GolangParser.STRING_LIT - 46)))) !== 0)) {
                this.state = 833;
                this.expression(0);
            }

            this.state = 836;
            this.match(GolangParser.T__29);
            this.state = 838;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.T__60 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)) | (1 << (GolangParser.INT_LIT - 46)) | (1 << (GolangParser.FLOAT_LIT - 46)) | (1 << (GolangParser.IMAGINARY_LIT - 46)) | (1 << (GolangParser.RUNE_LIT - 46)) | (1 << (GolangParser.STRING_LIT - 46)))) !== 0)) {
                this.state = 837;
                this.expression(0);
            }

            break;

        case 2:
            this.state = 841;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.T__60 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)) | (1 << (GolangParser.INT_LIT - 46)) | (1 << (GolangParser.FLOAT_LIT - 46)) | (1 << (GolangParser.IMAGINARY_LIT - 46)) | (1 << (GolangParser.RUNE_LIT - 46)) | (1 << (GolangParser.STRING_LIT - 46)))) !== 0)) {
                this.state = 840;
                this.expression(0);
            }

            this.state = 843;
            this.match(GolangParser.T__29);
            this.state = 844;
            this.expression(0);
            this.state = 845;
            this.match(GolangParser.T__29);
            this.state = 846;
            this.expression(0);
            break;

        }
        this.state = 850;
        this.match(GolangParser.T__46);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAssertionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_typeAssertion;
    return this;
}

TypeAssertionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssertionContext.prototype.constructor = TypeAssertionContext;

TypeAssertionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeAssertionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterTypeAssertion(this);
	}
};

TypeAssertionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitTypeAssertion(this);
	}
};




GolangParser.TypeAssertionContext = TypeAssertionContext;

GolangParser.prototype.typeAssertion = function() {

    var localctx = new TypeAssertionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, GolangParser.RULE_typeAssertion);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 852;
        this.match(GolangParser.T__4);
        this.state = 853;
        this.match(GolangParser.T__2);
        this.state = 854;
        this.type();
        this.state = 855;
        this.match(GolangParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentsContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitArguments(this);
	}
};




GolangParser.ArgumentsContext = ArgumentsContext;

GolangParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, GolangParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 857;
        this.match(GolangParser.T__2);
        this.state = 872;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__2) | (1 << GolangParser.T__9) | (1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (GolangParser.T__45 - 46)) | (1 << (GolangParser.T__47 - 46)) | (1 << (GolangParser.T__48 - 46)) | (1 << (GolangParser.T__49 - 46)) | (1 << (GolangParser.T__51 - 46)) | (1 << (GolangParser.T__60 - 46)) | (1 << (GolangParser.IDENTIFIER - 46)) | (1 << (GolangParser.INT_LIT - 46)) | (1 << (GolangParser.FLOAT_LIT - 46)) | (1 << (GolangParser.IMAGINARY_LIT - 46)) | (1 << (GolangParser.RUNE_LIT - 46)) | (1 << (GolangParser.STRING_LIT - 46)))) !== 0)) {
            this.state = 864;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
            switch(la_) {
            case 1:
                this.state = 858;
                this.expressionList();
                break;

            case 2:
                this.state = 859;
                this.type();
                this.state = 862;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
                if(la_===1) {
                    this.state = 860;
                    this.match(GolangParser.T__7);
                    this.state = 861;
                    this.expressionList();

                }
                break;

            }
            this.state = 867;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GolangParser.T__50) {
                this.state = 866;
                this.match(GolangParser.T__50);
            }

            this.state = 870;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GolangParser.T__7) {
                this.state = 869;
                this.match(GolangParser.T__7);
            }

        }

        this.state = 874;
        this.match(GolangParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_methodExpr;
    return this;
}

MethodExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodExprContext.prototype.constructor = MethodExprContext;

MethodExprContext.prototype.receiverType = function() {
    return this.getTypedRuleContext(ReceiverTypeContext,0);
};

MethodExprContext.prototype.IDENTIFIER = function() {
    return this.getToken(GolangParser.IDENTIFIER, 0);
};

MethodExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterMethodExpr(this);
	}
};

MethodExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitMethodExpr(this);
	}
};




GolangParser.MethodExprContext = MethodExprContext;

GolangParser.prototype.methodExpr = function() {

    var localctx = new MethodExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, GolangParser.RULE_methodExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.receiverType();
        this.state = 877;
        this.match(GolangParser.T__4);
        this.state = 878;
        this.match(GolangParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReceiverTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_receiverType;
    return this;
}

ReceiverTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReceiverTypeContext.prototype.constructor = ReceiverTypeContext;

ReceiverTypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ReceiverTypeContext.prototype.receiverType = function() {
    return this.getTypedRuleContext(ReceiverTypeContext,0);
};

ReceiverTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterReceiverType(this);
	}
};

ReceiverTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitReceiverType(this);
	}
};




GolangParser.ReceiverTypeContext = ReceiverTypeContext;

GolangParser.prototype.receiverType = function() {

    var localctx = new ReceiverTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, GolangParser.RULE_receiverType);
    try {
        this.state = 890;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 880;
            this.typeName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 881;
            this.match(GolangParser.T__2);
            this.state = 882;
            this.match(GolangParser.T__20);
            this.state = 883;
            this.typeName();
            this.state = 884;
            this.match(GolangParser.T__3);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 886;
            this.match(GolangParser.T__2);
            this.state = 887;
            this.receiverType();
            this.state = 888;
            this.match(GolangParser.T__3);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.unaryExpr = function() {
    return this.getTypedRuleContext(UnaryExprContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitExpression(this);
	}
};



GolangParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 194;
    this.enterRecursionRule(localctx, 194, GolangParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 893;
        this.unaryExpr();
        this._ctx.stop = this._input.LT(-1);
        this.state = 900;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, GolangParser.RULE_expression);
                this.state = 895;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 896;
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__18) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__21) | (1 << GolangParser.T__22) | (1 << GolangParser.T__23) | (1 << GolangParser.T__24) | (1 << GolangParser.T__25) | (1 << GolangParser.T__26))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (GolangParser.T__52 - 53)) | (1 << (GolangParser.T__53 - 53)) | (1 << (GolangParser.T__54 - 53)) | (1 << (GolangParser.T__55 - 53)) | (1 << (GolangParser.T__56 - 53)) | (1 << (GolangParser.T__57 - 53)) | (1 << (GolangParser.T__58 - 53)) | (1 << (GolangParser.T__59 - 53)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 897;
                this.expression(2); 
            }
            this.state = 902;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function UnaryExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_unaryExpr;
    return this;
}

UnaryExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExprContext.prototype.constructor = UnaryExprContext;

UnaryExprContext.prototype.primaryExpr = function() {
    return this.getTypedRuleContext(PrimaryExprContext,0);
};

UnaryExprContext.prototype.unaryExpr = function() {
    return this.getTypedRuleContext(UnaryExprContext,0);
};

UnaryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterUnaryExpr(this);
	}
};

UnaryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitUnaryExpr(this);
	}
};




GolangParser.UnaryExprContext = UnaryExprContext;

GolangParser.prototype.unaryExpr = function() {

    var localctx = new UnaryExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, GolangParser.RULE_unaryExpr);
    var _la = 0; // Token type
    try {
        this.state = 906;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 903;
            this.primaryExpr(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 904;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GolangParser.T__13) | (1 << GolangParser.T__16) | (1 << GolangParser.T__17) | (1 << GolangParser.T__19) | (1 << GolangParser.T__20) | (1 << GolangParser.T__25))) !== 0) || _la===GolangParser.T__60)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 905;
            this.unaryExpr();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConversionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_conversion;
    return this;
}

ConversionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversionContext.prototype.constructor = ConversionContext;

ConversionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ConversionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConversionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterConversion(this);
	}
};

ConversionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitConversion(this);
	}
};




GolangParser.ConversionContext = ConversionContext;

GolangParser.prototype.conversion = function() {

    var localctx = new ConversionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, GolangParser.RULE_conversion);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 908;
        this.type();
        this.state = 909;
        this.match(GolangParser.T__2);
        this.state = 910;
        this.expression(0);
        this.state = 912;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GolangParser.T__7) {
            this.state = 911;
            this.match(GolangParser.T__7);
        }

        this.state = 914;
        this.match(GolangParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GolangParser.RULE_eos;
    return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.EOF = function() {
    return this.getToken(GolangParser.EOF, 0);
};

EosContext.prototype.enterRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.enterEos(this);
	}
};

EosContext.prototype.exitRule = function(listener) {
    if(listener instanceof GolangListener ) {
        listener.exitEos(this);
	}
};




GolangParser.EosContext = EosContext;

GolangParser.prototype.eos = function() {

    var localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, GolangParser.RULE_eos);
    try {
        this.state = 920;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 916;
            this.match(GolangParser.T__28);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 917;
            this.match(GolangParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 918;
            if (!( this.lineTerminatorAhead())) {
                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 919;
            if (!( this._input.LT(1).text == ("}") )) {
                throw new antlr4.error.FailedPredicateException(this, "_input.LT(1).text == (\"}\") ");
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


GolangParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 66:
			return this.methodSpec_sempred(localctx, predIndex);
	case 68:
			return this.signature_sempred(localctx, predIndex);
	case 86:
			return this.fieldDecl_sempred(localctx, predIndex);
	case 89:
			return this.primaryExpr_sempred(localctx, predIndex);
	case 97:
			return this.expression_sempred(localctx, predIndex);
	case 100:
			return this.eos_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

GolangParser.prototype.methodSpec_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.noTerminatorAfterParams(2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GolangParser.prototype.signature_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.noTerminatorAfterParams(1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GolangParser.prototype.fieldDecl_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.noTerminatorBetween(2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GolangParser.prototype.primaryExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 5);
		case 4:
			return this.precpred(this._ctx, 4);
		case 5:
			return this.precpred(this._ctx, 3);
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GolangParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GolangParser.prototype.eos_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.lineTerminatorAhead();
    case 10:
    // debugger
    // console.log(this._input.LT(1));
    
			return this._input.LT(1).text == ("}") ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};


	    /**
	     * Returns {@code true} iff on the current index of the parser's
	     * token stream a token exists on the {@code HIDDEN} channel which
	     * either is a line terminator, or is a multi line comment that
	     * contains a line terminator.
	     *
	     * @return {@code true} iff on the current index of the parser's
	     * token stream a token exists on the {@code HIDDEN} channel which
	     * either is a line terminator, or is a multi line comment that
	     * contains a line terminator.
	     */
	    // private boolean this.lineTerminatorAhead() {
	    //     // Get the token ahead of the current index.
	    //     int possibleIndexEosToken = this.getCurrentToken().getTokenIndex() - 1;
	    //     Token ahead = this._input.get(possibleIndexEosToken);
	    //     if (ahead.getChannel() != Lexer.HIDDEN) {
	    //         // We're only interested in tokens on the HIDDEN channel.
	    //         return false;
	    //     }

	    //     if (ahead.getType() == TERMINATOR) {
	    //         // There is definitely a line terminator ahead.
	    //         return true;
	    //     }

	    //     if (ahead.getType() == WS) {
	    //         // Get the token ahead of the current whitespaces.
	    //         possibleIndexEosToken = this.getCurrentToken().getTokenIndex() - 2;
	    //         ahead = this._input.get(possibleIndexEosToken);
	    //     }

	    //     // Get the token's text and type.
	    //     String text = ahead.text;
	    //     int type = ahead.getType();

	    //     // Check if the token is, or contains a line terminator.
	    //     return (type == COMMENT && (text.contains("\r") || text.contains("\n"))) ||
	    //             (type == TERMINATOR);
      // }
      // getCurrentToken
      // antlr4.Parser.prototype.
      GolangParser.prototype.lineTerminatorAhead = function () {
        // debugger
        var possibleIndexEosToken = this.getCurrentToken().tokenIndex - 1;
        var ahead = this._input.get(possibleIndexEosToken);
        if (ahead.channel !== antlr4.Lexer.HIDDEN) {
            return false;
        }
        if (ahead.type === GolangParser.TERMINATOR) {
            return true;
        }
        if (ahead.type === GolangParser.WS) {
            possibleIndexEosToken = this.getCurrentToken().tokenIndex - 2;
            ahead = this._input.get(possibleIndexEosToken);
        }
        var text = ahead.text;
        var type = ahead.type;
        return (type === GolangParser.COMMENT && ((text.indexOf("\r") != -1) || (text.indexOf("\n") != -1))) || (type === GolangParser.TERMINATOR)
    };

	     /**
	     * Returns {@code true} if no line terminator exists between the specified
	     * token offset and the prior one on the {@code HIDDEN} channel.
	     *
	     * @return {@code true} if no line terminator exists between the specified
	     * token offset and the prior one on the {@code HIDDEN} channel.
	     */
	    GolangParser.prototype.noTerminatorBetween = function (tokenOffset) {
	        let stream =  this._input;
	       let  tokens = stream.getHiddenTokensToLeft(stream.LT(tokenOffset).tokenIndex);
	        
	        if (tokens == null) {
	            return true;
	        }

          tokens.forEach(token=>{

            // for (let token of tokens) {
              if (token.text.includes("\n"))
                return false;
            })
	        // }

	        return true;
	    }

	     /**
	     * Returns {@code true} if no line terminator exists after any encounterd
	     * parameters beyond the specified token offset and the next on the
	     * {@code HIDDEN} channel.
	     *
	     * @return {@code true} if no line terminator exists after any encounterd
	     * parameters beyond the specified token offset and the next on the
	     * {@code HIDDEN} channel.
	     */
	    GolangParser.prototype.noTerminatorAfterParams = function (tokenOffset) {
	        let stream = this._input;
	        let leftParams = 1;
	        let rightParams = 0;
	        let value;

	        if (stream.LT(tokenOffset).text == ("(")) {
	            // Scan past parameters
	            while (leftParams != rightParams) {
	                tokenOffset++;
	                value = stream.LT(tokenOffset).text;

	                if (value == ("(")) {
	                    leftParams++;
	                }
	                else if (value == (")")) {
	                    rightParams++;
	                }
	            }

	            tokenOffset++;
	            return this.noTerminatorBetween(tokenOffset);
	        }
	        
	        return true;
	    }

exports.GolangParser = GolangParser;
