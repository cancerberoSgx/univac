// @ts-nocheck
// Generated from CPP14.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CPP14Listener = require('./CPP14Listener').CPP14Listener;
var grammarFileName = "CPP14.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0098\u09a2\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0003\u0002\u0005\u0002\u0194\n\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u01a0\n\u0003",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u01a4\n\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u01af\n\u0005\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u01b3\n\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u01c2\n\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u01c9\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u01ce",
    "\n\u0007\f\u0007\u000e\u0007\u01d1\u000b\u0007\u0003\b\u0003\b\u0005",
    "\b\u01d5\n\b\u0003\b\u0003\b\u0003\t\u0003\t\u0005\t\u01db\n\t\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u01e5",
    "\n\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u01ec\n",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u01f2\n\f\u0007\f\u01f4\n",
    "\f\f\f\u000e\f\u01f7\u000b\f\u0003\r\u0003\r\u0005\r\u01fb\n\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0201\n\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u0208\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u020e\n\u0010\u0003\u0010\u0005\u0010\u0211\n\u0010\u0003\u0010",
    "\u0005\u0010\u0214\n\u0010\u0003\u0010\u0005\u0010\u0217\n\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u021e",
    "\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u0225\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0259",
    "\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u0268\n\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u026e\n\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0274\n\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0281",
    "\n\u0011\f\u0011\u000e\u0011\u0284\u000b\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0005\u0015",
    "\u028d\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u029c\n\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u02a2\n\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u02c0\n\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0018\u0005\u0018\u02c5\n\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u02c9\n\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u02cd\n\u0018\u0003\u0018\u0005\u0018\u02d0\n\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u02d4\n\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u02da\n\u0018\u0005\u0018\u02dc",
    "\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u02e4\n\u001a\u0003\u001b\u0003\u001b\u0005",
    "\u001b\u02e8\n\u001b\u0003\u001b\u0005\u001b\u02eb\n\u001b\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u02f2\n",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u02f9\n\u001c\u0007\u001c\u02fb\n\u001c\f\u001c\u000e\u001c\u02fe",
    "\u000b\u001c\u0003\u001d\u0003\u001d\u0005\u001d\u0302\n\u001d\u0003",
    "\u001d\u0003\u001d\u0005\u001d\u0306\n\u001d\u0003\u001e\u0005\u001e",
    "\u0309\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u030e",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u0314\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u0321\n \u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0007!\u032c",
    "\n!\f!\u000e!\u032f\u000b!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u033d\n\"",
    "\f\"\u000e\"\u0340\u000b\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0007#\u034b\n#\f#\u000e#\u034e\u000b#\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u0357\n$\f$\u000e",
    "$\u035a\u000b$\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007",
    "&\u036d\n&\f&\u000e&\u0370\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u037b\n\'\f\'\u000e\'\u037e",
    "\u000b\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0007(\u0386\n(\f",
    "(\u000e(\u0389\u000b(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007",
    ")\u0391\n)\f)\u000e)\u0394\u000b)\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0007*\u039c\n*\f*\u000e*\u039f\u000b*\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007+\u03aa\n+\f+\u000e",
    "+\u03ad\u000b+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0007,\u03b8\n,\f,\u000e,\u03bb\u000b,\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0005-\u03c4\n-\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0005.\u03cc\n.\u0003/\u0003/\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00070\u03d6\n0\f0\u000e0\u03d9\u000b0\u00031\u0003",
    "1\u00032\u00032\u00052\u03df\n2\u00032\u00032\u00052\u03e3\n2\u0003",
    "2\u00032\u00052\u03e7\n2\u00032\u00032\u00052\u03eb\n2\u00032\u0003",
    "2\u00052\u03ef\n2\u00032\u00032\u00032\u00052\u03f4\n2\u00032\u0005",
    "2\u03f7\n2\u00033\u00053\u03fa\n3\u00033\u00033\u00033\u00033\u0005",
    "3\u0400\n3\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u0408\n",
    "3\u00033\u00033\u00033\u00053\u040d\n3\u00034\u00054\u0410\n4\u0003",
    "4\u00034\u00035\u00035\u00055\u0416\n5\u00035\u00035\u00036\u00036\u0003",
    "6\u00036\u00036\u00076\u041f\n6\f6\u000e6\u0422\u000b6\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u0438",
    "\n7\u00038\u00038\u00058\u043c\n8\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00058\u0444\n8\u00038\u00038\u00038\u00038\u00058\u044a\n",
    "8\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u045e",
    "\n9\u00039\u00039\u00059\u0462\n9\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u046f\n9\u0003:\u0003",
    ":\u0005:\u0473\n:\u0003;\u0005;\u0476\n;\u0003;\u0003;\u0003;\u0003",
    "<\u0003<\u0005<\u047d\n<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005",
    "=\u0485\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005",
    "=\u048f\n=\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0007?\u0498",
    "\n?\f?\u000e?\u049b\u000b?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0005@\u04a6\n@\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0005A\u04b0\nA\u0003B\u0003B\u0003B\u0005B\u04b5",
    "\nB\u0003B\u0003B\u0003B\u0003B\u0003C\u0005C\u04bc\nC\u0003C\u0005",
    "C\u04bf\nC\u0003C\u0003C\u0003C\u0005C\u04c4\nC\u0003C\u0003C\u0003",
    "C\u0005C\u04c9\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003E\u0003E\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0005G\u04de\nG\u0003H\u0003H\u0005H\u04e2\nH\u0003H\u0003",
    "H\u0003H\u0005H\u04e7\nH\u0003I\u0003I\u0003J\u0003J\u0003K\u0003K\u0003",
    "L\u0003L\u0003L\u0005L\u04f2\nL\u0003M\u0003M\u0003M\u0003M\u0005M\u04f8",
    "\nM\u0003N\u0003N\u0005N\u04fc\nN\u0003N\u0003N\u0003N\u0005N\u0501",
    "\nN\u0003O\u0003O\u0005O\u0505\nO\u0003O\u0003O\u0003O\u0005O\u050a",
    "\nO\u0003P\u0005P\u050d\nP\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0005P\u0523\nP\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0005Q\u0529\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0005R\u0534\nR\u0003S\u0003S\u0005S\u0538\nS\u0003S\u0005",
    "S\u053b\nS\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0005",
    "S\u0545\nS\u0003S\u0003S\u0003S\u0003S\u0005S\u054b\nS\u0003S\u0005",
    "S\u054e\nS\u0003T\u0003T\u0003U\u0003U\u0003U\u0005U\u0555\nU\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u055f\nU\u0003",
    "V\u0003V\u0005V\u0563\nV\u0003V\u0005V\u0566\nV\u0003V\u0005V\u0569",
    "\nV\u0003V\u0003V\u0005V\u056d\nV\u0003V\u0003V\u0003V\u0005V\u0572",
    "\nV\u0005V\u0574\nV\u0003W\u0003W\u0005W\u0578\nW\u0003W\u0003W\u0005",
    "W\u057c\nW\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0005X\u0585",
    "\nX\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007",
    "Z\u0590\nZ\fZ\u000eZ\u0593\u000bZ\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0005[\u059a\n[\u0003\\\u0003\\\u0003]\u0003]\u0005]\u05a0\n]\u0003",
    "^\u0003^\u0003_\u0003_\u0005_\u05a6\n_\u0003`\u0003`\u0005`\u05aa\n",
    "`\u0003a\u0005a\u05ad\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "b\u0005b\u05b6\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003c\u0005",
    "c\u05bf\nc\u0003c\u0003c\u0003c\u0003c\u0003c\u0003d\u0005d\u05c7\n",
    "d\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003g\u0005",
    "g\u05d2\ng\u0003g\u0003g\u0003h\u0003h\u0005h\u05d8\nh\u0003h\u0003",
    "h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\u05e3\nh\u0003",
    "i\u0005i\u05e6\ni\u0003i\u0003i\u0003i\u0005i\u05eb\ni\u0003i\u0003",
    "i\u0003i\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003k\u0003k\u0003",
    "k\u0003k\u0005k\u05fa\nk\u0003k\u0003k\u0003k\u0003k\u0005k\u0600\n",
    "k\u0003l\u0003l\u0003l\u0003l\u0003l\u0007l\u0607\nl\fl\u000el\u060a",
    "\u000bl\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005m\u0613",
    "\nm\u0003n\u0003n\u0003n\u0003n\u0005n\u0619\nn\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0005n\u0621\nn\u0003n\u0003n\u0005n\u0625\n",
    "n\u0003o\u0003o\u0005o\u0629\no\u0003o\u0003o\u0003o\u0005o\u062e\n",
    "o\u0003o\u0003o\u0003o\u0005o\u0633\no\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0007o\u063a\no\fo\u000eo\u063d\u000bo\u0003p\u0003p\u0005p\u0641",
    "\np\u0003q\u0003q\u0005q\u0645\nq\u0003r\u0003r\u0003r\u0003r\u0003",
    "s\u0003s\u0003t\u0003t\u0003t\u0003t\u0003u\u0003u\u0005u\u0653\nu\u0003",
    "u\u0003u\u0007u\u0657\nu\fu\u000eu\u065a\u000bu\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0005",
    "v\u0668\nv\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0007w\u0670\n",
    "w\fw\u000ew\u0673\u000bw\u0003x\u0003x\u0005x\u0677\nx\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0005y\u067e\ny\u0003z\u0003z\u0003z\u0003z\u0005",
    "z\u0684\nz\u0003{\u0003{\u0003{\u0005{\u0689\n{\u0003{\u0003{\u0003",
    "{\u0003{\u0005{\u068f\n{\u0003{\u0003{\u0003{\u0003{\u0003{\u0005{\u0696",
    "\n{\u0003{\u0003{\u0005{\u069a\n{\u0007{\u069c\n{\f{\u000e{\u069f\u000b",
    "{\u0003|\u0003|\u0003|\u0003|\u0005|\u06a5\n|\u0003|\u0005|\u06a8\n",
    "|\u0003|\u0005|\u06ab\n|\u0003|\u0005|\u06ae\n|\u0003}\u0003}\u0003",
    "}\u0005}\u06b3\n}\u0003~\u0003~\u0005~\u06b7\n~\u0003~\u0005~\u06ba",
    "\n~\u0003~\u0003~\u0005~\u06be\n~\u0003~\u0003~\u0005~\u06c2\n~\u0003",
    "~\u0003~\u0003~\u0005~\u06c7\n~\u0003~\u0005~\u06ca\n~\u0005~\u06cc",
    "\n~\u0003\u007f\u0003\u007f\u0005\u007f\u06d0\n\u007f\u0003\u0080\u0003",
    "\u0080\u0003\u0081\u0003\u0081\u0003\u0082\u0005\u0082\u06d7\n\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0005\u0083\u06dd\n",
    "\u0083\u0003\u0084\u0003\u0084\u0005\u0084\u06e1\n\u0084\u0003\u0084",
    "\u0003\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u06e7\n\u0084\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u06ec\n\u0085\u0005\u0085",
    "\u06ee\n\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0005",
    "\u0086\u06f4\n\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u06f8\n\u0086",
    "\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u06fe\n",
    "\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0005",
    "\u0086\u0705\n\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u0709\n\u0086",
    "\u0007\u0086\u070b\n\u0086\f\u0086\u000e\u0086\u070e\u000b\u0086\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u0714\n\u0087",
    "\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0003\u0088\u0005\u0088\u071e\n\u0088\u0003\u0088\u0003",
    "\u0088\u0005\u0088\u0722\n\u0088\u0007\u0088\u0724\n\u0088\f\u0088\u000e",
    "\u0088\u0727\u000b\u0088\u0003\u0089\u0005\u0089\u072a\n\u0089\u0003",
    "\u0089\u0005\u0089\u072d\n\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0005\u0089\u0733\n\u0089\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0007\u008a\u073b\n\u008a",
    "\f\u008a\u000e\u008a\u073e\u000b\u008a\u0003\u008b\u0005\u008b\u0741",
    "\n\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0005\u008b",
    "\u0747\n\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0005\u008b\u074f\n\u008b\u0003\u008b\u0003\u008b",
    "\u0005\u008b\u0753\n\u008b\u0003\u008b\u0005\u008b\u0756\n\u008b\u0003",
    "\u008b\u0003\u008b\u0005\u008b\u075a\n\u008b\u0003\u008b\u0003\u008b",
    "\u0003\u008b\u0005\u008b\u075f\n\u008b\u0003\u008c\u0005\u008c\u0762",
    "\n\u008c\u0003\u008c\u0005\u008c\u0765\n\u008c\u0003\u008c\u0003\u008c",
    "\u0005\u008c\u0769\n\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0005",
    "\u008d\u076e\n\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u0778\n",
    "\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005",
    "\u008e\u077f\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f",
    "\u0784\n\u008f\u0003\u0090\u0003\u0090\u0005\u0090\u0788\n\u0090\u0003",
    "\u0091\u0003\u0091\u0003\u0091\u0005\u0091\u078d\n\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0005\u0091\u0793\n\u0091\u0007",
    "\u0091\u0795\n\u0091\f\u0091\u000e\u0091\u0798\u000b\u0091\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0005\u0092\u079d\n\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u07a3\n\u0092\u0003\u0093",
    "\u0003\u0093\u0005\u0093\u07a7\n\u0093\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0005\u0094\u07ac\n\u0094\u0003\u0094\u0003\u0094\u0003\u0095",
    "\u0003\u0095\u0005\u0095\u07b2\n\u0095\u0003\u0095\u0003\u0095\u0005",
    "\u0095\u07b6\n\u0095\u0003\u0095\u0005\u0095\u07b9\n\u0095\u0003\u0095",
    "\u0003\u0095\u0005\u0095\u07bd\n\u0095\u0003\u0095\u0005\u0095\u07c0",
    "\n\u0095\u0005\u0095\u07c2\n\u0095\u0003\u0096\u0005\u0096\u07c5\n\u0096",
    "\u0003\u0096\u0003\u0096\u0003\u0097\u0003\u0097\u0003\u0098\u0003\u0098",
    "\u0003\u0099\u0003\u0099\u0005\u0099\u07cf\n\u0099\u0003\u0099\u0003",
    "\u0099\u0003\u0099\u0005\u0099\u07d4\n\u0099\u0005\u0099\u07d6\n\u0099",
    "\u0003\u009a\u0005\u009a\u07d9\n\u009a\u0003\u009a\u0005\u009a\u07dc",
    "\n\u009a\u0003\u009a\u0005\u009a\u07df\n\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a",
    "\u07e8\n\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003",
    "\u009b\u0003\u009b\u0007\u009b\u07f0\n\u009b\f\u009b\u000e\u009b\u07f3",
    "\u000b\u009b\u0003\u009c\u0003\u009c\u0005\u009c\u07f7\n\u009c\u0003",
    "\u009c\u0005\u009c\u07fa\n\u009c\u0003\u009c\u0003\u009c\u0005\u009c",
    "\u07fe\n\u009c\u0003\u009c\u0005\u009c\u0801\n\u009c\u0003\u009c\u0005",
    "\u009c\u0804\n\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u0808\n\u009c",
    "\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0007\u009d",
    "\u080f\n\u009d\f\u009d\u000e\u009d\u0812\u000b\u009d\u0003\u009e\u0003",
    "\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u00a0\u0003",
    "\u00a0\u0003\u00a0\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u0820",
    "\n\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1",
    "\u0826\n\u00a1\u0007\u00a1\u0828\n\u00a1\f\u00a1\u000e\u00a1\u082b\u000b",
    "\u00a1\u0003\u00a2\u0005\u00a2\u082e\n\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0005\u00a2\u0832\n\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0836",
    "\n\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u083a\n\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0005\u00a2\u083e\n\u00a2\u0003\u00a2\u0003\u00a2\u0005",
    "\u00a2\u0842\n\u00a2\u0003\u00a3\u0005\u00a3\u0845\n\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0005\u00a3\u0849\n\u00a3\u0003\u00a4\u0003\u00a4\u0003",
    "\u00a5\u0003\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0003",
    "\u00a7\u0005\u00a7\u0854\n\u00a7\u0003\u00a8\u0003\u00a8\u0005\u00a8",
    "\u0858\n\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003",
    "\u00aa\u0005\u00aa\u085f\n\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa",
    "\u0863\n\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa\u0868",
    "\n\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab\u086d\n\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab",
    "\u0874\n\u00ab\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0878\n\u00ac\u0003",
    "\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003",
    "\u00ae\u0003\u00ae\u0005\u00ae\u0882\n\u00ae\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0007\u00b0\u0890\n",
    "\u00b0\f\u00b0\u000e\u00b0\u0893\u000b\u00b0\u0003\u00b1\u0003\u00b1",
    "\u0005\u00b1\u0897\n\u00b1\u0003\u00b2\u0003\u00b2\u0005\u00b2\u089b",
    "\n\u00b2\u0003\u00b2\u0005\u00b2\u089e\n\u00b2\u0003\u00b2\u0003\u00b2",
    "\u0005\u00b2\u08a2\n\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0005\u00b2\u08a8\n\u00b2\u0003\u00b2\u0005\u00b2\u08ab\n\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0005\u00b2\u08af\n\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0005\u00b2\u08b9\n\u00b2\u0003\u00b2\u0005\u00b2\u08bc\n\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2",
    "\u0005\u00b2\u08c4\n\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0005",
    "\u00b2\u08c9\n\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3",
    "\u08ce\n\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0005\u00b4\u08d6\n\u00b4\u0003\u00b4\u0003\u00b4",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u08dd\n\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0005\u00b4\u08e1\n\u00b4\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u08e8\n\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u08ee\n\u00b6",
    "\u0007\u00b6\u08f0\n\u00b6\f\u00b6\u000e\u00b6\u08f3\u000b\u00b6\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u08f8\n\u00b7\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0005\u00b8\u0901\n\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u0905",
    "\n\u00b8\u0003\u00b9\u0005\u00b9\u0908\n\u00b9\u0003\u00b9\u0003\u00b9",
    "\u0003\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003\u00bc",
    "\u0005\u00bc\u0918\n\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bd\u0003\u00bd\u0005\u00bd\u091f\n\u00bd\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00bf\u0005\u00bf",
    "\u0928\n\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0005",
    "\u00bf\u092e\n\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u0932\n\u00bf",
    "\u0003\u00bf\u0005\u00bf\u0935\n\u00bf\u0003\u00c0\u0003\u00c0\u0005",
    "\u00c0\u0939\n\u00c0\u0003\u00c1\u0003\u00c1\u0005\u00c1\u093d\n\u00c1",
    "\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u0942\n\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0949",
    "\n\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3",
    "\u094f\n\u00c3\u0007\u00c3\u0951\n\u00c3\f\u00c3\u000e\u00c3\u0954\u000b",
    "\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0005\u00c4\u095c\n\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0005\u00c5\u0991\n\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6\u099a\n\u00c6",
    "\u0003\u00c7\u0003\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0002$\f\u0016 6@BDFJLNPRTV^j|\u00b2\u00d6\u00dc\u00e8",
    "\u00ec\u00f4\u010a\u010e\u0112\u0120\u0134\u0138\u0140\u015e\u016a\u0184",
    "\u00ca\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8",
    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110",
    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128",
    "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140",
    "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158",
    "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170",
    "\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188",
    "\u018a\u018c\u018e\u0190\u0002\u000f\u0004\u0002bbff\u0005\u0002\u0003",
    "\u0004\\^bd\u0003\u0002qr\u0005\u0002ffipst\u0007\u0002%%00::@@GG\u0005",
    "\u0002##--QQ\u0004\u0002\u0017\u0017SS\u0004\u0002\u0005\u0005bb\u0005",
    "\u0002\u0016\u0016CCNN\u0004\u0002\'\'66\u0003\u000279\u0004\u0002&",
    "&II\u0003\u0002\u0091\u0094\u0002\u0abc\u0002\u0193\u0003\u0002\u0002",
    "\u0002\u0004\u019f\u0003\u0002\u0002\u0002\u0006\u01a3\u0003\u0002\u0002",
    "\u0002\b\u01ae\u0003\u0002\u0002\u0002\n\u01b0\u0003\u0002\u0002\u0002",
    "\f\u01c1\u0003\u0002\u0002\u0002\u000e\u01d2\u0003\u0002\u0002\u0002",
    "\u0010\u01d8\u0003\u0002\u0002\u0002\u0012\u01e4\u0003\u0002\u0002\u0002",
    "\u0014\u01e6\u0003\u0002\u0002\u0002\u0016\u01e8\u0003\u0002\u0002\u0002",
    "\u0018\u01fa\u0003\u0002\u0002\u0002\u001a\u0200\u0003\u0002\u0002\u0002",
    "\u001c\u0207\u0003\u0002\u0002\u0002\u001e\u0209\u0003\u0002\u0002\u0002",
    " \u0258\u0003\u0002\u0002\u0002\"\u0285\u0003\u0002\u0002\u0002$\u0287",
    "\u0003\u0002\u0002\u0002&\u0289\u0003\u0002\u0002\u0002(\u02a1\u0003",
    "\u0002\u0002\u0002*\u02bf\u0003\u0002\u0002\u0002,\u02c1\u0003\u0002",
    "\u0002\u0002.\u02db\u0003\u0002\u0002\u00020\u02dd\u0003\u0002\u0002",
    "\u00022\u02e1\u0003\u0002\u0002\u00024\u02ea\u0003\u0002\u0002\u0002",
    "6\u02ec\u0003\u0002\u0002\u00028\u0305\u0003\u0002\u0002\u0002:\u0313",
    "\u0003\u0002\u0002\u0002<\u0315\u0003\u0002\u0002\u0002>\u0320\u0003",
    "\u0002\u0002\u0002@\u0322\u0003\u0002\u0002\u0002B\u0330\u0003\u0002",
    "\u0002\u0002D\u0341\u0003\u0002\u0002\u0002F\u034f\u0003\u0002\u0002",
    "\u0002H\u035b\u0003\u0002\u0002\u0002J\u035d\u0003\u0002\u0002\u0002",
    "L\u0371\u0003\u0002\u0002\u0002N\u037f\u0003\u0002\u0002\u0002P\u038a",
    "\u0003\u0002\u0002\u0002R\u0395\u0003\u0002\u0002\u0002T\u03a0\u0003",
    "\u0002\u0002\u0002V\u03ae\u0003\u0002\u0002\u0002X\u03c3\u0003\u0002",
    "\u0002\u0002Z\u03cb\u0003\u0002\u0002\u0002\\\u03cd\u0003\u0002\u0002",
    "\u0002^\u03cf\u0003\u0002\u0002\u0002`\u03da\u0003\u0002\u0002\u0002",
    "b\u03f6\u0003\u0002\u0002\u0002d\u040c\u0003\u0002\u0002\u0002f\u040f",
    "\u0003\u0002\u0002\u0002h\u0413\u0003\u0002\u0002\u0002j\u0419\u0003",
    "\u0002\u0002\u0002l\u0437\u0003\u0002\u0002\u0002n\u0449\u0003\u0002",
    "\u0002\u0002p\u046e\u0003\u0002\u0002\u0002r\u0472\u0003\u0002\u0002",
    "\u0002t\u0475\u0003\u0002\u0002\u0002v\u047c\u0003\u0002\u0002\u0002",
    "x\u048e\u0003\u0002\u0002\u0002z\u0490\u0003\u0002\u0002\u0002|\u0492",
    "\u0003\u0002\u0002\u0002~\u04a5\u0003\u0002\u0002\u0002\u0080\u04af",
    "\u0003\u0002\u0002\u0002\u0082\u04b1\u0003\u0002\u0002\u0002\u0084\u04c8",
    "\u0003\u0002\u0002\u0002\u0086\u04ca\u0003\u0002\u0002\u0002\u0088\u04d2",
    "\u0003\u0002\u0002\u0002\u008a\u04d4\u0003\u0002\u0002\u0002\u008c\u04dd",
    "\u0003\u0002\u0002\u0002\u008e\u04e6\u0003\u0002\u0002\u0002\u0090\u04e8",
    "\u0003\u0002\u0002\u0002\u0092\u04ea\u0003\u0002\u0002\u0002\u0094\u04ec",
    "\u0003\u0002\u0002\u0002\u0096\u04f1\u0003\u0002\u0002\u0002\u0098\u04f7",
    "\u0003\u0002\u0002\u0002\u009a\u0500\u0003\u0002\u0002\u0002\u009c\u0509",
    "\u0003\u0002\u0002\u0002\u009e\u0522\u0003\u0002\u0002\u0002\u00a0\u0528",
    "\u0003\u0002\u0002\u0002\u00a2\u0533\u0003\u0002\u0002\u0002\u00a4\u054d",
    "\u0003\u0002\u0002\u0002\u00a6\u054f\u0003\u0002\u0002\u0002\u00a8\u055e",
    "\u0003\u0002\u0002\u0002\u00aa\u0573\u0003\u0002\u0002\u0002\u00ac\u0575",
    "\u0003\u0002\u0002\u0002\u00ae\u0584\u0003\u0002\u0002\u0002\u00b0\u0586",
    "\u0003\u0002\u0002\u0002\u00b2\u0589\u0003\u0002\u0002\u0002\u00b4\u0599",
    "\u0003\u0002\u0002\u0002\u00b6\u059b\u0003\u0002\u0002\u0002\u00b8\u059f",
    "\u0003\u0002\u0002\u0002\u00ba\u05a1\u0003\u0002\u0002\u0002\u00bc\u05a5",
    "\u0003\u0002\u0002\u0002\u00be\u05a9\u0003\u0002\u0002\u0002\u00c0\u05ac",
    "\u0003\u0002\u0002\u0002\u00c2\u05b5\u0003\u0002\u0002\u0002\u00c4\u05be",
    "\u0003\u0002\u0002\u0002\u00c6\u05c6\u0003\u0002\u0002\u0002\u00c8\u05c8",
    "\u0003\u0002\u0002\u0002\u00ca\u05ca\u0003\u0002\u0002\u0002\u00cc\u05d1",
    "\u0003\u0002\u0002\u0002\u00ce\u05e2\u0003\u0002\u0002\u0002\u00d0\u05e5",
    "\u0003\u0002\u0002\u0002\u00d2\u05ef\u0003\u0002\u0002\u0002\u00d4\u05ff",
    "\u0003\u0002\u0002\u0002\u00d6\u0601\u0003\u0002\u0002\u0002\u00d8\u0612",
    "\u0003\u0002\u0002\u0002\u00da\u0624\u0003\u0002\u0002\u0002\u00dc\u062d",
    "\u0003\u0002\u0002\u0002\u00de\u063e\u0003\u0002\u0002\u0002\u00e0\u0644",
    "\u0003\u0002\u0002\u0002\u00e2\u0646\u0003\u0002\u0002\u0002\u00e4\u064a",
    "\u0003\u0002\u0002\u0002\u00e6\u064c\u0003\u0002\u0002\u0002\u00e8\u0650",
    "\u0003\u0002\u0002\u0002\u00ea\u0667\u0003\u0002\u0002\u0002\u00ec\u0669",
    "\u0003\u0002\u0002\u0002\u00ee\u0674\u0003\u0002\u0002\u0002\u00f0\u067d",
    "\u0003\u0002\u0002\u0002\u00f2\u0683\u0003\u0002\u0002\u0002\u00f4\u068e",
    "\u0003\u0002\u0002\u0002\u00f6\u06a0\u0003\u0002\u0002\u0002\u00f8\u06af",
    "\u0003\u0002\u0002\u0002\u00fa\u06cb\u0003\u0002\u0002\u0002\u00fc\u06cd",
    "\u0003\u0002\u0002\u0002\u00fe\u06d1\u0003\u0002\u0002\u0002\u0100\u06d3",
    "\u0003\u0002\u0002\u0002\u0102\u06d6\u0003\u0002\u0002\u0002\u0104\u06da",
    "\u0003\u0002\u0002\u0002\u0106\u06e6\u0003\u0002\u0002\u0002\u0108\u06ed",
    "\u0003\u0002\u0002\u0002\u010a\u06fd\u0003\u0002\u0002\u0002\u010c\u0713",
    "\u0003\u0002\u0002\u0002\u010e\u0715\u0003\u0002\u0002\u0002\u0110\u0732",
    "\u0003\u0002\u0002\u0002\u0112\u0734\u0003\u0002\u0002\u0002\u0114\u075e",
    "\u0003\u0002\u0002\u0002\u0116\u0761\u0003\u0002\u0002\u0002\u0118\u0777",
    "\u0003\u0002\u0002\u0002\u011a\u077e\u0003\u0002\u0002\u0002\u011c\u0783",
    "\u0003\u0002\u0002\u0002\u011e\u0787\u0003\u0002\u0002\u0002\u0120\u0789",
    "\u0003\u0002\u0002\u0002\u0122\u07a2\u0003\u0002\u0002\u0002\u0124\u07a6",
    "\u0003\u0002\u0002\u0002\u0126\u07a8\u0003\u0002\u0002\u0002\u0128\u07c1",
    "\u0003\u0002\u0002\u0002\u012a\u07c4\u0003\u0002\u0002\u0002\u012c\u07c8",
    "\u0003\u0002\u0002\u0002\u012e\u07ca\u0003\u0002\u0002\u0002\u0130\u07d5",
    "\u0003\u0002\u0002\u0002\u0132\u07e7\u0003\u0002\u0002\u0002\u0134\u07e9",
    "\u0003\u0002\u0002\u0002\u0136\u0807\u0003\u0002\u0002\u0002\u0138\u0809",
    "\u0003\u0002\u0002\u0002\u013a\u0813\u0003\u0002\u0002\u0002\u013c\u0815",
    "\u0003\u0002\u0002\u0002\u013e\u0819\u0003\u0002\u0002\u0002\u0140\u081c",
    "\u0003\u0002\u0002\u0002\u0142\u0841\u0003\u0002\u0002\u0002\u0144\u0848",
    "\u0003\u0002\u0002\u0002\u0146\u084a\u0003\u0002\u0002\u0002\u0148\u084c",
    "\u0003\u0002\u0002\u0002\u014a\u084e\u0003\u0002\u0002\u0002\u014c\u0851",
    "\u0003\u0002\u0002\u0002\u014e\u0855\u0003\u0002\u0002\u0002\u0150\u0859",
    "\u0003\u0002\u0002\u0002\u0152\u0867\u0003\u0002\u0002\u0002\u0154\u0873",
    "\u0003\u0002\u0002\u0002\u0156\u0877\u0003\u0002\u0002\u0002\u0158\u0879",
    "\u0003\u0002\u0002\u0002\u015a\u0881\u0003\u0002\u0002\u0002\u015c\u0883",
    "\u0003\u0002\u0002\u0002\u015e\u0889\u0003\u0002\u0002\u0002\u0160\u0896",
    "\u0003\u0002\u0002\u0002\u0162\u08c8\u0003\u0002\u0002\u0002\u0164\u08ca",
    "\u0003\u0002\u0002\u0002\u0166\u08e0\u0003\u0002\u0002\u0002\u0168\u08e2",
    "\u0003\u0002\u0002\u0002\u016a\u08e4\u0003\u0002\u0002\u0002\u016c\u08f7",
    "\u0003\u0002\u0002\u0002\u016e\u0904\u0003\u0002\u0002\u0002\u0170\u0907",
    "\u0003\u0002\u0002\u0002\u0172\u090c\u0003\u0002\u0002\u0002\u0174\u0911",
    "\u0003\u0002\u0002\u0002\u0176\u0915\u0003\u0002\u0002\u0002\u0178\u091c",
    "\u0003\u0002\u0002\u0002\u017a\u0920\u0003\u0002\u0002\u0002\u017c\u0934",
    "\u0003\u0002\u0002\u0002\u017e\u0936\u0003\u0002\u0002\u0002\u0180\u093c",
    "\u0003\u0002\u0002\u0002\u0182\u093e\u0003\u0002\u0002\u0002\u0184\u0945",
    "\u0003\u0002\u0002\u0002\u0186\u095b\u0003\u0002\u0002\u0002\u0188\u0990",
    "\u0003\u0002\u0002\u0002\u018a\u0999\u0003\u0002\u0002\u0002\u018c\u099b",
    "\u0003\u0002\u0002\u0002\u018e\u099d\u0003\u0002\u0002\u0002\u0190\u099f",
    "\u0003\u0002\u0002\u0002\u0192\u0194\u0005|?\u0002\u0193\u0192\u0003",
    "\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002\u0194\u0195\u0003",
    "\u0002\u0002\u0002\u0195\u0196\u0007\u0002\u0002\u0003\u0196\u0003\u0003",
    "\u0002\u0002\u0002\u0197\u01a0\u0005\u018a\u00c6\u0002\u0198\u01a0\u0007",
    "F\u0002\u0002\u0199\u019a\u0007V\u0002\u0002\u019a\u019b\u0005^0\u0002",
    "\u019b\u019c\u0007W\u0002\u0002\u019c\u01a0\u0003\u0002\u0002\u0002",
    "\u019d\u01a0\u0005\u0006\u0004\u0002\u019e\u01a0\u0005\u000e\b\u0002",
    "\u019f\u0197\u0003\u0002\u0002\u0002\u019f\u0198\u0003\u0002\u0002\u0002",
    "\u019f\u0199\u0003\u0002\u0002\u0002\u019f\u019d\u0003\u0002\u0002\u0002",
    "\u019f\u019e\u0003\u0002\u0002\u0002\u01a0\u0005\u0003\u0002\u0002\u0002",
    "\u01a1\u01a4\u0005\b\u0005\u0002\u01a2\u01a4\u0005\n\u0006\u0002\u01a3",
    "\u01a1\u0003\u0002\u0002\u0002\u01a3\u01a2\u0003\u0002\u0002\u0002\u01a4",
    "\u0007\u0003\u0002\u0002\u0002\u01a5\u01af\u0007\u0087\u0002\u0002\u01a6",
    "\u01af\u0005\u0158\u00ad\u0002\u01a7\u01af\u0005\u014a\u00a6\u0002\u01a8",
    "\u01af\u0005\u015a\u00ae\u0002\u01a9\u01aa\u0007d\u0002\u0002\u01aa",
    "\u01af\u0005\u0124\u0093\u0002\u01ab\u01ac\u0007d\u0002\u0002\u01ac",
    "\u01af\u0005\u00a2R\u0002\u01ad\u01af\u0005\u0166\u00b4\u0002\u01ae",
    "\u01a5\u0003\u0002\u0002\u0002\u01ae\u01a6\u0003\u0002\u0002\u0002\u01ae",
    "\u01a7\u0003\u0002\u0002\u0002\u01ae\u01a8\u0003\u0002\u0002\u0002\u01ae",
    "\u01a9\u0003\u0002\u0002\u0002\u01ae\u01ab\u0003\u0002\u0002\u0002\u01ae",
    "\u01ad\u0003\u0002\u0002\u0002\u01af\t\u0003\u0002\u0002\u0002\u01b0",
    "\u01b2\u0005\f\u0007\u0002\u01b1\u01b3\u0007E\u0002\u0002\u01b2\u01b1",
    "\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b4",
    "\u0003\u0002\u0002\u0002\u01b4\u01b5\u0005\b\u0005\u0002\u01b5\u000b",
    "\u0003\u0002\u0002\u0002\u01b6\u01b7\b\u0007\u0001\u0002\u01b7\u01c2",
    "\u0007\u0082\u0002\u0002\u01b8\u01b9\u0005\u00a0Q\u0002\u01b9\u01ba",
    "\u0007\u0082\u0002\u0002\u01ba\u01c2\u0003\u0002\u0002\u0002\u01bb\u01bc",
    "\u0005\u00b8]\u0002\u01bc\u01bd\u0007\u0082\u0002\u0002\u01bd\u01c2",
    "\u0003\u0002\u0002\u0002\u01be\u01bf\u0005\u00a2R\u0002\u01bf\u01c0",
    "\u0007\u0082\u0002\u0002\u01c0\u01c2\u0003\u0002\u0002\u0002\u01c1\u01b6",
    "\u0003\u0002\u0002\u0002\u01c1\u01b8\u0003\u0002\u0002\u0002\u01c1\u01bb",
    "\u0003\u0002\u0002\u0002\u01c1\u01be\u0003\u0002\u0002\u0002\u01c2\u01cf",
    "\u0003\u0002\u0002\u0002\u01c3\u01c4\f\u0004\u0002\u0002\u01c4\u01c5",
    "\u0007\u0087\u0002\u0002\u01c5\u01ce\u0007\u0082\u0002\u0002\u01c6\u01c8",
    "\f\u0003\u0002\u0002\u01c7\u01c9\u0007E\u0002\u0002\u01c8\u01c7\u0003",
    "\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003",
    "\u0002\u0002\u0002\u01ca\u01cb\u0005\u0164\u00b3\u0002\u01cb\u01cc\u0007",
    "\u0082\u0002\u0002\u01cc\u01ce\u0003\u0002\u0002\u0002\u01cd\u01c3\u0003",
    "\u0002\u0002\u0002\u01cd\u01c6\u0003\u0002\u0002\u0002\u01ce\u01d1\u0003",
    "\u0002\u0002\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003",
    "\u0002\u0002\u0002\u01d0\r\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003",
    "\u0002\u0002\u0002\u01d2\u01d4\u0005\u0010\t\u0002\u01d3\u01d5\u0005",
    "\u001e\u0010\u0002\u01d4\u01d3\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003",
    "\u0002\u0002\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6\u01d7\u0005",
    "h5\u0002\u01d7\u000f\u0003\u0002\u0002\u0002\u01d8\u01da\u0007X\u0002",
    "\u0002\u01d9\u01db\u0005\u0012\n\u0002\u01da\u01d9\u0003\u0002\u0002",
    "\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01db\u01dc\u0003\u0002\u0002",
    "\u0002\u01dc\u01dd\u0007Y\u0002\u0002\u01dd\u0011\u0003\u0002\u0002",
    "\u0002\u01de\u01e5\u0005\u0014\u000b\u0002\u01df\u01e5\u0005\u0016\f",
    "\u0002\u01e0\u01e1\u0005\u0014\u000b\u0002\u01e1\u01e2\u0007}\u0002",
    "\u0002\u01e2\u01e3\u0005\u0016\f\u0002\u01e3\u01e5\u0003\u0002\u0002",
    "\u0002\u01e4\u01de\u0003\u0002\u0002\u0002\u01e4\u01df\u0003\u0002\u0002",
    "\u0002\u01e4\u01e0\u0003\u0002\u0002\u0002\u01e5\u0013\u0003\u0002\u0002",
    "\u0002\u01e6\u01e7\t\u0002\u0002\u0002\u01e7\u0015\u0003\u0002\u0002",
    "\u0002\u01e8\u01e9\b\f\u0001\u0002\u01e9\u01eb\u0005\u0018\r\u0002\u01ea",
    "\u01ec\u0007\u0086\u0002\u0002\u01eb\u01ea\u0003\u0002\u0002\u0002\u01eb",
    "\u01ec\u0003\u0002\u0002\u0002\u01ec\u01f5\u0003\u0002\u0002\u0002\u01ed",
    "\u01ee\f\u0003\u0002\u0002\u01ee\u01ef\u0007}\u0002\u0002\u01ef\u01f1",
    "\u0005\u0018\r\u0002\u01f0\u01f2\u0007\u0086\u0002\u0002\u01f1\u01f0",
    "\u0003\u0002\u0002\u0002\u01f1\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f4",
    "\u0003\u0002\u0002\u0002\u01f3\u01ed\u0003\u0002\u0002\u0002\u01f4\u01f7",
    "\u0003\u0002\u0002\u0002\u01f5\u01f3\u0003\u0002\u0002\u0002\u01f5\u01f6",
    "\u0003\u0002\u0002\u0002\u01f6\u0017\u0003\u0002\u0002\u0002\u01f7\u01f5",
    "\u0003\u0002\u0002\u0002\u01f8\u01fb\u0005\u001a\u000e\u0002\u01f9\u01fb",
    "\u0005\u001c\u000f\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fa\u01f9",
    "\u0003\u0002\u0002\u0002\u01fb\u0019\u0003\u0002\u0002\u0002\u01fc\u0201",
    "\u0007\u0087\u0002\u0002\u01fd\u01fe\u0007b\u0002\u0002\u01fe\u0201",
    "\u0007\u0087\u0002\u0002\u01ff\u0201\u0007F\u0002\u0002\u0200\u01fc",
    "\u0003\u0002\u0002\u0002\u0200\u01fd\u0003\u0002\u0002\u0002\u0200\u01ff",
    "\u0003\u0002\u0002\u0002\u0201\u001b\u0003\u0002\u0002\u0002\u0202\u0203",
    "\u0007\u0087\u0002\u0002\u0203\u0208\u0005\u011a\u008e\u0002\u0204\u0205",
    "\u0007b\u0002\u0002\u0205\u0206\u0007\u0087\u0002\u0002\u0206\u0208",
    "\u0005\u011a\u008e\u0002\u0207\u0202\u0003\u0002\u0002\u0002\u0207\u0204",
    "\u0003\u0002\u0002\u0002\u0208\u001d\u0003\u0002\u0002\u0002\u0209\u020a",
    "\u0007V\u0002\u0002\u020a\u020b\u0005\u0110\u0089\u0002\u020b\u020d",
    "\u0007W\u0002\u0002\u020c\u020e\u00070\u0002\u0002\u020d\u020c\u0003",
    "\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u0210\u0003",
    "\u0002\u0002\u0002\u020f\u0211\u0005\u0180\u00c1\u0002\u0210\u020f\u0003",
    "\u0002\u0002\u0002\u0210\u0211\u0003\u0002\u0002\u0002\u0211\u0213\u0003",
    "\u0002\u0002\u0002\u0212\u0214\u0005\u00d6l\u0002\u0213\u0212\u0003",
    "\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0216\u0003",
    "\u0002\u0002\u0002\u0215\u0217\u0005\u00f8}\u0002\u0216\u0215\u0003",
    "\u0002\u0002\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u001f\u0003",
    "\u0002\u0002\u0002\u0218\u0219\b\u0011\u0001\u0002\u0219\u0259\u0005",
    "\u0004\u0003\u0002\u021a\u021b\u0005\u009eP\u0002\u021b\u021d\u0007",
    "V\u0002\u0002\u021c\u021e\u0005&\u0014\u0002\u021d\u021c\u0003\u0002",
    "\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002\u021e\u021f\u0003\u0002",
    "\u0002\u0002\u021f\u0220\u0007W\u0002\u0002\u0220\u0259\u0003\u0002",
    "\u0002\u0002\u0221\u0222\u0005\u016e\u00b8\u0002\u0222\u0224\u0007V",
    "\u0002\u0002\u0223\u0225\u0005&\u0014\u0002\u0224\u0223\u0003\u0002",
    "\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002",
    "\u0002\u0002\u0226\u0227\u0007W\u0002\u0002\u0227\u0259\u0003\u0002",
    "\u0002\u0002\u0228\u0229\u0005\u009eP\u0002\u0229\u022a\u0005\u0122",
    "\u0092\u0002\u022a\u0259\u0003\u0002\u0002\u0002\u022b\u022c\u0005\u016e",
    "\u00b8\u0002\u022c\u022d\u0005\u0122\u0092\u0002\u022d\u0259\u0003\u0002",
    "\u0002\u0002\u022e\u022f\u0007 \u0002\u0002\u022f\u0230\u0007g\u0002",
    "\u0002\u0230\u0231\u0005\u0104\u0083\u0002\u0231\u0232\u0007h\u0002",
    "\u0002\u0232\u0233\u0007V\u0002\u0002\u0233\u0234\u0005^0\u0002\u0234",
    "\u0235\u0007W\u0002\u0002\u0235\u0259\u0003\u0002\u0002\u0002\u0236",
    "\u0237\u0007B\u0002\u0002\u0237\u0238\u0007g\u0002\u0002\u0238\u0239",
    "\u0005\u0104\u0083\u0002\u0239\u023a\u0007h\u0002\u0002\u023a\u023b",
    "\u0007V\u0002\u0002\u023b\u023c\u0005^0\u0002\u023c\u023d\u0007W\u0002",
    "\u0002\u023d\u0259\u0003\u0002\u0002\u0002\u023e\u023f\u0007;\u0002",
    "\u0002\u023f\u0240\u0007g\u0002\u0002\u0240\u0241\u0005\u0104\u0083",
    "\u0002\u0241\u0242\u0007h\u0002\u0002\u0242\u0243\u0007V\u0002\u0002",
    "\u0243\u0244\u0005^0\u0002\u0244\u0245\u0007W\u0002\u0002\u0245\u0259",
    "\u0003\u0002\u0002\u0002\u0246\u0247\u0007\u0019\u0002\u0002\u0247\u0248",
    "\u0007g\u0002\u0002\u0248\u0249\u0005\u0104\u0083\u0002\u0249\u024a",
    "\u0007h\u0002\u0002\u024a\u024b\u0007V\u0002\u0002\u024b\u024c\u0005",
    "^0\u0002\u024c\u024d\u0007W\u0002\u0002\u024d\u0259\u0003\u0002\u0002",
    "\u0002\u024e\u024f\u0005$\u0013\u0002\u024f\u0250\u0007V\u0002\u0002",
    "\u0250\u0251\u0005^0\u0002\u0251\u0252\u0007W\u0002\u0002\u0252\u0259",
    "\u0003\u0002\u0002\u0002\u0253\u0254\u0005$\u0013\u0002\u0254\u0255",
    "\u0007V\u0002\u0002\u0255\u0256\u0005\u0104\u0083\u0002\u0256\u0257",
    "\u0007W\u0002\u0002\u0257\u0259\u0003\u0002\u0002\u0002\u0258\u0218",
    "\u0003\u0002\u0002\u0002\u0258\u021a\u0003\u0002\u0002\u0002\u0258\u0221",
    "\u0003\u0002\u0002\u0002\u0258\u0228\u0003\u0002\u0002\u0002\u0258\u022b",
    "\u0003\u0002\u0002\u0002\u0258\u022e\u0003\u0002\u0002\u0002\u0258\u0236",
    "\u0003\u0002\u0002\u0002\u0258\u023e\u0003\u0002\u0002\u0002\u0258\u0246",
    "\u0003\u0002\u0002\u0002\u0258\u024e\u0003\u0002\u0002\u0002\u0258\u0253",
    "\u0003\u0002\u0002\u0002\u0259\u0282\u0003\u0002\u0002\u0002\u025a\u025b",
    "\f\u0015\u0002\u0002\u025b\u025c\u0007X\u0002\u0002\u025c\u025d\u0005",
    "^0\u0002\u025d\u025e\u0007Y\u0002\u0002\u025e\u0281\u0003\u0002\u0002",
    "\u0002\u025f\u0260\f\u0014\u0002\u0002\u0260\u0261\u0007X\u0002\u0002",
    "\u0261\u0262\u0005\u0122\u0092\u0002\u0262\u0263\u0007Y\u0002\u0002",
    "\u0263\u0281\u0003\u0002\u0002\u0002\u0264\u0265\f\u0013\u0002\u0002",
    "\u0265\u0267\u0007V\u0002\u0002\u0266\u0268\u0005&\u0014\u0002\u0267",
    "\u0266\u0003\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268",
    "\u0269\u0003\u0002\u0002\u0002\u0269\u0281\u0007W\u0002\u0002\u026a",
    "\u026b\f\u000e\u0002\u0002\u026b\u026d\u0007\u0084\u0002\u0002\u026c",
    "\u026e\u0007E\u0002\u0002\u026d\u026c\u0003\u0002\u0002\u0002\u026d",
    "\u026e\u0003\u0002\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f",
    "\u0281\u0005\u0006\u0004\u0002\u0270\u0271\f\r\u0002\u0002\u0271\u0273",
    "\u0007\u007f\u0002\u0002\u0272\u0274\u0007E\u0002\u0002\u0273\u0272",
    "\u0003\u0002\u0002\u0002\u0273\u0274\u0003\u0002\u0002\u0002\u0274\u0275",
    "\u0003\u0002\u0002\u0002\u0275\u0281\u0005\u0006\u0004\u0002\u0276\u0277",
    "\f\f\u0002\u0002\u0277\u0278\u0007\u0084\u0002\u0002\u0278\u0281\u0005",
    "(\u0015\u0002\u0279\u027a\f\u000b\u0002\u0002\u027a\u027b\u0007\u007f",
    "\u0002\u0002\u027b\u0281\u0005(\u0015\u0002\u027c\u027d\f\n\u0002\u0002",
    "\u027d\u0281\u0007{\u0002\u0002\u027e\u027f\f\t\u0002\u0002\u027f\u0281",
    "\u0007|\u0002\u0002\u0280\u025a\u0003\u0002\u0002\u0002\u0280\u025f",
    "\u0003\u0002\u0002\u0002\u0280\u0264\u0003\u0002\u0002\u0002\u0280\u026a",
    "\u0003\u0002\u0002\u0002\u0280\u0270\u0003\u0002\u0002\u0002\u0280\u0276",
    "\u0003\u0002\u0002\u0002\u0280\u0279\u0003\u0002\u0002\u0002\u0280\u027c",
    "\u0003\u0002\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0281\u0284",
    "\u0003\u0002\u0002\u0002\u0282\u0280\u0003\u0002\u0002\u0002\u0282\u0283",
    "\u0003\u0002\u0002\u0002\u0283!\u0003\u0002\u0002\u0002\u0284\u0282",
    "\u0003\u0002\u0002\u0002\u0285\u0286\u0007L\u0002\u0002\u0286#\u0003",
    "\u0002\u0002\u0002\u0287\u0288\u0007L\u0002\u0002\u0288%\u0003\u0002",
    "\u0002\u0002\u0289\u028a\u0005\u0120\u0091\u0002\u028a\'\u0003\u0002",
    "\u0002\u0002\u028b\u028d\u0005\f\u0007\u0002\u028c\u028b\u0003\u0002",
    "\u0002\u0002\u028c\u028d\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002",
    "\u0002\u0002\u028e\u028f\u0005\u00a0Q\u0002\u028f\u0290\u0007\u0082",
    "\u0002\u0002\u0290\u0291\u0007d\u0002\u0002\u0291\u0292\u0005\u00a0",
    "Q\u0002\u0292\u02a2\u0003\u0002\u0002\u0002\u0293\u0294\u0005\f\u0007",
    "\u0002\u0294\u0295\u0007E\u0002\u0002\u0295\u0296\u0005\u0164\u00b3",
    "\u0002\u0296\u0297\u0007\u0082\u0002\u0002\u0297\u0298\u0007d\u0002",
    "\u0002\u0298\u0299\u0005\u00a0Q\u0002\u0299\u02a2\u0003\u0002\u0002",
    "\u0002\u029a\u029c\u0005\f\u0007\u0002\u029b\u029a\u0003\u0002\u0002",
    "\u0002\u029b\u029c\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002",
    "\u0002\u029d\u029e\u0007d\u0002\u0002\u029e\u02a2\u0005\u00a0Q\u0002",
    "\u029f\u02a0\u0007d\u0002\u0002\u02a0\u02a2\u0005\u00a2R\u0002\u02a1",
    "\u028c\u0003\u0002\u0002\u0002\u02a1\u0293\u0003\u0002\u0002\u0002\u02a1",
    "\u029b\u0003\u0002\u0002\u0002\u02a1\u029f\u0003\u0002\u0002\u0002\u02a2",
    ")\u0003\u0002\u0002\u0002\u02a3\u02c0\u0005 \u0011\u0002\u02a4\u02a5",
    "\u0007{\u0002\u0002\u02a5\u02c0\u0005> \u0002\u02a6\u02a7\u0007|\u0002",
    "\u0002\u02a7\u02c0\u0005> \u0002\u02a8\u02a9\u0005,\u0017\u0002\u02a9",
    "\u02aa\u0005> \u0002\u02aa\u02c0\u0003\u0002\u0002\u0002\u02ab\u02ac",
    "\u0007?\u0002\u0002\u02ac\u02c0\u0005*\u0016\u0002\u02ad\u02ae\u0007",
    "?\u0002\u0002\u02ae\u02af\u0007V\u0002\u0002\u02af\u02b0\u0005\u0104",
    "\u0083\u0002\u02b0\u02b1\u0007W\u0002\u0002\u02b1\u02c0\u0003\u0002",
    "\u0002\u0002\u02b2\u02b3\u0007?\u0002\u0002\u02b3\u02b4\u0007\u0086",
    "\u0002\u0002\u02b4\u02b5\u0007V\u0002\u0002\u02b5\u02b6\u0007\u0087",
    "\u0002\u0002\u02b6\u02c0\u0007W\u0002\u0002\u02b7\u02b8\u0007\f\u0002",
    "\u0002\u02b8\u02b9\u0007V\u0002\u0002\u02b9\u02ba\u0005\u0104\u0083",
    "\u0002\u02ba\u02bb\u0007W\u0002\u0002\u02bb\u02c0\u0003\u0002\u0002",
    "\u0002\u02bc\u02c0\u0005<\u001f\u0002\u02bd\u02c0\u0005.\u0018\u0002",
    "\u02be\u02c0\u0005:\u001e\u0002\u02bf\u02a3\u0003\u0002\u0002\u0002",
    "\u02bf\u02a4\u0003\u0002\u0002\u0002\u02bf\u02a6\u0003\u0002\u0002\u0002",
    "\u02bf\u02a8\u0003\u0002\u0002\u0002\u02bf\u02ab\u0003\u0002\u0002\u0002",
    "\u02bf\u02ad\u0003\u0002\u0002\u0002\u02bf\u02b2\u0003\u0002\u0002\u0002",
    "\u02bf\u02b7\u0003\u0002\u0002\u0002\u02bf\u02bc\u0003\u0002\u0002\u0002",
    "\u02bf\u02bd\u0003\u0002\u0002\u0002\u02bf\u02be\u0003\u0002\u0002\u0002",
    "\u02c0+\u0003\u0002\u0002\u0002\u02c1\u02c2\t\u0003\u0002\u0002\u02c2",
    "-\u0003\u0002\u0002\u0002\u02c3\u02c5\u0007\u0082\u0002\u0002\u02c4",
    "\u02c3\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003\u0002\u0002\u0002\u02c5",
    "\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c8\u00072\u0002\u0002\u02c7",
    "\u02c9\u00050\u0019\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002\u02c8",
    "\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca",
    "\u02cc\u00052\u001a\u0002\u02cb\u02cd\u00058\u001d\u0002\u02cc\u02cb",
    "\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd\u02dc",
    "\u0003\u0002\u0002\u0002\u02ce\u02d0\u0007\u0082\u0002\u0002\u02cf\u02ce",
    "\u0003\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0\u02d1",
    "\u0003\u0002\u0002\u0002\u02d1\u02d3\u00072\u0002\u0002\u02d2\u02d4",
    "\u00050\u0019\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d3\u02d4",
    "\u0003\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5\u02d6",
    "\u0007V\u0002\u0002\u02d6\u02d7\u0005\u0104\u0083\u0002\u02d7\u02d9",
    "\u0007W\u0002\u0002\u02d8\u02da\u00058\u001d\u0002\u02d9\u02d8\u0003",
    "\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da\u02dc\u0003",
    "\u0002\u0002\u0002\u02db\u02c4\u0003\u0002\u0002\u0002\u02db\u02cf\u0003",
    "\u0002\u0002\u0002\u02dc/\u0003\u0002\u0002\u0002\u02dd\u02de\u0007",
    "V\u0002\u0002\u02de\u02df\u0005&\u0014\u0002\u02df\u02e0\u0007W\u0002",
    "\u0002\u02e01\u0003\u0002\u0002\u0002\u02e1\u02e3\u0005\u009aN\u0002",
    "\u02e2\u02e4\u00054\u001b\u0002\u02e3\u02e2\u0003\u0002\u0002\u0002",
    "\u02e3\u02e4\u0003\u0002\u0002\u0002\u02e43\u0003\u0002\u0002\u0002",
    "\u02e5\u02e7\u0005\u00fa~\u0002\u02e6\u02e8\u00054\u001b\u0002\u02e7",
    "\u02e6\u0003\u0002\u0002\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8",
    "\u02eb\u0003\u0002\u0002\u0002\u02e9\u02eb\u00056\u001c\u0002\u02ea",
    "\u02e5\u0003\u0002\u0002\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02eb",
    "5\u0003\u0002\u0002\u0002\u02ec\u02ed\b\u001c\u0001\u0002\u02ed\u02ee",
    "\u0007X\u0002\u0002\u02ee\u02ef\u0005^0\u0002\u02ef\u02f1\u0007Y\u0002",
    "\u0002\u02f0\u02f2\u0005\u00d6l\u0002\u02f1\u02f0\u0003\u0002\u0002",
    "\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2\u02fc\u0003\u0002\u0002",
    "\u0002\u02f3\u02f4\f\u0003\u0002\u0002\u02f4\u02f5\u0007X\u0002\u0002",
    "\u02f5\u02f6\u0005`1\u0002\u02f6\u02f8\u0007Y\u0002\u0002\u02f7\u02f9",
    "\u0005\u00d6l\u0002\u02f8\u02f7\u0003\u0002\u0002\u0002\u02f8\u02f9",
    "\u0003\u0002\u0002\u0002\u02f9\u02fb\u0003\u0002\u0002\u0002\u02fa\u02f3",
    "\u0003\u0002\u0002\u0002\u02fb\u02fe\u0003\u0002\u0002\u0002\u02fc\u02fa",
    "\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002\u0002\u0002\u02fd7",
    "\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02ff\u0301",
    "\u0007V\u0002\u0002\u0300\u0302\u0005&\u0014\u0002\u0301\u0300\u0003",
    "\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302\u0303\u0003",
    "\u0002\u0002\u0002\u0303\u0306\u0007W\u0002\u0002\u0304\u0306\u0005",
    "\u0122\u0092\u0002\u0305\u02ff\u0003\u0002\u0002\u0002\u0305\u0304\u0003",
    "\u0002\u0002\u0002\u03069\u0003\u0002\u0002\u0002\u0307\u0309\u0007",
    "\u0082\u0002\u0002\u0308\u0307\u0003\u0002\u0002\u0002\u0308\u0309\u0003",
    "\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u030b\u0007",
    "\u001d\u0002\u0002\u030b\u0314\u0005> \u0002\u030c\u030e\u0007\u0082",
    "\u0002\u0002\u030d\u030c\u0003\u0002\u0002\u0002\u030d\u030e\u0003\u0002",
    "\u0002\u0002\u030e\u030f\u0003\u0002\u0002\u0002\u030f\u0310\u0007\u001d",
    "\u0002\u0002\u0310\u0311\u0007X\u0002\u0002\u0311\u0312\u0007Y\u0002",
    "\u0002\u0312\u0314\u0005> \u0002\u0313\u0308\u0003\u0002\u0002\u0002",
    "\u0313\u030d\u0003\u0002\u0002\u0002\u0314;\u0003\u0002\u0002\u0002",
    "\u0315\u0316\u00073\u0002\u0002\u0316\u0317\u0007V\u0002\u0002\u0317",
    "\u0318\u0005^0\u0002\u0318\u0319\u0007W\u0002\u0002\u0319=\u0003\u0002",
    "\u0002\u0002\u031a\u0321\u0005*\u0016\u0002\u031b\u031c\u0007V\u0002",
    "\u0002\u031c\u031d\u0005\u0104\u0083\u0002\u031d\u031e\u0007W\u0002",
    "\u0002\u031e\u031f\u0005> \u0002\u031f\u0321\u0003\u0002\u0002\u0002",
    "\u0320\u031a\u0003\u0002\u0002\u0002\u0320\u031b\u0003\u0002\u0002\u0002",
    "\u0321?\u0003\u0002\u0002\u0002\u0322\u0323\b!\u0001\u0002\u0323\u0324",
    "\u0005> \u0002\u0324\u032d\u0003\u0002\u0002\u0002\u0325\u0326\f\u0004",
    "\u0002\u0002\u0326\u0327\u0007\u0085\u0002\u0002\u0327\u032c\u0005>",
    " \u0002\u0328\u0329\f\u0003\u0002\u0002\u0329\u032a\u0007~\u0002\u0002",
    "\u032a\u032c\u0005> \u0002\u032b\u0325\u0003\u0002\u0002\u0002\u032b",
    "\u0328\u0003\u0002\u0002\u0002\u032c\u032f\u0003\u0002\u0002\u0002\u032d",
    "\u032b\u0003\u0002\u0002\u0002\u032d\u032e\u0003\u0002\u0002\u0002\u032e",
    "A\u0003\u0002\u0002\u0002\u032f\u032d\u0003\u0002\u0002\u0002\u0330",
    "\u0331\b\"\u0001\u0002\u0331\u0332\u0005@!\u0002\u0332\u033e\u0003\u0002",
    "\u0002\u0002\u0333\u0334\f\u0005\u0002\u0002\u0334\u0335\u0007^\u0002",
    "\u0002\u0335\u033d\u0005@!\u0002\u0336\u0337\f\u0004\u0002\u0002\u0337",
    "\u0338\u0007_\u0002\u0002\u0338\u033d\u0005@!\u0002\u0339\u033a\f\u0003",
    "\u0002\u0002\u033a\u033b\u0007`\u0002\u0002\u033b\u033d\u0005@!\u0002",
    "\u033c\u0333\u0003\u0002\u0002\u0002\u033c\u0336\u0003\u0002\u0002\u0002",
    "\u033c\u0339\u0003\u0002\u0002\u0002\u033d\u0340\u0003\u0002\u0002\u0002",
    "\u033e\u033c\u0003\u0002\u0002\u0002\u033e\u033f\u0003\u0002\u0002\u0002",
    "\u033fC\u0003\u0002\u0002\u0002\u0340\u033e\u0003\u0002\u0002\u0002",
    "\u0341\u0342\b#\u0001\u0002\u0342\u0343\u0005B\"\u0002\u0343\u034c\u0003",
    "\u0002\u0002\u0002\u0344\u0345\f\u0004\u0002\u0002\u0345\u0346\u0007",
    "\\\u0002\u0002\u0346\u034b\u0005B\"\u0002\u0347\u0348\f\u0003\u0002",
    "\u0002\u0348\u0349\u0007]\u0002\u0002\u0349\u034b\u0005B\"\u0002\u034a",
    "\u0344\u0003\u0002\u0002\u0002\u034a\u0347\u0003\u0002\u0002\u0002\u034b",
    "\u034e\u0003\u0002\u0002\u0002\u034c\u034a\u0003\u0002\u0002\u0002\u034c",
    "\u034d\u0003\u0002\u0002\u0002\u034dE\u0003\u0002\u0002\u0002\u034e",
    "\u034c\u0003\u0002\u0002\u0002\u034f\u0350\b$\u0001\u0002\u0350\u0351",
    "\u0005D#\u0002\u0351\u0358\u0003\u0002\u0002\u0002\u0352\u0353\f\u0003",
    "\u0002\u0002\u0353\u0354\u0005H%\u0002\u0354\u0355\u0005D#\u0002\u0355",
    "\u0357\u0003\u0002\u0002\u0002\u0356\u0352\u0003\u0002\u0002\u0002\u0357",
    "\u035a\u0003\u0002\u0002\u0002\u0358\u0356\u0003\u0002\u0002\u0002\u0358",
    "\u0359\u0003\u0002\u0002\u0002\u0359G\u0003\u0002\u0002\u0002\u035a",
    "\u0358\u0003\u0002\u0002\u0002\u035b\u035c\t\u0004\u0002\u0002\u035c",
    "I\u0003\u0002\u0002\u0002\u035d\u035e\b&\u0001\u0002\u035e\u035f\u0005",
    "F$\u0002\u035f\u036e\u0003\u0002\u0002\u0002\u0360\u0361\f\u0006\u0002",
    "\u0002\u0361\u0362\u0007g\u0002\u0002\u0362\u036d\u0005F$\u0002\u0363",
    "\u0364\f\u0005\u0002\u0002\u0364\u0365\u0007h\u0002\u0002\u0365\u036d",
    "\u0005F$\u0002\u0366\u0367\f\u0004\u0002\u0002\u0367\u0368\u0007w\u0002",
    "\u0002\u0368\u036d\u0005F$\u0002\u0369\u036a\f\u0003\u0002\u0002\u036a",
    "\u036b\u0007x\u0002\u0002\u036b\u036d\u0005F$\u0002\u036c\u0360\u0003",
    "\u0002\u0002\u0002\u036c\u0363\u0003\u0002\u0002\u0002\u036c\u0366\u0003",
    "\u0002\u0002\u0002\u036c\u0369\u0003\u0002\u0002\u0002\u036d\u0370\u0003",
    "\u0002\u0002\u0002\u036e\u036c\u0003\u0002\u0002\u0002\u036e\u036f\u0003",
    "\u0002\u0002\u0002\u036fK\u0003\u0002\u0002\u0002\u0370\u036e\u0003",
    "\u0002\u0002\u0002\u0371\u0372\b\'\u0001\u0002\u0372\u0373\u0005J&\u0002",
    "\u0373\u037c\u0003\u0002\u0002\u0002\u0374\u0375\f\u0004\u0002\u0002",
    "\u0375\u0376\u0007u\u0002\u0002\u0376\u037b\u0005J&\u0002\u0377\u0378",
    "\f\u0003\u0002\u0002\u0378\u0379\u0007v\u0002\u0002\u0379\u037b\u0005",
    "J&\u0002\u037a\u0374\u0003\u0002\u0002\u0002\u037a\u0377\u0003\u0002",
    "\u0002\u0002\u037b\u037e\u0003\u0002\u0002\u0002\u037c\u037a\u0003\u0002",
    "\u0002\u0002\u037c\u037d\u0003\u0002\u0002\u0002\u037dM\u0003\u0002",
    "\u0002\u0002\u037e\u037c\u0003\u0002\u0002\u0002\u037f\u0380\b(\u0001",
    "\u0002\u0380\u0381\u0005L\'\u0002\u0381\u0387\u0003\u0002\u0002\u0002",
    "\u0382\u0383\f\u0003\u0002\u0002\u0383\u0384\u0007b\u0002\u0002\u0384",
    "\u0386\u0005L\'\u0002\u0385\u0382\u0003\u0002\u0002\u0002\u0386\u0389",
    "\u0003\u0002\u0002\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0387\u0388",
    "\u0003\u0002\u0002\u0002\u0388O\u0003\u0002\u0002\u0002\u0389\u0387",
    "\u0003\u0002\u0002\u0002\u038a\u038b\b)\u0001\u0002\u038b\u038c\u0005",
    "N(\u0002\u038c\u0392\u0003\u0002\u0002\u0002\u038d\u038e\f\u0003\u0002",
    "\u0002\u038e\u038f\u0007a\u0002\u0002\u038f\u0391\u0005N(\u0002\u0390",
    "\u038d\u0003\u0002\u0002\u0002\u0391\u0394\u0003\u0002\u0002\u0002\u0392",
    "\u0390\u0003\u0002\u0002\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393",
    "Q\u0003\u0002\u0002\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0395",
    "\u0396\b*\u0001\u0002\u0396\u0397\u0005P)\u0002\u0397\u039d\u0003\u0002",
    "\u0002\u0002\u0398\u0399\f\u0003\u0002\u0002\u0399\u039a\u0007c\u0002",
    "\u0002\u039a\u039c\u0005P)\u0002\u039b\u0398\u0003\u0002\u0002\u0002",
    "\u039c\u039f\u0003\u0002\u0002\u0002\u039d\u039b\u0003\u0002\u0002\u0002",
    "\u039d\u039e\u0003\u0002\u0002\u0002\u039eS\u0003\u0002\u0002\u0002",
    "\u039f\u039d\u0003\u0002\u0002\u0002\u03a0\u03a1\b+\u0001\u0002\u03a1",
    "\u03a2\u0005R*\u0002\u03a2\u03ab\u0003\u0002\u0002\u0002\u03a3\u03a4",
    "\f\u0004\u0002\u0002\u03a4\u03a5\u0007\u0005\u0002\u0002\u03a5\u03aa",
    "\u0005R*\u0002\u03a6\u03a7\f\u0003\u0002\u0002\u03a7\u03a8\u0007\u0006",
    "\u0002\u0002\u03a8\u03aa\u0005R*\u0002\u03a9\u03a3\u0003\u0002\u0002",
    "\u0002\u03a9\u03a6\u0003\u0002\u0002\u0002\u03aa\u03ad\u0003\u0002\u0002",
    "\u0002\u03ab\u03a9\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002",
    "\u0002\u03acU\u0003\u0002\u0002\u0002\u03ad\u03ab\u0003\u0002\u0002",
    "\u0002\u03ae\u03af\b,\u0001\u0002\u03af\u03b0\u0005T+\u0002\u03b0\u03b9",
    "\u0003\u0002\u0002\u0002\u03b1\u03b2\f\u0004\u0002\u0002\u03b2\u03b3",
    "\u0007\u0007\u0002\u0002\u03b3\u03b8\u0005T+\u0002\u03b4\u03b5\f\u0003",
    "\u0002\u0002\u03b5\u03b6\u0007\b\u0002\u0002\u03b6\u03b8\u0005T+\u0002",
    "\u03b7\u03b1\u0003\u0002\u0002\u0002\u03b7\u03b4\u0003\u0002\u0002\u0002",
    "\u03b8\u03bb\u0003\u0002\u0002\u0002\u03b9\u03b7\u0003\u0002\u0002\u0002",
    "\u03b9\u03ba\u0003\u0002\u0002\u0002\u03baW\u0003\u0002\u0002\u0002",
    "\u03bb\u03b9\u0003\u0002\u0002\u0002\u03bc\u03c4\u0005V,\u0002\u03bd",
    "\u03be\u0005V,\u0002\u03be\u03bf\u0007\u0080\u0002\u0002\u03bf\u03c0",
    "\u0005^0\u0002\u03c0\u03c1\u0007\u0081\u0002\u0002\u03c1\u03c2\u0005",
    "Z.\u0002\u03c2\u03c4\u0003\u0002\u0002\u0002\u03c3\u03bc\u0003\u0002",
    "\u0002\u0002\u03c3\u03bd\u0003\u0002\u0002\u0002\u03c4Y\u0003\u0002",
    "\u0002\u0002\u03c5\u03cc\u0005X-\u0002\u03c6\u03c7\u0005V,\u0002\u03c7",
    "\u03c8\u0005\\/\u0002\u03c8\u03c9\u0005\u011e\u0090\u0002\u03c9\u03cc",
    "\u0003\u0002\u0002\u0002\u03ca\u03cc\u0005\u017e\u00c0\u0002\u03cb\u03c5",
    "\u0003\u0002\u0002\u0002\u03cb\u03c6\u0003\u0002\u0002\u0002\u03cb\u03ca",
    "\u0003\u0002\u0002\u0002\u03cc[\u0003\u0002\u0002\u0002\u03cd\u03ce",
    "\t\u0005\u0002\u0002\u03ce]\u0003\u0002\u0002\u0002\u03cf\u03d0\b0\u0001",
    "\u0002\u03d0\u03d1\u0005Z.\u0002\u03d1\u03d7\u0003\u0002\u0002\u0002",
    "\u03d2\u03d3\f\u0003\u0002\u0002\u03d3\u03d4\u0007}\u0002\u0002\u03d4",
    "\u03d6\u0005Z.\u0002\u03d5\u03d2\u0003\u0002\u0002\u0002\u03d6\u03d9",
    "\u0003\u0002\u0002\u0002\u03d7\u03d5\u0003\u0002\u0002\u0002\u03d7\u03d8",
    "\u0003\u0002\u0002\u0002\u03d8_\u0003\u0002\u0002\u0002\u03d9\u03d7",
    "\u0003\u0002\u0002\u0002\u03da\u03db\u0005X-\u0002\u03dba\u0003\u0002",
    "\u0002\u0002\u03dc\u03f7\u0005d3\u0002\u03dd\u03df\u0005\u00d6l\u0002",
    "\u03de\u03dd\u0003\u0002\u0002\u0002\u03de\u03df\u0003\u0002\u0002\u0002",
    "\u03df\u03e0\u0003\u0002\u0002\u0002\u03e0\u03f7\u0005f4\u0002\u03e1",
    "\u03e3\u0005\u00d6l\u0002\u03e2\u03e1\u0003\u0002\u0002\u0002\u03e2",
    "\u03e3\u0003\u0002\u0002\u0002\u03e3\u03e4\u0003\u0002\u0002\u0002\u03e4",
    "\u03f7\u0005h5\u0002\u03e5\u03e7\u0005\u00d6l\u0002\u03e6\u03e5\u0003",
    "\u0002\u0002\u0002\u03e6\u03e7\u0003\u0002\u0002\u0002\u03e7\u03e8\u0003",
    "\u0002\u0002\u0002\u03e8\u03f7\u0005l7\u0002\u03e9\u03eb\u0005\u00d6",
    "l\u0002\u03ea\u03e9\u0003\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002",
    "\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec\u03f7\u0005p",
    "9\u0002\u03ed\u03ef\u0005\u00d6l\u0002\u03ee\u03ed\u0003\u0002\u0002",
    "\u0002\u03ee\u03ef\u0003\u0002\u0002\u0002\u03ef\u03f0\u0003\u0002\u0002",
    "\u0002\u03f0\u03f7\u0005x=\u0002\u03f1\u03f7\u0005z>\u0002\u03f2\u03f4",
    "\u0005\u00d6l\u0002\u03f3\u03f2\u0003\u0002\u0002\u0002\u03f3\u03f4",
    "\u0003\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u03f7",
    "\u0005\u0174\u00bb\u0002\u03f6\u03dc\u0003\u0002\u0002\u0002\u03f6\u03de",
    "\u0003\u0002\u0002\u0002\u03f6\u03e2\u0003\u0002\u0002\u0002\u03f6\u03e6",
    "\u0003\u0002\u0002\u0002\u03f6\u03ea\u0003\u0002\u0002\u0002\u03f6\u03ee",
    "\u0003\u0002\u0002\u0002\u03f6\u03f1\u0003\u0002\u0002\u0002\u03f6\u03f3",
    "\u0003\u0002\u0002\u0002\u03f7c\u0003\u0002\u0002\u0002\u03f8\u03fa",
    "\u0005\u00d6l\u0002\u03f9\u03f8\u0003\u0002\u0002\u0002\u03f9\u03fa",
    "\u0003\u0002\u0002\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fc",
    "\u0007\u0087\u0002\u0002\u03fc\u03fd\u0007\u0081\u0002\u0002\u03fd\u040d",
    "\u0005b2\u0002\u03fe\u0400\u0005\u00d6l\u0002\u03ff\u03fe\u0003\u0002",
    "\u0002\u0002\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0401\u0003\u0002",
    "\u0002\u0002\u0401\u0402\u0007\u0011\u0002\u0002\u0402\u0403\u0005`",
    "1\u0002\u0403\u0404\u0007\u0081\u0002\u0002\u0404\u0405\u0005b2\u0002",
    "\u0405\u040d\u0003\u0002\u0002\u0002\u0406\u0408\u0005\u00d6l\u0002",
    "\u0407\u0406\u0003\u0002\u0002\u0002\u0407\u0408\u0003\u0002\u0002\u0002",
    "\u0408\u0409\u0003\u0002\u0002\u0002\u0409\u040a\u0007\u001c\u0002\u0002",
    "\u040a\u040b\u0007\u0081\u0002\u0002\u040b\u040d\u0005b2\u0002\u040c",
    "\u03f9\u0003\u0002\u0002\u0002\u040c\u03ff\u0003\u0002\u0002\u0002\u040c",
    "\u0407\u0003\u0002\u0002\u0002\u040de\u0003\u0002\u0002\u0002\u040e",
    "\u0410\u0005^0\u0002\u040f\u040e\u0003\u0002\u0002\u0002\u040f\u0410",
    "\u0003\u0002\u0002\u0002\u0410\u0411\u0003\u0002\u0002\u0002\u0411\u0412",
    "\u0007\u0083\u0002\u0002\u0412g\u0003\u0002\u0002\u0002\u0413\u0415",
    "\u0007Z\u0002\u0002\u0414\u0416\u0005j6\u0002\u0415\u0414\u0003\u0002",
    "\u0002\u0002\u0415\u0416\u0003\u0002\u0002\u0002\u0416\u0417\u0003\u0002",
    "\u0002\u0002\u0417\u0418\u0007[\u0002\u0002\u0418i\u0003\u0002\u0002",
    "\u0002\u0419\u041a\b6\u0001\u0002\u041a\u041b\u0005b2\u0002\u041b\u0420",
    "\u0003\u0002\u0002\u0002\u041c\u041d\f\u0003\u0002\u0002\u041d\u041f",
    "\u0005b2\u0002\u041e\u041c\u0003\u0002\u0002\u0002\u041f\u0422\u0003",
    "\u0002\u0002\u0002\u0420\u041e\u0003\u0002\u0002\u0002\u0420\u0421\u0003",
    "\u0002\u0002\u0002\u0421k\u0003\u0002\u0002\u0002\u0422\u0420\u0003",
    "\u0002\u0002\u0002\u0423\u0424\u0007,\u0002\u0002\u0424\u0425\u0007",
    "V\u0002\u0002\u0425\u0426\u0005n8\u0002\u0426\u0427\u0007W\u0002\u0002",
    "\u0427\u0428\u0005b2\u0002\u0428\u0438\u0003\u0002\u0002\u0002\u0429",
    "\u042a\u0007,\u0002\u0002\u042a\u042b\u0007V\u0002\u0002\u042b\u042c",
    "\u0005n8\u0002\u042c\u042d\u0007W\u0002\u0002\u042d\u042e\u0005b2\u0002",
    "\u042e\u042f\u0007!\u0002\u0002\u042f\u0430\u0005b2\u0002\u0430\u0438",
    "\u0003\u0002\u0002\u0002\u0431\u0432\u0007D\u0002\u0002\u0432\u0433",
    "\u0007V\u0002\u0002\u0433\u0434\u0005n8\u0002\u0434\u0435\u0007W\u0002",
    "\u0002\u0435\u0436\u0005b2\u0002\u0436\u0438\u0003\u0002\u0002\u0002",
    "\u0437\u0423\u0003\u0002\u0002\u0002\u0437\u0429\u0003\u0002\u0002\u0002",
    "\u0437\u0431\u0003\u0002\u0002\u0002\u0438m\u0003\u0002\u0002\u0002",
    "\u0439\u044a\u0005^0\u0002\u043a\u043c\u0005\u00d6l\u0002\u043b\u043a",
    "\u0003\u0002\u0002\u0002\u043b\u043c\u0003\u0002\u0002\u0002\u043c\u043d",
    "\u0003\u0002\u0002\u0002\u043d\u043e\u0005\u008eH\u0002\u043e\u043f",
    "\u0005\u00f0y\u0002\u043f\u0440\u0007f\u0002\u0002\u0440\u0441\u0005",
    "\u011e\u0090\u0002\u0441\u044a\u0003\u0002\u0002\u0002\u0442\u0444\u0005",
    "\u00d6l\u0002\u0443\u0442\u0003\u0002\u0002\u0002\u0443\u0444\u0003",
    "\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002\u0445\u0446\u0005",
    "\u008eH\u0002\u0446\u0447\u0005\u00f0y\u0002\u0447\u0448\u0005\u0122",
    "\u0092\u0002\u0448\u044a\u0003\u0002\u0002\u0002\u0449\u0439\u0003\u0002",
    "\u0002\u0002\u0449\u043b\u0003\u0002\u0002\u0002\u0449\u0443\u0003\u0002",
    "\u0002\u0002\u044ao\u0003\u0002\u0002\u0002\u044b\u044c\u0007U\u0002",
    "\u0002\u044c\u044d\u0007V\u0002\u0002\u044d\u044e\u0005n8\u0002\u044e",
    "\u044f\u0007W\u0002\u0002\u044f\u0450\u0005b2\u0002\u0450\u046f\u0003",
    "\u0002\u0002\u0002\u0451\u0452\u0007\u001e\u0002\u0002\u0452\u0453\u0005",
    "b2\u0002\u0453\u0454\u0007U\u0002\u0002\u0454\u0455\u0007V\u0002\u0002",
    "\u0455\u0456\u0005^0\u0002\u0456\u0457\u0007W\u0002\u0002\u0457\u0458",
    "\u0007\u0083\u0002\u0002\u0458\u046f\u0003\u0002\u0002\u0002\u0459\u045a",
    "\u0007)\u0002\u0002\u045a\u045b\u0007V\u0002\u0002\u045b\u045d\u0005",
    "r:\u0002\u045c\u045e\u0005n8\u0002\u045d\u045c\u0003\u0002\u0002\u0002",
    "\u045d\u045e\u0003\u0002\u0002\u0002\u045e\u045f\u0003\u0002\u0002\u0002",
    "\u045f\u0461\u0007\u0083\u0002\u0002\u0460\u0462\u0005^0\u0002\u0461",
    "\u0460\u0003\u0002\u0002\u0002\u0461\u0462\u0003\u0002\u0002\u0002\u0462",
    "\u0463\u0003\u0002\u0002\u0002\u0463\u0464\u0007W\u0002\u0002\u0464",
    "\u0465\u0005b2\u0002\u0465\u046f\u0003\u0002\u0002\u0002\u0466\u0467",
    "\u0007)\u0002\u0002\u0467\u0468\u0007V\u0002\u0002\u0468\u0469\u0005",
    "t;\u0002\u0469\u046a\u0007\u0081\u0002\u0002\u046a\u046b\u0005v<\u0002",
    "\u046b\u046c\u0007W\u0002\u0002\u046c\u046d\u0005b2\u0002\u046d\u046f",
    "\u0003\u0002\u0002\u0002\u046e\u044b\u0003\u0002\u0002\u0002\u046e\u0451",
    "\u0003\u0002\u0002\u0002\u046e\u0459\u0003\u0002\u0002\u0002\u046e\u0466",
    "\u0003\u0002\u0002\u0002\u046fq\u0003\u0002\u0002\u0002\u0470\u0473",
    "\u0005f4\u0002\u0471\u0473\u0005\u0084C\u0002\u0472\u0470\u0003\u0002",
    "\u0002\u0002\u0472\u0471\u0003\u0002\u0002\u0002\u0473s\u0003\u0002",
    "\u0002\u0002\u0474\u0476\u0005\u00d6l\u0002\u0475\u0474\u0003\u0002",
    "\u0002\u0002\u0475\u0476\u0003\u0002\u0002\u0002\u0476\u0477\u0003\u0002",
    "\u0002\u0002\u0477\u0478\u0005\u008eH\u0002\u0478\u0479\u0005\u00f0",
    "y\u0002\u0479u\u0003\u0002\u0002\u0002\u047a\u047d\u0005^0\u0002\u047b",
    "\u047d\u0005\u0122\u0092\u0002\u047c\u047a\u0003\u0002\u0002\u0002\u047c",
    "\u047b\u0003\u0002\u0002\u0002\u047dw\u0003\u0002\u0002\u0002\u047e",
    "\u047f\u0007\u0010\u0002\u0002\u047f\u048f\u0007\u0083\u0002\u0002\u0480",
    "\u0481\u0007\u001a\u0002\u0002\u0481\u048f\u0007\u0083\u0002\u0002\u0482",
    "\u0484\u0007<\u0002\u0002\u0483\u0485\u0005^0\u0002\u0484\u0483\u0003",
    "\u0002\u0002\u0002\u0484\u0485\u0003\u0002\u0002\u0002\u0485\u0486\u0003",
    "\u0002\u0002\u0002\u0486\u048f\u0007\u0083\u0002\u0002\u0487\u0488\u0007",
    "<\u0002\u0002\u0488\u0489\u0005\u0122\u0092\u0002\u0489\u048a\u0007",
    "\u0083\u0002\u0002\u048a\u048f\u0003\u0002\u0002\u0002\u048b\u048c\u0007",
    "+\u0002\u0002\u048c\u048d\u0007\u0087\u0002\u0002\u048d\u048f\u0007",
    "\u0083\u0002\u0002\u048e\u047e\u0003\u0002\u0002\u0002\u048e\u0480\u0003",
    "\u0002\u0002\u0002\u048e\u0482\u0003\u0002\u0002\u0002\u048e\u0487\u0003",
    "\u0002\u0002\u0002\u048e\u048b\u0003\u0002\u0002\u0002\u048fy\u0003",
    "\u0002\u0002\u0002\u0490\u0491\u0005\u0080A\u0002\u0491{\u0003\u0002",
    "\u0002\u0002\u0492\u0493\b?\u0001\u0002\u0493\u0494\u0005~@\u0002\u0494",
    "\u0499\u0003\u0002\u0002\u0002\u0495\u0496\f\u0003\u0002\u0002\u0496",
    "\u0498\u0005~@\u0002\u0497\u0495\u0003\u0002\u0002\u0002\u0498\u049b",
    "\u0003\u0002\u0002\u0002\u0499\u0497\u0003\u0002\u0002\u0002\u0499\u049a",
    "\u0003\u0002\u0002\u0002\u049a}\u0003\u0002\u0002\u0002\u049b\u0499",
    "\u0003\u0002\u0002\u0002\u049c\u04a6\u0005\u0080A\u0002\u049d\u04a6",
    "\u0005\u0116\u008c\u0002\u049e\u04a6\u0005\u015c\u00af\u0002\u049f\u04a6",
    "\u0005\u0170\u00b9\u0002\u04a0\u04a6\u0005\u0172\u00ba\u0002\u04a1\u04a6",
    "\u0005\u00d4k\u0002\u04a2\u04a6\u0005\u00bc_\u0002\u04a3\u04a6\u0005",
    "\u0088E\u0002\u04a4\u04a6\u0005\u008aF\u0002\u04a5\u049c\u0003\u0002",
    "\u0002\u0002\u04a5\u049d\u0003\u0002\u0002\u0002\u04a5\u049e\u0003\u0002",
    "\u0002\u0002\u04a5\u049f\u0003\u0002\u0002\u0002\u04a5\u04a0\u0003\u0002",
    "\u0002\u0002\u04a5\u04a1\u0003\u0002\u0002\u0002\u04a5\u04a2\u0003\u0002",
    "\u0002\u0002\u04a5\u04a3\u0003\u0002\u0002\u0002\u04a5\u04a4\u0003\u0002",
    "\u0002\u0002\u04a6\u007f\u0003\u0002\u0002\u0002\u04a7\u04b0\u0005\u0084",
    "C\u0002\u04a8\u04b0\u0005\u00d2j\u0002\u04a9\u04b0\u0005\u00caf\u0002",
    "\u04aa\u04b0\u0005\u00ceh\u0002\u04ab\u04b0\u0005\u00d0i\u0002\u04ac",
    "\u04b0\u0005\u0086D\u0002\u04ad\u04b0\u0005\u0082B\u0002\u04ae\u04b0",
    "\u0005\u00acW\u0002\u04af\u04a7\u0003\u0002\u0002\u0002\u04af\u04a8",
    "\u0003\u0002\u0002\u0002\u04af\u04a9\u0003\u0002\u0002\u0002\u04af\u04aa",
    "\u0003\u0002\u0002\u0002\u04af\u04ab\u0003\u0002\u0002\u0002\u04af\u04ac",
    "\u0003\u0002\u0002\u0002\u04af\u04ad\u0003\u0002\u0002\u0002\u04af\u04ae",
    "\u0003\u0002\u0002\u0002\u04b0\u0081\u0003\u0002\u0002\u0002\u04b1\u04b2",
    "\u0007P\u0002\u0002\u04b2\u04b4\u0007\u0087\u0002\u0002\u04b3\u04b5",
    "\u0005\u00d6l\u0002\u04b4\u04b3\u0003\u0002\u0002\u0002\u04b4\u04b5",
    "\u0003\u0002\u0002\u0002\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b7",
    "\u0007f\u0002\u0002\u04b7\u04b8\u0005\u0104\u0083\u0002\u04b8\u04b9",
    "\u0007\u0083\u0002\u0002\u04b9\u0083\u0003\u0002\u0002\u0002\u04ba\u04bc",
    "\u0005\u008eH\u0002\u04bb\u04ba\u0003\u0002\u0002\u0002\u04bb\u04bc",
    "\u0003\u0002\u0002\u0002\u04bc\u04be\u0003\u0002\u0002\u0002\u04bd\u04bf",
    "\u0005\u00ecw\u0002\u04be\u04bd\u0003\u0002\u0002\u0002\u04be\u04bf",
    "\u0003\u0002\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002\u0002\u04c0\u04c9",
    "\u0007\u0083\u0002\u0002\u04c1\u04c3\u0005\u00d6l\u0002\u04c2\u04c4",
    "\u0005\u008eH\u0002\u04c3\u04c2\u0003\u0002\u0002\u0002\u04c3\u04c4",
    "\u0003\u0002\u0002\u0002\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u04c6",
    "\u0005\u00ecw\u0002\u04c6\u04c7\u0007\u0083\u0002\u0002\u04c7\u04c9",
    "\u0003\u0002\u0002\u0002\u04c8\u04bb\u0003\u0002\u0002\u0002\u04c8\u04c1",
    "\u0003\u0002\u0002\u0002\u04c9\u0085\u0003\u0002\u0002\u0002\u04ca\u04cb",
    "\u0007A\u0002\u0002\u04cb\u04cc\u0007V\u0002\u0002\u04cc\u04cd\u0005",
    "`1\u0002\u04cd\u04ce\u0007}\u0002\u0002\u04ce\u04cf\u0007\u0090\u0002",
    "\u0002\u04cf\u04d0\u0007W\u0002\u0002\u04d0\u04d1\u0007\u0083\u0002",
    "\u0002\u04d1\u0087\u0003\u0002\u0002\u0002\u04d2\u04d3\u0007\u0083\u0002",
    "\u0002\u04d3\u0089\u0003\u0002\u0002\u0002\u04d4\u04d5\u0005\u00d6l",
    "\u0002\u04d5\u04d6\u0007\u0083\u0002\u0002\u04d6\u008b\u0003\u0002\u0002",
    "\u0002\u04d7\u04de\u0005\u0090I\u0002\u04d8\u04de\u0005\u0096L\u0002",
    "\u04d9\u04de\u0005\u0092J\u0002\u04da\u04de\u0007*\u0002\u0002\u04db",
    "\u04de\u0007K\u0002\u0002\u04dc\u04de\u0007\u0018\u0002\u0002\u04dd",
    "\u04d7\u0003\u0002\u0002\u0002\u04dd\u04d8\u0003\u0002\u0002\u0002\u04dd",
    "\u04d9\u0003\u0002\u0002\u0002\u04dd\u04da\u0003\u0002\u0002\u0002\u04dd",
    "\u04db\u0003\u0002\u0002\u0002\u04dd\u04dc\u0003\u0002\u0002\u0002\u04de",
    "\u008d\u0003\u0002\u0002\u0002\u04df\u04e1\u0005\u008cG\u0002\u04e0",
    "\u04e2\u0005\u00d6l\u0002\u04e1\u04e0\u0003\u0002\u0002\u0002\u04e1",
    "\u04e2\u0003\u0002\u0002\u0002\u04e2\u04e7\u0003\u0002\u0002\u0002\u04e3",
    "\u04e4\u0005\u008cG\u0002\u04e4\u04e5\u0005\u008eH\u0002\u04e5\u04e7",
    "\u0003\u0002\u0002\u0002\u04e6\u04df\u0003\u0002\u0002\u0002\u04e6\u04e3",
    "\u0003\u0002\u0002\u0002\u04e7\u008f\u0003\u0002\u0002\u0002\u04e8\u04e9",
    "\t\u0006\u0002\u0002\u04e9\u0091\u0003\u0002\u0002\u0002\u04ea\u04eb",
    "\t\u0007\u0002\u0002\u04eb\u0093\u0003\u0002\u0002\u0002\u04ec\u04ed",
    "\u0007\u0087\u0002\u0002\u04ed\u0095\u0003\u0002\u0002\u0002\u04ee\u04f2",
    "\u0005\u0098M\u0002\u04ef\u04f2\u0005\u0126\u0094\u0002\u04f0\u04f2",
    "\u0005\u00a8U\u0002\u04f1\u04ee\u0003\u0002\u0002\u0002\u04f1\u04ef",
    "\u0003\u0002\u0002\u0002\u04f1\u04f0\u0003\u0002\u0002\u0002\u04f2\u0097",
    "\u0003\u0002\u0002\u0002\u04f3\u04f8\u0005\u009eP\u0002\u04f4\u04f8",
    "\u0005\u00a4S\u0002\u04f5\u04f8\u0005\u016e\u00b8\u0002\u04f6\u04f8",
    "\u0005\u00fe\u0080\u0002\u04f7\u04f3\u0003\u0002\u0002\u0002\u04f7\u04f4",
    "\u0003\u0002\u0002\u0002\u04f7\u04f5\u0003\u0002\u0002\u0002\u04f7\u04f6",
    "\u0003\u0002\u0002\u0002\u04f8\u0099\u0003\u0002\u0002\u0002\u04f9\u04fb",
    "\u0005\u0096L\u0002\u04fa\u04fc\u0005\u00d6l\u0002\u04fb\u04fa\u0003",
    "\u0002\u0002\u0002\u04fb\u04fc\u0003\u0002\u0002\u0002\u04fc\u0501\u0003",
    "\u0002\u0002\u0002\u04fd\u04fe\u0005\u0096L\u0002\u04fe\u04ff\u0005",
    "\u009aN\u0002\u04ff\u0501\u0003\u0002\u0002\u0002\u0500\u04f9\u0003",
    "\u0002\u0002\u0002\u0500\u04fd\u0003\u0002\u0002\u0002\u0501\u009b\u0003",
    "\u0002\u0002\u0002\u0502\u0504\u0005\u0098M\u0002\u0503\u0505\u0005",
    "\u00d6l\u0002\u0504\u0503\u0003\u0002\u0002\u0002\u0504\u0505\u0003",
    "\u0002\u0002\u0002\u0505\u050a\u0003\u0002\u0002\u0002\u0506\u0507\u0005",
    "\u0098M\u0002\u0507\u0508\u0005\u009cO\u0002\u0508\u050a\u0003\u0002",
    "\u0002\u0002\u0509\u0502\u0003\u0002\u0002\u0002\u0509\u0506\u0003\u0002",
    "\u0002\u0002\u050a\u009d\u0003\u0002\u0002\u0002\u050b\u050d\u0005\f",
    "\u0007\u0002\u050c\u050b\u0003\u0002\u0002\u0002\u050c\u050d\u0003\u0002",
    "\u0002\u0002\u050d\u050e\u0003\u0002\u0002\u0002\u050e\u0523\u0005\u00a0",
    "Q\u0002\u050f\u0510\u0005\f\u0007\u0002\u0510\u0511\u0007E\u0002\u0002",
    "\u0511\u0512\u0005\u0164\u00b3\u0002\u0512\u0523\u0003\u0002\u0002\u0002",
    "\u0513\u0523\u0007\u0013\u0002\u0002\u0514\u0523\u0007\u0014\u0002\u0002",
    "\u0515\u0523\u0007\u0015\u0002\u0002\u0516\u0523\u0007T\u0002\u0002",
    "\u0517\u0523\u0007\u000f\u0002\u0002\u0518\u0523\u0007=\u0002\u0002",
    "\u0519\u0523\u0007.\u0002\u0002\u051a\u0523\u0007/\u0002\u0002\u051b",
    "\u0523\u0007>\u0002\u0002\u051c\u0523\u0007O\u0002\u0002\u051d\u0523",
    "\u0007(\u0002\u0002\u051e\u0523\u0007\u001f\u0002\u0002\u051f\u0523",
    "\u0007R\u0002\u0002\u0520\u0523\u0007\u000e\u0002\u0002\u0521\u0523",
    "\u0005\u00a2R\u0002\u0522\u050c\u0003\u0002\u0002\u0002\u0522\u050f",
    "\u0003\u0002\u0002\u0002\u0522\u0513\u0003\u0002\u0002\u0002\u0522\u0514",
    "\u0003\u0002\u0002\u0002\u0522\u0515\u0003\u0002\u0002\u0002\u0522\u0516",
    "\u0003\u0002\u0002\u0002\u0522\u0517\u0003\u0002\u0002\u0002\u0522\u0518",
    "\u0003\u0002\u0002\u0002\u0522\u0519\u0003\u0002\u0002\u0002\u0522\u051a",
    "\u0003\u0002\u0002\u0002\u0522\u051b\u0003\u0002\u0002\u0002\u0522\u051c",
    "\u0003\u0002\u0002\u0002\u0522\u051d\u0003\u0002\u0002\u0002\u0522\u051e",
    "\u0003\u0002\u0002\u0002\u0522\u051f\u0003\u0002\u0002\u0002\u0522\u0520",
    "\u0003\u0002\u0002\u0002\u0522\u0521\u0003\u0002\u0002\u0002\u0523\u009f",
    "\u0003\u0002\u0002\u0002\u0524\u0529\u0005\u0124\u0093\u0002\u0525\u0529",
    "\u0005\u00a6T\u0002\u0526\u0529\u0005\u0094K\u0002\u0527\u0529\u0005",
    "\u0164\u00b3\u0002\u0528\u0524\u0003\u0002\u0002\u0002\u0528\u0525\u0003",
    "\u0002\u0002\u0002\u0528\u0526\u0003\u0002\u0002\u0002\u0528\u0527\u0003",
    "\u0002\u0002\u0002\u0529\u00a1\u0003\u0002\u0002\u0002\u052a\u052b\u0007",
    "\u001b\u0002\u0002\u052b\u052c\u0007V\u0002\u0002\u052c\u052d\u0005",
    "^0\u0002\u052d\u052e\u0007W\u0002\u0002\u052e\u0534\u0003\u0002\u0002",
    "\u0002\u052f\u0530\u0007\u001b\u0002\u0002\u0530\u0531\u0007V\u0002",
    "\u0002\u0531\u0532\u0007\u000e\u0002\u0002\u0532\u0534\u0007W\u0002",
    "\u0002\u0533\u052a\u0003\u0002\u0002\u0002\u0533\u052f\u0003\u0002\u0002",
    "\u0002\u0534\u00a3\u0003\u0002\u0002\u0002\u0535\u0537\u0005\u012e\u0098",
    "\u0002\u0536\u0538\u0005\u00d6l\u0002\u0537\u0536\u0003\u0002\u0002",
    "\u0002\u0537\u0538\u0003\u0002\u0002\u0002\u0538\u053a\u0003\u0002\u0002",
    "\u0002\u0539\u053b\u0005\f\u0007\u0002\u053a\u0539\u0003\u0002\u0002",
    "\u0002\u053a\u053b\u0003\u0002\u0002\u0002\u053b\u053c\u0003\u0002\u0002",
    "\u0002\u053c\u053d\u0007\u0087\u0002\u0002\u053d\u054e\u0003\u0002\u0002",
    "\u0002\u053e\u053f\u0005\u012e\u0098\u0002\u053f\u0540\u0005\u0164\u00b3",
    "\u0002\u0540\u054e\u0003\u0002\u0002\u0002\u0541\u0542\u0005\u012e\u0098",
    "\u0002\u0542\u0544\u0005\f\u0007\u0002\u0543\u0545\u0007E\u0002\u0002",
    "\u0544\u0543\u0003\u0002\u0002\u0002\u0544\u0545\u0003\u0002\u0002\u0002",
    "\u0545\u0546\u0003\u0002\u0002\u0002\u0546\u0547\u0005\u0164\u00b3\u0002",
    "\u0547\u054e\u0003\u0002\u0002\u0002\u0548\u054a\u0007\"\u0002\u0002",
    "\u0549\u054b\u0005\f\u0007\u0002\u054a\u0549\u0003\u0002\u0002\u0002",
    "\u054a\u054b\u0003\u0002\u0002\u0002\u054b\u054c\u0003\u0002\u0002\u0002",
    "\u054c\u054e\u0007\u0087\u0002\u0002\u054d\u0535\u0003\u0002\u0002\u0002",
    "\u054d\u053e\u0003\u0002\u0002\u0002\u054d\u0541\u0003\u0002\u0002\u0002",
    "\u054d\u0548\u0003\u0002\u0002\u0002\u054e\u00a5\u0003\u0002\u0002\u0002",
    "\u054f\u0550\u0007\u0087\u0002\u0002\u0550\u00a7\u0003\u0002\u0002\u0002",
    "\u0551\u0552\u0005\u00aaV\u0002\u0552\u0554\u0007Z\u0002\u0002\u0553",
    "\u0555\u0005\u00b2Z\u0002\u0554\u0553\u0003\u0002\u0002\u0002\u0554",
    "\u0555\u0003\u0002\u0002\u0002\u0555\u0556\u0003\u0002\u0002\u0002\u0556",
    "\u0557\u0007[\u0002\u0002\u0557\u055f\u0003\u0002\u0002\u0002\u0558",
    "\u0559\u0005\u00aaV\u0002\u0559\u055a\u0007Z\u0002\u0002\u055a\u055b",
    "\u0005\u00b2Z\u0002\u055b\u055c\u0007}\u0002\u0002\u055c\u055d\u0007",
    "[\u0002\u0002\u055d\u055f\u0003\u0002\u0002\u0002\u055e\u0551\u0003",
    "\u0002\u0002\u0002\u055e\u0558\u0003\u0002\u0002\u0002\u055f\u00a9\u0003",
    "\u0002\u0002\u0002\u0560\u0562\u0005\u00aeX\u0002\u0561\u0563\u0005",
    "\u00d6l\u0002\u0562\u0561\u0003\u0002\u0002\u0002\u0562\u0563\u0003",
    "\u0002\u0002\u0002\u0563\u0565\u0003\u0002\u0002\u0002\u0564\u0566\u0007",
    "\u0087\u0002\u0002\u0565\u0564\u0003\u0002\u0002\u0002\u0565\u0566\u0003",
    "\u0002\u0002\u0002\u0566\u0568\u0003\u0002\u0002\u0002\u0567\u0569\u0005",
    "\u00b0Y\u0002\u0568\u0567\u0003\u0002\u0002\u0002\u0568\u0569\u0003",
    "\u0002\u0002\u0002\u0569\u0574\u0003\u0002\u0002\u0002\u056a\u056c\u0005",
    "\u00aeX\u0002\u056b\u056d\u0005\u00d6l\u0002\u056c\u056b\u0003\u0002",
    "\u0002\u0002\u056c\u056d\u0003\u0002\u0002\u0002\u056d\u056e\u0003\u0002",
    "\u0002\u0002\u056e\u056f\u0005\f\u0007\u0002\u056f\u0571\u0007\u0087",
    "\u0002\u0002\u0570\u0572\u0005\u00b0Y\u0002\u0571\u0570\u0003\u0002",
    "\u0002\u0002\u0571\u0572\u0003\u0002\u0002\u0002\u0572\u0574\u0003\u0002",
    "\u0002\u0002\u0573\u0560\u0003\u0002\u0002\u0002\u0573\u056a\u0003\u0002",
    "\u0002\u0002\u0574\u00ab\u0003\u0002\u0002\u0002\u0575\u0577\u0005\u00ae",
    "X\u0002\u0576\u0578\u0005\u00d6l\u0002\u0577\u0576\u0003\u0002\u0002",
    "\u0002\u0577\u0578\u0003\u0002\u0002\u0002\u0578\u0579\u0003\u0002\u0002",
    "\u0002\u0579\u057b\u0007\u0087\u0002\u0002\u057a\u057c\u0005\u00b0Y",
    "\u0002\u057b\u057a\u0003\u0002\u0002\u0002\u057b\u057c\u0003\u0002\u0002",
    "\u0002\u057c\u057d\u0003\u0002\u0002\u0002\u057d\u057e\u0007\u0083\u0002",
    "\u0002\u057e\u00ad\u0003\u0002\u0002\u0002\u057f\u0585\u0007\"\u0002",
    "\u0002\u0580\u0581\u0007\"\u0002\u0002\u0581\u0585\u0007\u0016\u0002",
    "\u0002\u0582\u0583\u0007\"\u0002\u0002\u0583\u0585\u0007C\u0002\u0002",
    "\u0584\u057f\u0003\u0002\u0002\u0002\u0584\u0580\u0003\u0002\u0002\u0002",
    "\u0584\u0582\u0003\u0002\u0002\u0002\u0585\u00af\u0003\u0002\u0002\u0002",
    "\u0586\u0587\u0007\u0081\u0002\u0002\u0587\u0588\u0005\u009aN\u0002",
    "\u0588\u00b1\u0003\u0002\u0002\u0002\u0589\u058a\bZ\u0001\u0002\u058a",
    "\u058b\u0005\u00b4[\u0002\u058b\u0591\u0003\u0002\u0002\u0002\u058c",
    "\u058d\f\u0003\u0002\u0002\u058d\u058e\u0007}\u0002\u0002\u058e\u0590",
    "\u0005\u00b4[\u0002\u058f\u058c\u0003\u0002\u0002\u0002\u0590\u0593",
    "\u0003\u0002\u0002\u0002\u0591\u058f\u0003\u0002\u0002\u0002\u0591\u0592",
    "\u0003\u0002\u0002\u0002\u0592\u00b3\u0003\u0002\u0002\u0002\u0593\u0591",
    "\u0003\u0002\u0002\u0002\u0594\u059a\u0005\u00b6\\\u0002\u0595\u0596",
    "\u0005\u00b6\\\u0002\u0596\u0597\u0007f\u0002\u0002\u0597\u0598\u0005",
    "`1\u0002\u0598\u059a\u0003\u0002\u0002\u0002\u0599\u0594\u0003\u0002",
    "\u0002\u0002\u0599\u0595\u0003\u0002\u0002\u0002\u059a\u00b5\u0003\u0002",
    "\u0002\u0002\u059b\u059c\u0007\u0087\u0002\u0002\u059c\u00b7\u0003\u0002",
    "\u0002\u0002\u059d\u05a0\u0005\u00ba^\u0002\u059e\u05a0\u0005\u00c8",
    "e\u0002\u059f\u059d\u0003\u0002\u0002\u0002\u059f\u059e\u0003\u0002",
    "\u0002\u0002\u05a0\u00b9\u0003\u0002\u0002\u0002\u05a1\u05a2\u0007\u0087",
    "\u0002\u0002\u05a2\u00bb\u0003\u0002\u0002\u0002\u05a3\u05a6\u0005\u00be",
    "`\u0002\u05a4\u05a6\u0005\u00c4c\u0002\u05a5\u05a3\u0003\u0002\u0002",
    "\u0002\u05a5\u05a4\u0003\u0002\u0002\u0002\u05a6\u00bd\u0003\u0002\u0002",
    "\u0002\u05a7\u05aa\u0005\u00c0a\u0002\u05a8\u05aa\u0005\u00c2b\u0002",
    "\u05a9\u05a7\u0003\u0002\u0002\u0002\u05a9\u05a8\u0003\u0002\u0002\u0002",
    "\u05aa\u00bf\u0003\u0002\u0002\u0002\u05ab\u05ad\u0007-\u0002\u0002",
    "\u05ac\u05ab\u0003\u0002\u0002\u0002\u05ac\u05ad\u0003\u0002\u0002\u0002",
    "\u05ad\u05ae\u0003\u0002\u0002\u0002\u05ae\u05af\u00071\u0002\u0002",
    "\u05af\u05b0\u0007\u0087\u0002\u0002\u05b0\u05b1\u0007Z\u0002\u0002",
    "\u05b1\u05b2\u0005\u00c6d\u0002\u05b2\u05b3\u0007[\u0002\u0002\u05b3",
    "\u00c1\u0003\u0002\u0002\u0002\u05b4\u05b6\u0007-\u0002\u0002\u05b5",
    "\u05b4\u0003\u0002\u0002\u0002\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6",
    "\u05b7\u0003\u0002\u0002\u0002\u05b7\u05b8\u00071\u0002\u0002\u05b8",
    "\u05b9\u0005\u00ba^\u0002\u05b9\u05ba\u0007Z\u0002\u0002\u05ba\u05bb",
    "\u0005\u00c6d\u0002\u05bb\u05bc\u0007[\u0002\u0002\u05bc\u00c3\u0003",
    "\u0002\u0002\u0002\u05bd\u05bf\u0007-\u0002\u0002\u05be\u05bd\u0003",
    "\u0002\u0002\u0002\u05be\u05bf\u0003\u0002\u0002\u0002\u05bf\u05c0\u0003",
    "\u0002\u0002\u0002\u05c0\u05c1\u00071\u0002\u0002\u05c1\u05c2\u0007",
    "Z\u0002\u0002\u05c2\u05c3\u0005\u00c6d\u0002\u05c3\u05c4\u0007[\u0002",
    "\u0002\u05c4\u00c5\u0003\u0002\u0002\u0002\u05c5\u05c7\u0005|?\u0002",
    "\u05c6\u05c5\u0003\u0002\u0002\u0002\u05c6\u05c7\u0003\u0002\u0002\u0002",
    "\u05c7\u00c7\u0003\u0002\u0002\u0002\u05c8\u05c9\u0007\u0087\u0002\u0002",
    "\u05c9\u00c9\u0003\u0002\u0002\u0002\u05ca\u05cb\u00071\u0002\u0002",
    "\u05cb\u05cc\u0007\u0087\u0002\u0002\u05cc\u05cd\u0007f\u0002\u0002",
    "\u05cd\u05ce\u0005\u00ccg\u0002\u05ce\u05cf\u0007\u0083\u0002\u0002",
    "\u05cf\u00cb\u0003\u0002\u0002\u0002\u05d0\u05d2\u0005\f\u0007\u0002",
    "\u05d1\u05d0\u0003\u0002\u0002\u0002\u05d1\u05d2\u0003\u0002\u0002\u0002",
    "\u05d2\u05d3\u0003\u0002\u0002\u0002\u05d3\u05d4\u0005\u00b8]\u0002",
    "\u05d4\u00cd\u0003\u0002\u0002\u0002\u05d5\u05d7\u0007P\u0002\u0002",
    "\u05d6\u05d8\u0007M\u0002\u0002\u05d7\u05d6\u0003\u0002\u0002\u0002",
    "\u05d7\u05d8\u0003\u0002\u0002\u0002\u05d8\u05d9\u0003\u0002\u0002\u0002",
    "\u05d9\u05da\u0005\f\u0007\u0002\u05da\u05db\u0005\b\u0005\u0002\u05db",
    "\u05dc\u0007\u0083\u0002\u0002\u05dc\u05e3\u0003\u0002\u0002\u0002\u05dd",
    "\u05de\u0007P\u0002\u0002\u05de\u05df\u0007\u0082\u0002\u0002\u05df",
    "\u05e0\u0005\b\u0005\u0002\u05e0\u05e1\u0007\u0083\u0002\u0002\u05e1",
    "\u05e3\u0003\u0002\u0002\u0002\u05e2\u05d5\u0003\u0002\u0002\u0002\u05e2",
    "\u05dd\u0003\u0002\u0002\u0002\u05e3\u00cf\u0003\u0002\u0002\u0002\u05e4",
    "\u05e6\u0005\u00d6l\u0002\u05e5\u05e4\u0003\u0002\u0002\u0002\u05e5",
    "\u05e6\u0003\u0002\u0002\u0002\u05e6\u05e7\u0003\u0002\u0002\u0002\u05e7",
    "\u05e8\u0007P\u0002\u0002\u05e8\u05ea\u00071\u0002\u0002\u05e9\u05eb",
    "\u0005\f\u0007\u0002\u05ea\u05e9\u0003\u0002\u0002\u0002\u05ea\u05eb",
    "\u0003\u0002\u0002\u0002\u05eb\u05ec\u0003\u0002\u0002\u0002\u05ec\u05ed",
    "\u0005\u00b8]\u0002\u05ed\u05ee\u0007\u0083\u0002\u0002\u05ee\u00d1",
    "\u0003\u0002\u0002\u0002\u05ef\u05f0\u0007\r\u0002\u0002\u05f0\u05f1",
    "\u0007V\u0002\u0002\u05f1\u05f2\u0007\u0090\u0002\u0002\u05f2\u05f3",
    "\u0007W\u0002\u0002\u05f3\u05f4\u0007\u0083\u0002\u0002\u05f4\u00d3",
    "\u0003\u0002\u0002\u0002\u05f5\u05f6\u0007%\u0002\u0002\u05f6\u05f7",
    "\u0007\u0090\u0002\u0002\u05f7\u05f9\u0007Z\u0002\u0002\u05f8\u05fa",
    "\u0005|?\u0002\u05f9\u05f8\u0003\u0002\u0002\u0002\u05f9\u05fa\u0003",
    "\u0002\u0002\u0002\u05fa\u05fb\u0003\u0002\u0002\u0002\u05fb\u0600\u0007",
    "[\u0002\u0002\u05fc\u05fd\u0007%\u0002\u0002\u05fd\u05fe\u0007\u0090",
    "\u0002\u0002\u05fe\u0600\u0005~@\u0002\u05ff\u05f5\u0003\u0002\u0002",
    "\u0002\u05ff\u05fc\u0003\u0002\u0002\u0002\u0600\u00d5\u0003\u0002\u0002",
    "\u0002\u0601\u0602\bl\u0001\u0002\u0602\u0603\u0005\u00d8m\u0002\u0603",
    "\u0608\u0003\u0002\u0002\u0002\u0604\u0605\f\u0003\u0002\u0002\u0605",
    "\u0607\u0005\u00d8m\u0002\u0606\u0604\u0003\u0002\u0002\u0002\u0607",
    "\u060a\u0003\u0002\u0002\u0002\u0608\u0606\u0003\u0002\u0002\u0002\u0608",
    "\u0609\u0003\u0002\u0002\u0002\u0609\u00d7\u0003\u0002\u0002\u0002\u060a",
    "\u0608\u0003\u0002\u0002\u0002\u060b\u060c\u0007X\u0002\u0002\u060c",
    "\u060d\u0007X\u0002\u0002\u060d\u060e\u0005\u00dco\u0002\u060e\u060f",
    "\u0007Y\u0002\u0002\u060f\u0610\u0007Y\u0002\u0002\u0610\u0613\u0003",
    "\u0002\u0002\u0002\u0611\u0613\u0005\u00dan\u0002\u0612\u060b\u0003",
    "\u0002\u0002\u0002\u0612\u0611\u0003\u0002\u0002\u0002\u0613\u00d9\u0003",
    "\u0002\u0002\u0002\u0614\u0615\u0007\u000b\u0002\u0002\u0615\u0616\u0007",
    "V\u0002\u0002\u0616\u0618\u0005\u0104\u0083\u0002\u0617\u0619\u0007",
    "\u0086\u0002\u0002\u0618\u0617\u0003\u0002\u0002\u0002\u0618\u0619\u0003",
    "\u0002\u0002\u0002\u0619\u061a\u0003\u0002\u0002\u0002\u061a\u061b\u0007",
    "W\u0002\u0002\u061b\u0625\u0003\u0002\u0002\u0002\u061c\u061d\u0007",
    "\u000b\u0002\u0002\u061d\u061e\u0007V\u0002\u0002\u061e\u0620\u0005",
    "`1\u0002\u061f\u0621\u0007\u0086\u0002\u0002\u0620\u061f\u0003\u0002",
    "\u0002\u0002\u0620\u0621\u0003\u0002\u0002\u0002\u0621\u0622\u0003\u0002",
    "\u0002\u0002\u0622\u0623\u0007W\u0002\u0002\u0623\u0625\u0003\u0002",
    "\u0002\u0002\u0624\u0614\u0003\u0002\u0002\u0002\u0624\u061c\u0003\u0002",
    "\u0002\u0002\u0625\u00db\u0003\u0002\u0002\u0002\u0626\u0628\bo\u0001",
    "\u0002\u0627\u0629\u0005\u00dep\u0002\u0628\u0627\u0003\u0002\u0002",
    "\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0629\u062e\u0003\u0002\u0002",
    "\u0002\u062a\u062b\u0005\u00dep\u0002\u062b\u062c\u0007\u0086\u0002",
    "\u0002\u062c\u062e\u0003\u0002\u0002\u0002\u062d\u0626\u0003\u0002\u0002",
    "\u0002\u062d\u062a\u0003\u0002\u0002\u0002\u062e\u063b\u0003\u0002\u0002",
    "\u0002\u062f\u0630\f\u0005\u0002\u0002\u0630\u0632\u0007}\u0002\u0002",
    "\u0631\u0633\u0005\u00dep\u0002\u0632\u0631\u0003\u0002\u0002\u0002",
    "\u0632\u0633\u0003\u0002\u0002\u0002\u0633\u063a\u0003\u0002\u0002\u0002",
    "\u0634\u0635\f\u0003\u0002\u0002\u0635\u0636\u0007}\u0002\u0002\u0636",
    "\u0637\u0005\u00dep\u0002\u0637\u0638\u0007\u0086\u0002\u0002\u0638",
    "\u063a\u0003\u0002\u0002\u0002\u0639\u062f\u0003\u0002\u0002\u0002\u0639",
    "\u0634\u0003\u0002\u0002\u0002\u063a\u063d\u0003\u0002\u0002\u0002\u063b",
    "\u0639\u0003\u0002\u0002\u0002\u063b\u063c\u0003\u0002\u0002\u0002\u063c",
    "\u00dd\u0003\u0002\u0002\u0002\u063d\u063b\u0003\u0002\u0002\u0002\u063e",
    "\u0640\u0005\u00e0q\u0002\u063f\u0641\u0005\u00e6t\u0002\u0640\u063f",
    "\u0003\u0002\u0002\u0002\u0640\u0641\u0003\u0002\u0002\u0002\u0641\u00df",
    "\u0003\u0002\u0002\u0002\u0642\u0645\u0007\u0087\u0002\u0002\u0643\u0645",
    "\u0005\u00e2r\u0002\u0644\u0642\u0003\u0002\u0002\u0002\u0644\u0643",
    "\u0003\u0002\u0002\u0002\u0645\u00e1\u0003\u0002\u0002\u0002\u0646\u0647",
    "\u0005\u00e4s\u0002\u0647\u0648\u0007\u0082\u0002\u0002\u0648\u0649",
    "\u0007\u0087\u0002\u0002\u0649\u00e3\u0003\u0002\u0002\u0002\u064a\u064b",
    "\u0007\u0087\u0002\u0002\u064b\u00e5\u0003\u0002\u0002\u0002\u064c\u064d",
    "\u0007V\u0002\u0002\u064d\u064e\u0005\u00e8u\u0002\u064e\u064f\u0007",
    "W\u0002\u0002\u064f\u00e7\u0003\u0002\u0002\u0002\u0650\u0652\bu\u0001",
    "\u0002\u0651\u0653\u0005\u00eav\u0002\u0652\u0651\u0003\u0002\u0002",
    "\u0002\u0652\u0653\u0003\u0002\u0002\u0002\u0653\u0658\u0003\u0002\u0002",
    "\u0002\u0654\u0655\f\u0003\u0002\u0002\u0655\u0657\u0005\u00eav\u0002",
    "\u0656\u0654\u0003\u0002\u0002\u0002\u0657\u065a\u0003\u0002\u0002\u0002",
    "\u0658\u0656\u0003\u0002\u0002\u0002\u0658\u0659\u0003\u0002\u0002\u0002",
    "\u0659\u00e9\u0003\u0002\u0002\u0002\u065a\u0658\u0003\u0002\u0002\u0002",
    "\u065b\u065c\u0007V\u0002\u0002\u065c\u065d\u0005\u00e8u\u0002\u065d",
    "\u065e\u0007W\u0002\u0002\u065e\u0668\u0003\u0002\u0002\u0002\u065f",
    "\u0660\u0007X\u0002\u0002\u0660\u0661\u0005\u00e8u\u0002\u0661\u0662",
    "\u0007Y\u0002\u0002\u0662\u0668\u0003\u0002\u0002\u0002\u0663\u0664",
    "\u0007Z\u0002\u0002\u0664\u0665\u0005\u00e8u\u0002\u0665\u0666\u0007",
    "[\u0002\u0002\u0666\u0668\u0003\u0002\u0002\u0002\u0667\u065b\u0003",
    "\u0002\u0002\u0002\u0667\u065f\u0003\u0002\u0002\u0002\u0667\u0663\u0003",
    "\u0002\u0002\u0002\u0668\u00eb\u0003\u0002\u0002\u0002\u0669\u066a\b",
    "w\u0001\u0002\u066a\u066b\u0005\u00eex\u0002\u066b\u0671\u0003\u0002",
    "\u0002\u0002\u066c\u066d\f\u0003\u0002\u0002\u066d\u066e\u0007}\u0002",
    "\u0002\u066e\u0670\u0005\u00eex\u0002\u066f\u066c\u0003\u0002\u0002",
    "\u0002\u0670\u0673\u0003\u0002\u0002\u0002\u0671\u066f\u0003\u0002\u0002",
    "\u0002\u0671\u0672\u0003\u0002\u0002\u0002\u0672\u00ed\u0003\u0002\u0002",
    "\u0002\u0673\u0671\u0003\u0002\u0002\u0002\u0674\u0676\u0005\u00f0y",
    "\u0002\u0675\u0677\u0005\u011a\u008e\u0002\u0676\u0675\u0003\u0002\u0002",
    "\u0002\u0676\u0677\u0003\u0002\u0002\u0002\u0677\u00ef\u0003\u0002\u0002",
    "\u0002\u0678\u067e\u0005\u00f2z\u0002\u0679\u067a\u0005\u00f4{\u0002",
    "\u067a\u067b\u0005\u00f6|\u0002\u067b\u067c\u0005\u00f8}\u0002\u067c",
    "\u067e\u0003\u0002\u0002\u0002\u067d\u0678\u0003\u0002\u0002\u0002\u067d",
    "\u0679\u0003\u0002\u0002\u0002\u067e\u00f1\u0003\u0002\u0002\u0002\u067f",
    "\u0684\u0005\u00f4{\u0002\u0680\u0681\u0005\u00fa~\u0002\u0681\u0682",
    "\u0005\u00f2z\u0002\u0682\u0684\u0003\u0002\u0002\u0002\u0683\u067f",
    "\u0003\u0002\u0002\u0002\u0683\u0680\u0003\u0002\u0002\u0002\u0684\u00f3",
    "\u0003\u0002\u0002\u0002\u0685\u0686\b{\u0001\u0002\u0686\u0688\u0005",
    "\u0102\u0082\u0002\u0687\u0689\u0005\u00d6l\u0002\u0688\u0687\u0003",
    "\u0002\u0002\u0002\u0688\u0689\u0003\u0002\u0002\u0002\u0689\u068f\u0003",
    "\u0002\u0002\u0002\u068a\u068b\u0007V\u0002\u0002\u068b\u068c\u0005",
    "\u00f2z\u0002\u068c\u068d\u0007W\u0002\u0002\u068d\u068f\u0003\u0002",
    "\u0002\u0002\u068e\u0685\u0003\u0002\u0002\u0002\u068e\u068a\u0003\u0002",
    "\u0002\u0002\u068f\u069d\u0003\u0002\u0002\u0002\u0690\u0691\f\u0005",
    "\u0002\u0002\u0691\u069c\u0005\u00f6|\u0002\u0692\u0693\f\u0004\u0002",
    "\u0002\u0693\u0695\u0007X\u0002\u0002\u0694\u0696\u0005`1\u0002\u0695",
    "\u0694\u0003\u0002\u0002\u0002\u0695\u0696\u0003\u0002\u0002\u0002\u0696",
    "\u0697\u0003\u0002\u0002\u0002\u0697\u0699\u0007Y\u0002\u0002\u0698",
    "\u069a\u0005\u00d6l\u0002\u0699\u0698\u0003\u0002\u0002\u0002\u0699",
    "\u069a\u0003\u0002\u0002\u0002\u069a\u069c\u0003\u0002\u0002\u0002\u069b",
    "\u0690\u0003\u0002\u0002\u0002\u069b\u0692\u0003\u0002\u0002\u0002\u069c",
    "\u069f\u0003\u0002\u0002\u0002\u069d\u069b\u0003\u0002\u0002\u0002\u069d",
    "\u069e\u0003\u0002\u0002\u0002\u069e\u00f5\u0003\u0002\u0002\u0002\u069f",
    "\u069d\u0003\u0002\u0002\u0002\u06a0\u06a1\u0007V\u0002\u0002\u06a1",
    "\u06a2\u0005\u0110\u0089\u0002\u06a2\u06a4\u0007W\u0002\u0002\u06a3",
    "\u06a5\u0005\u00fc\u007f\u0002\u06a4\u06a3\u0003\u0002\u0002\u0002\u06a4",
    "\u06a5\u0003\u0002\u0002\u0002\u06a5\u06a7\u0003\u0002\u0002\u0002\u06a6",
    "\u06a8\u0005\u0100\u0081\u0002\u06a7\u06a6\u0003\u0002\u0002\u0002\u06a7",
    "\u06a8\u0003\u0002\u0002\u0002\u06a8\u06aa\u0003\u0002\u0002\u0002\u06a9",
    "\u06ab\u0005\u0180\u00c1\u0002\u06aa\u06a9\u0003\u0002\u0002\u0002\u06aa",
    "\u06ab\u0003\u0002\u0002\u0002\u06ab\u06ad\u0003\u0002\u0002\u0002\u06ac",
    "\u06ae\u0005\u00d6l\u0002\u06ad\u06ac\u0003\u0002\u0002\u0002\u06ad",
    "\u06ae\u0003\u0002\u0002\u0002\u06ae\u00f7\u0003\u0002\u0002\u0002\u06af",
    "\u06b0\u0007\u007f\u0002\u0002\u06b0\u06b2\u0005\u009cO\u0002\u06b1",
    "\u06b3\u0005\u0106\u0084\u0002\u06b2\u06b1\u0003\u0002\u0002\u0002\u06b2",
    "\u06b3\u0003\u0002\u0002\u0002\u06b3\u00f9\u0003\u0002\u0002\u0002\u06b4",
    "\u06b6\u0007^\u0002\u0002\u06b5\u06b7\u0005\u00d6l\u0002\u06b6\u06b5",
    "\u0003\u0002\u0002\u0002\u06b6\u06b7\u0003\u0002\u0002\u0002\u06b7\u06b9",
    "\u0003\u0002\u0002\u0002\u06b8\u06ba\u0005\u00fc\u007f\u0002\u06b9\u06b8",
    "\u0003\u0002\u0002\u0002\u06b9\u06ba\u0003\u0002\u0002\u0002\u06ba\u06cc",
    "\u0003\u0002\u0002\u0002\u06bb\u06bd\u0007b\u0002\u0002\u06bc\u06be",
    "\u0005\u00d6l\u0002\u06bd\u06bc\u0003\u0002\u0002\u0002\u06bd\u06be",
    "\u0003\u0002\u0002\u0002\u06be\u06cc\u0003\u0002\u0002\u0002\u06bf\u06c1",
    "\u0007\u0005\u0002\u0002\u06c0\u06c2\u0005\u00d6l\u0002\u06c1\u06c0",
    "\u0003\u0002\u0002\u0002\u06c1\u06c2\u0003\u0002\u0002\u0002\u06c2\u06cc",
    "\u0003\u0002\u0002\u0002\u06c3\u06c4\u0005\f\u0007\u0002\u06c4\u06c6",
    "\u0007^\u0002\u0002\u06c5\u06c7\u0005\u00d6l\u0002\u06c6\u06c5\u0003",
    "\u0002\u0002\u0002\u06c6\u06c7\u0003\u0002\u0002\u0002\u06c7\u06c9\u0003",
    "\u0002\u0002\u0002\u06c8\u06ca\u0005\u00fc\u007f\u0002\u06c9\u06c8\u0003",
    "\u0002\u0002\u0002\u06c9\u06ca\u0003\u0002\u0002\u0002\u06ca\u06cc\u0003",
    "\u0002\u0002\u0002\u06cb\u06b4\u0003\u0002\u0002\u0002\u06cb\u06bb\u0003",
    "\u0002\u0002\u0002\u06cb\u06bf\u0003\u0002\u0002\u0002\u06cb\u06c3\u0003",
    "\u0002\u0002\u0002\u06cc\u00fb\u0003\u0002\u0002\u0002\u06cd\u06cf\u0005",
    "\u00fe\u0080\u0002\u06ce\u06d0\u0005\u00fc\u007f\u0002\u06cf\u06ce\u0003",
    "\u0002\u0002\u0002\u06cf\u06d0\u0003\u0002\u0002\u0002\u06d0\u00fd\u0003",
    "\u0002\u0002\u0002\u06d1\u06d2\t\b\u0002\u0002\u06d2\u00ff\u0003\u0002",
    "\u0002\u0002\u06d3\u06d4\t\t\u0002\u0002\u06d4\u0101\u0003\u0002\u0002",
    "\u0002\u06d5\u06d7\u0007\u0086\u0002\u0002\u06d6\u06d5\u0003\u0002\u0002",
    "\u0002\u06d6\u06d7\u0003\u0002\u0002\u0002\u06d7\u06d8\u0003\u0002\u0002",
    "\u0002\u06d8\u06d9\u0005\u0006\u0004\u0002\u06d9\u0103\u0003\u0002\u0002",
    "\u0002\u06da\u06dc\u0005\u009aN\u0002\u06db\u06dd\u0005\u0106\u0084",
    "\u0002\u06dc\u06db\u0003\u0002\u0002\u0002\u06dc\u06dd\u0003\u0002\u0002",
    "\u0002\u06dd\u0105\u0003\u0002\u0002\u0002\u06de\u06e7\u0005\u0108\u0085",
    "\u0002\u06df\u06e1\u0005\u010a\u0086\u0002\u06e0\u06df\u0003\u0002\u0002",
    "\u0002\u06e0\u06e1\u0003\u0002\u0002\u0002\u06e1\u06e2\u0003\u0002\u0002",
    "\u0002\u06e2\u06e3\u0005\u00f6|\u0002\u06e3\u06e4\u0005\u00f8}\u0002",
    "\u06e4\u06e7\u0003\u0002\u0002\u0002\u06e5\u06e7\u0005\u010c\u0087\u0002",
    "\u06e6\u06de\u0003\u0002\u0002\u0002\u06e6\u06e0\u0003\u0002\u0002\u0002",
    "\u06e6\u06e5\u0003\u0002\u0002\u0002\u06e7\u0107\u0003\u0002\u0002\u0002",
    "\u06e8\u06ee\u0005\u010a\u0086\u0002\u06e9\u06eb\u0005\u00fa~\u0002",
    "\u06ea\u06ec\u0005\u0108\u0085\u0002\u06eb\u06ea\u0003\u0002\u0002\u0002",
    "\u06eb\u06ec\u0003\u0002\u0002\u0002\u06ec\u06ee\u0003\u0002\u0002\u0002",
    "\u06ed\u06e8\u0003\u0002\u0002\u0002\u06ed\u06e9\u0003\u0002\u0002\u0002",
    "\u06ee\u0109\u0003\u0002\u0002\u0002\u06ef\u06f0\b\u0086\u0001\u0002",
    "\u06f0\u06fe\u0005\u00f6|\u0002\u06f1\u06f3\u0007X\u0002\u0002\u06f2",
    "\u06f4\u0005`1\u0002\u06f3\u06f2\u0003\u0002\u0002\u0002\u06f3\u06f4",
    "\u0003\u0002\u0002\u0002\u06f4\u06f5\u0003\u0002\u0002\u0002\u06f5\u06f7",
    "\u0007Y\u0002\u0002\u06f6\u06f8\u0005\u00d6l\u0002\u06f7\u06f6\u0003",
    "\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06fe\u0003",
    "\u0002\u0002\u0002\u06f9\u06fa\u0007V\u0002\u0002\u06fa\u06fb\u0005",
    "\u0108\u0085\u0002\u06fb\u06fc\u0007W\u0002\u0002\u06fc\u06fe\u0003",
    "\u0002\u0002\u0002\u06fd\u06ef\u0003\u0002\u0002\u0002\u06fd\u06f1\u0003",
    "\u0002\u0002\u0002\u06fd\u06f9\u0003\u0002\u0002\u0002\u06fe\u070c\u0003",
    "\u0002\u0002\u0002\u06ff\u0700\f\u0007\u0002\u0002\u0700\u070b\u0005",
    "\u00f6|\u0002\u0701\u0702\f\u0005\u0002\u0002\u0702\u0704\u0007X\u0002",
    "\u0002\u0703\u0705\u0005`1\u0002\u0704\u0703\u0003\u0002\u0002\u0002",
    "\u0704\u0705\u0003\u0002\u0002\u0002\u0705\u0706\u0003\u0002\u0002\u0002",
    "\u0706\u0708\u0007Y\u0002\u0002\u0707\u0709\u0005\u00d6l\u0002\u0708",
    "\u0707\u0003\u0002\u0002\u0002\u0708\u0709\u0003\u0002\u0002\u0002\u0709",
    "\u070b\u0003\u0002\u0002\u0002\u070a\u06ff\u0003\u0002\u0002\u0002\u070a",
    "\u0701\u0003\u0002\u0002\u0002\u070b\u070e\u0003\u0002\u0002\u0002\u070c",
    "\u070a\u0003\u0002\u0002\u0002\u070c\u070d\u0003\u0002\u0002\u0002\u070d",
    "\u010b\u0003\u0002\u0002\u0002\u070e\u070c\u0003\u0002\u0002\u0002\u070f",
    "\u0714\u0005\u010e\u0088\u0002\u0710\u0711\u0005\u00fa~\u0002\u0711",
    "\u0712\u0005\u010c\u0087\u0002\u0712\u0714\u0003\u0002\u0002\u0002\u0713",
    "\u070f\u0003\u0002\u0002\u0002\u0713\u0710\u0003\u0002\u0002\u0002\u0714",
    "\u010d\u0003\u0002\u0002\u0002\u0715\u0716\b\u0088\u0001\u0002\u0716",
    "\u0717\u0007\u0086\u0002\u0002\u0717\u0725\u0003\u0002\u0002\u0002\u0718",
    "\u0719\f\u0005\u0002\u0002\u0719\u0724\u0005\u00f6|\u0002\u071a\u071b",
    "\f\u0004\u0002\u0002\u071b\u071d\u0007X\u0002\u0002\u071c\u071e\u0005",
    "`1\u0002\u071d\u071c\u0003\u0002\u0002\u0002\u071d\u071e\u0003\u0002",
    "\u0002\u0002\u071e\u071f\u0003\u0002\u0002\u0002\u071f\u0721\u0007Y",
    "\u0002\u0002\u0720\u0722\u0005\u00d6l\u0002\u0721\u0720\u0003\u0002",
    "\u0002\u0002\u0721\u0722\u0003\u0002\u0002\u0002\u0722\u0724\u0003\u0002",
    "\u0002\u0002\u0723\u0718\u0003\u0002\u0002\u0002\u0723\u071a\u0003\u0002",
    "\u0002\u0002\u0724\u0727\u0003\u0002\u0002\u0002\u0725\u0723\u0003\u0002",
    "\u0002\u0002\u0725\u0726\u0003\u0002\u0002\u0002\u0726\u010f\u0003\u0002",
    "\u0002\u0002\u0727\u0725\u0003\u0002\u0002\u0002\u0728\u072a\u0005\u0112",
    "\u008a\u0002\u0729\u0728\u0003\u0002\u0002\u0002\u0729\u072a\u0003\u0002",
    "\u0002\u0002\u072a\u072c\u0003\u0002\u0002\u0002\u072b\u072d\u0007\u0086",
    "\u0002\u0002\u072c\u072b\u0003\u0002\u0002\u0002\u072c\u072d\u0003\u0002",
    "\u0002\u0002\u072d\u0733\u0003\u0002\u0002\u0002\u072e\u072f\u0005\u0112",
    "\u008a\u0002\u072f\u0730\u0007}\u0002\u0002\u0730\u0731\u0007\u0086",
    "\u0002\u0002\u0731\u0733\u0003\u0002\u0002\u0002\u0732\u0729\u0003\u0002",
    "\u0002\u0002\u0732\u072e\u0003\u0002\u0002\u0002\u0733\u0111\u0003\u0002",
    "\u0002\u0002\u0734\u0735\b\u008a\u0001\u0002\u0735\u0736\u0005\u0114",
    "\u008b\u0002\u0736\u073c\u0003\u0002\u0002\u0002\u0737\u0738\f\u0003",
    "\u0002\u0002\u0738\u0739\u0007}\u0002\u0002\u0739\u073b\u0005\u0114",
    "\u008b\u0002\u073a\u0737\u0003\u0002\u0002\u0002\u073b\u073e\u0003\u0002",
    "\u0002\u0002\u073c\u073a\u0003\u0002\u0002\u0002\u073c\u073d\u0003\u0002",
    "\u0002\u0002\u073d\u0113\u0003\u0002\u0002\u0002\u073e\u073c\u0003\u0002",
    "\u0002\u0002\u073f\u0741\u0005\u00d6l\u0002\u0740\u073f\u0003\u0002",
    "\u0002\u0002\u0740\u0741\u0003\u0002\u0002\u0002\u0741\u0742\u0003\u0002",
    "\u0002\u0002\u0742\u0743\u0005\u008eH\u0002\u0743\u0744\u0005\u00f0",
    "y\u0002\u0744\u075f\u0003\u0002\u0002\u0002\u0745\u0747\u0005\u00d6",
    "l\u0002\u0746\u0745\u0003\u0002\u0002\u0002\u0746\u0747\u0003\u0002",
    "\u0002\u0002\u0747\u0748\u0003\u0002\u0002\u0002\u0748\u0749\u0005\u008e",
    "H\u0002\u0749\u074a\u0005\u00f0y\u0002\u074a\u074b\u0007f\u0002\u0002",
    "\u074b\u074c\u0005\u011e\u0090\u0002\u074c\u075f\u0003\u0002\u0002\u0002",
    "\u074d\u074f\u0005\u00d6l\u0002\u074e\u074d\u0003\u0002\u0002\u0002",
    "\u074e\u074f\u0003\u0002\u0002\u0002\u074f\u0750\u0003\u0002\u0002\u0002",
    "\u0750\u0752\u0005\u008eH\u0002\u0751\u0753\u0005\u0106\u0084\u0002",
    "\u0752\u0751\u0003\u0002\u0002\u0002\u0752\u0753\u0003\u0002\u0002\u0002",
    "\u0753\u075f\u0003\u0002\u0002\u0002\u0754\u0756\u0005\u00d6l\u0002",
    "\u0755\u0754\u0003\u0002\u0002\u0002\u0755\u0756\u0003\u0002\u0002\u0002",
    "\u0756\u0757\u0003\u0002\u0002\u0002\u0757\u0759\u0005\u008eH\u0002",
    "\u0758\u075a\u0005\u0106\u0084\u0002\u0759\u0758\u0003\u0002\u0002\u0002",
    "\u0759\u075a\u0003\u0002\u0002\u0002\u075a\u075b\u0003\u0002\u0002\u0002",
    "\u075b\u075c\u0007f\u0002\u0002\u075c\u075d\u0005\u011e\u0090\u0002",
    "\u075d\u075f\u0003\u0002\u0002\u0002\u075e\u0740\u0003\u0002\u0002\u0002",
    "\u075e\u0746\u0003\u0002\u0002\u0002\u075e\u074e\u0003\u0002\u0002\u0002",
    "\u075e\u0755\u0003\u0002\u0002\u0002\u075f\u0115\u0003\u0002\u0002\u0002",
    "\u0760\u0762\u0005\u00d6l\u0002\u0761\u0760\u0003\u0002\u0002\u0002",
    "\u0761\u0762\u0003\u0002\u0002\u0002\u0762\u0764\u0003\u0002\u0002\u0002",
    "\u0763\u0765\u0005\u008eH\u0002\u0764\u0763\u0003\u0002\u0002\u0002",
    "\u0764\u0765\u0003\u0002\u0002\u0002\u0765\u0766\u0003\u0002\u0002\u0002",
    "\u0766\u0768\u0005\u00f0y\u0002\u0767\u0769\u0005\u0138\u009d\u0002",
    "\u0768\u0767\u0003\u0002\u0002\u0002\u0768\u0769\u0003\u0002\u0002\u0002",
    "\u0769\u076a\u0003\u0002\u0002\u0002\u076a\u076b\u0005\u0118\u008d\u0002",
    "\u076b\u0117\u0003\u0002\u0002\u0002\u076c\u076e\u0005\u0150\u00a9\u0002",
    "\u076d\u076c\u0003\u0002\u0002\u0002\u076d\u076e\u0003\u0002\u0002\u0002",
    "\u076e\u076f\u0003\u0002\u0002\u0002\u076f\u0778\u0005h5\u0002\u0770",
    "\u0778\u0005\u0176\u00bc\u0002\u0771\u0772\u0007f\u0002\u0002\u0772",
    "\u0773\u0007\u001c\u0002\u0002\u0773\u0778\u0007\u0083\u0002\u0002\u0774",
    "\u0775\u0007f\u0002\u0002\u0775\u0776\u0007\u001d\u0002\u0002\u0776",
    "\u0778\u0007\u0083\u0002\u0002\u0777\u076d\u0003\u0002\u0002\u0002\u0777",
    "\u0770\u0003\u0002\u0002\u0002\u0777\u0771\u0003\u0002\u0002\u0002\u0777",
    "\u0774\u0003\u0002\u0002\u0002\u0778\u0119\u0003\u0002\u0002\u0002\u0779",
    "\u077f\u0005\u011c\u008f\u0002\u077a\u077b\u0007V\u0002\u0002\u077b",
    "\u077c\u0005&\u0014\u0002\u077c\u077d\u0007W\u0002\u0002\u077d\u077f",
    "\u0003\u0002\u0002\u0002\u077e\u0779\u0003\u0002\u0002\u0002\u077e\u077a",
    "\u0003\u0002\u0002\u0002\u077f\u011b\u0003\u0002\u0002\u0002\u0780\u0781",
    "\u0007f\u0002\u0002\u0781\u0784\u0005\u011e\u0090\u0002\u0782\u0784",
    "\u0005\u0122\u0092\u0002\u0783\u0780\u0003\u0002\u0002\u0002\u0783\u0782",
    "\u0003\u0002\u0002\u0002\u0784\u011d\u0003\u0002\u0002\u0002\u0785\u0788",
    "\u0005Z.\u0002\u0786\u0788\u0005\u0122\u0092\u0002\u0787\u0785\u0003",
    "\u0002\u0002\u0002\u0787\u0786\u0003\u0002\u0002\u0002\u0788\u011f\u0003",
    "\u0002\u0002\u0002\u0789\u078a\b\u0091\u0001\u0002\u078a\u078c\u0005",
    "\u011e\u0090\u0002\u078b\u078d\u0007\u0086\u0002\u0002\u078c\u078b\u0003",
    "\u0002\u0002\u0002\u078c\u078d\u0003\u0002\u0002\u0002\u078d\u0796\u0003",
    "\u0002\u0002\u0002\u078e\u078f\f\u0003\u0002\u0002\u078f\u0790\u0007",
    "}\u0002\u0002\u0790\u0792\u0005\u011e\u0090\u0002\u0791\u0793\u0007",
    "\u0086\u0002\u0002\u0792\u0791\u0003\u0002\u0002\u0002\u0792\u0793\u0003",
    "\u0002\u0002\u0002\u0793\u0795\u0003\u0002\u0002\u0002\u0794\u078e\u0003",
    "\u0002\u0002\u0002\u0795\u0798\u0003\u0002\u0002\u0002\u0796\u0794\u0003",
    "\u0002\u0002\u0002\u0796\u0797\u0003\u0002\u0002\u0002\u0797\u0121\u0003",
    "\u0002\u0002\u0002\u0798\u0796\u0003\u0002\u0002\u0002\u0799\u079a\u0007",
    "Z\u0002\u0002\u079a\u079c\u0005\u0120\u0091\u0002\u079b\u079d\u0007",
    "}\u0002\u0002\u079c\u079b\u0003\u0002\u0002\u0002\u079c\u079d\u0003",
    "\u0002\u0002\u0002\u079d\u079e\u0003\u0002\u0002\u0002\u079e\u079f\u0007",
    "[\u0002\u0002\u079f\u07a3\u0003\u0002\u0002\u0002\u07a0\u07a1\u0007",
    "Z\u0002\u0002\u07a1\u07a3\u0007[\u0002\u0002\u07a2\u0799\u0003\u0002",
    "\u0002\u0002\u07a2\u07a0\u0003\u0002\u0002\u0002\u07a3\u0123\u0003\u0002",
    "\u0002\u0002\u07a4\u07a7\u0007\u0087\u0002\u0002\u07a5\u07a7\u0005\u0164",
    "\u00b3\u0002\u07a6\u07a4\u0003\u0002\u0002\u0002\u07a6\u07a5\u0003\u0002",
    "\u0002\u0002\u07a7\u0125\u0003\u0002\u0002\u0002\u07a8\u07a9\u0005\u0128",
    "\u0095\u0002\u07a9\u07ab\u0007Z\u0002\u0002\u07aa\u07ac\u0005\u0130",
    "\u0099\u0002\u07ab\u07aa\u0003\u0002\u0002\u0002\u07ab\u07ac\u0003\u0002",
    "\u0002\u0002\u07ac\u07ad\u0003\u0002\u0002\u0002\u07ad\u07ae\u0007[",
    "\u0002\u0002\u07ae\u0127\u0003\u0002\u0002\u0002\u07af\u07b1\u0005\u012e",
    "\u0098\u0002\u07b0\u07b2\u0005\u00d6l\u0002\u07b1\u07b0\u0003\u0002",
    "\u0002\u0002\u07b1\u07b2\u0003\u0002\u0002\u0002\u07b2\u07b3\u0003\u0002",
    "\u0002\u0002\u07b3\u07b5\u0005\u012a\u0096\u0002\u07b4\u07b6\u0005\u012c",
    "\u0097\u0002\u07b5\u07b4\u0003\u0002\u0002\u0002\u07b5\u07b6\u0003\u0002",
    "\u0002\u0002\u07b6\u07b8\u0003\u0002\u0002\u0002\u07b7\u07b9\u0005\u013e",
    "\u00a0\u0002\u07b8\u07b7\u0003\u0002\u0002\u0002\u07b8\u07b9\u0003\u0002",
    "\u0002\u0002\u07b9\u07c2\u0003\u0002\u0002\u0002\u07ba\u07bc\u0005\u012e",
    "\u0098\u0002\u07bb\u07bd\u0005\u00d6l\u0002\u07bc\u07bb\u0003\u0002",
    "\u0002\u0002\u07bc\u07bd\u0003\u0002\u0002\u0002\u07bd\u07bf\u0003\u0002",
    "\u0002\u0002\u07be\u07c0\u0005\u013e\u00a0\u0002\u07bf\u07be\u0003\u0002",
    "\u0002\u0002\u07bf\u07c0\u0003\u0002\u0002\u0002\u07c0\u07c2\u0003\u0002",
    "\u0002\u0002\u07c1\u07af\u0003\u0002\u0002\u0002\u07c1\u07ba\u0003\u0002",
    "\u0002\u0002\u07c2\u0129\u0003\u0002\u0002\u0002\u07c3\u07c5\u0005\f",
    "\u0007\u0002\u07c4\u07c3\u0003\u0002\u0002\u0002\u07c4\u07c5\u0003\u0002",
    "\u0002\u0002\u07c5\u07c6\u0003\u0002\u0002\u0002\u07c6\u07c7\u0005\u0124",
    "\u0093\u0002\u07c7\u012b\u0003\u0002\u0002\u0002\u07c8\u07c9\u0007\'",
    "\u0002\u0002\u07c9\u012d\u0003\u0002\u0002\u0002\u07ca\u07cb\t\n\u0002",
    "\u0002\u07cb\u012f\u0003\u0002\u0002\u0002\u07cc\u07ce\u0005\u0132\u009a",
    "\u0002\u07cd\u07cf\u0005\u0130\u0099\u0002\u07ce\u07cd\u0003\u0002\u0002",
    "\u0002\u07ce\u07cf\u0003\u0002\u0002\u0002\u07cf\u07d6\u0003\u0002\u0002",
    "\u0002\u07d0\u07d1\u0005\u0148\u00a5\u0002\u07d1\u07d3\u0007\u0081\u0002",
    "\u0002\u07d2\u07d4\u0005\u0130\u0099\u0002\u07d3\u07d2\u0003\u0002\u0002",
    "\u0002\u07d3\u07d4\u0003\u0002\u0002\u0002\u07d4\u07d6\u0003\u0002\u0002",
    "\u0002\u07d5\u07cc\u0003\u0002\u0002\u0002\u07d5\u07d0\u0003\u0002\u0002",
    "\u0002\u07d6\u0131\u0003\u0002\u0002\u0002\u07d7\u07d9\u0005\u00d6l",
    "\u0002\u07d8\u07d7\u0003\u0002\u0002\u0002\u07d8\u07d9\u0003\u0002\u0002",
    "\u0002\u07d9\u07db\u0003\u0002\u0002\u0002\u07da\u07dc\u0005\u008eH",
    "\u0002\u07db\u07da\u0003\u0002\u0002\u0002\u07db\u07dc\u0003\u0002\u0002",
    "\u0002\u07dc\u07de\u0003\u0002\u0002\u0002\u07dd\u07df\u0005\u0134\u009b",
    "\u0002\u07de\u07dd\u0003\u0002\u0002\u0002\u07de\u07df\u0003\u0002\u0002",
    "\u0002\u07df\u07e0\u0003\u0002\u0002\u0002\u07e0\u07e8\u0007\u0083\u0002",
    "\u0002\u07e1\u07e8\u0005\u0116\u008c\u0002\u07e2\u07e8\u0005\u00ceh",
    "\u0002\u07e3\u07e8\u0005\u0086D\u0002\u07e4\u07e8\u0005\u015c\u00af",
    "\u0002\u07e5\u07e8\u0005\u0082B\u0002\u07e6\u07e8\u0005\u0088E\u0002",
    "\u07e7\u07d8\u0003\u0002\u0002\u0002\u07e7\u07e1\u0003\u0002\u0002\u0002",
    "\u07e7\u07e2\u0003\u0002\u0002\u0002\u07e7\u07e3\u0003\u0002\u0002\u0002",
    "\u07e7\u07e4\u0003\u0002\u0002\u0002\u07e7\u07e5\u0003\u0002\u0002\u0002",
    "\u07e7\u07e6\u0003\u0002\u0002\u0002\u07e8\u0133\u0003\u0002\u0002\u0002",
    "\u07e9\u07ea\b\u009b\u0001\u0002\u07ea\u07eb\u0005\u0136\u009c\u0002",
    "\u07eb\u07f1\u0003\u0002\u0002\u0002\u07ec\u07ed\f\u0003\u0002\u0002",
    "\u07ed\u07ee\u0007}\u0002\u0002\u07ee\u07f0\u0005\u0136\u009c\u0002",
    "\u07ef\u07ec\u0003\u0002\u0002\u0002\u07f0\u07f3\u0003\u0002\u0002\u0002",
    "\u07f1\u07ef\u0003\u0002\u0002\u0002\u07f1\u07f2\u0003\u0002\u0002\u0002",
    "\u07f2\u0135\u0003\u0002\u0002\u0002\u07f3\u07f1\u0003\u0002\u0002\u0002",
    "\u07f4\u07f6\u0005\u00f0y\u0002\u07f5\u07f7\u0005\u0138\u009d\u0002",
    "\u07f6\u07f5\u0003\u0002\u0002\u0002\u07f6\u07f7\u0003\u0002\u0002\u0002",
    "\u07f7\u07f9\u0003\u0002\u0002\u0002\u07f8\u07fa\u0005\u013c\u009f\u0002",
    "\u07f9\u07f8\u0003\u0002\u0002\u0002\u07f9\u07fa\u0003\u0002\u0002\u0002",
    "\u07fa\u0808\u0003\u0002\u0002\u0002\u07fb\u07fd\u0005\u00f0y\u0002",
    "\u07fc\u07fe\u0005\u011c\u008f\u0002\u07fd\u07fc\u0003\u0002\u0002\u0002",
    "\u07fd\u07fe\u0003\u0002\u0002\u0002\u07fe\u0808\u0003\u0002\u0002\u0002",
    "\u07ff\u0801\u0007\u0087\u0002\u0002\u0800\u07ff\u0003\u0002\u0002\u0002",
    "\u0800\u0801\u0003\u0002\u0002\u0002\u0801\u0803\u0003\u0002\u0002\u0002",
    "\u0802\u0804\u0005\u00d6l\u0002\u0803\u0802\u0003\u0002\u0002\u0002",
    "\u0803\u0804\u0003\u0002\u0002\u0002\u0804\u0805\u0003\u0002\u0002\u0002",
    "\u0805\u0806\u0007\u0081\u0002\u0002\u0806\u0808\u0005`1\u0002\u0807",
    "\u07f4\u0003\u0002\u0002\u0002\u0807\u07fb\u0003\u0002\u0002\u0002\u0807",
    "\u0800\u0003\u0002\u0002\u0002\u0808\u0137\u0003\u0002\u0002\u0002\u0809",
    "\u080a\b\u009d\u0001\u0002\u080a\u080b\u0005\u013a\u009e\u0002\u080b",
    "\u0810\u0003\u0002\u0002\u0002\u080c\u080d\f\u0003\u0002\u0002\u080d",
    "\u080f\u0005\u013a\u009e\u0002\u080e\u080c\u0003\u0002\u0002\u0002\u080f",
    "\u0812\u0003\u0002\u0002\u0002\u0810\u080e\u0003\u0002\u0002\u0002\u0810",
    "\u0811\u0003\u0002\u0002\u0002\u0811\u0139\u0003\u0002\u0002\u0002\u0812",
    "\u0810\u0003\u0002\u0002\u0002\u0813\u0814\t\u000b\u0002\u0002\u0814",
    "\u013b\u0003\u0002\u0002\u0002\u0815\u0816\u0007f\u0002\u0002\u0816",
    "\u0817\u0007\u008a\u0002\u0002\u0817\u0818\b\u009f\u0001\u0002\u0818",
    "\u013d\u0003\u0002\u0002\u0002\u0819\u081a\u0007\u0081\u0002\u0002\u081a",
    "\u081b\u0005\u0140\u00a1\u0002\u081b\u013f\u0003\u0002\u0002\u0002\u081c",
    "\u081d\b\u00a1\u0001\u0002\u081d\u081f\u0005\u0142\u00a2\u0002\u081e",
    "\u0820\u0007\u0086\u0002\u0002\u081f\u081e\u0003\u0002\u0002\u0002\u081f",
    "\u0820\u0003\u0002\u0002\u0002\u0820\u0829\u0003\u0002\u0002\u0002\u0821",
    "\u0822\f\u0003\u0002\u0002\u0822\u0823\u0007}\u0002\u0002\u0823\u0825",
    "\u0005\u0142\u00a2\u0002\u0824\u0826\u0007\u0086\u0002\u0002\u0825\u0824",
    "\u0003\u0002\u0002\u0002\u0825\u0826\u0003\u0002\u0002\u0002\u0826\u0828",
    "\u0003\u0002\u0002\u0002\u0827\u0821\u0003\u0002\u0002\u0002\u0828\u082b",
    "\u0003\u0002\u0002\u0002\u0829\u0827\u0003\u0002\u0002\u0002\u0829\u082a",
    "\u0003\u0002\u0002\u0002\u082a\u0141\u0003\u0002\u0002\u0002\u082b\u0829",
    "\u0003\u0002\u0002\u0002\u082c\u082e\u0005\u00d6l\u0002\u082d\u082c",
    "\u0003\u0002\u0002\u0002\u082d\u082e\u0003\u0002\u0002\u0002\u082e\u082f",
    "\u0003\u0002\u0002\u0002\u082f\u0842\u0005\u0146\u00a4\u0002\u0830\u0832",
    "\u0005\u00d6l\u0002\u0831\u0830\u0003\u0002\u0002\u0002\u0831\u0832",
    "\u0003\u0002\u0002\u0002\u0832\u0833\u0003\u0002\u0002\u0002\u0833\u0835",
    "\u0007Q\u0002\u0002\u0834\u0836\u0005\u0148\u00a5\u0002\u0835\u0834",
    "\u0003\u0002\u0002\u0002\u0835\u0836\u0003\u0002\u0002\u0002\u0836\u0837",
    "\u0003\u0002\u0002\u0002\u0837\u0842\u0005\u0146\u00a4\u0002\u0838\u083a",
    "\u0005\u00d6l\u0002\u0839\u0838\u0003\u0002\u0002\u0002\u0839\u083a",
    "\u0003\u0002\u0002\u0002\u083a\u083b\u0003\u0002\u0002\u0002\u083b\u083d",
    "\u0005\u0148\u00a5\u0002\u083c\u083e\u0007Q\u0002\u0002\u083d\u083c",
    "\u0003\u0002\u0002\u0002\u083d\u083e\u0003\u0002\u0002\u0002\u083e\u083f",
    "\u0003\u0002\u0002\u0002\u083f\u0840\u0005\u0146\u00a4\u0002\u0840\u0842",
    "\u0003\u0002\u0002\u0002\u0841\u082d\u0003\u0002\u0002\u0002\u0841\u0831",
    "\u0003\u0002\u0002\u0002\u0841\u0839\u0003\u0002\u0002\u0002\u0842\u0143",
    "\u0003\u0002\u0002\u0002\u0843\u0845\u0005\f\u0007\u0002\u0844\u0843",
    "\u0003\u0002\u0002\u0002\u0844\u0845\u0003\u0002\u0002\u0002\u0845\u0846",
    "\u0003\u0002\u0002\u0002\u0846\u0849\u0005\u0124\u0093\u0002\u0847\u0849",
    "\u0005\u00a2R\u0002\u0848\u0844\u0003\u0002\u0002\u0002\u0848\u0847",
    "\u0003\u0002\u0002\u0002\u0849\u0145\u0003\u0002\u0002\u0002\u084a\u084b",
    "\u0005\u0144\u00a3\u0002\u084b\u0147\u0003\u0002\u0002\u0002\u084c\u084d",
    "\t\f\u0002\u0002\u084d\u0149\u0003\u0002\u0002\u0002\u084e\u084f\u0007",
    "5\u0002\u0002\u084f\u0850\u0005\u014c\u00a7\u0002\u0850\u014b\u0003",
    "\u0002\u0002\u0002\u0851\u0853\u0005\u009aN\u0002\u0852\u0854\u0005",
    "\u014e\u00a8\u0002\u0853\u0852\u0003\u0002\u0002\u0002\u0853\u0854\u0003",
    "\u0002\u0002\u0002\u0854\u014d\u0003\u0002\u0002\u0002\u0855\u0857\u0005",
    "\u00fa~\u0002\u0856\u0858\u0005\u014e\u00a8\u0002\u0857\u0856\u0003",
    "\u0002\u0002\u0002\u0857\u0858\u0003\u0002\u0002\u0002\u0858\u014f\u0003",
    "\u0002\u0002\u0002\u0859\u085a\u0007\u0081\u0002\u0002\u085a\u085b\u0005",
    "\u0152\u00aa\u0002\u085b\u0151\u0003\u0002\u0002\u0002\u085c\u085e\u0005",
    "\u0154\u00ab\u0002\u085d\u085f\u0007\u0086\u0002\u0002\u085e\u085d\u0003",
    "\u0002\u0002\u0002\u085e\u085f\u0003\u0002\u0002\u0002\u085f\u0868\u0003",
    "\u0002\u0002\u0002\u0860\u0862\u0005\u0154\u00ab\u0002\u0861\u0863\u0007",
    "\u0086\u0002\u0002\u0862\u0861\u0003\u0002\u0002\u0002\u0862\u0863\u0003",
    "\u0002\u0002\u0002\u0863\u0864\u0003\u0002\u0002\u0002\u0864\u0865\u0007",
    "}\u0002\u0002\u0865\u0866\u0005\u0152\u00aa\u0002\u0866\u0868\u0003",
    "\u0002\u0002\u0002\u0867\u085c\u0003\u0002\u0002\u0002\u0867\u0860\u0003",
    "\u0002\u0002\u0002\u0868\u0153\u0003\u0002\u0002\u0002\u0869\u086a\u0005",
    "\u0156\u00ac\u0002\u086a\u086c\u0007V\u0002\u0002\u086b\u086d\u0005",
    "&\u0014\u0002\u086c\u086b\u0003\u0002\u0002\u0002\u086c\u086d\u0003",
    "\u0002\u0002\u0002\u086d\u086e\u0003\u0002\u0002\u0002\u086e\u086f\u0007",
    "W\u0002\u0002\u086f\u0874\u0003\u0002\u0002\u0002\u0870\u0871\u0005",
    "\u0156\u00ac\u0002\u0871\u0872\u0005\u0122\u0092\u0002\u0872\u0874\u0003",
    "\u0002\u0002\u0002\u0873\u0869\u0003\u0002\u0002\u0002\u0873\u0870\u0003",
    "\u0002\u0002\u0002\u0874\u0155\u0003\u0002\u0002\u0002\u0875\u0878\u0005",
    "\u0144\u00a3\u0002\u0876\u0878\u0007\u0087\u0002\u0002\u0877\u0875\u0003",
    "\u0002\u0002\u0002\u0877\u0876\u0003\u0002\u0002\u0002\u0878\u0157\u0003",
    "\u0002\u0002\u0002\u0879\u087a\u00075\u0002\u0002\u087a\u087b\u0005",
    "\u0188\u00c5\u0002\u087b\u0159\u0003\u0002\u0002\u0002\u087c\u087d\u0007",
    "5\u0002\u0002\u087d\u087e\u0007\u0090\u0002\u0002\u087e\u0882\u0007",
    "\u0087\u0002\u0002\u087f\u0880\u00075\u0002\u0002\u0880\u0882\u0007",
    "\u0093\u0002\u0002\u0881\u087c\u0003\u0002\u0002\u0002\u0881\u087f\u0003",
    "\u0002\u0002\u0002\u0882\u015b\u0003\u0002\u0002\u0002\u0883\u0884\u0007",
    "E\u0002\u0002\u0884\u0885\u0007g\u0002\u0002\u0885\u0886\u0005\u015e",
    "\u00b0\u0002\u0886\u0887\u0007h\u0002\u0002\u0887\u0888\u0005~@\u0002",
    "\u0888\u015d\u0003\u0002\u0002\u0002\u0889\u088a\b\u00b0\u0001\u0002",
    "\u088a\u088b\u0005\u0160\u00b1\u0002\u088b\u0891\u0003\u0002\u0002\u0002",
    "\u088c\u088d\f\u0003\u0002\u0002\u088d\u088e\u0007}\u0002\u0002\u088e",
    "\u0890\u0005\u0160\u00b1\u0002\u088f\u088c\u0003\u0002\u0002\u0002\u0890",
    "\u0893\u0003\u0002\u0002\u0002\u0891\u088f\u0003\u0002\u0002\u0002\u0891",
    "\u0892\u0003\u0002\u0002\u0002\u0892\u015f\u0003\u0002\u0002\u0002\u0893",
    "\u0891\u0003\u0002\u0002\u0002\u0894\u0897\u0005\u0162\u00b2\u0002\u0895",
    "\u0897\u0005\u0114\u008b\u0002\u0896\u0894\u0003\u0002\u0002\u0002\u0896",
    "\u0895\u0003\u0002\u0002\u0002\u0897\u0161\u0003\u0002\u0002\u0002\u0898",
    "\u089a\u0007\u0016\u0002\u0002\u0899\u089b\u0007\u0086\u0002\u0002\u089a",
    "\u0899\u0003\u0002\u0002\u0002\u089a\u089b\u0003\u0002\u0002\u0002\u089b",
    "\u089d\u0003\u0002\u0002\u0002\u089c\u089e\u0007\u0087\u0002\u0002\u089d",
    "\u089c\u0003\u0002\u0002\u0002\u089d\u089e\u0003\u0002\u0002\u0002\u089e",
    "\u08c9\u0003\u0002\u0002\u0002\u089f\u08a1\u0007\u0016\u0002\u0002\u08a0",
    "\u08a2\u0007\u0087\u0002\u0002\u08a1\u08a0\u0003\u0002\u0002\u0002\u08a1",
    "\u08a2\u0003\u0002\u0002\u0002\u08a2\u08a3\u0003\u0002\u0002\u0002\u08a3",
    "\u08a4\u0007f\u0002\u0002\u08a4\u08c9\u0005\u0104\u0083\u0002\u08a5",
    "\u08a7\u0007M\u0002\u0002\u08a6\u08a8\u0007\u0086\u0002\u0002\u08a7",
    "\u08a6\u0003\u0002\u0002\u0002\u08a7\u08a8\u0003\u0002\u0002\u0002\u08a8",
    "\u08aa\u0003\u0002\u0002\u0002\u08a9\u08ab\u0007\u0087\u0002\u0002\u08aa",
    "\u08a9\u0003\u0002\u0002\u0002\u08aa\u08ab\u0003\u0002\u0002\u0002\u08ab",
    "\u08c9\u0003\u0002\u0002\u0002\u08ac\u08ae\u0007M\u0002\u0002\u08ad",
    "\u08af\u0007\u0087\u0002\u0002\u08ae\u08ad\u0003\u0002\u0002\u0002\u08ae",
    "\u08af\u0003\u0002\u0002\u0002\u08af\u08b0\u0003\u0002\u0002\u0002\u08b0",
    "\u08b1\u0007f\u0002\u0002\u08b1\u08c9\u0005\u0104\u0083\u0002\u08b2",
    "\u08b3\u0007E\u0002\u0002\u08b3\u08b4\u0007g\u0002\u0002\u08b4\u08b5",
    "\u0005\u015e\u00b0\u0002\u08b5\u08b6\u0007h\u0002\u0002\u08b6\u08b8",
    "\u0007\u0016\u0002\u0002\u08b7\u08b9\u0007\u0086\u0002\u0002\u08b8\u08b7",
    "\u0003\u0002\u0002\u0002\u08b8\u08b9\u0003\u0002\u0002\u0002\u08b9\u08bb",
    "\u0003\u0002\u0002\u0002\u08ba\u08bc\u0007\u0087\u0002\u0002\u08bb\u08ba",
    "\u0003\u0002\u0002\u0002\u08bb\u08bc\u0003\u0002\u0002\u0002\u08bc\u08c9",
    "\u0003\u0002\u0002\u0002\u08bd\u08be\u0007E\u0002\u0002\u08be\u08bf",
    "\u0007g\u0002\u0002\u08bf\u08c0\u0005\u015e\u00b0\u0002\u08c0\u08c1",
    "\u0007h\u0002\u0002\u08c1\u08c3\u0007\u0016\u0002\u0002\u08c2\u08c4",
    "\u0007\u0087\u0002\u0002\u08c3\u08c2\u0003\u0002\u0002\u0002\u08c3\u08c4",
    "\u0003\u0002\u0002\u0002\u08c4\u08c5\u0003\u0002\u0002\u0002\u08c5\u08c6",
    "\u0007f\u0002\u0002\u08c6\u08c7\u0005\u0006\u0004\u0002\u08c7\u08c9",
    "\u0003\u0002\u0002\u0002\u08c8\u0898\u0003\u0002\u0002\u0002\u08c8\u089f",
    "\u0003\u0002\u0002\u0002\u08c8\u08a5\u0003\u0002\u0002\u0002\u08c8\u08ac",
    "\u0003\u0002\u0002\u0002\u08c8\u08b2\u0003\u0002\u0002\u0002\u08c8\u08bd",
    "\u0003\u0002\u0002\u0002\u08c9\u0163\u0003\u0002\u0002\u0002\u08ca\u08cb",
    "\u0005\u0168\u00b5\u0002\u08cb\u08cd\u0007g\u0002\u0002\u08cc\u08ce",
    "\u0005\u016a\u00b6\u0002\u08cd\u08cc\u0003\u0002\u0002\u0002\u08cd\u08ce",
    "\u0003\u0002\u0002\u0002\u08ce\u08cf\u0003\u0002\u0002\u0002\u08cf\u08d0",
    "\u0007h\u0002\u0002\u08d0\u0165\u0003\u0002\u0002\u0002\u08d1\u08e1",
    "\u0005\u0164\u00b3\u0002\u08d2\u08d3\u0005\u0158\u00ad\u0002\u08d3\u08d5",
    "\u0007g\u0002\u0002\u08d4\u08d6\u0005\u016a\u00b6\u0002\u08d5\u08d4",
    "\u0003\u0002\u0002\u0002\u08d5\u08d6\u0003\u0002\u0002\u0002\u08d6\u08d7",
    "\u0003\u0002\u0002\u0002\u08d7\u08d8\u0007h\u0002\u0002\u08d8\u08e1",
    "\u0003\u0002\u0002\u0002\u08d9\u08da\u0005\u015a\u00ae\u0002\u08da\u08dc",
    "\u0007g\u0002\u0002\u08db\u08dd\u0005\u016a\u00b6\u0002\u08dc\u08db",
    "\u0003\u0002\u0002\u0002\u08dc\u08dd\u0003\u0002\u0002\u0002\u08dd\u08de",
    "\u0003\u0002\u0002\u0002\u08de\u08df\u0007h\u0002\u0002\u08df\u08e1",
    "\u0003\u0002\u0002\u0002\u08e0\u08d1\u0003\u0002\u0002\u0002\u08e0\u08d2",
    "\u0003\u0002\u0002\u0002\u08e0\u08d9\u0003\u0002\u0002\u0002\u08e1\u0167",
    "\u0003\u0002\u0002\u0002\u08e2\u08e3\u0007\u0087\u0002\u0002\u08e3\u0169",
    "\u0003\u0002\u0002\u0002\u08e4\u08e5\b\u00b6\u0001\u0002\u08e5\u08e7",
    "\u0005\u016c\u00b7\u0002\u08e6\u08e8\u0007\u0086\u0002\u0002\u08e7\u08e6",
    "\u0003\u0002\u0002\u0002\u08e7\u08e8\u0003\u0002\u0002\u0002\u08e8\u08f1",
    "\u0003\u0002\u0002\u0002\u08e9\u08ea\f\u0003\u0002\u0002\u08ea\u08eb",
    "\u0007}\u0002\u0002\u08eb\u08ed\u0005\u016c\u00b7\u0002\u08ec\u08ee",
    "\u0007\u0086\u0002\u0002\u08ed\u08ec\u0003\u0002\u0002\u0002\u08ed\u08ee",
    "\u0003\u0002\u0002\u0002\u08ee\u08f0\u0003\u0002\u0002\u0002\u08ef\u08e9",
    "\u0003\u0002\u0002\u0002\u08f0\u08f3\u0003\u0002\u0002\u0002\u08f1\u08ef",
    "\u0003\u0002\u0002\u0002\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2\u016b",
    "\u0003\u0002\u0002\u0002\u08f3\u08f1\u0003\u0002\u0002\u0002\u08f4\u08f8",
    "\u0005\u0104\u0083\u0002\u08f5\u08f8\u0005`1\u0002\u08f6\u08f8\u0005",
    "\u0006\u0004\u0002\u08f7\u08f4\u0003\u0002\u0002\u0002\u08f7\u08f5\u0003",
    "\u0002\u0002\u0002\u08f7\u08f6\u0003\u0002\u0002\u0002\u08f8\u016d\u0003",
    "\u0002\u0002\u0002\u08f9\u08fa\u0007M\u0002\u0002\u08fa\u08fb\u0005",
    "\f\u0007\u0002\u08fb\u08fc\u0007\u0087\u0002\u0002\u08fc\u0905\u0003",
    "\u0002\u0002\u0002\u08fd\u08fe\u0007M\u0002\u0002\u08fe\u0900\u0005",
    "\f\u0007\u0002\u08ff\u0901\u0007E\u0002\u0002\u0900\u08ff\u0003\u0002",
    "\u0002\u0002\u0900\u0901\u0003\u0002\u0002\u0002\u0901\u0902\u0003\u0002",
    "\u0002\u0002\u0902\u0903\u0005\u0164\u00b3\u0002\u0903\u0905\u0003\u0002",
    "\u0002\u0002\u0904\u08f9\u0003\u0002\u0002\u0002\u0904\u08fd\u0003\u0002",
    "\u0002\u0002\u0905\u016f\u0003\u0002\u0002\u0002\u0906\u0908\u0007%",
    "\u0002\u0002\u0907\u0906\u0003\u0002\u0002\u0002\u0907\u0908\u0003\u0002",
    "\u0002\u0002\u0908\u0909\u0003\u0002\u0002\u0002\u0909\u090a\u0007E",
    "\u0002\u0002\u090a\u090b\u0005~@\u0002\u090b\u0171\u0003\u0002\u0002",
    "\u0002\u090c\u090d\u0007E\u0002\u0002\u090d\u090e\u0007g\u0002\u0002",
    "\u090e\u090f\u0007h\u0002\u0002\u090f\u0910\u0005~@\u0002\u0910\u0173",
    "\u0003\u0002\u0002\u0002\u0911\u0912\u0007J\u0002\u0002\u0912\u0913",
    "\u0005h5\u0002\u0913\u0914\u0005\u0178\u00bd\u0002\u0914\u0175\u0003",
    "\u0002\u0002\u0002\u0915\u0917\u0007J\u0002\u0002\u0916\u0918\u0005",
    "\u0150\u00a9\u0002\u0917\u0916\u0003\u0002\u0002\u0002\u0917\u0918\u0003",
    "\u0002\u0002\u0002\u0918\u0919\u0003\u0002\u0002\u0002\u0919\u091a\u0005",
    "h5\u0002\u091a\u091b\u0005\u0178\u00bd\u0002\u091b\u0177\u0003\u0002",
    "\u0002\u0002\u091c\u091e\u0005\u017a\u00be\u0002\u091d\u091f\u0005\u0178",
    "\u00bd\u0002\u091e\u091d\u0003\u0002\u0002\u0002\u091e\u091f\u0003\u0002",
    "\u0002\u0002\u091f\u0179\u0003\u0002\u0002\u0002\u0920\u0921\u0007\u0012",
    "\u0002\u0002\u0921\u0922\u0007V\u0002\u0002\u0922\u0923\u0005\u017c",
    "\u00bf\u0002\u0923\u0924\u0007W\u0002\u0002\u0924\u0925\u0005h5\u0002",
    "\u0925\u017b\u0003\u0002\u0002\u0002\u0926\u0928\u0005\u00d6l\u0002",
    "\u0927\u0926\u0003\u0002\u0002\u0002\u0927\u0928\u0003\u0002\u0002\u0002",
    "\u0928\u0929\u0003\u0002\u0002\u0002\u0929\u092a\u0005\u009aN\u0002",
    "\u092a\u092b\u0005\u00f0y\u0002\u092b\u0935\u0003\u0002\u0002\u0002",
    "\u092c\u092e\u0005\u00d6l\u0002\u092d\u092c\u0003\u0002\u0002\u0002",
    "\u092d\u092e\u0003\u0002\u0002\u0002\u092e\u092f\u0003\u0002\u0002\u0002",
    "\u092f\u0931\u0005\u009aN\u0002\u0930\u0932\u0005\u0106\u0084\u0002",
    "\u0931\u0930\u0003\u0002\u0002\u0002\u0931\u0932\u0003\u0002\u0002\u0002",
    "\u0932\u0935\u0003\u0002\u0002\u0002\u0933\u0935\u0007\u0086\u0002\u0002",
    "\u0934\u0927\u0003\u0002\u0002\u0002\u0934\u092d\u0003\u0002\u0002\u0002",
    "\u0934\u0933\u0003\u0002\u0002\u0002\u0935\u017d\u0003\u0002\u0002\u0002",
    "\u0936\u0938\u0007H\u0002\u0002\u0937\u0939\u0005Z.\u0002\u0938\u0937",
    "\u0003\u0002\u0002\u0002\u0938\u0939\u0003\u0002\u0002\u0002\u0939\u017f",
    "\u0003\u0002\u0002\u0002\u093a\u093d\u0005\u0182\u00c2\u0002\u093b\u093d",
    "\u0005\u0186\u00c4\u0002\u093c\u093a\u0003\u0002\u0002\u0002\u093c\u093b",
    "\u0003\u0002\u0002\u0002\u093d\u0181\u0003\u0002\u0002\u0002\u093e\u093f",
    "\u0007H\u0002\u0002\u093f\u0941\u0007V\u0002\u0002\u0940\u0942\u0005",
    "\u0184\u00c3\u0002\u0941\u0940\u0003\u0002\u0002\u0002\u0941\u0942\u0003",
    "\u0002\u0002\u0002\u0942\u0943\u0003\u0002\u0002\u0002\u0943\u0944\u0007",
    "W\u0002\u0002\u0944\u0183\u0003\u0002\u0002\u0002\u0945\u0946\b\u00c3",
    "\u0001\u0002\u0946\u0948\u0005\u0104\u0083\u0002\u0947\u0949\u0007\u0086",
    "\u0002\u0002\u0948\u0947\u0003\u0002\u0002\u0002\u0948\u0949\u0003\u0002",
    "\u0002\u0002\u0949\u0952\u0003\u0002\u0002\u0002\u094a\u094b\f\u0003",
    "\u0002\u0002\u094b\u094c\u0007}\u0002\u0002\u094c\u094e\u0005\u0104",
    "\u0083\u0002\u094d\u094f\u0007\u0086\u0002\u0002\u094e\u094d\u0003\u0002",
    "\u0002\u0002\u094e\u094f\u0003\u0002\u0002\u0002\u094f\u0951\u0003\u0002",
    "\u0002\u0002\u0950\u094a\u0003\u0002\u0002\u0002\u0951\u0954\u0003\u0002",
    "\u0002\u0002\u0952\u0950\u0003\u0002\u0002\u0002\u0952\u0953\u0003\u0002",
    "\u0002\u0002\u0953\u0185\u0003\u0002\u0002\u0002\u0954\u0952\u0003\u0002",
    "\u0002\u0002\u0955\u0956\u00073\u0002\u0002\u0956\u0957\u0007V\u0002",
    "\u0002\u0957\u0958\u0005`1\u0002\u0958\u0959\u0007W\u0002\u0002\u0959",
    "\u095c\u0003\u0002\u0002\u0002\u095a\u095c\u00073\u0002\u0002\u095b",
    "\u0955\u0003\u0002\u0002\u0002\u095b\u095a\u0003\u0002\u0002\u0002\u095c",
    "\u0187\u0003\u0002\u0002\u0002\u095d\u0991\u00072\u0002\u0002\u095e",
    "\u0991\u0007\u001d\u0002\u0002\u095f\u0960\u00072\u0002\u0002\u0960",
    "\u0961\u0007X\u0002\u0002\u0961\u0991\u0007Y\u0002\u0002\u0962\u0963",
    "\u0007\u001d\u0002\u0002\u0963\u0964\u0007X\u0002\u0002\u0964\u0991",
    "\u0007Y\u0002\u0002\u0965\u0991\u0007\\\u0002\u0002\u0966\u0991\u0007",
    "]\u0002\u0002\u0967\u0991\u0007^\u0002\u0002\u0968\u0991\u0007_\u0002",
    "\u0002\u0969\u0991\u0007`\u0002\u0002\u096a\u0991\u0007a\u0002\u0002",
    "\u096b\u0991\u0007b\u0002\u0002\u096c\u0991\u0007c\u0002\u0002\u096d",
    "\u0991\u0007d\u0002\u0002\u096e\u0991\u0007\u0003\u0002\u0002\u096f",
    "\u0991\u0007\u0004\u0002\u0002\u0970\u0991\u0007f\u0002\u0002\u0971",
    "\u0991\u0007g\u0002\u0002\u0972\u0991\u0007h\u0002\u0002\u0973\u0991",
    "\u0007i\u0002\u0002\u0974\u0991\u0007j\u0002\u0002\u0975\u0991\u0007",
    "k\u0002\u0002\u0976\u0991\u0007l\u0002\u0002\u0977\u0991\u0007m\u0002",
    "\u0002\u0978\u0991\u0007n\u0002\u0002\u0979\u0991\u0007o\u0002\u0002",
    "\u097a\u0991\u0007p\u0002\u0002\u097b\u0991\u0007q\u0002\u0002\u097c",
    "\u0991\u0007r\u0002\u0002\u097d\u0991\u0007t\u0002\u0002\u097e\u0991",
    "\u0007s\u0002\u0002\u097f\u0991\u0007u\u0002\u0002\u0980\u0991\u0007",
    "v\u0002\u0002\u0981\u0991\u0007w\u0002\u0002\u0982\u0991\u0007x\u0002",
    "\u0002\u0983\u0991\u0007\u0005\u0002\u0002\u0984\u0991\u0007\u0006\u0002",
    "\u0002\u0985\u0991\u0007\u0007\u0002\u0002\u0986\u0991\u0007\b\u0002",
    "\u0002\u0987\u0991\u0007{\u0002\u0002\u0988\u0991\u0007|\u0002\u0002",
    "\u0989\u0991\u0007}\u0002\u0002\u098a\u0991\u0007~\u0002\u0002\u098b",
    "\u0991\u0007\u007f\u0002\u0002\u098c\u098d\u0007V\u0002\u0002\u098d",
    "\u0991\u0007W\u0002\u0002\u098e\u098f\u0007X\u0002\u0002\u098f\u0991",
    "\u0007Y\u0002\u0002\u0990\u095d\u0003\u0002\u0002\u0002\u0990\u095e",
    "\u0003\u0002\u0002\u0002\u0990\u095f\u0003\u0002\u0002\u0002\u0990\u0962",
    "\u0003\u0002\u0002\u0002\u0990\u0965\u0003\u0002\u0002\u0002\u0990\u0966",
    "\u0003\u0002\u0002\u0002\u0990\u0967\u0003\u0002\u0002\u0002\u0990\u0968",
    "\u0003\u0002\u0002\u0002\u0990\u0969\u0003\u0002\u0002\u0002\u0990\u096a",
    "\u0003\u0002\u0002\u0002\u0990\u096b\u0003\u0002\u0002\u0002\u0990\u096c",
    "\u0003\u0002\u0002\u0002\u0990\u096d\u0003\u0002\u0002\u0002\u0990\u096e",
    "\u0003\u0002\u0002\u0002\u0990\u096f\u0003\u0002\u0002\u0002\u0990\u0970",
    "\u0003\u0002\u0002\u0002\u0990\u0971\u0003\u0002\u0002\u0002\u0990\u0972",
    "\u0003\u0002\u0002\u0002\u0990\u0973\u0003\u0002\u0002\u0002\u0990\u0974",
    "\u0003\u0002\u0002\u0002\u0990\u0975\u0003\u0002\u0002\u0002\u0990\u0976",
    "\u0003\u0002\u0002\u0002\u0990\u0977\u0003\u0002\u0002\u0002\u0990\u0978",
    "\u0003\u0002\u0002\u0002\u0990\u0979\u0003\u0002\u0002\u0002\u0990\u097a",
    "\u0003\u0002\u0002\u0002\u0990\u097b\u0003\u0002\u0002\u0002\u0990\u097c",
    "\u0003\u0002\u0002\u0002\u0990\u097d\u0003\u0002\u0002\u0002\u0990\u097e",
    "\u0003\u0002\u0002\u0002\u0990\u097f\u0003\u0002\u0002\u0002\u0990\u0980",
    "\u0003\u0002\u0002\u0002\u0990\u0981\u0003\u0002\u0002\u0002\u0990\u0982",
    "\u0003\u0002\u0002\u0002\u0990\u0983\u0003\u0002\u0002\u0002\u0990\u0984",
    "\u0003\u0002\u0002\u0002\u0990\u0985\u0003\u0002\u0002\u0002\u0990\u0986",
    "\u0003\u0002\u0002\u0002\u0990\u0987\u0003\u0002\u0002\u0002\u0990\u0988",
    "\u0003\u0002\u0002\u0002\u0990\u0989\u0003\u0002\u0002\u0002\u0990\u098a",
    "\u0003\u0002\u0002\u0002\u0990\u098b\u0003\u0002\u0002\u0002\u0990\u098c",
    "\u0003\u0002\u0002\u0002\u0990\u098e\u0003\u0002\u0002\u0002\u0991\u0189",
    "\u0003\u0002\u0002\u0002\u0992\u099a\u0007\u0088\u0002\u0002\u0993\u099a",
    "\u0007\u008e\u0002\u0002\u0994\u099a\u0007\u008f\u0002\u0002\u0995\u099a",
    "\u0007\u0090\u0002\u0002\u0996\u099a\u0005\u018c\u00c7\u0002\u0997\u099a",
    "\u0005\u018e\u00c8\u0002\u0998\u099a\u0005\u0190\u00c9\u0002\u0999\u0992",
    "\u0003\u0002\u0002\u0002\u0999\u0993\u0003\u0002\u0002\u0002\u0999\u0994",
    "\u0003\u0002\u0002\u0002\u0999\u0995\u0003\u0002\u0002\u0002\u0999\u0996",
    "\u0003\u0002\u0002\u0002\u0999\u0997\u0003\u0002\u0002\u0002\u0999\u0998",
    "\u0003\u0002\u0002\u0002\u099a\u018b\u0003\u0002\u0002\u0002\u099b\u099c",
    "\t\r\u0002\u0002\u099c\u018d\u0003\u0002\u0002\u0002\u099d\u099e\u0007",
    "4\u0002\u0002\u099e\u018f\u0003\u0002\u0002\u0002\u099f\u09a0\t\u000e",
    "\u0002\u0002\u09a0\u0191\u0003\u0002\u0002\u0002\u013d\u0193\u019f\u01a3",
    "\u01ae\u01b2\u01c1\u01c8\u01cd\u01cf\u01d4\u01da\u01e4\u01eb\u01f1\u01f5",
    "\u01fa\u0200\u0207\u020d\u0210\u0213\u0216\u021d\u0224\u0258\u0267\u026d",
    "\u0273\u0280\u0282\u028c\u029b\u02a1\u02bf\u02c4\u02c8\u02cc\u02cf\u02d3",
    "\u02d9\u02db\u02e3\u02e7\u02ea\u02f1\u02f8\u02fc\u0301\u0305\u0308\u030d",
    "\u0313\u0320\u032b\u032d\u033c\u033e\u034a\u034c\u0358\u036c\u036e\u037a",
    "\u037c\u0387\u0392\u039d\u03a9\u03ab\u03b7\u03b9\u03c3\u03cb\u03d7\u03de",
    "\u03e2\u03e6\u03ea\u03ee\u03f3\u03f6\u03f9\u03ff\u0407\u040c\u040f\u0415",
    "\u0420\u0437\u043b\u0443\u0449\u045d\u0461\u046e\u0472\u0475\u047c\u0484",
    "\u048e\u0499\u04a5\u04af\u04b4\u04bb\u04be\u04c3\u04c8\u04dd\u04e1\u04e6",
    "\u04f1\u04f7\u04fb\u0500\u0504\u0509\u050c\u0522\u0528\u0533\u0537\u053a",
    "\u0544\u054a\u054d\u0554\u055e\u0562\u0565\u0568\u056c\u0571\u0573\u0577",
    "\u057b\u0584\u0591\u0599\u059f\u05a5\u05a9\u05ac\u05b5\u05be\u05c6\u05d1",
    "\u05d7\u05e2\u05e5\u05ea\u05f9\u05ff\u0608\u0612\u0618\u0620\u0624\u0628",
    "\u062d\u0632\u0639\u063b\u0640\u0644\u0652\u0658\u0667\u0671\u0676\u067d",
    "\u0683\u0688\u068e\u0695\u0699\u069b\u069d\u06a4\u06a7\u06aa\u06ad\u06b2",
    "\u06b6\u06b9\u06bd\u06c1\u06c6\u06c9\u06cb\u06cf\u06d6\u06dc\u06e0\u06e6",
    "\u06eb\u06ed\u06f3\u06f7\u06fd\u0704\u0708\u070a\u070c\u0713\u071d\u0721",
    "\u0723\u0725\u0729\u072c\u0732\u073c\u0740\u0746\u074e\u0752\u0755\u0759",
    "\u075e\u0761\u0764\u0768\u076d\u0777\u077e\u0783\u0787\u078c\u0792\u0796",
    "\u079c\u07a2\u07a6\u07ab\u07b1\u07b5\u07b8\u07bc\u07bf\u07c1\u07c4\u07ce",
    "\u07d3\u07d5\u07d8\u07db\u07de\u07e7\u07f1\u07f6\u07f9\u07fd\u0800\u0803",
    "\u0807\u0810\u081f\u0825\u0829\u082d\u0831\u0835\u0839\u083d\u0841\u0844",
    "\u0848\u0853\u0857\u085e\u0862\u0867\u086c\u0873\u0877\u0881\u0891\u0896",
    "\u089a\u089d\u08a1\u08a7\u08aa\u08ae\u08b8\u08bb\u08c3\u08c8\u08cd\u08d5",
    "\u08dc\u08e0\u08e7\u08ed\u08f1\u08f7\u0900\u0904\u0907\u0917\u091e\u0927",
    "\u092d\u0931\u0934\u0938\u093c\u0941\u0948\u094e\u0952\u095b\u0990\u0999"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'!'", "'not'", "'&&'", "'and'", "'||'", "'or'", 
                     null, null, "'alignas'", "'alignof'", "'asm'", "'auto'", 
                     "'bool'", "'break'", "'case'", "'catch'", "'char'", 
                     "'char16_t'", "'char32_t'", "'class'", "'const'", "'constexpr'", 
                     "'const_cast'", "'continue'", "'decltype'", "'default'", 
                     "'delete'", "'do'", "'double'", "'dynamic_cast'", "'else'", 
                     "'enum'", "'explicit'", "'export'", "'extern'", "'false'", 
                     "'final'", "'float'", "'for'", "'friend'", "'goto'", 
                     "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                     "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                     "'operator'", "'override'", "'private'", "'protected'", 
                     "'public'", "'register'", "'reinterpret_cast'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", 
                     "'static_cast'", "'struct'", "'switch'", "'template'", 
                     "'this'", "'thread_local'", "'throw'", "'true'", "'try'", 
                     "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
                     "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
                     "'~'", null, "'='", "'<'", "'>'", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", "'^='", "'&='", "'|='", "'<<'", "'>>'", 
                     "'<<='", "'>>='", "'=='", "'!='", "'<='", "'>='", null, 
                     null, "'++'", "'--'", "','", "'->*'", "'->'", "'?'", 
                     "':'", "'::'", "';'", "'.'", "'.*'", "'...'" ];

var symbolicNames = [ null, null, null, null, null, null, null, "MultiLineMacro", 
                      "Directive", "Alignas", "Alignof", "Asm", "Auto", 
                      "Bool", "Break", "Case", "Catch", "Char", "Char16", 
                      "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                      "Continue", "Decltype", "Default", "Delete", "Do", 
                      "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
                      "Export", "Extern", "False", "Final", "Float", "For", 
                      "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", 
                      "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
                      "Override", "Private", "Protected", "Public", "Register", 
                      "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Static_assert", "Static_cast", "Struct", 
                      "Switch", "Template", "This", "Thread_local", "Throw", 
                      "True", "Try", "Typedef", "Typeid_", "Typename_", 
                      "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", 
                      "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Plus", 
                      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", 
                      "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", 
                      "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
                      "XorAssign", "AndAssign", "OrAssign", "LeftShift", 
                      "RightShift", "LeftShiftAssign", "RightShiftAssign", 
                      "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
                      "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", 
                      "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", 
                      "Semi", "Dot", "DotStar", "Ellipsis", "Identifier", 
                      "Integerliteral", "Decimalliteral", "Octalliteral", 
                      "Hexadecimalliteral", "Binaryliteral", "Integersuffix", 
                      "Characterliteral", "Floatingliteral", "Stringliteral", 
                      "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
                      "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ];

var ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "postfixexpression", 
                   "typeidofexpr", "typeidofthetypeid", "expressionlist", 
                   "pseudodestructorname", "unaryexpression", "unaryoperator", 
                   "newexpression", "newplacement", "newtypeid", "newdeclarator", 
                   "noptrnewdeclarator", "newinitializer", "deleteexpression", 
                   "noexceptexpression", "castexpression", "pmexpression", 
                   "multiplicativeexpression", "additiveexpression", "shiftexpression", 
                   "shiftoperator", "relationalexpression", "equalityexpression", 
                   "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
                   "logicalandexpression", "logicalorexpression", "conditionalexpression", 
                   "assignmentexpression", "assignmentoperator", "expression", 
                   "constantexpression", "statement", "labeledstatement", 
                   "expressionstatement", "compoundstatement", "statementseq", 
                   "selectionstatement", "condition", "iterationstatement", 
                   "forinitstatement", "forrangedeclaration", "forrangeinitializer", 
                   "jumpstatement", "declarationstatement", "declarationseq", 
                   "declaration", "blockdeclaration", "aliasdeclaration", 
                   "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
                   "attributedeclaration", "declspecifier", "declspecifierseq", 
                   "storageclassspecifier", "functionspecifier", "typedefname", 
                   "typespecifier", "trailingtypespecifier", "typespecifierseq", 
                   "trailingtypespecifierseq", "simpletypespecifier", "thetypename", 
                   "decltypespecifier", "elaboratedtypespecifier", "enumname", 
                   "enumspecifier", "enumhead", "opaqueenumdeclaration", 
                   "enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", 
                   "enumerator", "namespacename", "originalnamespacename", 
                   "namespacedefinition", "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "thetypeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionbody", 
                   "initializer", "braceorequalinitializer", "initializerclause", 
                   "initializerlist", "bracedinitlist", "classname", "classspecifier", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "theoperator", 
                   "literal", "booleanliteral", "pointerliteral", "userdefinedliteral" ];

function CPP14Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CPP14Parser.prototype = Object.create(antlr4.Parser.prototype);
CPP14Parser.prototype.constructor = CPP14Parser;

Object.defineProperty(CPP14Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CPP14Parser.EOF = antlr4.Token.EOF;
CPP14Parser.T__0 = 1;
CPP14Parser.T__1 = 2;
CPP14Parser.T__2 = 3;
CPP14Parser.T__3 = 4;
CPP14Parser.T__4 = 5;
CPP14Parser.T__5 = 6;
CPP14Parser.MultiLineMacro = 7;
CPP14Parser.Directive = 8;
CPP14Parser.Alignas = 9;
CPP14Parser.Alignof = 10;
CPP14Parser.Asm = 11;
CPP14Parser.Auto = 12;
CPP14Parser.Bool = 13;
CPP14Parser.Break = 14;
CPP14Parser.Case = 15;
CPP14Parser.Catch = 16;
CPP14Parser.Char = 17;
CPP14Parser.Char16 = 18;
CPP14Parser.Char32 = 19;
CPP14Parser.Class = 20;
CPP14Parser.Const = 21;
CPP14Parser.Constexpr = 22;
CPP14Parser.Const_cast = 23;
CPP14Parser.Continue = 24;
CPP14Parser.Decltype = 25;
CPP14Parser.Default = 26;
CPP14Parser.Delete = 27;
CPP14Parser.Do = 28;
CPP14Parser.Double = 29;
CPP14Parser.Dynamic_cast = 30;
CPP14Parser.Else = 31;
CPP14Parser.Enum = 32;
CPP14Parser.Explicit = 33;
CPP14Parser.Export = 34;
CPP14Parser.Extern = 35;
CPP14Parser.False = 36;
CPP14Parser.Final = 37;
CPP14Parser.Float = 38;
CPP14Parser.For = 39;
CPP14Parser.Friend = 40;
CPP14Parser.Goto = 41;
CPP14Parser.If = 42;
CPP14Parser.Inline = 43;
CPP14Parser.Int = 44;
CPP14Parser.Long = 45;
CPP14Parser.Mutable = 46;
CPP14Parser.Namespace = 47;
CPP14Parser.New = 48;
CPP14Parser.Noexcept = 49;
CPP14Parser.Nullptr = 50;
CPP14Parser.Operator = 51;
CPP14Parser.Override = 52;
CPP14Parser.Private = 53;
CPP14Parser.Protected = 54;
CPP14Parser.Public = 55;
CPP14Parser.Register = 56;
CPP14Parser.Reinterpret_cast = 57;
CPP14Parser.Return = 58;
CPP14Parser.Short = 59;
CPP14Parser.Signed = 60;
CPP14Parser.Sizeof = 61;
CPP14Parser.Static = 62;
CPP14Parser.Static_assert = 63;
CPP14Parser.Static_cast = 64;
CPP14Parser.Struct = 65;
CPP14Parser.Switch = 66;
CPP14Parser.Template = 67;
CPP14Parser.This = 68;
CPP14Parser.Thread_local = 69;
CPP14Parser.Throw = 70;
CPP14Parser.True = 71;
CPP14Parser.Try = 72;
CPP14Parser.Typedef = 73;
CPP14Parser.Typeid_ = 74;
CPP14Parser.Typename_ = 75;
CPP14Parser.Union = 76;
CPP14Parser.Unsigned = 77;
CPP14Parser.Using = 78;
CPP14Parser.Virtual = 79;
CPP14Parser.Void = 80;
CPP14Parser.Volatile = 81;
CPP14Parser.Wchar = 82;
CPP14Parser.While = 83;
CPP14Parser.LeftParen = 84;
CPP14Parser.RightParen = 85;
CPP14Parser.LeftBracket = 86;
CPP14Parser.RightBracket = 87;
CPP14Parser.LeftBrace = 88;
CPP14Parser.RightBrace = 89;
CPP14Parser.Plus = 90;
CPP14Parser.Minus = 91;
CPP14Parser.Star = 92;
CPP14Parser.Div = 93;
CPP14Parser.Mod = 94;
CPP14Parser.Caret = 95;
CPP14Parser.And = 96;
CPP14Parser.Or = 97;
CPP14Parser.Tilde = 98;
CPP14Parser.Not = 99;
CPP14Parser.Assign = 100;
CPP14Parser.Less = 101;
CPP14Parser.Greater = 102;
CPP14Parser.PlusAssign = 103;
CPP14Parser.MinusAssign = 104;
CPP14Parser.StarAssign = 105;
CPP14Parser.DivAssign = 106;
CPP14Parser.ModAssign = 107;
CPP14Parser.XorAssign = 108;
CPP14Parser.AndAssign = 109;
CPP14Parser.OrAssign = 110;
CPP14Parser.LeftShift = 111;
CPP14Parser.RightShift = 112;
CPP14Parser.LeftShiftAssign = 113;
CPP14Parser.RightShiftAssign = 114;
CPP14Parser.Equal = 115;
CPP14Parser.NotEqual = 116;
CPP14Parser.LessEqual = 117;
CPP14Parser.GreaterEqual = 118;
CPP14Parser.AndAnd = 119;
CPP14Parser.OrOr = 120;
CPP14Parser.PlusPlus = 121;
CPP14Parser.MinusMinus = 122;
CPP14Parser.Comma = 123;
CPP14Parser.ArrowStar = 124;
CPP14Parser.Arrow = 125;
CPP14Parser.Question = 126;
CPP14Parser.Colon = 127;
CPP14Parser.Doublecolon = 128;
CPP14Parser.Semi = 129;
CPP14Parser.Dot = 130;
CPP14Parser.DotStar = 131;
CPP14Parser.Ellipsis = 132;
CPP14Parser.Identifier = 133;
CPP14Parser.Integerliteral = 134;
CPP14Parser.Decimalliteral = 135;
CPP14Parser.Octalliteral = 136;
CPP14Parser.Hexadecimalliteral = 137;
CPP14Parser.Binaryliteral = 138;
CPP14Parser.Integersuffix = 139;
CPP14Parser.Characterliteral = 140;
CPP14Parser.Floatingliteral = 141;
CPP14Parser.Stringliteral = 142;
CPP14Parser.Userdefinedintegerliteral = 143;
CPP14Parser.Userdefinedfloatingliteral = 144;
CPP14Parser.Userdefinedstringliteral = 145;
CPP14Parser.Userdefinedcharacterliteral = 146;
CPP14Parser.Whitespace = 147;
CPP14Parser.Newline = 148;
CPP14Parser.BlockComment = 149;
CPP14Parser.LineComment = 150;

CPP14Parser.RULE_translationunit = 0;
CPP14Parser.RULE_primaryexpression = 1;
CPP14Parser.RULE_idexpression = 2;
CPP14Parser.RULE_unqualifiedid = 3;
CPP14Parser.RULE_qualifiedid = 4;
CPP14Parser.RULE_nestednamespecifier = 5;
CPP14Parser.RULE_lambdaexpression = 6;
CPP14Parser.RULE_lambdaintroducer = 7;
CPP14Parser.RULE_lambdacapture = 8;
CPP14Parser.RULE_capturedefault = 9;
CPP14Parser.RULE_capturelist = 10;
CPP14Parser.RULE_capture = 11;
CPP14Parser.RULE_simplecapture = 12;
CPP14Parser.RULE_initcapture = 13;
CPP14Parser.RULE_lambdadeclarator = 14;
CPP14Parser.RULE_postfixexpression = 15;
CPP14Parser.RULE_typeidofexpr = 16;
CPP14Parser.RULE_typeidofthetypeid = 17;
CPP14Parser.RULE_expressionlist = 18;
CPP14Parser.RULE_pseudodestructorname = 19;
CPP14Parser.RULE_unaryexpression = 20;
CPP14Parser.RULE_unaryoperator = 21;
CPP14Parser.RULE_newexpression = 22;
CPP14Parser.RULE_newplacement = 23;
CPP14Parser.RULE_newtypeid = 24;
CPP14Parser.RULE_newdeclarator = 25;
CPP14Parser.RULE_noptrnewdeclarator = 26;
CPP14Parser.RULE_newinitializer = 27;
CPP14Parser.RULE_deleteexpression = 28;
CPP14Parser.RULE_noexceptexpression = 29;
CPP14Parser.RULE_castexpression = 30;
CPP14Parser.RULE_pmexpression = 31;
CPP14Parser.RULE_multiplicativeexpression = 32;
CPP14Parser.RULE_additiveexpression = 33;
CPP14Parser.RULE_shiftexpression = 34;
CPP14Parser.RULE_shiftoperator = 35;
CPP14Parser.RULE_relationalexpression = 36;
CPP14Parser.RULE_equalityexpression = 37;
CPP14Parser.RULE_andexpression = 38;
CPP14Parser.RULE_exclusiveorexpression = 39;
CPP14Parser.RULE_inclusiveorexpression = 40;
CPP14Parser.RULE_logicalandexpression = 41;
CPP14Parser.RULE_logicalorexpression = 42;
CPP14Parser.RULE_conditionalexpression = 43;
CPP14Parser.RULE_assignmentexpression = 44;
CPP14Parser.RULE_assignmentoperator = 45;
CPP14Parser.RULE_expression = 46;
CPP14Parser.RULE_constantexpression = 47;
CPP14Parser.RULE_statement = 48;
CPP14Parser.RULE_labeledstatement = 49;
CPP14Parser.RULE_expressionstatement = 50;
CPP14Parser.RULE_compoundstatement = 51;
CPP14Parser.RULE_statementseq = 52;
CPP14Parser.RULE_selectionstatement = 53;
CPP14Parser.RULE_condition = 54;
CPP14Parser.RULE_iterationstatement = 55;
CPP14Parser.RULE_forinitstatement = 56;
CPP14Parser.RULE_forrangedeclaration = 57;
CPP14Parser.RULE_forrangeinitializer = 58;
CPP14Parser.RULE_jumpstatement = 59;
CPP14Parser.RULE_declarationstatement = 60;
CPP14Parser.RULE_declarationseq = 61;
CPP14Parser.RULE_declaration = 62;
CPP14Parser.RULE_blockdeclaration = 63;
CPP14Parser.RULE_aliasdeclaration = 64;
CPP14Parser.RULE_simpledeclaration = 65;
CPP14Parser.RULE_static_assertdeclaration = 66;
CPP14Parser.RULE_emptydeclaration = 67;
CPP14Parser.RULE_attributedeclaration = 68;
CPP14Parser.RULE_declspecifier = 69;
CPP14Parser.RULE_declspecifierseq = 70;
CPP14Parser.RULE_storageclassspecifier = 71;
CPP14Parser.RULE_functionspecifier = 72;
CPP14Parser.RULE_typedefname = 73;
CPP14Parser.RULE_typespecifier = 74;
CPP14Parser.RULE_trailingtypespecifier = 75;
CPP14Parser.RULE_typespecifierseq = 76;
CPP14Parser.RULE_trailingtypespecifierseq = 77;
CPP14Parser.RULE_simpletypespecifier = 78;
CPP14Parser.RULE_thetypename = 79;
CPP14Parser.RULE_decltypespecifier = 80;
CPP14Parser.RULE_elaboratedtypespecifier = 81;
CPP14Parser.RULE_enumname = 82;
CPP14Parser.RULE_enumspecifier = 83;
CPP14Parser.RULE_enumhead = 84;
CPP14Parser.RULE_opaqueenumdeclaration = 85;
CPP14Parser.RULE_enumkey = 86;
CPP14Parser.RULE_enumbase = 87;
CPP14Parser.RULE_enumeratorlist = 88;
CPP14Parser.RULE_enumeratordefinition = 89;
CPP14Parser.RULE_enumerator = 90;
CPP14Parser.RULE_namespacename = 91;
CPP14Parser.RULE_originalnamespacename = 92;
CPP14Parser.RULE_namespacedefinition = 93;
CPP14Parser.RULE_namednamespacedefinition = 94;
CPP14Parser.RULE_originalnamespacedefinition = 95;
CPP14Parser.RULE_extensionnamespacedefinition = 96;
CPP14Parser.RULE_unnamednamespacedefinition = 97;
CPP14Parser.RULE_namespacebody = 98;
CPP14Parser.RULE_namespacealias = 99;
CPP14Parser.RULE_namespacealiasdefinition = 100;
CPP14Parser.RULE_qualifiednamespacespecifier = 101;
CPP14Parser.RULE_usingdeclaration = 102;
CPP14Parser.RULE_usingdirective = 103;
CPP14Parser.RULE_asmdefinition = 104;
CPP14Parser.RULE_linkagespecification = 105;
CPP14Parser.RULE_attributespecifierseq = 106;
CPP14Parser.RULE_attributespecifier = 107;
CPP14Parser.RULE_alignmentspecifier = 108;
CPP14Parser.RULE_attributelist = 109;
CPP14Parser.RULE_attribute = 110;
CPP14Parser.RULE_attributetoken = 111;
CPP14Parser.RULE_attributescopedtoken = 112;
CPP14Parser.RULE_attributenamespace = 113;
CPP14Parser.RULE_attributeargumentclause = 114;
CPP14Parser.RULE_balancedtokenseq = 115;
CPP14Parser.RULE_balancedtoken = 116;
CPP14Parser.RULE_initdeclaratorlist = 117;
CPP14Parser.RULE_initdeclarator = 118;
CPP14Parser.RULE_declarator = 119;
CPP14Parser.RULE_ptrdeclarator = 120;
CPP14Parser.RULE_noptrdeclarator = 121;
CPP14Parser.RULE_parametersandqualifiers = 122;
CPP14Parser.RULE_trailingreturntype = 123;
CPP14Parser.RULE_ptroperator = 124;
CPP14Parser.RULE_cvqualifierseq = 125;
CPP14Parser.RULE_cvqualifier = 126;
CPP14Parser.RULE_refqualifier = 127;
CPP14Parser.RULE_declaratorid = 128;
CPP14Parser.RULE_thetypeid = 129;
CPP14Parser.RULE_abstractdeclarator = 130;
CPP14Parser.RULE_ptrabstractdeclarator = 131;
CPP14Parser.RULE_noptrabstractdeclarator = 132;
CPP14Parser.RULE_abstractpackdeclarator = 133;
CPP14Parser.RULE_noptrabstractpackdeclarator = 134;
CPP14Parser.RULE_parameterdeclarationclause = 135;
CPP14Parser.RULE_parameterdeclarationlist = 136;
CPP14Parser.RULE_parameterdeclaration = 137;
CPP14Parser.RULE_functiondefinition = 138;
CPP14Parser.RULE_functionbody = 139;
CPP14Parser.RULE_initializer = 140;
CPP14Parser.RULE_braceorequalinitializer = 141;
CPP14Parser.RULE_initializerclause = 142;
CPP14Parser.RULE_initializerlist = 143;
CPP14Parser.RULE_bracedinitlist = 144;
CPP14Parser.RULE_classname = 145;
CPP14Parser.RULE_classspecifier = 146;
CPP14Parser.RULE_classhead = 147;
CPP14Parser.RULE_classheadname = 148;
CPP14Parser.RULE_classvirtspecifier = 149;
CPP14Parser.RULE_classkey = 150;
CPP14Parser.RULE_memberspecification = 151;
CPP14Parser.RULE_memberdeclaration = 152;
CPP14Parser.RULE_memberdeclaratorlist = 153;
CPP14Parser.RULE_memberdeclarator = 154;
CPP14Parser.RULE_virtspecifierseq = 155;
CPP14Parser.RULE_virtspecifier = 156;
CPP14Parser.RULE_purespecifier = 157;
CPP14Parser.RULE_baseclause = 158;
CPP14Parser.RULE_basespecifierlist = 159;
CPP14Parser.RULE_basespecifier = 160;
CPP14Parser.RULE_classordecltype = 161;
CPP14Parser.RULE_basetypespecifier = 162;
CPP14Parser.RULE_accessspecifier = 163;
CPP14Parser.RULE_conversionfunctionid = 164;
CPP14Parser.RULE_conversiontypeid = 165;
CPP14Parser.RULE_conversiondeclarator = 166;
CPP14Parser.RULE_ctorinitializer = 167;
CPP14Parser.RULE_meminitializerlist = 168;
CPP14Parser.RULE_meminitializer = 169;
CPP14Parser.RULE_meminitializerid = 170;
CPP14Parser.RULE_operatorfunctionid = 171;
CPP14Parser.RULE_literaloperatorid = 172;
CPP14Parser.RULE_templatedeclaration = 173;
CPP14Parser.RULE_templateparameterlist = 174;
CPP14Parser.RULE_templateparameter = 175;
CPP14Parser.RULE_typeparameter = 176;
CPP14Parser.RULE_simpletemplateid = 177;
CPP14Parser.RULE_templateid = 178;
CPP14Parser.RULE_templatename = 179;
CPP14Parser.RULE_templateargumentlist = 180;
CPP14Parser.RULE_templateargument = 181;
CPP14Parser.RULE_typenamespecifier = 182;
CPP14Parser.RULE_explicitinstantiation = 183;
CPP14Parser.RULE_explicitspecialization = 184;
CPP14Parser.RULE_tryblock = 185;
CPP14Parser.RULE_functiontryblock = 186;
CPP14Parser.RULE_handlerseq = 187;
CPP14Parser.RULE_handler = 188;
CPP14Parser.RULE_exceptiondeclaration = 189;
CPP14Parser.RULE_throwexpression = 190;
CPP14Parser.RULE_exceptionspecification = 191;
CPP14Parser.RULE_dynamicexceptionspecification = 192;
CPP14Parser.RULE_typeidlist = 193;
CPP14Parser.RULE_noexceptspecification = 194;
CPP14Parser.RULE_theoperator = 195;
CPP14Parser.RULE_literal = 196;
CPP14Parser.RULE_booleanliteral = 197;
CPP14Parser.RULE_pointerliteral = 198;
CPP14Parser.RULE_userdefinedliteral = 199;


function TranslationunitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_translationunit;
    return this;
}

TranslationunitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TranslationunitContext.prototype.constructor = TranslationunitContext;

TranslationunitContext.prototype.EOF = function() {
    return this.getToken(CPP14Parser.EOF, 0);
};

TranslationunitContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

TranslationunitContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTranslationunit(this);
	}
};

TranslationunitContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTranslationunit(this);
	}
};




CPP14Parser.TranslationunitContext = TranslationunitContext;

CPP14Parser.prototype.translationunit = function() {

    var localctx = new TranslationunitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CPP14Parser.RULE_translationunit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 401;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CPP14Parser.T__2 - 3)) | (1 << (CPP14Parser.Alignas - 3)) | (1 << (CPP14Parser.Asm - 3)) | (1 << (CPP14Parser.Auto - 3)) | (1 << (CPP14Parser.Bool - 3)) | (1 << (CPP14Parser.Char - 3)) | (1 << (CPP14Parser.Char16 - 3)) | (1 << (CPP14Parser.Char32 - 3)) | (1 << (CPP14Parser.Class - 3)) | (1 << (CPP14Parser.Const - 3)) | (1 << (CPP14Parser.Constexpr - 3)) | (1 << (CPP14Parser.Decltype - 3)) | (1 << (CPP14Parser.Double - 3)) | (1 << (CPP14Parser.Enum - 3)) | (1 << (CPP14Parser.Explicit - 3)))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CPP14Parser.Extern - 35)) | (1 << (CPP14Parser.Float - 35)) | (1 << (CPP14Parser.Friend - 35)) | (1 << (CPP14Parser.Inline - 35)) | (1 << (CPP14Parser.Int - 35)) | (1 << (CPP14Parser.Long - 35)) | (1 << (CPP14Parser.Mutable - 35)) | (1 << (CPP14Parser.Namespace - 35)) | (1 << (CPP14Parser.Operator - 35)) | (1 << (CPP14Parser.Register - 35)) | (1 << (CPP14Parser.Short - 35)) | (1 << (CPP14Parser.Signed - 35)) | (1 << (CPP14Parser.Static - 35)) | (1 << (CPP14Parser.Static_assert - 35)) | (1 << (CPP14Parser.Struct - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Template - 67)) | (1 << (CPP14Parser.Thread_local - 67)) | (1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename_ - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Semi - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)))) !== 0)) {
            this.state = 400;
            this.declarationseq(0);
        }

        this.state = 403;
        this.match(CPP14Parser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_primaryexpression;
    return this;
}

PrimaryexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryexpressionContext.prototype.constructor = PrimaryexpressionContext;

PrimaryexpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryexpressionContext.prototype.This = function() {
    return this.getToken(CPP14Parser.This, 0);
};

PrimaryexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

PrimaryexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

PrimaryexpressionContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

PrimaryexpressionContext.prototype.lambdaexpression = function() {
    return this.getTypedRuleContext(LambdaexpressionContext,0);
};

PrimaryexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterPrimaryexpression(this);
	}
};

PrimaryexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitPrimaryexpression(this);
	}
};




CPP14Parser.PrimaryexpressionContext = PrimaryexpressionContext;

CPP14Parser.prototype.primaryexpression = function() {

    var localctx = new PrimaryexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CPP14Parser.RULE_primaryexpression);
    try {
        this.state = 413;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.False:
        case CPP14Parser.Nullptr:
        case CPP14Parser.True:
        case CPP14Parser.Integerliteral:
        case CPP14Parser.Characterliteral:
        case CPP14Parser.Floatingliteral:
        case CPP14Parser.Stringliteral:
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 405;
            this.literal();
            break;
        case CPP14Parser.This:
            this.enterOuterAlt(localctx, 2);
            this.state = 406;
            this.match(CPP14Parser.This);
            break;
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 3);
            this.state = 407;
            this.match(CPP14Parser.LeftParen);
            this.state = 408;
            this.expression(0);
            this.state = 409;
            this.match(CPP14Parser.RightParen);
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Operator:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 4);
            this.state = 411;
            this.idexpression();
            break;
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 5);
            this.state = 412;
            this.lambdaexpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_idexpression;
    return this;
}

IdexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdexpressionContext.prototype.constructor = IdexpressionContext;

IdexpressionContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

IdexpressionContext.prototype.qualifiedid = function() {
    return this.getTypedRuleContext(QualifiedidContext,0);
};

IdexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterIdexpression(this);
	}
};

IdexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitIdexpression(this);
	}
};




CPP14Parser.IdexpressionContext = IdexpressionContext;

CPP14Parser.prototype.idexpression = function() {

    var localctx = new IdexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CPP14Parser.RULE_idexpression);
    try {
        this.state = 417;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 415;
            this.unqualifiedid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 416;
            this.qualifiedid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnqualifiedidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unqualifiedid;
    return this;
}

UnqualifiedidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnqualifiedidContext.prototype.constructor = UnqualifiedidContext;

UnqualifiedidContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

UnqualifiedidContext.prototype.operatorfunctionid = function() {
    return this.getTypedRuleContext(OperatorfunctionidContext,0);
};

UnqualifiedidContext.prototype.conversionfunctionid = function() {
    return this.getTypedRuleContext(ConversionfunctionidContext,0);
};

UnqualifiedidContext.prototype.literaloperatorid = function() {
    return this.getTypedRuleContext(LiteraloperatoridContext,0);
};

UnqualifiedidContext.prototype.Tilde = function() {
    return this.getToken(CPP14Parser.Tilde, 0);
};

UnqualifiedidContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

UnqualifiedidContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

UnqualifiedidContext.prototype.templateid = function() {
    return this.getTypedRuleContext(TemplateidContext,0);
};

UnqualifiedidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterUnqualifiedid(this);
	}
};

UnqualifiedidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitUnqualifiedid(this);
	}
};




CPP14Parser.UnqualifiedidContext = UnqualifiedidContext;

CPP14Parser.prototype.unqualifiedid = function() {

    var localctx = new UnqualifiedidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CPP14Parser.RULE_unqualifiedid);
    try {
        this.state = 428;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 419;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 420;
            this.operatorfunctionid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 421;
            this.conversionfunctionid();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 422;
            this.literaloperatorid();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 423;
            this.match(CPP14Parser.Tilde);
            this.state = 424;
            this.classname();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 425;
            this.match(CPP14Parser.Tilde);
            this.state = 426;
            this.decltypespecifier();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 427;
            this.templateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_qualifiedid;
    return this;
}

QualifiedidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedidContext.prototype.constructor = QualifiedidContext;

QualifiedidContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

QualifiedidContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

QualifiedidContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

QualifiedidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterQualifiedid(this);
	}
};

QualifiedidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitQualifiedid(this);
	}
};




CPP14Parser.QualifiedidContext = QualifiedidContext;

CPP14Parser.prototype.qualifiedid = function() {

    var localctx = new QualifiedidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CPP14Parser.RULE_qualifiedid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this.nestednamespecifier(0);
        this.state = 432;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Template) {
            this.state = 431;
            this.match(CPP14Parser.Template);
        }

        this.state = 434;
        this.unqualifiedid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NestednamespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_nestednamespecifier;
    return this;
}

NestednamespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestednamespecifierContext.prototype.constructor = NestednamespecifierContext;

NestednamespecifierContext.prototype.Doublecolon = function() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
};

NestednamespecifierContext.prototype.thetypename = function() {
    return this.getTypedRuleContext(ThetypenameContext,0);
};

NestednamespecifierContext.prototype.namespacename = function() {
    return this.getTypedRuleContext(NamespacenameContext,0);
};

NestednamespecifierContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

NestednamespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

NestednamespecifierContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

NestednamespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

NestednamespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

NestednamespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNestednamespecifier(this);
	}
};

NestednamespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNestednamespecifier(this);
	}
};



CPP14Parser.prototype.nestednamespecifier = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NestednamespecifierContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 10;
    this.enterRecursionRule(localctx, 10, CPP14Parser.RULE_nestednamespecifier, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 447;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.state = 437;
            this.match(CPP14Parser.Doublecolon);
            break;

        case 2:
            this.state = 438;
            this.thetypename();
            this.state = 439;
            this.match(CPP14Parser.Doublecolon);
            break;

        case 3:
            this.state = 441;
            this.namespacename();
            this.state = 442;
            this.match(CPP14Parser.Doublecolon);
            break;

        case 4:
            this.state = 444;
            this.decltypespecifier();
            this.state = 445;
            this.match(CPP14Parser.Doublecolon);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 461;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 459;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NestednamespecifierContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_nestednamespecifier);
                    this.state = 449;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 450;
                    this.match(CPP14Parser.Identifier);
                    this.state = 451;
                    this.match(CPP14Parser.Doublecolon);
                    break;

                case 2:
                    localctx = new NestednamespecifierContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_nestednamespecifier);
                    this.state = 452;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 454;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CPP14Parser.Template) {
                        this.state = 453;
                        this.match(CPP14Parser.Template);
                    }

                    this.state = 456;
                    this.simpletemplateid();
                    this.state = 457;
                    this.match(CPP14Parser.Doublecolon);
                    break;

                } 
            }
            this.state = 463;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function LambdaexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaexpression;
    return this;
}

LambdaexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaexpressionContext.prototype.constructor = LambdaexpressionContext;

LambdaexpressionContext.prototype.lambdaintroducer = function() {
    return this.getTypedRuleContext(LambdaintroducerContext,0);
};

LambdaexpressionContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

LambdaexpressionContext.prototype.lambdadeclarator = function() {
    return this.getTypedRuleContext(LambdadeclaratorContext,0);
};

LambdaexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLambdaexpression(this);
	}
};

LambdaexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLambdaexpression(this);
	}
};




CPP14Parser.LambdaexpressionContext = LambdaexpressionContext;

CPP14Parser.prototype.lambdaexpression = function() {

    var localctx = new LambdaexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CPP14Parser.RULE_lambdaexpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 464;
        this.lambdaintroducer();
        this.state = 466;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.LeftParen) {
            this.state = 465;
            this.lambdadeclarator();
        }

        this.state = 468;
        this.compoundstatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LambdaintroducerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaintroducer;
    return this;
}

LambdaintroducerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaintroducerContext.prototype.constructor = LambdaintroducerContext;

LambdaintroducerContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

LambdaintroducerContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

LambdaintroducerContext.prototype.lambdacapture = function() {
    return this.getTypedRuleContext(LambdacaptureContext,0);
};

LambdaintroducerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLambdaintroducer(this);
	}
};

LambdaintroducerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLambdaintroducer(this);
	}
};




CPP14Parser.LambdaintroducerContext = LambdaintroducerContext;

CPP14Parser.prototype.lambdaintroducer = function() {

    var localctx = new LambdaintroducerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CPP14Parser.RULE_lambdaintroducer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 470;
        this.match(CPP14Parser.LeftBracket);
        this.state = 472;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.This || _la===CPP14Parser.And || _la===CPP14Parser.Assign || _la===CPP14Parser.Identifier) {
            this.state = 471;
            this.lambdacapture();
        }

        this.state = 474;
        this.match(CPP14Parser.RightBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LambdacaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdacapture;
    return this;
}

LambdacaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdacaptureContext.prototype.constructor = LambdacaptureContext;

LambdacaptureContext.prototype.capturedefault = function() {
    return this.getTypedRuleContext(CapturedefaultContext,0);
};

LambdacaptureContext.prototype.capturelist = function() {
    return this.getTypedRuleContext(CapturelistContext,0);
};

LambdacaptureContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

LambdacaptureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLambdacapture(this);
	}
};

LambdacaptureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLambdacapture(this);
	}
};




CPP14Parser.LambdacaptureContext = LambdacaptureContext;

CPP14Parser.prototype.lambdacapture = function() {

    var localctx = new LambdacaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CPP14Parser.RULE_lambdacapture);
    try {
        this.state = 482;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 476;
            this.capturedefault();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 477;
            this.capturelist(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 478;
            this.capturedefault();
            this.state = 479;
            this.match(CPP14Parser.Comma);
            this.state = 480;
            this.capturelist(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CapturedefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capturedefault;
    return this;
}

CapturedefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CapturedefaultContext.prototype.constructor = CapturedefaultContext;

CapturedefaultContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

CapturedefaultContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

CapturedefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterCapturedefault(this);
	}
};

CapturedefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitCapturedefault(this);
	}
};




CPP14Parser.CapturedefaultContext = CapturedefaultContext;

CPP14Parser.prototype.capturedefault = function() {

    var localctx = new CapturedefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CPP14Parser.RULE_capturedefault);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.And || _la===CPP14Parser.Assign)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CapturelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capturelist;
    return this;
}

CapturelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CapturelistContext.prototype.constructor = CapturelistContext;

CapturelistContext.prototype.capture = function() {
    return this.getTypedRuleContext(CaptureContext,0);
};

CapturelistContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

CapturelistContext.prototype.capturelist = function() {
    return this.getTypedRuleContext(CapturelistContext,0);
};

CapturelistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

CapturelistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterCapturelist(this);
	}
};

CapturelistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitCapturelist(this);
	}
};



CPP14Parser.prototype.capturelist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CapturelistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 20;
    this.enterRecursionRule(localctx, 20, CPP14Parser.RULE_capturelist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this.capture();
        this.state = 489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        if(la_===1) {
            this.state = 488;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 499;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CapturelistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_capturelist);
                this.state = 491;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 492;
                this.match(CPP14Parser.Comma);
                this.state = 493;
                this.capture();
                this.state = 495;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
                if(la_===1) {
                    this.state = 494;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 501;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function CaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capture;
    return this;
}

CaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaptureContext.prototype.constructor = CaptureContext;

CaptureContext.prototype.simplecapture = function() {
    return this.getTypedRuleContext(SimplecaptureContext,0);
};

CaptureContext.prototype.initcapture = function() {
    return this.getTypedRuleContext(InitcaptureContext,0);
};

CaptureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterCapture(this);
	}
};

CaptureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitCapture(this);
	}
};




CPP14Parser.CaptureContext = CaptureContext;

CPP14Parser.prototype.capture = function() {

    var localctx = new CaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CPP14Parser.RULE_capture);
    try {
        this.state = 504;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 502;
            this.simplecapture();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 503;
            this.initcapture();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimplecaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simplecapture;
    return this;
}

SimplecaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimplecaptureContext.prototype.constructor = SimplecaptureContext;

SimplecaptureContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

SimplecaptureContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

SimplecaptureContext.prototype.This = function() {
    return this.getToken(CPP14Parser.This, 0);
};

SimplecaptureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterSimplecapture(this);
	}
};

SimplecaptureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitSimplecapture(this);
	}
};




CPP14Parser.SimplecaptureContext = SimplecaptureContext;

CPP14Parser.prototype.simplecapture = function() {

    var localctx = new SimplecaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CPP14Parser.RULE_simplecapture);
    try {
        this.state = 510;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 506;
            this.match(CPP14Parser.Identifier);
            break;
        case CPP14Parser.And:
            this.enterOuterAlt(localctx, 2);
            this.state = 507;
            this.match(CPP14Parser.And);
            this.state = 508;
            this.match(CPP14Parser.Identifier);
            break;
        case CPP14Parser.This:
            this.enterOuterAlt(localctx, 3);
            this.state = 509;
            this.match(CPP14Parser.This);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitcaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initcapture;
    return this;
}

InitcaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitcaptureContext.prototype.constructor = InitcaptureContext;

InitcaptureContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

InitcaptureContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitcaptureContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

InitcaptureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterInitcapture(this);
	}
};

InitcaptureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitInitcapture(this);
	}
};




CPP14Parser.InitcaptureContext = InitcaptureContext;

CPP14Parser.prototype.initcapture = function() {

    var localctx = new InitcaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CPP14Parser.RULE_initcapture);
    try {
        this.state = 517;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 512;
            this.match(CPP14Parser.Identifier);
            this.state = 513;
            this.initializer();
            break;
        case CPP14Parser.And:
            this.enterOuterAlt(localctx, 2);
            this.state = 514;
            this.match(CPP14Parser.And);
            this.state = 515;
            this.match(CPP14Parser.Identifier);
            this.state = 516;
            this.initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LambdadeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdadeclarator;
    return this;
}

LambdadeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdadeclaratorContext.prototype.constructor = LambdadeclaratorContext;

LambdadeclaratorContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

LambdadeclaratorContext.prototype.parameterdeclarationclause = function() {
    return this.getTypedRuleContext(ParameterdeclarationclauseContext,0);
};

LambdadeclaratorContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

LambdadeclaratorContext.prototype.Mutable = function() {
    return this.getToken(CPP14Parser.Mutable, 0);
};

LambdadeclaratorContext.prototype.exceptionspecification = function() {
    return this.getTypedRuleContext(ExceptionspecificationContext,0);
};

LambdadeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

LambdadeclaratorContext.prototype.trailingreturntype = function() {
    return this.getTypedRuleContext(TrailingreturntypeContext,0);
};

LambdadeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLambdadeclarator(this);
	}
};

LambdadeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLambdadeclarator(this);
	}
};




CPP14Parser.LambdadeclaratorContext = LambdadeclaratorContext;

CPP14Parser.prototype.lambdadeclarator = function() {

    var localctx = new LambdadeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CPP14Parser.RULE_lambdadeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this.match(CPP14Parser.LeftParen);
        this.state = 520;
        this.parameterdeclarationclause();
        this.state = 521;
        this.match(CPP14Parser.RightParen);
        this.state = 523;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Mutable) {
            this.state = 522;
            this.match(CPP14Parser.Mutable);
        }

        this.state = 526;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Noexcept || _la===CPP14Parser.Throw) {
            this.state = 525;
            this.exceptionspecification();
        }

        this.state = 529;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 528;
            this.attributespecifierseq(0);
        }

        this.state = 532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Arrow) {
            this.state = 531;
            this.trailingreturntype();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_postfixexpression;
    return this;
}

PostfixexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixexpressionContext.prototype.constructor = PostfixexpressionContext;

PostfixexpressionContext.prototype.primaryexpression = function() {
    return this.getTypedRuleContext(PrimaryexpressionContext,0);
};

PostfixexpressionContext.prototype.simpletypespecifier = function() {
    return this.getTypedRuleContext(SimpletypespecifierContext,0);
};

PostfixexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

PostfixexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

PostfixexpressionContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

PostfixexpressionContext.prototype.typenamespecifier = function() {
    return this.getTypedRuleContext(TypenamespecifierContext,0);
};

PostfixexpressionContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

PostfixexpressionContext.prototype.Dynamic_cast = function() {
    return this.getToken(CPP14Parser.Dynamic_cast, 0);
};

PostfixexpressionContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

PostfixexpressionContext.prototype.thetypeid = function() {
    return this.getTypedRuleContext(ThetypeidContext,0);
};

PostfixexpressionContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

PostfixexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PostfixexpressionContext.prototype.Static_cast = function() {
    return this.getToken(CPP14Parser.Static_cast, 0);
};

PostfixexpressionContext.prototype.Reinterpret_cast = function() {
    return this.getToken(CPP14Parser.Reinterpret_cast, 0);
};

PostfixexpressionContext.prototype.Const_cast = function() {
    return this.getToken(CPP14Parser.Const_cast, 0);
};

PostfixexpressionContext.prototype.typeidofthetypeid = function() {
    return this.getTypedRuleContext(TypeidofthetypeidContext,0);
};

PostfixexpressionContext.prototype.postfixexpression = function() {
    return this.getTypedRuleContext(PostfixexpressionContext,0);
};

PostfixexpressionContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

PostfixexpressionContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

PostfixexpressionContext.prototype.Dot = function() {
    return this.getToken(CPP14Parser.Dot, 0);
};

PostfixexpressionContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

PostfixexpressionContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

PostfixexpressionContext.prototype.Arrow = function() {
    return this.getToken(CPP14Parser.Arrow, 0);
};

PostfixexpressionContext.prototype.pseudodestructorname = function() {
    return this.getTypedRuleContext(PseudodestructornameContext,0);
};

PostfixexpressionContext.prototype.PlusPlus = function() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
};

PostfixexpressionContext.prototype.MinusMinus = function() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
};

PostfixexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterPostfixexpression(this);
	}
};

PostfixexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitPostfixexpression(this);
	}
};



CPP14Parser.prototype.postfixexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PostfixexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 30;
    this.enterRecursionRule(localctx, 30, CPP14Parser.RULE_postfixexpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            this.state = 535;
            this.primaryexpression();
            break;

        case 2:
            this.state = 536;
            this.simpletypespecifier();
            this.state = 537;
            this.match(CPP14Parser.LeftParen);
            this.state = 539;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.Throw - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.LeftBrace - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                this.state = 538;
                this.expressionlist();
            }

            this.state = 541;
            this.match(CPP14Parser.RightParen);
            break;

        case 3:
            this.state = 543;
            this.typenamespecifier();
            this.state = 544;
            this.match(CPP14Parser.LeftParen);
            this.state = 546;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.Throw - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.LeftBrace - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                this.state = 545;
                this.expressionlist();
            }

            this.state = 548;
            this.match(CPP14Parser.RightParen);
            break;

        case 4:
            this.state = 550;
            this.simpletypespecifier();
            this.state = 551;
            this.bracedinitlist();
            break;

        case 5:
            this.state = 553;
            this.typenamespecifier();
            this.state = 554;
            this.bracedinitlist();
            break;

        case 6:
            this.state = 556;
            this.match(CPP14Parser.Dynamic_cast);
            this.state = 557;
            this.match(CPP14Parser.Less);
            this.state = 558;
            this.thetypeid();
            this.state = 559;
            this.match(CPP14Parser.Greater);
            this.state = 560;
            this.match(CPP14Parser.LeftParen);
            this.state = 561;
            this.expression(0);
            this.state = 562;
            this.match(CPP14Parser.RightParen);
            break;

        case 7:
            this.state = 564;
            this.match(CPP14Parser.Static_cast);
            this.state = 565;
            this.match(CPP14Parser.Less);
            this.state = 566;
            this.thetypeid();
            this.state = 567;
            this.match(CPP14Parser.Greater);
            this.state = 568;
            this.match(CPP14Parser.LeftParen);
            this.state = 569;
            this.expression(0);
            this.state = 570;
            this.match(CPP14Parser.RightParen);
            break;

        case 8:
            this.state = 572;
            this.match(CPP14Parser.Reinterpret_cast);
            this.state = 573;
            this.match(CPP14Parser.Less);
            this.state = 574;
            this.thetypeid();
            this.state = 575;
            this.match(CPP14Parser.Greater);
            this.state = 576;
            this.match(CPP14Parser.LeftParen);
            this.state = 577;
            this.expression(0);
            this.state = 578;
            this.match(CPP14Parser.RightParen);
            break;

        case 9:
            this.state = 580;
            this.match(CPP14Parser.Const_cast);
            this.state = 581;
            this.match(CPP14Parser.Less);
            this.state = 582;
            this.thetypeid();
            this.state = 583;
            this.match(CPP14Parser.Greater);
            this.state = 584;
            this.match(CPP14Parser.LeftParen);
            this.state = 585;
            this.expression(0);
            this.state = 586;
            this.match(CPP14Parser.RightParen);
            break;

        case 10:
            this.state = 588;
            this.typeidofthetypeid();
            this.state = 589;
            this.match(CPP14Parser.LeftParen);
            this.state = 590;
            this.expression(0);
            this.state = 591;
            this.match(CPP14Parser.RightParen);
            break;

        case 11:
            this.state = 593;
            this.typeidofthetypeid();
            this.state = 594;
            this.match(CPP14Parser.LeftParen);
            this.state = 595;
            this.thetypeid();
            this.state = 596;
            this.match(CPP14Parser.RightParen);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 640;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 638;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 600;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 601;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 602;
                    this.expression(0);
                    this.state = 603;
                    this.match(CPP14Parser.RightBracket);
                    break;

                case 2:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 605;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 606;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 607;
                    this.bracedinitlist();
                    this.state = 608;
                    this.match(CPP14Parser.RightBracket);
                    break;

                case 3:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 610;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 611;
                    this.match(CPP14Parser.LeftParen);
                    this.state = 613;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.Throw - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.LeftBrace - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                        this.state = 612;
                        this.expressionlist();
                    }

                    this.state = 615;
                    this.match(CPP14Parser.RightParen);
                    break;

                case 4:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 616;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 617;
                    this.match(CPP14Parser.Dot);
                    this.state = 619;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CPP14Parser.Template) {
                        this.state = 618;
                        this.match(CPP14Parser.Template);
                    }

                    this.state = 621;
                    this.idexpression();
                    break;

                case 5:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 622;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 623;
                    this.match(CPP14Parser.Arrow);
                    this.state = 625;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CPP14Parser.Template) {
                        this.state = 624;
                        this.match(CPP14Parser.Template);
                    }

                    this.state = 627;
                    this.idexpression();
                    break;

                case 6:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 628;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 629;
                    this.match(CPP14Parser.Dot);
                    this.state = 630;
                    this.pseudodestructorname();
                    break;

                case 7:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 631;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 632;
                    this.match(CPP14Parser.Arrow);
                    this.state = 633;
                    this.pseudodestructorname();
                    break;

                case 8:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 634;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 635;
                    this.match(CPP14Parser.PlusPlus);
                    break;

                case 9:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 636;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 637;
                    this.match(CPP14Parser.MinusMinus);
                    break;

                } 
            }
            this.state = 642;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TypeidofexprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeidofexpr;
    return this;
}

TypeidofexprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeidofexprContext.prototype.constructor = TypeidofexprContext;

TypeidofexprContext.prototype.Typeid_ = function() {
    return this.getToken(CPP14Parser.Typeid_, 0);
};

TypeidofexprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTypeidofexpr(this);
	}
};

TypeidofexprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTypeidofexpr(this);
	}
};




CPP14Parser.TypeidofexprContext = TypeidofexprContext;

CPP14Parser.prototype.typeidofexpr = function() {

    var localctx = new TypeidofexprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CPP14Parser.RULE_typeidofexpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this.match(CPP14Parser.Typeid_);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeidofthetypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeidofthetypeid;
    return this;
}

TypeidofthetypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeidofthetypeidContext.prototype.constructor = TypeidofthetypeidContext;

TypeidofthetypeidContext.prototype.Typeid_ = function() {
    return this.getToken(CPP14Parser.Typeid_, 0);
};

TypeidofthetypeidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTypeidofthetypeid(this);
	}
};

TypeidofthetypeidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTypeidofthetypeid(this);
	}
};




CPP14Parser.TypeidofthetypeidContext = TypeidofthetypeidContext;

CPP14Parser.prototype.typeidofthetypeid = function() {

    var localctx = new TypeidofthetypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CPP14Parser.RULE_typeidofthetypeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 645;
        this.match(CPP14Parser.Typeid_);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expressionlist;
    return this;
}

ExpressionlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionlistContext.prototype.constructor = ExpressionlistContext;

ExpressionlistContext.prototype.initializerlist = function() {
    return this.getTypedRuleContext(InitializerlistContext,0);
};

ExpressionlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterExpressionlist(this);
	}
};

ExpressionlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitExpressionlist(this);
	}
};




CPP14Parser.ExpressionlistContext = ExpressionlistContext;

CPP14Parser.prototype.expressionlist = function() {

    var localctx = new ExpressionlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CPP14Parser.RULE_expressionlist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 647;
        this.initializerlist(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PseudodestructornameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pseudodestructorname;
    return this;
}

PseudodestructornameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PseudodestructornameContext.prototype.constructor = PseudodestructornameContext;

PseudodestructornameContext.prototype.thetypename = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ThetypenameContext);
    } else {
        return this.getTypedRuleContext(ThetypenameContext,i);
    }
};

PseudodestructornameContext.prototype.Doublecolon = function() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
};

PseudodestructornameContext.prototype.Tilde = function() {
    return this.getToken(CPP14Parser.Tilde, 0);
};

PseudodestructornameContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

PseudodestructornameContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

PseudodestructornameContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

PseudodestructornameContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

PseudodestructornameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterPseudodestructorname(this);
	}
};

PseudodestructornameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitPseudodestructorname(this);
	}
};




CPP14Parser.PseudodestructornameContext = PseudodestructornameContext;

CPP14Parser.prototype.pseudodestructorname = function() {

    var localctx = new PseudodestructornameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CPP14Parser.RULE_pseudodestructorname);
    var _la = 0; // Token type
    try {
        this.state = 671;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 650;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
            if(la_===1) {
                this.state = 649;
                this.nestednamespecifier(0);

            }
            this.state = 652;
            this.thetypename();
            this.state = 653;
            this.match(CPP14Parser.Doublecolon);
            this.state = 654;
            this.match(CPP14Parser.Tilde);
            this.state = 655;
            this.thetypename();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 657;
            this.nestednamespecifier(0);
            this.state = 658;
            this.match(CPP14Parser.Template);
            this.state = 659;
            this.simpletemplateid();
            this.state = 660;
            this.match(CPP14Parser.Doublecolon);
            this.state = 661;
            this.match(CPP14Parser.Tilde);
            this.state = 662;
            this.thetypename();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 665;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Decltype || _la===CPP14Parser.Doublecolon || _la===CPP14Parser.Identifier) {
                this.state = 664;
                this.nestednamespecifier(0);
            }

            this.state = 667;
            this.match(CPP14Parser.Tilde);
            this.state = 668;
            this.thetypename();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 669;
            this.match(CPP14Parser.Tilde);
            this.state = 670;
            this.decltypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unaryexpression;
    return this;
}

UnaryexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryexpressionContext.prototype.constructor = UnaryexpressionContext;

UnaryexpressionContext.prototype.postfixexpression = function() {
    return this.getTypedRuleContext(PostfixexpressionContext,0);
};

UnaryexpressionContext.prototype.PlusPlus = function() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
};

UnaryexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

UnaryexpressionContext.prototype.MinusMinus = function() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
};

UnaryexpressionContext.prototype.unaryoperator = function() {
    return this.getTypedRuleContext(UnaryoperatorContext,0);
};

UnaryexpressionContext.prototype.Sizeof = function() {
    return this.getToken(CPP14Parser.Sizeof, 0);
};

UnaryexpressionContext.prototype.unaryexpression = function() {
    return this.getTypedRuleContext(UnaryexpressionContext,0);
};

UnaryexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

UnaryexpressionContext.prototype.thetypeid = function() {
    return this.getTypedRuleContext(ThetypeidContext,0);
};

UnaryexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

UnaryexpressionContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

UnaryexpressionContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

UnaryexpressionContext.prototype.Alignof = function() {
    return this.getToken(CPP14Parser.Alignof, 0);
};

UnaryexpressionContext.prototype.noexceptexpression = function() {
    return this.getTypedRuleContext(NoexceptexpressionContext,0);
};

UnaryexpressionContext.prototype.newexpression = function() {
    return this.getTypedRuleContext(NewexpressionContext,0);
};

UnaryexpressionContext.prototype.deleteexpression = function() {
    return this.getTypedRuleContext(DeleteexpressionContext,0);
};

UnaryexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterUnaryexpression(this);
	}
};

UnaryexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitUnaryexpression(this);
	}
};




CPP14Parser.UnaryexpressionContext = UnaryexpressionContext;

CPP14Parser.prototype.unaryexpression = function() {

    var localctx = new UnaryexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CPP14Parser.RULE_unaryexpression);
    try {
        this.state = 701;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 673;
            this.postfixexpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 674;
            this.match(CPP14Parser.PlusPlus);
            this.state = 675;
            this.castexpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 676;
            this.match(CPP14Parser.MinusMinus);
            this.state = 677;
            this.castexpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 678;
            this.unaryoperator();
            this.state = 679;
            this.castexpression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 681;
            this.match(CPP14Parser.Sizeof);
            this.state = 682;
            this.unaryexpression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 683;
            this.match(CPP14Parser.Sizeof);
            this.state = 684;
            this.match(CPP14Parser.LeftParen);
            this.state = 685;
            this.thetypeid();
            this.state = 686;
            this.match(CPP14Parser.RightParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 688;
            this.match(CPP14Parser.Sizeof);
            this.state = 689;
            this.match(CPP14Parser.Ellipsis);
            this.state = 690;
            this.match(CPP14Parser.LeftParen);
            this.state = 691;
            this.match(CPP14Parser.Identifier);
            this.state = 692;
            this.match(CPP14Parser.RightParen);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 693;
            this.match(CPP14Parser.Alignof);
            this.state = 694;
            this.match(CPP14Parser.LeftParen);
            this.state = 695;
            this.thetypeid();
            this.state = 696;
            this.match(CPP14Parser.RightParen);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 698;
            this.noexceptexpression();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 699;
            this.newexpression();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 700;
            this.deleteexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unaryoperator;
    return this;
}

UnaryoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryoperatorContext.prototype.constructor = UnaryoperatorContext;

UnaryoperatorContext.prototype.Or = function() {
    return this.getToken(CPP14Parser.Or, 0);
};

UnaryoperatorContext.prototype.Star = function() {
    return this.getToken(CPP14Parser.Star, 0);
};

UnaryoperatorContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

UnaryoperatorContext.prototype.Plus = function() {
    return this.getToken(CPP14Parser.Plus, 0);
};

UnaryoperatorContext.prototype.Tilde = function() {
    return this.getToken(CPP14Parser.Tilde, 0);
};

UnaryoperatorContext.prototype.Minus = function() {
    return this.getToken(CPP14Parser.Minus, 0);
};

UnaryoperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterUnaryoperator(this);
	}
};

UnaryoperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitUnaryoperator(this);
	}
};




CPP14Parser.UnaryoperatorContext = UnaryoperatorContext;

CPP14Parser.prototype.unaryoperator = function() {

    var localctx = new UnaryoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CPP14Parser.RULE_unaryoperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.T__0 || _la===CPP14Parser.T__1 || ((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (CPP14Parser.Plus - 90)) | (1 << (CPP14Parser.Minus - 90)) | (1 << (CPP14Parser.Star - 90)) | (1 << (CPP14Parser.And - 90)) | (1 << (CPP14Parser.Or - 90)) | (1 << (CPP14Parser.Tilde - 90)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NewexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newexpression;
    return this;
}

NewexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewexpressionContext.prototype.constructor = NewexpressionContext;

NewexpressionContext.prototype.New = function() {
    return this.getToken(CPP14Parser.New, 0);
};

NewexpressionContext.prototype.newtypeid = function() {
    return this.getTypedRuleContext(NewtypeidContext,0);
};

NewexpressionContext.prototype.Doublecolon = function() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
};

NewexpressionContext.prototype.newplacement = function() {
    return this.getTypedRuleContext(NewplacementContext,0);
};

NewexpressionContext.prototype.newinitializer = function() {
    return this.getTypedRuleContext(NewinitializerContext,0);
};

NewexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

NewexpressionContext.prototype.thetypeid = function() {
    return this.getTypedRuleContext(ThetypeidContext,0);
};

NewexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

NewexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNewexpression(this);
	}
};

NewexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNewexpression(this);
	}
};




CPP14Parser.NewexpressionContext = NewexpressionContext;

CPP14Parser.prototype.newexpression = function() {

    var localctx = new NewexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CPP14Parser.RULE_newexpression);
    var _la = 0; // Token type
    try {
        this.state = 729;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 705;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 708;
            this.match(CPP14Parser.New);
            this.state = 710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.LeftParen) {
                this.state = 709;
                this.newplacement();
            }

            this.state = 712;
            this.newtypeid();
            this.state = 714;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
            if(la_===1) {
                this.state = 713;
                this.newinitializer();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 716;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 719;
            this.match(CPP14Parser.New);
            this.state = 721;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 720;
                this.newplacement();

            }
            this.state = 723;
            this.match(CPP14Parser.LeftParen);
            this.state = 724;
            this.thetypeid();
            this.state = 725;
            this.match(CPP14Parser.RightParen);
            this.state = 727;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
            if(la_===1) {
                this.state = 726;
                this.newinitializer();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NewplacementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newplacement;
    return this;
}

NewplacementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewplacementContext.prototype.constructor = NewplacementContext;

NewplacementContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

NewplacementContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

NewplacementContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

NewplacementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNewplacement(this);
	}
};

NewplacementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNewplacement(this);
	}
};




CPP14Parser.NewplacementContext = NewplacementContext;

CPP14Parser.prototype.newplacement = function() {

    var localctx = new NewplacementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CPP14Parser.RULE_newplacement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 731;
        this.match(CPP14Parser.LeftParen);
        this.state = 732;
        this.expressionlist();
        this.state = 733;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NewtypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newtypeid;
    return this;
}

NewtypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewtypeidContext.prototype.constructor = NewtypeidContext;

NewtypeidContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

NewtypeidContext.prototype.newdeclarator = function() {
    return this.getTypedRuleContext(NewdeclaratorContext,0);
};

NewtypeidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNewtypeid(this);
	}
};

NewtypeidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNewtypeid(this);
	}
};




CPP14Parser.NewtypeidContext = NewtypeidContext;

CPP14Parser.prototype.newtypeid = function() {

    var localctx = new NewtypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CPP14Parser.RULE_newtypeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 735;
        this.typespecifierseq();
        this.state = 737;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        if(la_===1) {
            this.state = 736;
            this.newdeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NewdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newdeclarator;
    return this;
}

NewdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewdeclaratorContext.prototype.constructor = NewdeclaratorContext;

NewdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

NewdeclaratorContext.prototype.newdeclarator = function() {
    return this.getTypedRuleContext(NewdeclaratorContext,0);
};

NewdeclaratorContext.prototype.noptrnewdeclarator = function() {
    return this.getTypedRuleContext(NoptrnewdeclaratorContext,0);
};

NewdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNewdeclarator(this);
	}
};

NewdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNewdeclarator(this);
	}
};




CPP14Parser.NewdeclaratorContext = NewdeclaratorContext;

CPP14Parser.prototype.newdeclarator = function() {

    var localctx = new NewdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CPP14Parser.RULE_newdeclarator);
    try {
        this.state = 744;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.T__2:
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 739;
            this.ptroperator();
            this.state = 741;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            if(la_===1) {
                this.state = 740;
                this.newdeclarator();

            }
            break;
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 743;
            this.noptrnewdeclarator(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NoptrnewdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrnewdeclarator;
    return this;
}

NoptrnewdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrnewdeclaratorContext.prototype.constructor = NoptrnewdeclaratorContext;

NoptrnewdeclaratorContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

NoptrnewdeclaratorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NoptrnewdeclaratorContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

NoptrnewdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrnewdeclaratorContext.prototype.noptrnewdeclarator = function() {
    return this.getTypedRuleContext(NoptrnewdeclaratorContext,0);
};

NoptrnewdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrnewdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNoptrnewdeclarator(this);
	}
};

NoptrnewdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNoptrnewdeclarator(this);
	}
};



CPP14Parser.prototype.noptrnewdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrnewdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 52;
    this.enterRecursionRule(localctx, 52, CPP14Parser.RULE_noptrnewdeclarator, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this.match(CPP14Parser.LeftBracket);
        this.state = 748;
        this.expression(0);
        this.state = 749;
        this.match(CPP14Parser.RightBracket);
        this.state = 751;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 750;
            this.attributespecifierseq(0);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 762;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NoptrnewdeclaratorContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrnewdeclarator);
                this.state = 753;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 754;
                this.match(CPP14Parser.LeftBracket);
                this.state = 755;
                this.constantexpression();
                this.state = 756;
                this.match(CPP14Parser.RightBracket);
                this.state = 758;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
                if(la_===1) {
                    this.state = 757;
                    this.attributespecifierseq(0);

                } 
            }
            this.state = 764;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function NewinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newinitializer;
    return this;
}

NewinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewinitializerContext.prototype.constructor = NewinitializerContext;

NewinitializerContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

NewinitializerContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

NewinitializerContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

NewinitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

NewinitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNewinitializer(this);
	}
};

NewinitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNewinitializer(this);
	}
};




CPP14Parser.NewinitializerContext = NewinitializerContext;

CPP14Parser.prototype.newinitializer = function() {

    var localctx = new NewinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CPP14Parser.RULE_newinitializer);
    var _la = 0; // Token type
    try {
        this.state = 771;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 1);
            this.state = 765;
            this.match(CPP14Parser.LeftParen);
            this.state = 767;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.Throw - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.LeftBrace - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                this.state = 766;
                this.expressionlist();
            }

            this.state = 769;
            this.match(CPP14Parser.RightParen);
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 770;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeleteexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_deleteexpression;
    return this;
}

DeleteexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteexpressionContext.prototype.constructor = DeleteexpressionContext;

DeleteexpressionContext.prototype.Delete = function() {
    return this.getToken(CPP14Parser.Delete, 0);
};

DeleteexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

DeleteexpressionContext.prototype.Doublecolon = function() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
};

DeleteexpressionContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

DeleteexpressionContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

DeleteexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDeleteexpression(this);
	}
};

DeleteexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDeleteexpression(this);
	}
};




CPP14Parser.DeleteexpressionContext = DeleteexpressionContext;

CPP14Parser.prototype.deleteexpression = function() {

    var localctx = new DeleteexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CPP14Parser.RULE_deleteexpression);
    var _la = 0; // Token type
    try {
        this.state = 785;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 773;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 776;
            this.match(CPP14Parser.Delete);
            this.state = 777;
            this.castexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 779;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 778;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 781;
            this.match(CPP14Parser.Delete);
            this.state = 782;
            this.match(CPP14Parser.LeftBracket);
            this.state = 783;
            this.match(CPP14Parser.RightBracket);
            this.state = 784;
            this.castexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NoexceptexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noexceptexpression;
    return this;
}

NoexceptexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoexceptexpressionContext.prototype.constructor = NoexceptexpressionContext;

NoexceptexpressionContext.prototype.Noexcept = function() {
    return this.getToken(CPP14Parser.Noexcept, 0);
};

NoexceptexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

NoexceptexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NoexceptexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

NoexceptexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNoexceptexpression(this);
	}
};

NoexceptexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNoexceptexpression(this);
	}
};




CPP14Parser.NoexceptexpressionContext = NoexceptexpressionContext;

CPP14Parser.prototype.noexceptexpression = function() {

    var localctx = new NoexceptexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CPP14Parser.RULE_noexceptexpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 787;
        this.match(CPP14Parser.Noexcept);
        this.state = 788;
        this.match(CPP14Parser.LeftParen);
        this.state = 789;
        this.expression(0);
        this.state = 790;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CastexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_castexpression;
    return this;
}

CastexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastexpressionContext.prototype.constructor = CastexpressionContext;

CastexpressionContext.prototype.unaryexpression = function() {
    return this.getTypedRuleContext(UnaryexpressionContext,0);
};

CastexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

CastexpressionContext.prototype.thetypeid = function() {
    return this.getTypedRuleContext(ThetypeidContext,0);
};

CastexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

CastexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

CastexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterCastexpression(this);
	}
};

CastexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitCastexpression(this);
	}
};




CPP14Parser.CastexpressionContext = CastexpressionContext;

CPP14Parser.prototype.castexpression = function() {

    var localctx = new CastexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CPP14Parser.RULE_castexpression);
    try {
        this.state = 798;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 792;
            this.unaryexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 793;
            this.match(CPP14Parser.LeftParen);
            this.state = 794;
            this.thetypeid();
            this.state = 795;
            this.match(CPP14Parser.RightParen);
            this.state = 796;
            this.castexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PmexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pmexpression;
    return this;
}

PmexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PmexpressionContext.prototype.constructor = PmexpressionContext;

PmexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

PmexpressionContext.prototype.pmexpression = function() {
    return this.getTypedRuleContext(PmexpressionContext,0);
};

PmexpressionContext.prototype.DotStar = function() {
    return this.getToken(CPP14Parser.DotStar, 0);
};

PmexpressionContext.prototype.ArrowStar = function() {
    return this.getToken(CPP14Parser.ArrowStar, 0);
};

PmexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterPmexpression(this);
	}
};

PmexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitPmexpression(this);
	}
};



CPP14Parser.prototype.pmexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PmexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 62;
    this.enterRecursionRule(localctx, 62, CPP14Parser.RULE_pmexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 801;
        this.castexpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 811;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 809;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PmexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_pmexpression);
                    this.state = 803;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 804;
                    this.match(CPP14Parser.DotStar);
                    this.state = 805;
                    this.castexpression();
                    break;

                case 2:
                    localctx = new PmexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_pmexpression);
                    this.state = 806;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 807;
                    this.match(CPP14Parser.ArrowStar);
                    this.state = 808;
                    this.castexpression();
                    break;

                } 
            }
            this.state = 813;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function MultiplicativeexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_multiplicativeexpression;
    return this;
}

MultiplicativeexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeexpressionContext.prototype.constructor = MultiplicativeexpressionContext;

MultiplicativeexpressionContext.prototype.pmexpression = function() {
    return this.getTypedRuleContext(PmexpressionContext,0);
};

MultiplicativeexpressionContext.prototype.multiplicativeexpression = function() {
    return this.getTypedRuleContext(MultiplicativeexpressionContext,0);
};

MultiplicativeexpressionContext.prototype.Star = function() {
    return this.getToken(CPP14Parser.Star, 0);
};

MultiplicativeexpressionContext.prototype.Div = function() {
    return this.getToken(CPP14Parser.Div, 0);
};

MultiplicativeexpressionContext.prototype.Mod = function() {
    return this.getToken(CPP14Parser.Mod, 0);
};

MultiplicativeexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterMultiplicativeexpression(this);
	}
};

MultiplicativeexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitMultiplicativeexpression(this);
	}
};



CPP14Parser.prototype.multiplicativeexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MultiplicativeexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 64;
    this.enterRecursionRule(localctx, 64, CPP14Parser.RULE_multiplicativeexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 815;
        this.pmexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 828;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 826;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplicativeexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);
                    this.state = 817;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 818;
                    this.match(CPP14Parser.Star);
                    this.state = 819;
                    this.pmexpression(0);
                    break;

                case 2:
                    localctx = new MultiplicativeexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);
                    this.state = 820;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 821;
                    this.match(CPP14Parser.Div);
                    this.state = 822;
                    this.pmexpression(0);
                    break;

                case 3:
                    localctx = new MultiplicativeexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);
                    this.state = 823;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 824;
                    this.match(CPP14Parser.Mod);
                    this.state = 825;
                    this.pmexpression(0);
                    break;

                } 
            }
            this.state = 830;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AdditiveexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_additiveexpression;
    return this;
}

AdditiveexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveexpressionContext.prototype.constructor = AdditiveexpressionContext;

AdditiveexpressionContext.prototype.multiplicativeexpression = function() {
    return this.getTypedRuleContext(MultiplicativeexpressionContext,0);
};

AdditiveexpressionContext.prototype.additiveexpression = function() {
    return this.getTypedRuleContext(AdditiveexpressionContext,0);
};

AdditiveexpressionContext.prototype.Plus = function() {
    return this.getToken(CPP14Parser.Plus, 0);
};

AdditiveexpressionContext.prototype.Minus = function() {
    return this.getToken(CPP14Parser.Minus, 0);
};

AdditiveexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAdditiveexpression(this);
	}
};

AdditiveexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAdditiveexpression(this);
	}
};



CPP14Parser.prototype.additiveexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AdditiveexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 66;
    this.enterRecursionRule(localctx, 66, CPP14Parser.RULE_additiveexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.multiplicativeexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 842;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 840;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AdditiveexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_additiveexpression);
                    this.state = 834;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 835;
                    this.match(CPP14Parser.Plus);
                    this.state = 836;
                    this.multiplicativeexpression(0);
                    break;

                case 2:
                    localctx = new AdditiveexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_additiveexpression);
                    this.state = 837;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 838;
                    this.match(CPP14Parser.Minus);
                    this.state = 839;
                    this.multiplicativeexpression(0);
                    break;

                } 
            }
            this.state = 844;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ShiftexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_shiftexpression;
    return this;
}

ShiftexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftexpressionContext.prototype.constructor = ShiftexpressionContext;

ShiftexpressionContext.prototype.additiveexpression = function() {
    return this.getTypedRuleContext(AdditiveexpressionContext,0);
};

ShiftexpressionContext.prototype.shiftexpression = function() {
    return this.getTypedRuleContext(ShiftexpressionContext,0);
};

ShiftexpressionContext.prototype.shiftoperator = function() {
    return this.getTypedRuleContext(ShiftoperatorContext,0);
};

ShiftexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterShiftexpression(this);
	}
};

ShiftexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitShiftexpression(this);
	}
};



CPP14Parser.prototype.shiftexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ShiftexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, CPP14Parser.RULE_shiftexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 846;
        this.additiveexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 854;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ShiftexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_shiftexpression);
                this.state = 848;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 849;
                this.shiftoperator();
                this.state = 850;
                this.additiveexpression(0); 
            }
            this.state = 856;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ShiftoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_shiftoperator;
    return this;
}

ShiftoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftoperatorContext.prototype.constructor = ShiftoperatorContext;

ShiftoperatorContext.prototype.RightShift = function() {
    return this.getToken(CPP14Parser.RightShift, 0);
};

ShiftoperatorContext.prototype.LeftShift = function() {
    return this.getToken(CPP14Parser.LeftShift, 0);
};

ShiftoperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterShiftoperator(this);
	}
};

ShiftoperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitShiftoperator(this);
	}
};




CPP14Parser.ShiftoperatorContext = ShiftoperatorContext;

CPP14Parser.prototype.shiftoperator = function() {

    var localctx = new ShiftoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CPP14Parser.RULE_shiftoperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 857;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.LeftShift || _la===CPP14Parser.RightShift)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationalexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_relationalexpression;
    return this;
}

RelationalexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalexpressionContext.prototype.constructor = RelationalexpressionContext;

RelationalexpressionContext.prototype.shiftexpression = function() {
    return this.getTypedRuleContext(ShiftexpressionContext,0);
};

RelationalexpressionContext.prototype.relationalexpression = function() {
    return this.getTypedRuleContext(RelationalexpressionContext,0);
};

RelationalexpressionContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

RelationalexpressionContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

RelationalexpressionContext.prototype.LessEqual = function() {
    return this.getToken(CPP14Parser.LessEqual, 0);
};

RelationalexpressionContext.prototype.GreaterEqual = function() {
    return this.getToken(CPP14Parser.GreaterEqual, 0);
};

RelationalexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterRelationalexpression(this);
	}
};

RelationalexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitRelationalexpression(this);
	}
};



CPP14Parser.prototype.relationalexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationalexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, CPP14Parser.RULE_relationalexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this.shiftexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 876;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 874;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 862;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 863;
                    this.match(CPP14Parser.Less);
                    this.state = 864;
                    this.shiftexpression(0);
                    break;

                case 2:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 865;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 866;
                    this.match(CPP14Parser.Greater);
                    this.state = 867;
                    this.shiftexpression(0);
                    break;

                case 3:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 868;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 869;
                    this.match(CPP14Parser.LessEqual);
                    this.state = 870;
                    this.shiftexpression(0);
                    break;

                case 4:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 871;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 872;
                    this.match(CPP14Parser.GreaterEqual);
                    this.state = 873;
                    this.shiftexpression(0);
                    break;

                } 
            }
            this.state = 878;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function EqualityexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_equalityexpression;
    return this;
}

EqualityexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityexpressionContext.prototype.constructor = EqualityexpressionContext;

EqualityexpressionContext.prototype.relationalexpression = function() {
    return this.getTypedRuleContext(RelationalexpressionContext,0);
};

EqualityexpressionContext.prototype.equalityexpression = function() {
    return this.getTypedRuleContext(EqualityexpressionContext,0);
};

EqualityexpressionContext.prototype.Equal = function() {
    return this.getToken(CPP14Parser.Equal, 0);
};

EqualityexpressionContext.prototype.NotEqual = function() {
    return this.getToken(CPP14Parser.NotEqual, 0);
};

EqualityexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEqualityexpression(this);
	}
};

EqualityexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEqualityexpression(this);
	}
};



CPP14Parser.prototype.equalityexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EqualityexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, CPP14Parser.RULE_equalityexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 880;
        this.relationalexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 890;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 888;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new EqualityexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_equalityexpression);
                    this.state = 882;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 883;
                    this.match(CPP14Parser.Equal);
                    this.state = 884;
                    this.relationalexpression(0);
                    break;

                case 2:
                    localctx = new EqualityexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_equalityexpression);
                    this.state = 885;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 886;
                    this.match(CPP14Parser.NotEqual);
                    this.state = 887;
                    this.relationalexpression(0);
                    break;

                } 
            }
            this.state = 892;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AndexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_andexpression;
    return this;
}

AndexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndexpressionContext.prototype.constructor = AndexpressionContext;

AndexpressionContext.prototype.equalityexpression = function() {
    return this.getTypedRuleContext(EqualityexpressionContext,0);
};

AndexpressionContext.prototype.andexpression = function() {
    return this.getTypedRuleContext(AndexpressionContext,0);
};

AndexpressionContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

AndexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAndexpression(this);
	}
};

AndexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAndexpression(this);
	}
};



CPP14Parser.prototype.andexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AndexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, CPP14Parser.RULE_andexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 894;
        this.equalityexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 901;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AndexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_andexpression);
                this.state = 896;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 897;
                this.match(CPP14Parser.And);
                this.state = 898;
                this.equalityexpression(0); 
            }
            this.state = 903;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExclusiveorexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exclusiveorexpression;
    return this;
}

ExclusiveorexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExclusiveorexpressionContext.prototype.constructor = ExclusiveorexpressionContext;

ExclusiveorexpressionContext.prototype.andexpression = function() {
    return this.getTypedRuleContext(AndexpressionContext,0);
};

ExclusiveorexpressionContext.prototype.exclusiveorexpression = function() {
    return this.getTypedRuleContext(ExclusiveorexpressionContext,0);
};

ExclusiveorexpressionContext.prototype.Caret = function() {
    return this.getToken(CPP14Parser.Caret, 0);
};

ExclusiveorexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterExclusiveorexpression(this);
	}
};

ExclusiveorexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitExclusiveorexpression(this);
	}
};



CPP14Parser.prototype.exclusiveorexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExclusiveorexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, CPP14Parser.RULE_exclusiveorexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 905;
        this.andexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 912;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExclusiveorexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_exclusiveorexpression);
                this.state = 907;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 908;
                this.match(CPP14Parser.Caret);
                this.state = 909;
                this.andexpression(0); 
            }
            this.state = 914;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function InclusiveorexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_inclusiveorexpression;
    return this;
}

InclusiveorexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InclusiveorexpressionContext.prototype.constructor = InclusiveorexpressionContext;

InclusiveorexpressionContext.prototype.exclusiveorexpression = function() {
    return this.getTypedRuleContext(ExclusiveorexpressionContext,0);
};

InclusiveorexpressionContext.prototype.inclusiveorexpression = function() {
    return this.getTypedRuleContext(InclusiveorexpressionContext,0);
};

InclusiveorexpressionContext.prototype.Or = function() {
    return this.getToken(CPP14Parser.Or, 0);
};

InclusiveorexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterInclusiveorexpression(this);
	}
};

InclusiveorexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitInclusiveorexpression(this);
	}
};



CPP14Parser.prototype.inclusiveorexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InclusiveorexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, CPP14Parser.RULE_inclusiveorexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 916;
        this.exclusiveorexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 923;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InclusiveorexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_inclusiveorexpression);
                this.state = 918;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 919;
                this.match(CPP14Parser.Or);
                this.state = 920;
                this.exclusiveorexpression(0); 
            }
            this.state = 925;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function LogicalandexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_logicalandexpression;
    return this;
}

LogicalandexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalandexpressionContext.prototype.constructor = LogicalandexpressionContext;

LogicalandexpressionContext.prototype.inclusiveorexpression = function() {
    return this.getTypedRuleContext(InclusiveorexpressionContext,0);
};

LogicalandexpressionContext.prototype.logicalandexpression = function() {
    return this.getTypedRuleContext(LogicalandexpressionContext,0);
};

LogicalandexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLogicalandexpression(this);
	}
};

LogicalandexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLogicalandexpression(this);
	}
};



CPP14Parser.prototype.logicalandexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalandexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, CPP14Parser.RULE_logicalandexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 927;
        this.inclusiveorexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 937;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 935;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalandexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_logicalandexpression);
                    this.state = 929;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 930;
                    this.match(CPP14Parser.T__2);
                    this.state = 931;
                    this.inclusiveorexpression(0);
                    break;

                case 2:
                    localctx = new LogicalandexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_logicalandexpression);
                    this.state = 932;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 933;
                    this.match(CPP14Parser.T__3);
                    this.state = 934;
                    this.inclusiveorexpression(0);
                    break;

                } 
            }
            this.state = 939;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function LogicalorexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_logicalorexpression;
    return this;
}

LogicalorexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalorexpressionContext.prototype.constructor = LogicalorexpressionContext;

LogicalorexpressionContext.prototype.logicalandexpression = function() {
    return this.getTypedRuleContext(LogicalandexpressionContext,0);
};

LogicalorexpressionContext.prototype.logicalorexpression = function() {
    return this.getTypedRuleContext(LogicalorexpressionContext,0);
};

LogicalorexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLogicalorexpression(this);
	}
};

LogicalorexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLogicalorexpression(this);
	}
};



CPP14Parser.prototype.logicalorexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalorexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 84;
    this.enterRecursionRule(localctx, 84, CPP14Parser.RULE_logicalorexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 941;
        this.logicalandexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 951;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 949;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalorexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_logicalorexpression);
                    this.state = 943;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 944;
                    this.match(CPP14Parser.T__4);
                    this.state = 945;
                    this.logicalandexpression(0);
                    break;

                case 2:
                    localctx = new LogicalorexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_logicalorexpression);
                    this.state = 946;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 947;
                    this.match(CPP14Parser.T__5);
                    this.state = 948;
                    this.logicalandexpression(0);
                    break;

                } 
            }
            this.state = 953;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ConditionalexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conditionalexpression;
    return this;
}

ConditionalexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalexpressionContext.prototype.constructor = ConditionalexpressionContext;

ConditionalexpressionContext.prototype.logicalorexpression = function() {
    return this.getTypedRuleContext(LogicalorexpressionContext,0);
};

ConditionalexpressionContext.prototype.Question = function() {
    return this.getToken(CPP14Parser.Question, 0);
};

ConditionalexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalexpressionContext.prototype.Colon = function() {
    return this.getToken(CPP14Parser.Colon, 0);
};

ConditionalexpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

ConditionalexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterConditionalexpression(this);
	}
};

ConditionalexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitConditionalexpression(this);
	}
};




CPP14Parser.ConditionalexpressionContext = ConditionalexpressionContext;

CPP14Parser.prototype.conditionalexpression = function() {

    var localctx = new ConditionalexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CPP14Parser.RULE_conditionalexpression);
    try {
        this.state = 961;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 954;
            this.logicalorexpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 955;
            this.logicalorexpression(0);
            this.state = 956;
            this.match(CPP14Parser.Question);
            this.state = 957;
            this.expression(0);
            this.state = 958;
            this.match(CPP14Parser.Colon);
            this.state = 959;
            this.assignmentexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_assignmentexpression;
    return this;
}

AssignmentexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentexpressionContext.prototype.constructor = AssignmentexpressionContext;

AssignmentexpressionContext.prototype.conditionalexpression = function() {
    return this.getTypedRuleContext(ConditionalexpressionContext,0);
};

AssignmentexpressionContext.prototype.logicalorexpression = function() {
    return this.getTypedRuleContext(LogicalorexpressionContext,0);
};

AssignmentexpressionContext.prototype.assignmentoperator = function() {
    return this.getTypedRuleContext(AssignmentoperatorContext,0);
};

AssignmentexpressionContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

AssignmentexpressionContext.prototype.throwexpression = function() {
    return this.getTypedRuleContext(ThrowexpressionContext,0);
};

AssignmentexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAssignmentexpression(this);
	}
};

AssignmentexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAssignmentexpression(this);
	}
};




CPP14Parser.AssignmentexpressionContext = AssignmentexpressionContext;

CPP14Parser.prototype.assignmentexpression = function() {

    var localctx = new AssignmentexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CPP14Parser.RULE_assignmentexpression);
    try {
        this.state = 969;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 963;
            this.conditionalexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 964;
            this.logicalorexpression(0);
            this.state = 965;
            this.assignmentoperator();
            this.state = 966;
            this.initializerclause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 968;
            this.throwexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_assignmentoperator;
    return this;
}

AssignmentoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentoperatorContext.prototype.constructor = AssignmentoperatorContext;

AssignmentoperatorContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

AssignmentoperatorContext.prototype.StarAssign = function() {
    return this.getToken(CPP14Parser.StarAssign, 0);
};

AssignmentoperatorContext.prototype.DivAssign = function() {
    return this.getToken(CPP14Parser.DivAssign, 0);
};

AssignmentoperatorContext.prototype.ModAssign = function() {
    return this.getToken(CPP14Parser.ModAssign, 0);
};

AssignmentoperatorContext.prototype.PlusAssign = function() {
    return this.getToken(CPP14Parser.PlusAssign, 0);
};

AssignmentoperatorContext.prototype.MinusAssign = function() {
    return this.getToken(CPP14Parser.MinusAssign, 0);
};

AssignmentoperatorContext.prototype.RightShiftAssign = function() {
    return this.getToken(CPP14Parser.RightShiftAssign, 0);
};

AssignmentoperatorContext.prototype.LeftShiftAssign = function() {
    return this.getToken(CPP14Parser.LeftShiftAssign, 0);
};

AssignmentoperatorContext.prototype.AndAssign = function() {
    return this.getToken(CPP14Parser.AndAssign, 0);
};

AssignmentoperatorContext.prototype.XorAssign = function() {
    return this.getToken(CPP14Parser.XorAssign, 0);
};

AssignmentoperatorContext.prototype.OrAssign = function() {
    return this.getToken(CPP14Parser.OrAssign, 0);
};

AssignmentoperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAssignmentoperator(this);
	}
};

AssignmentoperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAssignmentoperator(this);
	}
};




CPP14Parser.AssignmentoperatorContext = AssignmentoperatorContext;

CPP14Parser.prototype.assignmentoperator = function() {

    var localctx = new AssignmentoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CPP14Parser.RULE_assignmentoperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 971;
        _la = this._input.LA(1);
        if(!(((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (CPP14Parser.Assign - 100)) | (1 << (CPP14Parser.PlusAssign - 100)) | (1 << (CPP14Parser.MinusAssign - 100)) | (1 << (CPP14Parser.StarAssign - 100)) | (1 << (CPP14Parser.DivAssign - 100)) | (1 << (CPP14Parser.ModAssign - 100)) | (1 << (CPP14Parser.XorAssign - 100)) | (1 << (CPP14Parser.AndAssign - 100)) | (1 << (CPP14Parser.OrAssign - 100)) | (1 << (CPP14Parser.LeftShiftAssign - 100)) | (1 << (CPP14Parser.RightShiftAssign - 100)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

ExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitExpression(this);
	}
};



CPP14Parser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 92;
    this.enterRecursionRule(localctx, 92, CPP14Parser.RULE_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 974;
        this.assignmentexpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 981;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_expression);
                this.state = 976;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 977;
                this.match(CPP14Parser.Comma);
                this.state = 978;
                this.assignmentexpression(); 
            }
            this.state = 983;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ConstantexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_constantexpression;
    return this;
}

ConstantexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantexpressionContext.prototype.constructor = ConstantexpressionContext;

ConstantexpressionContext.prototype.conditionalexpression = function() {
    return this.getTypedRuleContext(ConditionalexpressionContext,0);
};

ConstantexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterConstantexpression(this);
	}
};

ConstantexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitConstantexpression(this);
	}
};




CPP14Parser.ConstantexpressionContext = ConstantexpressionContext;

CPP14Parser.prototype.constantexpression = function() {

    var localctx = new ConstantexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CPP14Parser.RULE_constantexpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 984;
        this.conditionalexpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.labeledstatement = function() {
    return this.getTypedRuleContext(LabeledstatementContext,0);
};

StatementContext.prototype.expressionstatement = function() {
    return this.getTypedRuleContext(ExpressionstatementContext,0);
};

StatementContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

StatementContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

StatementContext.prototype.selectionstatement = function() {
    return this.getTypedRuleContext(SelectionstatementContext,0);
};

StatementContext.prototype.iterationstatement = function() {
    return this.getTypedRuleContext(IterationstatementContext,0);
};

StatementContext.prototype.jumpstatement = function() {
    return this.getTypedRuleContext(JumpstatementContext,0);
};

StatementContext.prototype.declarationstatement = function() {
    return this.getTypedRuleContext(DeclarationstatementContext,0);
};

StatementContext.prototype.tryblock = function() {
    return this.getTypedRuleContext(TryblockContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitStatement(this);
	}
};




CPP14Parser.StatementContext = StatementContext;

CPP14Parser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CPP14Parser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 1012;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 986;
            this.labeledstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 988;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
            if(la_===1) {
                this.state = 987;
                this.attributespecifierseq(0);

            }
            this.state = 990;
            this.expressionstatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 991;
                this.attributespecifierseq(0);
            }

            this.state = 994;
            this.compoundstatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 996;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 995;
                this.attributespecifierseq(0);
            }

            this.state = 998;
            this.selectionstatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1000;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 999;
                this.attributespecifierseq(0);
            }

            this.state = 1002;
            this.iterationstatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1004;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1003;
                this.attributespecifierseq(0);
            }

            this.state = 1006;
            this.jumpstatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1007;
            this.declarationstatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1008;
                this.attributespecifierseq(0);
            }

            this.state = 1011;
            this.tryblock();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabeledstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_labeledstatement;
    return this;
}

LabeledstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledstatementContext.prototype.constructor = LabeledstatementContext;

LabeledstatementContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

LabeledstatementContext.prototype.Colon = function() {
    return this.getToken(CPP14Parser.Colon, 0);
};

LabeledstatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabeledstatementContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

LabeledstatementContext.prototype.Case = function() {
    return this.getToken(CPP14Parser.Case, 0);
};

LabeledstatementContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

LabeledstatementContext.prototype.Default = function() {
    return this.getToken(CPP14Parser.Default, 0);
};

LabeledstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLabeledstatement(this);
	}
};

LabeledstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLabeledstatement(this);
	}
};




CPP14Parser.LabeledstatementContext = LabeledstatementContext;

CPP14Parser.prototype.labeledstatement = function() {

    var localctx = new LabeledstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CPP14Parser.RULE_labeledstatement);
    var _la = 0; // Token type
    try {
        this.state = 1034;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1015;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1014;
                this.attributespecifierseq(0);
            }

            this.state = 1017;
            this.match(CPP14Parser.Identifier);
            this.state = 1018;
            this.match(CPP14Parser.Colon);
            this.state = 1019;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1021;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1020;
                this.attributespecifierseq(0);
            }

            this.state = 1023;
            this.match(CPP14Parser.Case);
            this.state = 1024;
            this.constantexpression();
            this.state = 1025;
            this.match(CPP14Parser.Colon);
            this.state = 1026;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1029;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1028;
                this.attributespecifierseq(0);
            }

            this.state = 1031;
            this.match(CPP14Parser.Default);
            this.state = 1032;
            this.match(CPP14Parser.Colon);
            this.state = 1033;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expressionstatement;
    return this;
}

ExpressionstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionstatementContext.prototype.constructor = ExpressionstatementContext;

ExpressionstatementContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

ExpressionstatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterExpressionstatement(this);
	}
};

ExpressionstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitExpressionstatement(this);
	}
};




CPP14Parser.ExpressionstatementContext = ExpressionstatementContext;

CPP14Parser.prototype.expressionstatement = function() {

    var localctx = new ExpressionstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CPP14Parser.RULE_expressionstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1037;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.Throw - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
            this.state = 1036;
            this.expression(0);
        }

        this.state = 1039;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompoundstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_compoundstatement;
    return this;
}

CompoundstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundstatementContext.prototype.constructor = CompoundstatementContext;

CompoundstatementContext.prototype.LeftBrace = function() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
};

CompoundstatementContext.prototype.RightBrace = function() {
    return this.getToken(CPP14Parser.RightBrace, 0);
};

CompoundstatementContext.prototype.statementseq = function() {
    return this.getTypedRuleContext(StatementseqContext,0);
};

CompoundstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterCompoundstatement(this);
	}
};

CompoundstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitCompoundstatement(this);
	}
};




CPP14Parser.CompoundstatementContext = CompoundstatementContext;

CPP14Parser.prototype.compoundstatement = function() {

    var localctx = new CompoundstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CPP14Parser.RULE_compoundstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1041;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1043;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Enum - 32)) | (1 << (CPP14Parser.Explicit - 32)) | (1 << (CPP14Parser.Extern - 32)) | (1 << (CPP14Parser.False - 32)) | (1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.For - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Goto - 32)) | (1 << (CPP14Parser.If - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Return - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.Switch - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CPP14Parser.And - 96)) | (1 << (CPP14Parser.Or - 96)) | (1 << (CPP14Parser.Tilde - 96)) | (1 << (CPP14Parser.PlusPlus - 96)) | (1 << (CPP14Parser.MinusMinus - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Semi - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) !== 0)) {
            this.state = 1042;
            this.statementseq(0);
        }

        this.state = 1045;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_statementseq;
    return this;
}

StatementseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementseqContext.prototype.constructor = StatementseqContext;

StatementseqContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

StatementseqContext.prototype.statementseq = function() {
    return this.getTypedRuleContext(StatementseqContext,0);
};

StatementseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterStatementseq(this);
	}
};

StatementseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitStatementseq(this);
	}
};



CPP14Parser.prototype.statementseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new StatementseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 104;
    this.enterRecursionRule(localctx, 104, CPP14Parser.RULE_statementseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1048;
        this.statement();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1054;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StatementseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_statementseq);
                this.state = 1050;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1051;
                this.statement(); 
            }
            this.state = 1056;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function SelectionstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_selectionstatement;
    return this;
}

SelectionstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectionstatementContext.prototype.constructor = SelectionstatementContext;

SelectionstatementContext.prototype.If = function() {
    return this.getToken(CPP14Parser.If, 0);
};

SelectionstatementContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

SelectionstatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

SelectionstatementContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

SelectionstatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

SelectionstatementContext.prototype.Else = function() {
    return this.getToken(CPP14Parser.Else, 0);
};

SelectionstatementContext.prototype.Switch = function() {
    return this.getToken(CPP14Parser.Switch, 0);
};

SelectionstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterSelectionstatement(this);
	}
};

SelectionstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitSelectionstatement(this);
	}
};




CPP14Parser.SelectionstatementContext = SelectionstatementContext;

CPP14Parser.prototype.selectionstatement = function() {

    var localctx = new SelectionstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CPP14Parser.RULE_selectionstatement);
    try {
        this.state = 1077;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1057;
            this.match(CPP14Parser.If);
            this.state = 1058;
            this.match(CPP14Parser.LeftParen);
            this.state = 1059;
            this.condition();
            this.state = 1060;
            this.match(CPP14Parser.RightParen);
            this.state = 1061;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1063;
            this.match(CPP14Parser.If);
            this.state = 1064;
            this.match(CPP14Parser.LeftParen);
            this.state = 1065;
            this.condition();
            this.state = 1066;
            this.match(CPP14Parser.RightParen);
            this.state = 1067;
            this.statement();
            this.state = 1068;
            this.match(CPP14Parser.Else);
            this.state = 1069;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1071;
            this.match(CPP14Parser.Switch);
            this.state = 1072;
            this.match(CPP14Parser.LeftParen);
            this.state = 1073;
            this.condition();
            this.state = 1074;
            this.match(CPP14Parser.RightParen);
            this.state = 1075;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_condition;
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

ConditionContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ConditionContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

ConditionContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

ConditionContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ConditionContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

ConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterCondition(this);
	}
};

ConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitCondition(this);
	}
};




CPP14Parser.ConditionContext = ConditionContext;

CPP14Parser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CPP14Parser.RULE_condition);
    var _la = 0; // Token type
    try {
        this.state = 1095;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1079;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1081;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1080;
                this.attributespecifierseq(0);
            }

            this.state = 1083;
            this.declspecifierseq();
            this.state = 1084;
            this.declarator();
            this.state = 1085;
            this.match(CPP14Parser.Assign);
            this.state = 1086;
            this.initializerclause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1089;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1088;
                this.attributespecifierseq(0);
            }

            this.state = 1091;
            this.declspecifierseq();
            this.state = 1092;
            this.declarator();
            this.state = 1093;
            this.bracedinitlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IterationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_iterationstatement;
    return this;
}

IterationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationstatementContext.prototype.constructor = IterationstatementContext;

IterationstatementContext.prototype.While = function() {
    return this.getToken(CPP14Parser.While, 0);
};

IterationstatementContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

IterationstatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

IterationstatementContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

IterationstatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IterationstatementContext.prototype.Do = function() {
    return this.getToken(CPP14Parser.Do, 0);
};

IterationstatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IterationstatementContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

IterationstatementContext.prototype.For = function() {
    return this.getToken(CPP14Parser.For, 0);
};

IterationstatementContext.prototype.forinitstatement = function() {
    return this.getTypedRuleContext(ForinitstatementContext,0);
};

IterationstatementContext.prototype.forrangedeclaration = function() {
    return this.getTypedRuleContext(ForrangedeclarationContext,0);
};

IterationstatementContext.prototype.Colon = function() {
    return this.getToken(CPP14Parser.Colon, 0);
};

IterationstatementContext.prototype.forrangeinitializer = function() {
    return this.getTypedRuleContext(ForrangeinitializerContext,0);
};

IterationstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterIterationstatement(this);
	}
};

IterationstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitIterationstatement(this);
	}
};




CPP14Parser.IterationstatementContext = IterationstatementContext;

CPP14Parser.prototype.iterationstatement = function() {

    var localctx = new IterationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CPP14Parser.RULE_iterationstatement);
    var _la = 0; // Token type
    try {
        this.state = 1132;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1097;
            this.match(CPP14Parser.While);
            this.state = 1098;
            this.match(CPP14Parser.LeftParen);
            this.state = 1099;
            this.condition();
            this.state = 1100;
            this.match(CPP14Parser.RightParen);
            this.state = 1101;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1103;
            this.match(CPP14Parser.Do);
            this.state = 1104;
            this.statement();
            this.state = 1105;
            this.match(CPP14Parser.While);
            this.state = 1106;
            this.match(CPP14Parser.LeftParen);
            this.state = 1107;
            this.expression(0);
            this.state = 1108;
            this.match(CPP14Parser.RightParen);
            this.state = 1109;
            this.match(CPP14Parser.Semi);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1111;
            this.match(CPP14Parser.For);
            this.state = 1112;
            this.match(CPP14Parser.LeftParen);
            this.state = 1113;
            this.forinitstatement();
            this.state = 1115;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Enum - 32)) | (1 << (CPP14Parser.Explicit - 32)) | (1 << (CPP14Parser.Extern - 32)) | (1 << (CPP14Parser.False - 32)) | (1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CPP14Parser.And - 96)) | (1 << (CPP14Parser.Or - 96)) | (1 << (CPP14Parser.Tilde - 96)) | (1 << (CPP14Parser.PlusPlus - 96)) | (1 << (CPP14Parser.MinusMinus - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) !== 0)) {
                this.state = 1114;
                this.condition();
            }

            this.state = 1117;
            this.match(CPP14Parser.Semi);
            this.state = 1119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.Throw - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                this.state = 1118;
                this.expression(0);
            }

            this.state = 1121;
            this.match(CPP14Parser.RightParen);
            this.state = 1122;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1124;
            this.match(CPP14Parser.For);
            this.state = 1125;
            this.match(CPP14Parser.LeftParen);
            this.state = 1126;
            this.forrangedeclaration();
            this.state = 1127;
            this.match(CPP14Parser.Colon);
            this.state = 1128;
            this.forrangeinitializer();
            this.state = 1129;
            this.match(CPP14Parser.RightParen);
            this.state = 1130;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForinitstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forinitstatement;
    return this;
}

ForinitstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForinitstatementContext.prototype.constructor = ForinitstatementContext;

ForinitstatementContext.prototype.expressionstatement = function() {
    return this.getTypedRuleContext(ExpressionstatementContext,0);
};

ForinitstatementContext.prototype.simpledeclaration = function() {
    return this.getTypedRuleContext(SimpledeclarationContext,0);
};

ForinitstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterForinitstatement(this);
	}
};

ForinitstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitForinitstatement(this);
	}
};




CPP14Parser.ForinitstatementContext = ForinitstatementContext;

CPP14Parser.prototype.forinitstatement = function() {

    var localctx = new ForinitstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CPP14Parser.RULE_forinitstatement);
    try {
        this.state = 1136;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1134;
            this.expressionstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1135;
            this.simpledeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForrangedeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forrangedeclaration;
    return this;
}

ForrangedeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForrangedeclarationContext.prototype.constructor = ForrangedeclarationContext;

ForrangedeclarationContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

ForrangedeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ForrangedeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ForrangedeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterForrangedeclaration(this);
	}
};

ForrangedeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitForrangedeclaration(this);
	}
};




CPP14Parser.ForrangedeclarationContext = ForrangedeclarationContext;

CPP14Parser.prototype.forrangedeclaration = function() {

    var localctx = new ForrangedeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CPP14Parser.RULE_forrangedeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1139;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1138;
            this.attributespecifierseq(0);
        }

        this.state = 1141;
        this.declspecifierseq();
        this.state = 1142;
        this.declarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForrangeinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forrangeinitializer;
    return this;
}

ForrangeinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForrangeinitializerContext.prototype.constructor = ForrangeinitializerContext;

ForrangeinitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForrangeinitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

ForrangeinitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterForrangeinitializer(this);
	}
};

ForrangeinitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitForrangeinitializer(this);
	}
};




CPP14Parser.ForrangeinitializerContext = ForrangeinitializerContext;

CPP14Parser.prototype.forrangeinitializer = function() {

    var localctx = new ForrangeinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CPP14Parser.RULE_forrangeinitializer);
    try {
        this.state = 1146;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.T__0:
        case CPP14Parser.T__1:
        case CPP14Parser.Alignof:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Const_cast:
        case CPP14Parser.Decltype:
        case CPP14Parser.Delete:
        case CPP14Parser.Double:
        case CPP14Parser.Dynamic_cast:
        case CPP14Parser.False:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.New:
        case CPP14Parser.Noexcept:
        case CPP14Parser.Nullptr:
        case CPP14Parser.Operator:
        case CPP14Parser.Reinterpret_cast:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Sizeof:
        case CPP14Parser.Static_cast:
        case CPP14Parser.This:
        case CPP14Parser.Throw:
        case CPP14Parser.True:
        case CPP14Parser.Typeid_:
        case CPP14Parser.Typename_:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Plus:
        case CPP14Parser.Minus:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Or:
        case CPP14Parser.Tilde:
        case CPP14Parser.PlusPlus:
        case CPP14Parser.MinusMinus:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
        case CPP14Parser.Integerliteral:
        case CPP14Parser.Characterliteral:
        case CPP14Parser.Floatingliteral:
        case CPP14Parser.Stringliteral:
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 1144;
            this.expression(0);
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 1145;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JumpstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_jumpstatement;
    return this;
}

JumpstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpstatementContext.prototype.constructor = JumpstatementContext;

JumpstatementContext.prototype.Break = function() {
    return this.getToken(CPP14Parser.Break, 0);
};

JumpstatementContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

JumpstatementContext.prototype.Continue = function() {
    return this.getToken(CPP14Parser.Continue, 0);
};

JumpstatementContext.prototype.Return = function() {
    return this.getToken(CPP14Parser.Return, 0);
};

JumpstatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

JumpstatementContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

JumpstatementContext.prototype.Goto = function() {
    return this.getToken(CPP14Parser.Goto, 0);
};

JumpstatementContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

JumpstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterJumpstatement(this);
	}
};

JumpstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitJumpstatement(this);
	}
};




CPP14Parser.JumpstatementContext = JumpstatementContext;

CPP14Parser.prototype.jumpstatement = function() {

    var localctx = new JumpstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CPP14Parser.RULE_jumpstatement);
    var _la = 0; // Token type
    try {
        this.state = 1164;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1148;
            this.match(CPP14Parser.Break);
            this.state = 1149;
            this.match(CPP14Parser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1150;
            this.match(CPP14Parser.Continue);
            this.state = 1151;
            this.match(CPP14Parser.Semi);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1152;
            this.match(CPP14Parser.Return);
            this.state = 1154;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.Throw - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                this.state = 1153;
                this.expression(0);
            }

            this.state = 1156;
            this.match(CPP14Parser.Semi);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1157;
            this.match(CPP14Parser.Return);
            this.state = 1158;
            this.bracedinitlist();
            this.state = 1159;
            this.match(CPP14Parser.Semi);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1161;
            this.match(CPP14Parser.Goto);
            this.state = 1162;
            this.match(CPP14Parser.Identifier);
            this.state = 1163;
            this.match(CPP14Parser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarationstatement;
    return this;
}

DeclarationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationstatementContext.prototype.constructor = DeclarationstatementContext;

DeclarationstatementContext.prototype.blockdeclaration = function() {
    return this.getTypedRuleContext(BlockdeclarationContext,0);
};

DeclarationstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDeclarationstatement(this);
	}
};

DeclarationstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDeclarationstatement(this);
	}
};




CPP14Parser.DeclarationstatementContext = DeclarationstatementContext;

CPP14Parser.prototype.declarationstatement = function() {

    var localctx = new DeclarationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CPP14Parser.RULE_declarationstatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1166;
        this.blockdeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarationseq;
    return this;
}

DeclarationseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationseqContext.prototype.constructor = DeclarationseqContext;

DeclarationseqContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

DeclarationseqContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

DeclarationseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDeclarationseq(this);
	}
};

DeclarationseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDeclarationseq(this);
	}
};



CPP14Parser.prototype.declarationseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 122;
    this.enterRecursionRule(localctx, 122, CPP14Parser.RULE_declarationseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1169;
        this.declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1175;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DeclarationseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_declarationseq);
                this.state = 1171;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1172;
                this.declaration(); 
            }
            this.state = 1177;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.blockdeclaration = function() {
    return this.getTypedRuleContext(BlockdeclarationContext,0);
};

DeclarationContext.prototype.functiondefinition = function() {
    return this.getTypedRuleContext(FunctiondefinitionContext,0);
};

DeclarationContext.prototype.templatedeclaration = function() {
    return this.getTypedRuleContext(TemplatedeclarationContext,0);
};

DeclarationContext.prototype.explicitinstantiation = function() {
    return this.getTypedRuleContext(ExplicitinstantiationContext,0);
};

DeclarationContext.prototype.explicitspecialization = function() {
    return this.getTypedRuleContext(ExplicitspecializationContext,0);
};

DeclarationContext.prototype.linkagespecification = function() {
    return this.getTypedRuleContext(LinkagespecificationContext,0);
};

DeclarationContext.prototype.namespacedefinition = function() {
    return this.getTypedRuleContext(NamespacedefinitionContext,0);
};

DeclarationContext.prototype.emptydeclaration = function() {
    return this.getTypedRuleContext(EmptydeclarationContext,0);
};

DeclarationContext.prototype.attributedeclaration = function() {
    return this.getTypedRuleContext(AttributedeclarationContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDeclaration(this);
	}
};




CPP14Parser.DeclarationContext = DeclarationContext;

CPP14Parser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CPP14Parser.RULE_declaration);
    try {
        this.state = 1187;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1178;
            this.blockdeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1179;
            this.functiondefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1180;
            this.templatedeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1181;
            this.explicitinstantiation();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1182;
            this.explicitspecialization();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1183;
            this.linkagespecification();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1184;
            this.namespacedefinition();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1185;
            this.emptydeclaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1186;
            this.attributedeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_blockdeclaration;
    return this;
}

BlockdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockdeclarationContext.prototype.constructor = BlockdeclarationContext;

BlockdeclarationContext.prototype.simpledeclaration = function() {
    return this.getTypedRuleContext(SimpledeclarationContext,0);
};

BlockdeclarationContext.prototype.asmdefinition = function() {
    return this.getTypedRuleContext(AsmdefinitionContext,0);
};

BlockdeclarationContext.prototype.namespacealiasdefinition = function() {
    return this.getTypedRuleContext(NamespacealiasdefinitionContext,0);
};

BlockdeclarationContext.prototype.usingdeclaration = function() {
    return this.getTypedRuleContext(UsingdeclarationContext,0);
};

BlockdeclarationContext.prototype.usingdirective = function() {
    return this.getTypedRuleContext(UsingdirectiveContext,0);
};

BlockdeclarationContext.prototype.static_assertdeclaration = function() {
    return this.getTypedRuleContext(Static_assertdeclarationContext,0);
};

BlockdeclarationContext.prototype.aliasdeclaration = function() {
    return this.getTypedRuleContext(AliasdeclarationContext,0);
};

BlockdeclarationContext.prototype.opaqueenumdeclaration = function() {
    return this.getTypedRuleContext(OpaqueenumdeclarationContext,0);
};

BlockdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBlockdeclaration(this);
	}
};

BlockdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBlockdeclaration(this);
	}
};




CPP14Parser.BlockdeclarationContext = BlockdeclarationContext;

CPP14Parser.prototype.blockdeclaration = function() {

    var localctx = new BlockdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CPP14Parser.RULE_blockdeclaration);
    try {
        this.state = 1197;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1189;
            this.simpledeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1190;
            this.asmdefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1191;
            this.namespacealiasdefinition();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1192;
            this.usingdeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1193;
            this.usingdirective();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1194;
            this.static_assertdeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1195;
            this.aliasdeclaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1196;
            this.opaqueenumdeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_aliasdeclaration;
    return this;
}

AliasdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasdeclarationContext.prototype.constructor = AliasdeclarationContext;

AliasdeclarationContext.prototype.Using = function() {
    return this.getToken(CPP14Parser.Using, 0);
};

AliasdeclarationContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AliasdeclarationContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

AliasdeclarationContext.prototype.thetypeid = function() {
    return this.getTypedRuleContext(ThetypeidContext,0);
};

AliasdeclarationContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

AliasdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

AliasdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAliasdeclaration(this);
	}
};

AliasdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAliasdeclaration(this);
	}
};




CPP14Parser.AliasdeclarationContext = AliasdeclarationContext;

CPP14Parser.prototype.aliasdeclaration = function() {

    var localctx = new AliasdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CPP14Parser.RULE_aliasdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1199;
        this.match(CPP14Parser.Using);
        this.state = 1200;
        this.match(CPP14Parser.Identifier);
        this.state = 1202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1201;
            this.attributespecifierseq(0);
        }

        this.state = 1204;
        this.match(CPP14Parser.Assign);
        this.state = 1205;
        this.thetypeid();
        this.state = 1206;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpledeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpledeclaration;
    return this;
}

SimpledeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpledeclarationContext.prototype.constructor = SimpledeclarationContext;

SimpledeclarationContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

SimpledeclarationContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

SimpledeclarationContext.prototype.initdeclaratorlist = function() {
    return this.getTypedRuleContext(InitdeclaratorlistContext,0);
};

SimpledeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

SimpledeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterSimpledeclaration(this);
	}
};

SimpledeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitSimpledeclaration(this);
	}
};




CPP14Parser.SimpledeclarationContext = SimpledeclarationContext;

CPP14Parser.prototype.simpledeclaration = function() {

    var localctx = new SimpledeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CPP14Parser.RULE_simpledeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1222;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.T__2:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Constexpr:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Enum:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Float:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Mutable:
        case CPP14Parser.Operator:
        case CPP14Parser.Register:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Static:
        case CPP14Parser.Struct:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Typename_:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Virtual:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Semi:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1209;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 1208;
                this.declspecifierseq();

            }
            this.state = 1212;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.T__2 || _la===CPP14Parser.Decltype || _la===CPP14Parser.Operator || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (CPP14Parser.LeftParen - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Tilde - 84)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)))) !== 0)) {
                this.state = 1211;
                this.initdeclaratorlist(0);
            }

            this.state = 1214;
            this.match(CPP14Parser.Semi);
            break;
        case CPP14Parser.Alignas:
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1215;
            this.attributespecifierseq(0);
            this.state = 1217;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
            if(la_===1) {
                this.state = 1216;
                this.declspecifierseq();

            }
            this.state = 1219;
            this.initdeclaratorlist(0);
            this.state = 1220;
            this.match(CPP14Parser.Semi);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Static_assertdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_static_assertdeclaration;
    return this;
}

Static_assertdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Static_assertdeclarationContext.prototype.constructor = Static_assertdeclarationContext;

Static_assertdeclarationContext.prototype.Static_assert = function() {
    return this.getToken(CPP14Parser.Static_assert, 0);
};

Static_assertdeclarationContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

Static_assertdeclarationContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

Static_assertdeclarationContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

Static_assertdeclarationContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

Static_assertdeclarationContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

Static_assertdeclarationContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

Static_assertdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterStatic_assertdeclaration(this);
	}
};

Static_assertdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitStatic_assertdeclaration(this);
	}
};




CPP14Parser.Static_assertdeclarationContext = Static_assertdeclarationContext;

CPP14Parser.prototype.static_assertdeclaration = function() {

    var localctx = new Static_assertdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CPP14Parser.RULE_static_assertdeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1224;
        this.match(CPP14Parser.Static_assert);
        this.state = 1225;
        this.match(CPP14Parser.LeftParen);
        this.state = 1226;
        this.constantexpression();
        this.state = 1227;
        this.match(CPP14Parser.Comma);
        this.state = 1228;
        this.match(CPP14Parser.Stringliteral);
        this.state = 1229;
        this.match(CPP14Parser.RightParen);
        this.state = 1230;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptydeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_emptydeclaration;
    return this;
}

EmptydeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptydeclarationContext.prototype.constructor = EmptydeclarationContext;

EmptydeclarationContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

EmptydeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEmptydeclaration(this);
	}
};

EmptydeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEmptydeclaration(this);
	}
};




CPP14Parser.EmptydeclarationContext = EmptydeclarationContext;

CPP14Parser.prototype.emptydeclaration = function() {

    var localctx = new EmptydeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CPP14Parser.RULE_emptydeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributedeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributedeclaration;
    return this;
}

AttributedeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributedeclarationContext.prototype.constructor = AttributedeclarationContext;

AttributedeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

AttributedeclarationContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

AttributedeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAttributedeclaration(this);
	}
};

AttributedeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAttributedeclaration(this);
	}
};




CPP14Parser.AttributedeclarationContext = AttributedeclarationContext;

CPP14Parser.prototype.attributedeclaration = function() {

    var localctx = new AttributedeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CPP14Parser.RULE_attributedeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1234;
        this.attributespecifierseq(0);
        this.state = 1235;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifier;
    return this;
}

DeclspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierContext.prototype.constructor = DeclspecifierContext;

DeclspecifierContext.prototype.storageclassspecifier = function() {
    return this.getTypedRuleContext(StorageclassspecifierContext,0);
};

DeclspecifierContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

DeclspecifierContext.prototype.functionspecifier = function() {
    return this.getTypedRuleContext(FunctionspecifierContext,0);
};

DeclspecifierContext.prototype.Friend = function() {
    return this.getToken(CPP14Parser.Friend, 0);
};

DeclspecifierContext.prototype.Typedef = function() {
    return this.getToken(CPP14Parser.Typedef, 0);
};

DeclspecifierContext.prototype.Constexpr = function() {
    return this.getToken(CPP14Parser.Constexpr, 0);
};

DeclspecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDeclspecifier(this);
	}
};

DeclspecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDeclspecifier(this);
	}
};




CPP14Parser.DeclspecifierContext = DeclspecifierContext;

CPP14Parser.prototype.declspecifier = function() {

    var localctx = new DeclspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CPP14Parser.RULE_declspecifier);
    try {
        this.state = 1243;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Extern:
        case CPP14Parser.Mutable:
        case CPP14Parser.Register:
        case CPP14Parser.Static:
        case CPP14Parser.Thread_local:
            this.enterOuterAlt(localctx, 1);
            this.state = 1237;
            this.storageclassspecifier();
            break;
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Enum:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Struct:
        case CPP14Parser.Typename_:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1238;
            this.typespecifier();
            break;
        case CPP14Parser.Explicit:
        case CPP14Parser.Inline:
        case CPP14Parser.Virtual:
            this.enterOuterAlt(localctx, 3);
            this.state = 1239;
            this.functionspecifier();
            break;
        case CPP14Parser.Friend:
            this.enterOuterAlt(localctx, 4);
            this.state = 1240;
            this.match(CPP14Parser.Friend);
            break;
        case CPP14Parser.Typedef:
            this.enterOuterAlt(localctx, 5);
            this.state = 1241;
            this.match(CPP14Parser.Typedef);
            break;
        case CPP14Parser.Constexpr:
            this.enterOuterAlt(localctx, 6);
            this.state = 1242;
            this.match(CPP14Parser.Constexpr);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclspecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifierseq;
    return this;
}

DeclspecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierseqContext.prototype.constructor = DeclspecifierseqContext;

DeclspecifierseqContext.prototype.declspecifier = function() {
    return this.getTypedRuleContext(DeclspecifierContext,0);
};

DeclspecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

DeclspecifierseqContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

DeclspecifierseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDeclspecifierseq(this);
	}
};

DeclspecifierseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDeclspecifierseq(this);
	}
};




CPP14Parser.DeclspecifierseqContext = DeclspecifierseqContext;

CPP14Parser.prototype.declspecifierseq = function() {

    var localctx = new DeclspecifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CPP14Parser.RULE_declspecifierseq);
    try {
        this.state = 1252;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1245;
            this.declspecifier();
            this.state = 1247;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
            if(la_===1) {
                this.state = 1246;
                this.attributespecifierseq(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1249;
            this.declspecifier();
            this.state = 1250;
            this.declspecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StorageclassspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_storageclassspecifier;
    return this;
}

StorageclassspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageclassspecifierContext.prototype.constructor = StorageclassspecifierContext;

StorageclassspecifierContext.prototype.Register = function() {
    return this.getToken(CPP14Parser.Register, 0);
};

StorageclassspecifierContext.prototype.Static = function() {
    return this.getToken(CPP14Parser.Static, 0);
};

StorageclassspecifierContext.prototype.Thread_local = function() {
    return this.getToken(CPP14Parser.Thread_local, 0);
};

StorageclassspecifierContext.prototype.Extern = function() {
    return this.getToken(CPP14Parser.Extern, 0);
};

StorageclassspecifierContext.prototype.Mutable = function() {
    return this.getToken(CPP14Parser.Mutable, 0);
};

StorageclassspecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterStorageclassspecifier(this);
	}
};

StorageclassspecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitStorageclassspecifier(this);
	}
};




CPP14Parser.StorageclassspecifierContext = StorageclassspecifierContext;

CPP14Parser.prototype.storageclassspecifier = function() {

    var localctx = new StorageclassspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CPP14Parser.RULE_storageclassspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1254;
        _la = this._input.LA(1);
        if(!(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CPP14Parser.Extern - 35)) | (1 << (CPP14Parser.Mutable - 35)) | (1 << (CPP14Parser.Register - 35)) | (1 << (CPP14Parser.Static - 35)))) !== 0) || _la===CPP14Parser.Thread_local)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionspecifier;
    return this;
}

FunctionspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionspecifierContext.prototype.constructor = FunctionspecifierContext;

FunctionspecifierContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

FunctionspecifierContext.prototype.Virtual = function() {
    return this.getToken(CPP14Parser.Virtual, 0);
};

FunctionspecifierContext.prototype.Explicit = function() {
    return this.getToken(CPP14Parser.Explicit, 0);
};

FunctionspecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterFunctionspecifier(this);
	}
};

FunctionspecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitFunctionspecifier(this);
	}
};




CPP14Parser.FunctionspecifierContext = FunctionspecifierContext;

CPP14Parser.prototype.functionspecifier = function() {

    var localctx = new FunctionspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CPP14Parser.RULE_functionspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1256;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Explicit || _la===CPP14Parser.Inline || _la===CPP14Parser.Virtual)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypedefnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typedefname;
    return this;
}

TypedefnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefnameContext.prototype.constructor = TypedefnameContext;

TypedefnameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TypedefnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTypedefname(this);
	}
};

TypedefnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTypedefname(this);
	}
};




CPP14Parser.TypedefnameContext = TypedefnameContext;

CPP14Parser.prototype.typedefname = function() {

    var localctx = new TypedefnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CPP14Parser.RULE_typedefname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typespecifier;
    return this;
}

TypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypespecifierContext.prototype.constructor = TypespecifierContext;

TypespecifierContext.prototype.trailingtypespecifier = function() {
    return this.getTypedRuleContext(TrailingtypespecifierContext,0);
};

TypespecifierContext.prototype.classspecifier = function() {
    return this.getTypedRuleContext(ClassspecifierContext,0);
};

TypespecifierContext.prototype.enumspecifier = function() {
    return this.getTypedRuleContext(EnumspecifierContext,0);
};

TypespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTypespecifier(this);
	}
};

TypespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTypespecifier(this);
	}
};




CPP14Parser.TypespecifierContext = TypespecifierContext;

CPP14Parser.prototype.typespecifier = function() {

    var localctx = new TypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CPP14Parser.RULE_typespecifier);
    try {
        this.state = 1263;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1260;
            this.trailingtypespecifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1261;
            this.classspecifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1262;
            this.enumspecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TrailingtypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingtypespecifier;
    return this;
}

TrailingtypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailingtypespecifierContext.prototype.constructor = TrailingtypespecifierContext;

TrailingtypespecifierContext.prototype.simpletypespecifier = function() {
    return this.getTypedRuleContext(SimpletypespecifierContext,0);
};

TrailingtypespecifierContext.prototype.elaboratedtypespecifier = function() {
    return this.getTypedRuleContext(ElaboratedtypespecifierContext,0);
};

TrailingtypespecifierContext.prototype.typenamespecifier = function() {
    return this.getTypedRuleContext(TypenamespecifierContext,0);
};

TrailingtypespecifierContext.prototype.cvqualifier = function() {
    return this.getTypedRuleContext(CvqualifierContext,0);
};

TrailingtypespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTrailingtypespecifier(this);
	}
};

TrailingtypespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTrailingtypespecifier(this);
	}
};




CPP14Parser.TrailingtypespecifierContext = TrailingtypespecifierContext;

CPP14Parser.prototype.trailingtypespecifier = function() {

    var localctx = new TrailingtypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CPP14Parser.RULE_trailingtypespecifier);
    try {
        this.state = 1269;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1265;
            this.simpletypespecifier();
            break;
        case CPP14Parser.Class:
        case CPP14Parser.Enum:
        case CPP14Parser.Struct:
        case CPP14Parser.Union:
            this.enterOuterAlt(localctx, 2);
            this.state = 1266;
            this.elaboratedtypespecifier();
            break;
        case CPP14Parser.Typename_:
            this.enterOuterAlt(localctx, 3);
            this.state = 1267;
            this.typenamespecifier();
            break;
        case CPP14Parser.Const:
        case CPP14Parser.Volatile:
            this.enterOuterAlt(localctx, 4);
            this.state = 1268;
            this.cvqualifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypespecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typespecifierseq;
    return this;
}

TypespecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypespecifierseqContext.prototype.constructor = TypespecifierseqContext;

TypespecifierseqContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

TypespecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

TypespecifierseqContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

TypespecifierseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTypespecifierseq(this);
	}
};

TypespecifierseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTypespecifierseq(this);
	}
};




CPP14Parser.TypespecifierseqContext = TypespecifierseqContext;

CPP14Parser.prototype.typespecifierseq = function() {

    var localctx = new TypespecifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CPP14Parser.RULE_typespecifierseq);
    try {
        this.state = 1278;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1271;
            this.typespecifier();
            this.state = 1273;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
            if(la_===1) {
                this.state = 1272;
                this.attributespecifierseq(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1275;
            this.typespecifier();
            this.state = 1276;
            this.typespecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TrailingtypespecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingtypespecifierseq;
    return this;
}

TrailingtypespecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailingtypespecifierseqContext.prototype.constructor = TrailingtypespecifierseqContext;

TrailingtypespecifierseqContext.prototype.trailingtypespecifier = function() {
    return this.getTypedRuleContext(TrailingtypespecifierContext,0);
};

TrailingtypespecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

TrailingtypespecifierseqContext.prototype.trailingtypespecifierseq = function() {
    return this.getTypedRuleContext(TrailingtypespecifierseqContext,0);
};

TrailingtypespecifierseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTrailingtypespecifierseq(this);
	}
};

TrailingtypespecifierseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTrailingtypespecifierseq(this);
	}
};




CPP14Parser.TrailingtypespecifierseqContext = TrailingtypespecifierseqContext;

CPP14Parser.prototype.trailingtypespecifierseq = function() {

    var localctx = new TrailingtypespecifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CPP14Parser.RULE_trailingtypespecifierseq);
    try {
        this.state = 1287;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1280;
            this.trailingtypespecifier();
            this.state = 1282;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
            if(la_===1) {
                this.state = 1281;
                this.attributespecifierseq(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1284;
            this.trailingtypespecifier();
            this.state = 1285;
            this.trailingtypespecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpletypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpletypespecifier;
    return this;
}

SimpletypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpletypespecifierContext.prototype.constructor = SimpletypespecifierContext;

SimpletypespecifierContext.prototype.thetypename = function() {
    return this.getTypedRuleContext(ThetypenameContext,0);
};

SimpletypespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

SimpletypespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

SimpletypespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

SimpletypespecifierContext.prototype.Char = function() {
    return this.getToken(CPP14Parser.Char, 0);
};

SimpletypespecifierContext.prototype.Char16 = function() {
    return this.getToken(CPP14Parser.Char16, 0);
};

SimpletypespecifierContext.prototype.Char32 = function() {
    return this.getToken(CPP14Parser.Char32, 0);
};

SimpletypespecifierContext.prototype.Wchar = function() {
    return this.getToken(CPP14Parser.Wchar, 0);
};

SimpletypespecifierContext.prototype.Bool = function() {
    return this.getToken(CPP14Parser.Bool, 0);
};

SimpletypespecifierContext.prototype.Short = function() {
    return this.getToken(CPP14Parser.Short, 0);
};

SimpletypespecifierContext.prototype.Int = function() {
    return this.getToken(CPP14Parser.Int, 0);
};

SimpletypespecifierContext.prototype.Long = function() {
    return this.getToken(CPP14Parser.Long, 0);
};

SimpletypespecifierContext.prototype.Signed = function() {
    return this.getToken(CPP14Parser.Signed, 0);
};

SimpletypespecifierContext.prototype.Unsigned = function() {
    return this.getToken(CPP14Parser.Unsigned, 0);
};

SimpletypespecifierContext.prototype.Float = function() {
    return this.getToken(CPP14Parser.Float, 0);
};

SimpletypespecifierContext.prototype.Double = function() {
    return this.getToken(CPP14Parser.Double, 0);
};

SimpletypespecifierContext.prototype.Void = function() {
    return this.getToken(CPP14Parser.Void, 0);
};

SimpletypespecifierContext.prototype.Auto = function() {
    return this.getToken(CPP14Parser.Auto, 0);
};

SimpletypespecifierContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

SimpletypespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterSimpletypespecifier(this);
	}
};

SimpletypespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitSimpletypespecifier(this);
	}
};




CPP14Parser.SimpletypespecifierContext = SimpletypespecifierContext;

CPP14Parser.prototype.simpletypespecifier = function() {

    var localctx = new SimpletypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CPP14Parser.RULE_simpletypespecifier);
    try {
        this.state = 1312;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1290;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
            if(la_===1) {
                this.state = 1289;
                this.nestednamespecifier(0);

            }
            this.state = 1292;
            this.thetypename();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1293;
            this.nestednamespecifier(0);
            this.state = 1294;
            this.match(CPP14Parser.Template);
            this.state = 1295;
            this.simpletemplateid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1297;
            this.match(CPP14Parser.Char);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1298;
            this.match(CPP14Parser.Char16);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1299;
            this.match(CPP14Parser.Char32);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1300;
            this.match(CPP14Parser.Wchar);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1301;
            this.match(CPP14Parser.Bool);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1302;
            this.match(CPP14Parser.Short);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1303;
            this.match(CPP14Parser.Int);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1304;
            this.match(CPP14Parser.Long);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1305;
            this.match(CPP14Parser.Signed);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1306;
            this.match(CPP14Parser.Unsigned);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1307;
            this.match(CPP14Parser.Float);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1308;
            this.match(CPP14Parser.Double);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1309;
            this.match(CPP14Parser.Void);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1310;
            this.match(CPP14Parser.Auto);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1311;
            this.decltypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThetypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_thetypename;
    return this;
}

ThetypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThetypenameContext.prototype.constructor = ThetypenameContext;

ThetypenameContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

ThetypenameContext.prototype.enumname = function() {
    return this.getTypedRuleContext(EnumnameContext,0);
};

ThetypenameContext.prototype.typedefname = function() {
    return this.getTypedRuleContext(TypedefnameContext,0);
};

ThetypenameContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

ThetypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterThetypename(this);
	}
};

ThetypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitThetypename(this);
	}
};




CPP14Parser.ThetypenameContext = ThetypenameContext;

CPP14Parser.prototype.thetypename = function() {

    var localctx = new ThetypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CPP14Parser.RULE_thetypename);
    try {
        this.state = 1318;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1314;
            this.classname();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1315;
            this.enumname();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1316;
            this.typedefname();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1317;
            this.simpletemplateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecltypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_decltypespecifier;
    return this;
}

DecltypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecltypespecifierContext.prototype.constructor = DecltypespecifierContext;

DecltypespecifierContext.prototype.Decltype = function() {
    return this.getToken(CPP14Parser.Decltype, 0);
};

DecltypespecifierContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

DecltypespecifierContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DecltypespecifierContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

DecltypespecifierContext.prototype.Auto = function() {
    return this.getToken(CPP14Parser.Auto, 0);
};

DecltypespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDecltypespecifier(this);
	}
};

DecltypespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDecltypespecifier(this);
	}
};




CPP14Parser.DecltypespecifierContext = DecltypespecifierContext;

CPP14Parser.prototype.decltypespecifier = function() {

    var localctx = new DecltypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CPP14Parser.RULE_decltypespecifier);
    try {
        this.state = 1329;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1320;
            this.match(CPP14Parser.Decltype);
            this.state = 1321;
            this.match(CPP14Parser.LeftParen);
            this.state = 1322;
            this.expression(0);
            this.state = 1323;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1325;
            this.match(CPP14Parser.Decltype);
            this.state = 1326;
            this.match(CPP14Parser.LeftParen);
            this.state = 1327;
            this.match(CPP14Parser.Auto);
            this.state = 1328;
            this.match(CPP14Parser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElaboratedtypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_elaboratedtypespecifier;
    return this;
}

ElaboratedtypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElaboratedtypespecifierContext.prototype.constructor = ElaboratedtypespecifierContext;

ElaboratedtypespecifierContext.prototype.classkey = function() {
    return this.getTypedRuleContext(ClasskeyContext,0);
};

ElaboratedtypespecifierContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

ElaboratedtypespecifierContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ElaboratedtypespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ElaboratedtypespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

ElaboratedtypespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

ElaboratedtypespecifierContext.prototype.Enum = function() {
    return this.getToken(CPP14Parser.Enum, 0);
};

ElaboratedtypespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterElaboratedtypespecifier(this);
	}
};

ElaboratedtypespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitElaboratedtypespecifier(this);
	}
};




CPP14Parser.ElaboratedtypespecifierContext = ElaboratedtypespecifierContext;

CPP14Parser.prototype.elaboratedtypespecifier = function() {

    var localctx = new ElaboratedtypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CPP14Parser.RULE_elaboratedtypespecifier);
    var _la = 0; // Token type
    try {
        this.state = 1355;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1331;
            this.classkey();
            this.state = 1333;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1332;
                this.attributespecifierseq(0);
            }

            this.state = 1336;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
            if(la_===1) {
                this.state = 1335;
                this.nestednamespecifier(0);

            }
            this.state = 1338;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1340;
            this.classkey();
            this.state = 1341;
            this.simpletemplateid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1343;
            this.classkey();
            this.state = 1344;
            this.nestednamespecifier(0);
            this.state = 1346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Template) {
                this.state = 1345;
                this.match(CPP14Parser.Template);
            }

            this.state = 1348;
            this.simpletemplateid();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1350;
            this.match(CPP14Parser.Enum);
            this.state = 1352;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
            if(la_===1) {
                this.state = 1351;
                this.nestednamespecifier(0);

            }
            this.state = 1354;
            this.match(CPP14Parser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumname;
    return this;
}

EnumnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumnameContext.prototype.constructor = EnumnameContext;

EnumnameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

EnumnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEnumname(this);
	}
};

EnumnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEnumname(this);
	}
};




CPP14Parser.EnumnameContext = EnumnameContext;

CPP14Parser.prototype.enumname = function() {

    var localctx = new EnumnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CPP14Parser.RULE_enumname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1357;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumspecifier;
    return this;
}

EnumspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumspecifierContext.prototype.constructor = EnumspecifierContext;

EnumspecifierContext.prototype.enumhead = function() {
    return this.getTypedRuleContext(EnumheadContext,0);
};

EnumspecifierContext.prototype.LeftBrace = function() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
};

EnumspecifierContext.prototype.RightBrace = function() {
    return this.getToken(CPP14Parser.RightBrace, 0);
};

EnumspecifierContext.prototype.enumeratorlist = function() {
    return this.getTypedRuleContext(EnumeratorlistContext,0);
};

EnumspecifierContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

EnumspecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEnumspecifier(this);
	}
};

EnumspecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEnumspecifier(this);
	}
};




CPP14Parser.EnumspecifierContext = EnumspecifierContext;

CPP14Parser.prototype.enumspecifier = function() {

    var localctx = new EnumspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CPP14Parser.RULE_enumspecifier);
    var _la = 0; // Token type
    try {
        this.state = 1372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1359;
            this.enumhead();
            this.state = 1360;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 1361;
                this.enumeratorlist(0);
            }

            this.state = 1364;
            this.match(CPP14Parser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1366;
            this.enumhead();
            this.state = 1367;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1368;
            this.enumeratorlist(0);
            this.state = 1369;
            this.match(CPP14Parser.Comma);
            this.state = 1370;
            this.match(CPP14Parser.RightBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumheadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumhead;
    return this;
}

EnumheadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumheadContext.prototype.constructor = EnumheadContext;

EnumheadContext.prototype.enumkey = function() {
    return this.getTypedRuleContext(EnumkeyContext,0);
};

EnumheadContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

EnumheadContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

EnumheadContext.prototype.enumbase = function() {
    return this.getTypedRuleContext(EnumbaseContext,0);
};

EnumheadContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

EnumheadContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEnumhead(this);
	}
};

EnumheadContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEnumhead(this);
	}
};




CPP14Parser.EnumheadContext = EnumheadContext;

CPP14Parser.prototype.enumhead = function() {

    var localctx = new EnumheadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CPP14Parser.RULE_enumhead);
    var _la = 0; // Token type
    try {
        this.state = 1393;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1374;
            this.enumkey();
            this.state = 1376;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1375;
                this.attributespecifierseq(0);
            }

            this.state = 1379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 1378;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 1382;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1381;
                this.enumbase();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1384;
            this.enumkey();
            this.state = 1386;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1385;
                this.attributespecifierseq(0);
            }

            this.state = 1388;
            this.nestednamespecifier(0);
            this.state = 1389;
            this.match(CPP14Parser.Identifier);
            this.state = 1391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1390;
                this.enumbase();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OpaqueenumdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_opaqueenumdeclaration;
    return this;
}

OpaqueenumdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpaqueenumdeclarationContext.prototype.constructor = OpaqueenumdeclarationContext;

OpaqueenumdeclarationContext.prototype.enumkey = function() {
    return this.getTypedRuleContext(EnumkeyContext,0);
};

OpaqueenumdeclarationContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

OpaqueenumdeclarationContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

OpaqueenumdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

OpaqueenumdeclarationContext.prototype.enumbase = function() {
    return this.getTypedRuleContext(EnumbaseContext,0);
};

OpaqueenumdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterOpaqueenumdeclaration(this);
	}
};

OpaqueenumdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitOpaqueenumdeclaration(this);
	}
};




CPP14Parser.OpaqueenumdeclarationContext = OpaqueenumdeclarationContext;

CPP14Parser.prototype.opaqueenumdeclaration = function() {

    var localctx = new OpaqueenumdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CPP14Parser.RULE_opaqueenumdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1395;
        this.enumkey();
        this.state = 1397;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1396;
            this.attributespecifierseq(0);
        }

        this.state = 1399;
        this.match(CPP14Parser.Identifier);
        this.state = 1401;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Colon) {
            this.state = 1400;
            this.enumbase();
        }

        this.state = 1403;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumkeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumkey;
    return this;
}

EnumkeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumkeyContext.prototype.constructor = EnumkeyContext;

EnumkeyContext.prototype.Enum = function() {
    return this.getToken(CPP14Parser.Enum, 0);
};

EnumkeyContext.prototype.Class = function() {
    return this.getToken(CPP14Parser.Class, 0);
};

EnumkeyContext.prototype.Struct = function() {
    return this.getToken(CPP14Parser.Struct, 0);
};

EnumkeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEnumkey(this);
	}
};

EnumkeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEnumkey(this);
	}
};




CPP14Parser.EnumkeyContext = EnumkeyContext;

CPP14Parser.prototype.enumkey = function() {

    var localctx = new EnumkeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CPP14Parser.RULE_enumkey);
    try {
        this.state = 1410;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1405;
            this.match(CPP14Parser.Enum);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1406;
            this.match(CPP14Parser.Enum);
            this.state = 1407;
            this.match(CPP14Parser.Class);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1408;
            this.match(CPP14Parser.Enum);
            this.state = 1409;
            this.match(CPP14Parser.Struct);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumbaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumbase;
    return this;
}

EnumbaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumbaseContext.prototype.constructor = EnumbaseContext;

EnumbaseContext.prototype.Colon = function() {
    return this.getToken(CPP14Parser.Colon, 0);
};

EnumbaseContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

EnumbaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEnumbase(this);
	}
};

EnumbaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEnumbase(this);
	}
};




CPP14Parser.EnumbaseContext = EnumbaseContext;

CPP14Parser.prototype.enumbase = function() {

    var localctx = new EnumbaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CPP14Parser.RULE_enumbase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1412;
        this.match(CPP14Parser.Colon);
        this.state = 1413;
        this.typespecifierseq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumeratorlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumeratorlist;
    return this;
}

EnumeratorlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorlistContext.prototype.constructor = EnumeratorlistContext;

EnumeratorlistContext.prototype.enumeratordefinition = function() {
    return this.getTypedRuleContext(EnumeratordefinitionContext,0);
};

EnumeratorlistContext.prototype.enumeratorlist = function() {
    return this.getTypedRuleContext(EnumeratorlistContext,0);
};

EnumeratorlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

EnumeratorlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEnumeratorlist(this);
	}
};

EnumeratorlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEnumeratorlist(this);
	}
};



CPP14Parser.prototype.enumeratorlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EnumeratorlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 176;
    this.enterRecursionRule(localctx, 176, CPP14Parser.RULE_enumeratorlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1416;
        this.enumeratordefinition();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1423;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new EnumeratorlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_enumeratorlist);
                this.state = 1418;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1419;
                this.match(CPP14Parser.Comma);
                this.state = 1420;
                this.enumeratordefinition(); 
            }
            this.state = 1425;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function EnumeratordefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumeratordefinition;
    return this;
}

EnumeratordefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratordefinitionContext.prototype.constructor = EnumeratordefinitionContext;

EnumeratordefinitionContext.prototype.enumerator = function() {
    return this.getTypedRuleContext(EnumeratorContext,0);
};

EnumeratordefinitionContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

EnumeratordefinitionContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

EnumeratordefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEnumeratordefinition(this);
	}
};

EnumeratordefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEnumeratordefinition(this);
	}
};




CPP14Parser.EnumeratordefinitionContext = EnumeratordefinitionContext;

CPP14Parser.prototype.enumeratordefinition = function() {

    var localctx = new EnumeratordefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CPP14Parser.RULE_enumeratordefinition);
    try {
        this.state = 1431;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1426;
            this.enumerator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1427;
            this.enumerator();
            this.state = 1428;
            this.match(CPP14Parser.Assign);
            this.state = 1429;
            this.constantexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumeratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumerator;
    return this;
}

EnumeratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorContext.prototype.constructor = EnumeratorContext;

EnumeratorContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

EnumeratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterEnumerator(this);
	}
};

EnumeratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitEnumerator(this);
	}
};




CPP14Parser.EnumeratorContext = EnumeratorContext;

CPP14Parser.prototype.enumerator = function() {

    var localctx = new EnumeratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CPP14Parser.RULE_enumerator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1433;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamespacenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacename;
    return this;
}

NamespacenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacenameContext.prototype.constructor = NamespacenameContext;

NamespacenameContext.prototype.originalnamespacename = function() {
    return this.getTypedRuleContext(OriginalnamespacenameContext,0);
};

NamespacenameContext.prototype.namespacealias = function() {
    return this.getTypedRuleContext(NamespacealiasContext,0);
};

NamespacenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNamespacename(this);
	}
};

NamespacenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNamespacename(this);
	}
};




CPP14Parser.NamespacenameContext = NamespacenameContext;

CPP14Parser.prototype.namespacename = function() {

    var localctx = new NamespacenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CPP14Parser.RULE_namespacename);
    try {
        this.state = 1437;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1435;
            this.originalnamespacename();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1436;
            this.namespacealias();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OriginalnamespacenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_originalnamespacename;
    return this;
}

OriginalnamespacenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OriginalnamespacenameContext.prototype.constructor = OriginalnamespacenameContext;

OriginalnamespacenameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

OriginalnamespacenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterOriginalnamespacename(this);
	}
};

OriginalnamespacenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitOriginalnamespacename(this);
	}
};




CPP14Parser.OriginalnamespacenameContext = OriginalnamespacenameContext;

CPP14Parser.prototype.originalnamespacename = function() {

    var localctx = new OriginalnamespacenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CPP14Parser.RULE_originalnamespacename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1439;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacedefinition;
    return this;
}

NamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacedefinitionContext.prototype.constructor = NamespacedefinitionContext;

NamespacedefinitionContext.prototype.namednamespacedefinition = function() {
    return this.getTypedRuleContext(NamednamespacedefinitionContext,0);
};

NamespacedefinitionContext.prototype.unnamednamespacedefinition = function() {
    return this.getTypedRuleContext(UnnamednamespacedefinitionContext,0);
};

NamespacedefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNamespacedefinition(this);
	}
};

NamespacedefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNamespacedefinition(this);
	}
};




CPP14Parser.NamespacedefinitionContext = NamespacedefinitionContext;

CPP14Parser.prototype.namespacedefinition = function() {

    var localctx = new NamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CPP14Parser.RULE_namespacedefinition);
    try {
        this.state = 1443;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1441;
            this.namednamespacedefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1442;
            this.unnamednamespacedefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamednamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namednamespacedefinition;
    return this;
}

NamednamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamednamespacedefinitionContext.prototype.constructor = NamednamespacedefinitionContext;

NamednamespacedefinitionContext.prototype.originalnamespacedefinition = function() {
    return this.getTypedRuleContext(OriginalnamespacedefinitionContext,0);
};

NamednamespacedefinitionContext.prototype.extensionnamespacedefinition = function() {
    return this.getTypedRuleContext(ExtensionnamespacedefinitionContext,0);
};

NamednamespacedefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNamednamespacedefinition(this);
	}
};

NamednamespacedefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNamednamespacedefinition(this);
	}
};




CPP14Parser.NamednamespacedefinitionContext = NamednamespacedefinitionContext;

CPP14Parser.prototype.namednamespacedefinition = function() {

    var localctx = new NamednamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CPP14Parser.RULE_namednamespacedefinition);
    try {
        this.state = 1447;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1445;
            this.originalnamespacedefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1446;
            this.extensionnamespacedefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OriginalnamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_originalnamespacedefinition;
    return this;
}

OriginalnamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OriginalnamespacedefinitionContext.prototype.constructor = OriginalnamespacedefinitionContext;

OriginalnamespacedefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

OriginalnamespacedefinitionContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

OriginalnamespacedefinitionContext.prototype.LeftBrace = function() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
};

OriginalnamespacedefinitionContext.prototype.namespacebody = function() {
    return this.getTypedRuleContext(NamespacebodyContext,0);
};

OriginalnamespacedefinitionContext.prototype.RightBrace = function() {
    return this.getToken(CPP14Parser.RightBrace, 0);
};

OriginalnamespacedefinitionContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

OriginalnamespacedefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterOriginalnamespacedefinition(this);
	}
};

OriginalnamespacedefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitOriginalnamespacedefinition(this);
	}
};




CPP14Parser.OriginalnamespacedefinitionContext = OriginalnamespacedefinitionContext;

CPP14Parser.prototype.originalnamespacedefinition = function() {

    var localctx = new OriginalnamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CPP14Parser.RULE_originalnamespacedefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1450;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Inline) {
            this.state = 1449;
            this.match(CPP14Parser.Inline);
        }

        this.state = 1452;
        this.match(CPP14Parser.Namespace);
        this.state = 1453;
        this.match(CPP14Parser.Identifier);
        this.state = 1454;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1455;
        this.namespacebody();
        this.state = 1456;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionnamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_extensionnamespacedefinition;
    return this;
}

ExtensionnamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionnamespacedefinitionContext.prototype.constructor = ExtensionnamespacedefinitionContext;

ExtensionnamespacedefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

ExtensionnamespacedefinitionContext.prototype.originalnamespacename = function() {
    return this.getTypedRuleContext(OriginalnamespacenameContext,0);
};

ExtensionnamespacedefinitionContext.prototype.LeftBrace = function() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
};

ExtensionnamespacedefinitionContext.prototype.namespacebody = function() {
    return this.getTypedRuleContext(NamespacebodyContext,0);
};

ExtensionnamespacedefinitionContext.prototype.RightBrace = function() {
    return this.getToken(CPP14Parser.RightBrace, 0);
};

ExtensionnamespacedefinitionContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

ExtensionnamespacedefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterExtensionnamespacedefinition(this);
	}
};

ExtensionnamespacedefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitExtensionnamespacedefinition(this);
	}
};




CPP14Parser.ExtensionnamespacedefinitionContext = ExtensionnamespacedefinitionContext;

CPP14Parser.prototype.extensionnamespacedefinition = function() {

    var localctx = new ExtensionnamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CPP14Parser.RULE_extensionnamespacedefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1459;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Inline) {
            this.state = 1458;
            this.match(CPP14Parser.Inline);
        }

        this.state = 1461;
        this.match(CPP14Parser.Namespace);
        this.state = 1462;
        this.originalnamespacename();
        this.state = 1463;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1464;
        this.namespacebody();
        this.state = 1465;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnnamednamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unnamednamespacedefinition;
    return this;
}

UnnamednamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnnamednamespacedefinitionContext.prototype.constructor = UnnamednamespacedefinitionContext;

UnnamednamespacedefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

UnnamednamespacedefinitionContext.prototype.LeftBrace = function() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
};

UnnamednamespacedefinitionContext.prototype.namespacebody = function() {
    return this.getTypedRuleContext(NamespacebodyContext,0);
};

UnnamednamespacedefinitionContext.prototype.RightBrace = function() {
    return this.getToken(CPP14Parser.RightBrace, 0);
};

UnnamednamespacedefinitionContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

UnnamednamespacedefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterUnnamednamespacedefinition(this);
	}
};

UnnamednamespacedefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitUnnamednamespacedefinition(this);
	}
};




CPP14Parser.UnnamednamespacedefinitionContext = UnnamednamespacedefinitionContext;

CPP14Parser.prototype.unnamednamespacedefinition = function() {

    var localctx = new UnnamednamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CPP14Parser.RULE_unnamednamespacedefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1468;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Inline) {
            this.state = 1467;
            this.match(CPP14Parser.Inline);
        }

        this.state = 1470;
        this.match(CPP14Parser.Namespace);
        this.state = 1471;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1472;
        this.namespacebody();
        this.state = 1473;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamespacebodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacebody;
    return this;
}

NamespacebodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacebodyContext.prototype.constructor = NamespacebodyContext;

NamespacebodyContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

NamespacebodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNamespacebody(this);
	}
};

NamespacebodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNamespacebody(this);
	}
};




CPP14Parser.NamespacebodyContext = NamespacebodyContext;

CPP14Parser.prototype.namespacebody = function() {

    var localctx = new NamespacebodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CPP14Parser.RULE_namespacebody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1476;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CPP14Parser.T__2 - 3)) | (1 << (CPP14Parser.Alignas - 3)) | (1 << (CPP14Parser.Asm - 3)) | (1 << (CPP14Parser.Auto - 3)) | (1 << (CPP14Parser.Bool - 3)) | (1 << (CPP14Parser.Char - 3)) | (1 << (CPP14Parser.Char16 - 3)) | (1 << (CPP14Parser.Char32 - 3)) | (1 << (CPP14Parser.Class - 3)) | (1 << (CPP14Parser.Const - 3)) | (1 << (CPP14Parser.Constexpr - 3)) | (1 << (CPP14Parser.Decltype - 3)) | (1 << (CPP14Parser.Double - 3)) | (1 << (CPP14Parser.Enum - 3)) | (1 << (CPP14Parser.Explicit - 3)))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CPP14Parser.Extern - 35)) | (1 << (CPP14Parser.Float - 35)) | (1 << (CPP14Parser.Friend - 35)) | (1 << (CPP14Parser.Inline - 35)) | (1 << (CPP14Parser.Int - 35)) | (1 << (CPP14Parser.Long - 35)) | (1 << (CPP14Parser.Mutable - 35)) | (1 << (CPP14Parser.Namespace - 35)) | (1 << (CPP14Parser.Operator - 35)) | (1 << (CPP14Parser.Register - 35)) | (1 << (CPP14Parser.Short - 35)) | (1 << (CPP14Parser.Signed - 35)) | (1 << (CPP14Parser.Static - 35)) | (1 << (CPP14Parser.Static_assert - 35)) | (1 << (CPP14Parser.Struct - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Template - 67)) | (1 << (CPP14Parser.Thread_local - 67)) | (1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename_ - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Semi - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)))) !== 0)) {
            this.state = 1475;
            this.declarationseq(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamespacealiasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacealias;
    return this;
}

NamespacealiasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacealiasContext.prototype.constructor = NamespacealiasContext;

NamespacealiasContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

NamespacealiasContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNamespacealias(this);
	}
};

NamespacealiasContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNamespacealias(this);
	}
};




CPP14Parser.NamespacealiasContext = NamespacealiasContext;

CPP14Parser.prototype.namespacealias = function() {

    var localctx = new NamespacealiasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CPP14Parser.RULE_namespacealias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1478;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamespacealiasdefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacealiasdefinition;
    return this;
}

NamespacealiasdefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacealiasdefinitionContext.prototype.constructor = NamespacealiasdefinitionContext;

NamespacealiasdefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

NamespacealiasdefinitionContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

NamespacealiasdefinitionContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

NamespacealiasdefinitionContext.prototype.qualifiednamespacespecifier = function() {
    return this.getTypedRuleContext(QualifiednamespacespecifierContext,0);
};

NamespacealiasdefinitionContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

NamespacealiasdefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNamespacealiasdefinition(this);
	}
};

NamespacealiasdefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNamespacealiasdefinition(this);
	}
};




CPP14Parser.NamespacealiasdefinitionContext = NamespacealiasdefinitionContext;

CPP14Parser.prototype.namespacealiasdefinition = function() {

    var localctx = new NamespacealiasdefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CPP14Parser.RULE_namespacealiasdefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1480;
        this.match(CPP14Parser.Namespace);
        this.state = 1481;
        this.match(CPP14Parser.Identifier);
        this.state = 1482;
        this.match(CPP14Parser.Assign);
        this.state = 1483;
        this.qualifiednamespacespecifier();
        this.state = 1484;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiednamespacespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_qualifiednamespacespecifier;
    return this;
}

QualifiednamespacespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiednamespacespecifierContext.prototype.constructor = QualifiednamespacespecifierContext;

QualifiednamespacespecifierContext.prototype.namespacename = function() {
    return this.getTypedRuleContext(NamespacenameContext,0);
};

QualifiednamespacespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

QualifiednamespacespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterQualifiednamespacespecifier(this);
	}
};

QualifiednamespacespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitQualifiednamespacespecifier(this);
	}
};




CPP14Parser.QualifiednamespacespecifierContext = QualifiednamespacespecifierContext;

CPP14Parser.prototype.qualifiednamespacespecifier = function() {

    var localctx = new QualifiednamespacespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CPP14Parser.RULE_qualifiednamespacespecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1487;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        if(la_===1) {
            this.state = 1486;
            this.nestednamespecifier(0);

        }
        this.state = 1489;
        this.namespacename();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsingdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_usingdeclaration;
    return this;
}

UsingdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingdeclarationContext.prototype.constructor = UsingdeclarationContext;

UsingdeclarationContext.prototype.Using = function() {
    return this.getToken(CPP14Parser.Using, 0);
};

UsingdeclarationContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

UsingdeclarationContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

UsingdeclarationContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

UsingdeclarationContext.prototype.Typename_ = function() {
    return this.getToken(CPP14Parser.Typename_, 0);
};

UsingdeclarationContext.prototype.Doublecolon = function() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
};

UsingdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterUsingdeclaration(this);
	}
};

UsingdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitUsingdeclaration(this);
	}
};




CPP14Parser.UsingdeclarationContext = UsingdeclarationContext;

CPP14Parser.prototype.usingdeclaration = function() {

    var localctx = new UsingdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CPP14Parser.RULE_usingdeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1504;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1491;
            this.match(CPP14Parser.Using);
            this.state = 1493;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Typename_) {
                this.state = 1492;
                this.match(CPP14Parser.Typename_);
            }

            this.state = 1495;
            this.nestednamespecifier(0);
            this.state = 1496;
            this.unqualifiedid();
            this.state = 1497;
            this.match(CPP14Parser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1499;
            this.match(CPP14Parser.Using);
            this.state = 1500;
            this.match(CPP14Parser.Doublecolon);
            this.state = 1501;
            this.unqualifiedid();
            this.state = 1502;
            this.match(CPP14Parser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsingdirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_usingdirective;
    return this;
}

UsingdirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingdirectiveContext.prototype.constructor = UsingdirectiveContext;

UsingdirectiveContext.prototype.Using = function() {
    return this.getToken(CPP14Parser.Using, 0);
};

UsingdirectiveContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

UsingdirectiveContext.prototype.namespacename = function() {
    return this.getTypedRuleContext(NamespacenameContext,0);
};

UsingdirectiveContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

UsingdirectiveContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

UsingdirectiveContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

UsingdirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterUsingdirective(this);
	}
};

UsingdirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitUsingdirective(this);
	}
};




CPP14Parser.UsingdirectiveContext = UsingdirectiveContext;

CPP14Parser.prototype.usingdirective = function() {

    var localctx = new UsingdirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CPP14Parser.RULE_usingdirective);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1506;
            this.attributespecifierseq(0);
        }

        this.state = 1509;
        this.match(CPP14Parser.Using);
        this.state = 1510;
        this.match(CPP14Parser.Namespace);
        this.state = 1512;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        if(la_===1) {
            this.state = 1511;
            this.nestednamespecifier(0);

        }
        this.state = 1514;
        this.namespacename();
        this.state = 1515;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AsmdefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_asmdefinition;
    return this;
}

AsmdefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsmdefinitionContext.prototype.constructor = AsmdefinitionContext;

AsmdefinitionContext.prototype.Asm = function() {
    return this.getToken(CPP14Parser.Asm, 0);
};

AsmdefinitionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

AsmdefinitionContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

AsmdefinitionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

AsmdefinitionContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

AsmdefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAsmdefinition(this);
	}
};

AsmdefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAsmdefinition(this);
	}
};




CPP14Parser.AsmdefinitionContext = AsmdefinitionContext;

CPP14Parser.prototype.asmdefinition = function() {

    var localctx = new AsmdefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CPP14Parser.RULE_asmdefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1517;
        this.match(CPP14Parser.Asm);
        this.state = 1518;
        this.match(CPP14Parser.LeftParen);
        this.state = 1519;
        this.match(CPP14Parser.Stringliteral);
        this.state = 1520;
        this.match(CPP14Parser.RightParen);
        this.state = 1521;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LinkagespecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_linkagespecification;
    return this;
}

LinkagespecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LinkagespecificationContext.prototype.constructor = LinkagespecificationContext;

LinkagespecificationContext.prototype.Extern = function() {
    return this.getToken(CPP14Parser.Extern, 0);
};

LinkagespecificationContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

LinkagespecificationContext.prototype.LeftBrace = function() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
};

LinkagespecificationContext.prototype.RightBrace = function() {
    return this.getToken(CPP14Parser.RightBrace, 0);
};

LinkagespecificationContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

LinkagespecificationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

LinkagespecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLinkagespecification(this);
	}
};

LinkagespecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLinkagespecification(this);
	}
};




CPP14Parser.LinkagespecificationContext = LinkagespecificationContext;

CPP14Parser.prototype.linkagespecification = function() {

    var localctx = new LinkagespecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CPP14Parser.RULE_linkagespecification);
    var _la = 0; // Token type
    try {
        this.state = 1533;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1523;
            this.match(CPP14Parser.Extern);
            this.state = 1524;
            this.match(CPP14Parser.Stringliteral);
            this.state = 1525;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1527;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CPP14Parser.T__2 - 3)) | (1 << (CPP14Parser.Alignas - 3)) | (1 << (CPP14Parser.Asm - 3)) | (1 << (CPP14Parser.Auto - 3)) | (1 << (CPP14Parser.Bool - 3)) | (1 << (CPP14Parser.Char - 3)) | (1 << (CPP14Parser.Char16 - 3)) | (1 << (CPP14Parser.Char32 - 3)) | (1 << (CPP14Parser.Class - 3)) | (1 << (CPP14Parser.Const - 3)) | (1 << (CPP14Parser.Constexpr - 3)) | (1 << (CPP14Parser.Decltype - 3)) | (1 << (CPP14Parser.Double - 3)) | (1 << (CPP14Parser.Enum - 3)) | (1 << (CPP14Parser.Explicit - 3)))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CPP14Parser.Extern - 35)) | (1 << (CPP14Parser.Float - 35)) | (1 << (CPP14Parser.Friend - 35)) | (1 << (CPP14Parser.Inline - 35)) | (1 << (CPP14Parser.Int - 35)) | (1 << (CPP14Parser.Long - 35)) | (1 << (CPP14Parser.Mutable - 35)) | (1 << (CPP14Parser.Namespace - 35)) | (1 << (CPP14Parser.Operator - 35)) | (1 << (CPP14Parser.Register - 35)) | (1 << (CPP14Parser.Short - 35)) | (1 << (CPP14Parser.Signed - 35)) | (1 << (CPP14Parser.Static - 35)) | (1 << (CPP14Parser.Static_assert - 35)) | (1 << (CPP14Parser.Struct - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Template - 67)) | (1 << (CPP14Parser.Thread_local - 67)) | (1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename_ - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Semi - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)))) !== 0)) {
                this.state = 1526;
                this.declarationseq(0);
            }

            this.state = 1529;
            this.match(CPP14Parser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1530;
            this.match(CPP14Parser.Extern);
            this.state = 1531;
            this.match(CPP14Parser.Stringliteral);
            this.state = 1532;
            this.declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributespecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributespecifierseq;
    return this;
}

AttributespecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributespecifierseqContext.prototype.constructor = AttributespecifierseqContext;

AttributespecifierseqContext.prototype.attributespecifier = function() {
    return this.getTypedRuleContext(AttributespecifierContext,0);
};

AttributespecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

AttributespecifierseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAttributespecifierseq(this);
	}
};

AttributespecifierseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAttributespecifierseq(this);
	}
};



CPP14Parser.prototype.attributespecifierseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AttributespecifierseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 212;
    this.enterRecursionRule(localctx, 212, CPP14Parser.RULE_attributespecifierseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1536;
        this.attributespecifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1542;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,153,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AttributespecifierseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_attributespecifierseq);
                this.state = 1538;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1539;
                this.attributespecifier(); 
            }
            this.state = 1544;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,153,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AttributespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributespecifier;
    return this;
}

AttributespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributespecifierContext.prototype.constructor = AttributespecifierContext;

AttributespecifierContext.prototype.LeftBracket = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.LeftBracket);
    } else {
        return this.getToken(CPP14Parser.LeftBracket, i);
    }
};


AttributespecifierContext.prototype.attributelist = function() {
    return this.getTypedRuleContext(AttributelistContext,0);
};

AttributespecifierContext.prototype.RightBracket = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.RightBracket);
    } else {
        return this.getToken(CPP14Parser.RightBracket, i);
    }
};


AttributespecifierContext.prototype.alignmentspecifier = function() {
    return this.getTypedRuleContext(AlignmentspecifierContext,0);
};

AttributespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAttributespecifier(this);
	}
};

AttributespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAttributespecifier(this);
	}
};




CPP14Parser.AttributespecifierContext = AttributespecifierContext;

CPP14Parser.prototype.attributespecifier = function() {

    var localctx = new AttributespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CPP14Parser.RULE_attributespecifier);
    try {
        this.state = 1552;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 1);
            this.state = 1545;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1546;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1547;
            this.attributelist(0);
            this.state = 1548;
            this.match(CPP14Parser.RightBracket);
            this.state = 1549;
            this.match(CPP14Parser.RightBracket);
            break;
        case CPP14Parser.Alignas:
            this.enterOuterAlt(localctx, 2);
            this.state = 1551;
            this.alignmentspecifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlignmentspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_alignmentspecifier;
    return this;
}

AlignmentspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlignmentspecifierContext.prototype.constructor = AlignmentspecifierContext;

AlignmentspecifierContext.prototype.Alignas = function() {
    return this.getToken(CPP14Parser.Alignas, 0);
};

AlignmentspecifierContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

AlignmentspecifierContext.prototype.thetypeid = function() {
    return this.getTypedRuleContext(ThetypeidContext,0);
};

AlignmentspecifierContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

AlignmentspecifierContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

AlignmentspecifierContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

AlignmentspecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAlignmentspecifier(this);
	}
};

AlignmentspecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAlignmentspecifier(this);
	}
};




CPP14Parser.AlignmentspecifierContext = AlignmentspecifierContext;

CPP14Parser.prototype.alignmentspecifier = function() {

    var localctx = new AlignmentspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CPP14Parser.RULE_alignmentspecifier);
    var _la = 0; // Token type
    try {
        this.state = 1570;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1554;
            this.match(CPP14Parser.Alignas);
            this.state = 1555;
            this.match(CPP14Parser.LeftParen);
            this.state = 1556;
            this.thetypeid();
            this.state = 1558;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 1557;
                this.match(CPP14Parser.Ellipsis);
            }

            this.state = 1560;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1562;
            this.match(CPP14Parser.Alignas);
            this.state = 1563;
            this.match(CPP14Parser.LeftParen);
            this.state = 1564;
            this.constantexpression();
            this.state = 1566;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 1565;
                this.match(CPP14Parser.Ellipsis);
            }

            this.state = 1568;
            this.match(CPP14Parser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributelist;
    return this;
}

AttributelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributelistContext.prototype.constructor = AttributelistContext;

AttributelistContext.prototype.attribute = function() {
    return this.getTypedRuleContext(AttributeContext,0);
};

AttributelistContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

AttributelistContext.prototype.attributelist = function() {
    return this.getTypedRuleContext(AttributelistContext,0);
};

AttributelistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

AttributelistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAttributelist(this);
	}
};

AttributelistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAttributelist(this);
	}
};



CPP14Parser.prototype.attributelist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AttributelistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 218;
    this.enterRecursionRule(localctx, 218, CPP14Parser.RULE_attributelist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1579;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1574;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
            if(la_===1) {
                this.state = 1573;
                this.attribute();

            }
            break;

        case 2:
            this.state = 1576;
            this.attribute();
            this.state = 1577;
            this.match(CPP14Parser.Ellipsis);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1593;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,162,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1591;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AttributelistContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_attributelist);
                    this.state = 1581;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1582;
                    this.match(CPP14Parser.Comma);
                    this.state = 1584;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
                    if(la_===1) {
                        this.state = 1583;
                        this.attribute();

                    }
                    break;

                case 2:
                    localctx = new AttributelistContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_attributelist);
                    this.state = 1586;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1587;
                    this.match(CPP14Parser.Comma);
                    this.state = 1588;
                    this.attribute();
                    this.state = 1589;
                    this.match(CPP14Parser.Ellipsis);
                    break;

                } 
            }
            this.state = 1595;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,162,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attribute;
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.attributetoken = function() {
    return this.getTypedRuleContext(AttributetokenContext,0);
};

AttributeContext.prototype.attributeargumentclause = function() {
    return this.getTypedRuleContext(AttributeargumentclauseContext,0);
};

AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAttribute(this);
	}
};

AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAttribute(this);
	}
};




CPP14Parser.AttributeContext = AttributeContext;

CPP14Parser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CPP14Parser.RULE_attribute);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1596;
        this.attributetoken();
        this.state = 1598;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        if(la_===1) {
            this.state = 1597;
            this.attributeargumentclause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributetokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributetoken;
    return this;
}

AttributetokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributetokenContext.prototype.constructor = AttributetokenContext;

AttributetokenContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AttributetokenContext.prototype.attributescopedtoken = function() {
    return this.getTypedRuleContext(AttributescopedtokenContext,0);
};

AttributetokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAttributetoken(this);
	}
};

AttributetokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAttributetoken(this);
	}
};




CPP14Parser.AttributetokenContext = AttributetokenContext;

CPP14Parser.prototype.attributetoken = function() {

    var localctx = new AttributetokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CPP14Parser.RULE_attributetoken);
    try {
        this.state = 1602;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1600;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1601;
            this.attributescopedtoken();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributescopedtokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributescopedtoken;
    return this;
}

AttributescopedtokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributescopedtokenContext.prototype.constructor = AttributescopedtokenContext;

AttributescopedtokenContext.prototype.attributenamespace = function() {
    return this.getTypedRuleContext(AttributenamespaceContext,0);
};

AttributescopedtokenContext.prototype.Doublecolon = function() {
    return this.getToken(CPP14Parser.Doublecolon, 0);
};

AttributescopedtokenContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AttributescopedtokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAttributescopedtoken(this);
	}
};

AttributescopedtokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAttributescopedtoken(this);
	}
};




CPP14Parser.AttributescopedtokenContext = AttributescopedtokenContext;

CPP14Parser.prototype.attributescopedtoken = function() {

    var localctx = new AttributescopedtokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CPP14Parser.RULE_attributescopedtoken);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1604;
        this.attributenamespace();
        this.state = 1605;
        this.match(CPP14Parser.Doublecolon);
        this.state = 1606;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributenamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributenamespace;
    return this;
}

AttributenamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributenamespaceContext.prototype.constructor = AttributenamespaceContext;

AttributenamespaceContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AttributenamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAttributenamespace(this);
	}
};

AttributenamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAttributenamespace(this);
	}
};




CPP14Parser.AttributenamespaceContext = AttributenamespaceContext;

CPP14Parser.prototype.attributenamespace = function() {

    var localctx = new AttributenamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CPP14Parser.RULE_attributenamespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1608;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeargumentclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributeargumentclause;
    return this;
}

AttributeargumentclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeargumentclauseContext.prototype.constructor = AttributeargumentclauseContext;

AttributeargumentclauseContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

AttributeargumentclauseContext.prototype.balancedtokenseq = function() {
    return this.getTypedRuleContext(BalancedtokenseqContext,0);
};

AttributeargumentclauseContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

AttributeargumentclauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAttributeargumentclause(this);
	}
};

AttributeargumentclauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAttributeargumentclause(this);
	}
};




CPP14Parser.AttributeargumentclauseContext = AttributeargumentclauseContext;

CPP14Parser.prototype.attributeargumentclause = function() {

    var localctx = new AttributeargumentclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CPP14Parser.RULE_attributeargumentclause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1610;
        this.match(CPP14Parser.LeftParen);
        this.state = 1611;
        this.balancedtokenseq(0);
        this.state = 1612;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BalancedtokenseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_balancedtokenseq;
    return this;
}

BalancedtokenseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BalancedtokenseqContext.prototype.constructor = BalancedtokenseqContext;

BalancedtokenseqContext.prototype.balancedtoken = function() {
    return this.getTypedRuleContext(BalancedtokenContext,0);
};

BalancedtokenseqContext.prototype.balancedtokenseq = function() {
    return this.getTypedRuleContext(BalancedtokenseqContext,0);
};

BalancedtokenseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBalancedtokenseq(this);
	}
};

BalancedtokenseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBalancedtokenseq(this);
	}
};



CPP14Parser.prototype.balancedtokenseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BalancedtokenseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 230;
    this.enterRecursionRule(localctx, 230, CPP14Parser.RULE_balancedtokenseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1616;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        if(la_===1) {
            this.state = 1615;
            this.balancedtoken();

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1622;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,166,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new BalancedtokenseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_balancedtokenseq);
                this.state = 1618;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1619;
                this.balancedtoken(); 
            }
            this.state = 1624;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,166,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function BalancedtokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_balancedtoken;
    return this;
}

BalancedtokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BalancedtokenContext.prototype.constructor = BalancedtokenContext;

BalancedtokenContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

BalancedtokenContext.prototype.balancedtokenseq = function() {
    return this.getTypedRuleContext(BalancedtokenseqContext,0);
};

BalancedtokenContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

BalancedtokenContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

BalancedtokenContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

BalancedtokenContext.prototype.LeftBrace = function() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
};

BalancedtokenContext.prototype.RightBrace = function() {
    return this.getToken(CPP14Parser.RightBrace, 0);
};

BalancedtokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBalancedtoken(this);
	}
};

BalancedtokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBalancedtoken(this);
	}
};




CPP14Parser.BalancedtokenContext = BalancedtokenContext;

CPP14Parser.prototype.balancedtoken = function() {

    var localctx = new BalancedtokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CPP14Parser.RULE_balancedtoken);
    try {
        this.state = 1637;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 1);
            this.state = 1625;
            this.match(CPP14Parser.LeftParen);
            this.state = 1626;
            this.balancedtokenseq(0);
            this.state = 1627;
            this.match(CPP14Parser.RightParen);
            break;
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1629;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1630;
            this.balancedtokenseq(0);
            this.state = 1631;
            this.match(CPP14Parser.RightBracket);
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 3);
            this.state = 1633;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1634;
            this.balancedtokenseq(0);
            this.state = 1635;
            this.match(CPP14Parser.RightBrace);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitdeclaratorlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initdeclaratorlist;
    return this;
}

InitdeclaratorlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitdeclaratorlistContext.prototype.constructor = InitdeclaratorlistContext;

InitdeclaratorlistContext.prototype.initdeclarator = function() {
    return this.getTypedRuleContext(InitdeclaratorContext,0);
};

InitdeclaratorlistContext.prototype.initdeclaratorlist = function() {
    return this.getTypedRuleContext(InitdeclaratorlistContext,0);
};

InitdeclaratorlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

InitdeclaratorlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterInitdeclaratorlist(this);
	}
};

InitdeclaratorlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitInitdeclaratorlist(this);
	}
};



CPP14Parser.prototype.initdeclaratorlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InitdeclaratorlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 234;
    this.enterRecursionRule(localctx, 234, CPP14Parser.RULE_initdeclaratorlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1640;
        this.initdeclarator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1647;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,168,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InitdeclaratorlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_initdeclaratorlist);
                this.state = 1642;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1643;
                this.match(CPP14Parser.Comma);
                this.state = 1644;
                this.initdeclarator(); 
            }
            this.state = 1649;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,168,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function InitdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initdeclarator;
    return this;
}

InitdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitdeclaratorContext.prototype.constructor = InitdeclaratorContext;

InitdeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

InitdeclaratorContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterInitdeclarator(this);
	}
};

InitdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitInitdeclarator(this);
	}
};




CPP14Parser.InitdeclaratorContext = InitdeclaratorContext;

CPP14Parser.prototype.initdeclarator = function() {

    var localctx = new InitdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CPP14Parser.RULE_initdeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1650;
        this.declarator();
        this.state = 1652;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        if(la_===1) {
            this.state = 1651;
            this.initializer();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarator;
    return this;
}

DeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratorContext.prototype.constructor = DeclaratorContext;

DeclaratorContext.prototype.ptrdeclarator = function() {
    return this.getTypedRuleContext(PtrdeclaratorContext,0);
};

DeclaratorContext.prototype.noptrdeclarator = function() {
    return this.getTypedRuleContext(NoptrdeclaratorContext,0);
};

DeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

DeclaratorContext.prototype.trailingreturntype = function() {
    return this.getTypedRuleContext(TrailingreturntypeContext,0);
};

DeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDeclarator(this);
	}
};

DeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDeclarator(this);
	}
};




CPP14Parser.DeclaratorContext = DeclaratorContext;

CPP14Parser.prototype.declarator = function() {

    var localctx = new DeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CPP14Parser.RULE_declarator);
    try {
        this.state = 1659;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1654;
            this.ptrdeclarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1655;
            this.noptrdeclarator(0);
            this.state = 1656;
            this.parametersandqualifiers();
            this.state = 1657;
            this.trailingreturntype();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PtrdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ptrdeclarator;
    return this;
}

PtrdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PtrdeclaratorContext.prototype.constructor = PtrdeclaratorContext;

PtrdeclaratorContext.prototype.noptrdeclarator = function() {
    return this.getTypedRuleContext(NoptrdeclaratorContext,0);
};

PtrdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

PtrdeclaratorContext.prototype.ptrdeclarator = function() {
    return this.getTypedRuleContext(PtrdeclaratorContext,0);
};

PtrdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterPtrdeclarator(this);
	}
};

PtrdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitPtrdeclarator(this);
	}
};




CPP14Parser.PtrdeclaratorContext = PtrdeclaratorContext;

CPP14Parser.prototype.ptrdeclarator = function() {

    var localctx = new PtrdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CPP14Parser.RULE_ptrdeclarator);
    try {
        this.state = 1665;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1661;
            this.noptrdeclarator(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1662;
            this.ptroperator();
            this.state = 1663;
            this.ptrdeclarator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NoptrdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrdeclarator;
    return this;
}

NoptrdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrdeclaratorContext.prototype.constructor = NoptrdeclaratorContext;

NoptrdeclaratorContext.prototype.declaratorid = function() {
    return this.getTypedRuleContext(DeclaratoridContext,0);
};

NoptrdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrdeclaratorContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

NoptrdeclaratorContext.prototype.ptrdeclarator = function() {
    return this.getTypedRuleContext(PtrdeclaratorContext,0);
};

NoptrdeclaratorContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

NoptrdeclaratorContext.prototype.noptrdeclarator = function() {
    return this.getTypedRuleContext(NoptrdeclaratorContext,0);
};

NoptrdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

NoptrdeclaratorContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

NoptrdeclaratorContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

NoptrdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNoptrdeclarator(this);
	}
};

NoptrdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNoptrdeclarator(this);
	}
};



CPP14Parser.prototype.noptrdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 242;
    this.enterRecursionRule(localctx, 242, CPP14Parser.RULE_noptrdeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1676;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Decltype:
        case CPP14Parser.Operator:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.state = 1668;
            this.declaratorid();
            this.state = 1670;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
            if(la_===1) {
                this.state = 1669;
                this.attributespecifierseq(0);

            }
            break;
        case CPP14Parser.LeftParen:
            this.state = 1672;
            this.match(CPP14Parser.LeftParen);
            this.state = 1673;
            this.ptrdeclarator();
            this.state = 1674;
            this.match(CPP14Parser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1691;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,177,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1689;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NoptrdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrdeclarator);
                    this.state = 1678;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1679;
                    this.parametersandqualifiers();
                    break;

                case 2:
                    localctx = new NoptrdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrdeclarator);
                    this.state = 1680;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1681;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 1683;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                        this.state = 1682;
                        this.constantexpression();
                    }

                    this.state = 1685;
                    this.match(CPP14Parser.RightBracket);
                    this.state = 1687;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
                    if(la_===1) {
                        this.state = 1686;
                        this.attributespecifierseq(0);

                    }
                    break;

                } 
            }
            this.state = 1693;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,177,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ParametersandqualifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parametersandqualifiers;
    return this;
}

ParametersandqualifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersandqualifiersContext.prototype.constructor = ParametersandqualifiersContext;

ParametersandqualifiersContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

ParametersandqualifiersContext.prototype.parameterdeclarationclause = function() {
    return this.getTypedRuleContext(ParameterdeclarationclauseContext,0);
};

ParametersandqualifiersContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

ParametersandqualifiersContext.prototype.cvqualifierseq = function() {
    return this.getTypedRuleContext(CvqualifierseqContext,0);
};

ParametersandqualifiersContext.prototype.refqualifier = function() {
    return this.getTypedRuleContext(RefqualifierContext,0);
};

ParametersandqualifiersContext.prototype.exceptionspecification = function() {
    return this.getTypedRuleContext(ExceptionspecificationContext,0);
};

ParametersandqualifiersContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ParametersandqualifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterParametersandqualifiers(this);
	}
};

ParametersandqualifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitParametersandqualifiers(this);
	}
};




CPP14Parser.ParametersandqualifiersContext = ParametersandqualifiersContext;

CPP14Parser.prototype.parametersandqualifiers = function() {

    var localctx = new ParametersandqualifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CPP14Parser.RULE_parametersandqualifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1694;
        this.match(CPP14Parser.LeftParen);
        this.state = 1695;
        this.parameterdeclarationclause();
        this.state = 1696;
        this.match(CPP14Parser.RightParen);
        this.state = 1698;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
        if(la_===1) {
            this.state = 1697;
            this.cvqualifierseq();

        }
        this.state = 1701;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
        if(la_===1) {
            this.state = 1700;
            this.refqualifier();

        }
        this.state = 1704;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
        if(la_===1) {
            this.state = 1703;
            this.exceptionspecification();

        }
        this.state = 1707;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
        if(la_===1) {
            this.state = 1706;
            this.attributespecifierseq(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TrailingreturntypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingreturntype;
    return this;
}

TrailingreturntypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailingreturntypeContext.prototype.constructor = TrailingreturntypeContext;

TrailingreturntypeContext.prototype.Arrow = function() {
    return this.getToken(CPP14Parser.Arrow, 0);
};

TrailingreturntypeContext.prototype.trailingtypespecifierseq = function() {
    return this.getTypedRuleContext(TrailingtypespecifierseqContext,0);
};

TrailingreturntypeContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

TrailingreturntypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTrailingreturntype(this);
	}
};

TrailingreturntypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTrailingreturntype(this);
	}
};




CPP14Parser.TrailingreturntypeContext = TrailingreturntypeContext;

CPP14Parser.prototype.trailingreturntype = function() {

    var localctx = new TrailingreturntypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CPP14Parser.RULE_trailingreturntype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1709;
        this.match(CPP14Parser.Arrow);
        this.state = 1710;
        this.trailingtypespecifierseq();
        this.state = 1712;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        if(la_===1) {
            this.state = 1711;
            this.abstractdeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PtroperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ptroperator;
    return this;
}

PtroperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PtroperatorContext.prototype.constructor = PtroperatorContext;

PtroperatorContext.prototype.Star = function() {
    return this.getToken(CPP14Parser.Star, 0);
};

PtroperatorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

PtroperatorContext.prototype.cvqualifierseq = function() {
    return this.getTypedRuleContext(CvqualifierseqContext,0);
};

PtroperatorContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

PtroperatorContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

PtroperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterPtroperator(this);
	}
};

PtroperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitPtroperator(this);
	}
};




CPP14Parser.PtroperatorContext = PtroperatorContext;

CPP14Parser.prototype.ptroperator = function() {

    var localctx = new PtroperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CPP14Parser.RULE_ptroperator);
    try {
        this.state = 1737;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Star:
            this.enterOuterAlt(localctx, 1);
            this.state = 1714;
            this.match(CPP14Parser.Star);
            this.state = 1716;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
            if(la_===1) {
                this.state = 1715;
                this.attributespecifierseq(0);

            }
            this.state = 1719;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
            if(la_===1) {
                this.state = 1718;
                this.cvqualifierseq();

            }
            break;
        case CPP14Parser.And:
            this.enterOuterAlt(localctx, 2);
            this.state = 1721;
            this.match(CPP14Parser.And);
            this.state = 1723;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
            if(la_===1) {
                this.state = 1722;
                this.attributespecifierseq(0);

            }
            break;
        case CPP14Parser.T__2:
            this.enterOuterAlt(localctx, 3);
            this.state = 1725;
            this.match(CPP14Parser.T__2);
            this.state = 1727;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
            if(la_===1) {
                this.state = 1726;
                this.attributespecifierseq(0);

            }
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 4);
            this.state = 1729;
            this.nestednamespecifier(0);
            this.state = 1730;
            this.match(CPP14Parser.Star);
            this.state = 1732;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
            if(la_===1) {
                this.state = 1731;
                this.attributespecifierseq(0);

            }
            this.state = 1735;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
            if(la_===1) {
                this.state = 1734;
                this.cvqualifierseq();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CvqualifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_cvqualifierseq;
    return this;
}

CvqualifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CvqualifierseqContext.prototype.constructor = CvqualifierseqContext;

CvqualifierseqContext.prototype.cvqualifier = function() {
    return this.getTypedRuleContext(CvqualifierContext,0);
};

CvqualifierseqContext.prototype.cvqualifierseq = function() {
    return this.getTypedRuleContext(CvqualifierseqContext,0);
};

CvqualifierseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterCvqualifierseq(this);
	}
};

CvqualifierseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitCvqualifierseq(this);
	}
};




CPP14Parser.CvqualifierseqContext = CvqualifierseqContext;

CPP14Parser.prototype.cvqualifierseq = function() {

    var localctx = new CvqualifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CPP14Parser.RULE_cvqualifierseq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1739;
        this.cvqualifier();
        this.state = 1741;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
        if(la_===1) {
            this.state = 1740;
            this.cvqualifierseq();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CvqualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_cvqualifier;
    return this;
}

CvqualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CvqualifierContext.prototype.constructor = CvqualifierContext;

CvqualifierContext.prototype.Const = function() {
    return this.getToken(CPP14Parser.Const, 0);
};

CvqualifierContext.prototype.Volatile = function() {
    return this.getToken(CPP14Parser.Volatile, 0);
};

CvqualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterCvqualifier(this);
	}
};

CvqualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitCvqualifier(this);
	}
};




CPP14Parser.CvqualifierContext = CvqualifierContext;

CPP14Parser.prototype.cvqualifier = function() {

    var localctx = new CvqualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CPP14Parser.RULE_cvqualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1743;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Const || _la===CPP14Parser.Volatile)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RefqualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_refqualifier;
    return this;
}

RefqualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RefqualifierContext.prototype.constructor = RefqualifierContext;

RefqualifierContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

RefqualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterRefqualifier(this);
	}
};

RefqualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitRefqualifier(this);
	}
};




CPP14Parser.RefqualifierContext = RefqualifierContext;

CPP14Parser.prototype.refqualifier = function() {

    var localctx = new RefqualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CPP14Parser.RULE_refqualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1745;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.T__2 || _la===CPP14Parser.And)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclaratoridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declaratorid;
    return this;
}

DeclaratoridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratoridContext.prototype.constructor = DeclaratoridContext;

DeclaratoridContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

DeclaratoridContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

DeclaratoridContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDeclaratorid(this);
	}
};

DeclaratoridContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDeclaratorid(this);
	}
};




CPP14Parser.DeclaratoridContext = DeclaratoridContext;

CPP14Parser.prototype.declaratorid = function() {

    var localctx = new DeclaratoridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CPP14Parser.RULE_declaratorid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1748;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Ellipsis) {
            this.state = 1747;
            this.match(CPP14Parser.Ellipsis);
        }

        this.state = 1750;
        this.idexpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThetypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_thetypeid;
    return this;
}

ThetypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThetypeidContext.prototype.constructor = ThetypeidContext;

ThetypeidContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

ThetypeidContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

ThetypeidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterThetypeid(this);
	}
};

ThetypeidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitThetypeid(this);
	}
};




CPP14Parser.ThetypeidContext = ThetypeidContext;

CPP14Parser.prototype.thetypeid = function() {

    var localctx = new ThetypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CPP14Parser.RULE_thetypeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1752;
        this.typespecifierseq();
        this.state = 1754;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
        if(la_===1) {
            this.state = 1753;
            this.abstractdeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AbstractdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_abstractdeclarator;
    return this;
}

AbstractdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractdeclaratorContext.prototype.constructor = AbstractdeclaratorContext;

AbstractdeclaratorContext.prototype.ptrabstractdeclarator = function() {
    return this.getTypedRuleContext(PtrabstractdeclaratorContext,0);
};

AbstractdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

AbstractdeclaratorContext.prototype.trailingreturntype = function() {
    return this.getTypedRuleContext(TrailingreturntypeContext,0);
};

AbstractdeclaratorContext.prototype.noptrabstractdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractdeclaratorContext,0);
};

AbstractdeclaratorContext.prototype.abstractpackdeclarator = function() {
    return this.getTypedRuleContext(AbstractpackdeclaratorContext,0);
};

AbstractdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAbstractdeclarator(this);
	}
};

AbstractdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAbstractdeclarator(this);
	}
};




CPP14Parser.AbstractdeclaratorContext = AbstractdeclaratorContext;

CPP14Parser.prototype.abstractdeclarator = function() {

    var localctx = new AbstractdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CPP14Parser.RULE_abstractdeclarator);
    try {
        this.state = 1764;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1756;
            this.ptrabstractdeclarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1758;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
            if(la_===1) {
                this.state = 1757;
                this.noptrabstractdeclarator(0);

            }
            this.state = 1760;
            this.parametersandqualifiers();
            this.state = 1761;
            this.trailingreturntype();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1763;
            this.abstractpackdeclarator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PtrabstractdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ptrabstractdeclarator;
    return this;
}

PtrabstractdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PtrabstractdeclaratorContext.prototype.constructor = PtrabstractdeclaratorContext;

PtrabstractdeclaratorContext.prototype.noptrabstractdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractdeclaratorContext,0);
};

PtrabstractdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

PtrabstractdeclaratorContext.prototype.ptrabstractdeclarator = function() {
    return this.getTypedRuleContext(PtrabstractdeclaratorContext,0);
};

PtrabstractdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterPtrabstractdeclarator(this);
	}
};

PtrabstractdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitPtrabstractdeclarator(this);
	}
};




CPP14Parser.PtrabstractdeclaratorContext = PtrabstractdeclaratorContext;

CPP14Parser.prototype.ptrabstractdeclarator = function() {

    var localctx = new PtrabstractdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CPP14Parser.RULE_ptrabstractdeclarator);
    try {
        this.state = 1771;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 1);
            this.state = 1766;
            this.noptrabstractdeclarator(0);
            break;
        case CPP14Parser.T__2:
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1767;
            this.ptroperator();
            this.state = 1769;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
            if(la_===1) {
                this.state = 1768;
                this.ptrabstractdeclarator();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NoptrabstractdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrabstractdeclarator;
    return this;
}

NoptrabstractdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrabstractdeclaratorContext.prototype.constructor = NoptrabstractdeclaratorContext;

NoptrabstractdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

NoptrabstractdeclaratorContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

NoptrabstractdeclaratorContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

NoptrabstractdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrabstractdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrabstractdeclaratorContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

NoptrabstractdeclaratorContext.prototype.ptrabstractdeclarator = function() {
    return this.getTypedRuleContext(PtrabstractdeclaratorContext,0);
};

NoptrabstractdeclaratorContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

NoptrabstractdeclaratorContext.prototype.noptrabstractdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractdeclaratorContext,0);
};

NoptrabstractdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNoptrabstractdeclarator(this);
	}
};

NoptrabstractdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNoptrabstractdeclarator(this);
	}
};



CPP14Parser.prototype.noptrabstractdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrabstractdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 264;
    this.enterRecursionRule(localctx, 264, CPP14Parser.RULE_noptrabstractdeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1787;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1774;
            this.parametersandqualifiers();
            break;

        case 2:
            this.state = 1775;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1777;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                this.state = 1776;
                this.constantexpression();
            }

            this.state = 1779;
            this.match(CPP14Parser.RightBracket);
            this.state = 1781;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
            if(la_===1) {
                this.state = 1780;
                this.attributespecifierseq(0);

            }
            break;

        case 3:
            this.state = 1783;
            this.match(CPP14Parser.LeftParen);
            this.state = 1784;
            this.ptrabstractdeclarator();
            this.state = 1785;
            this.match(CPP14Parser.RightParen);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1802;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,203,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1800;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NoptrabstractdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractdeclarator);
                    this.state = 1789;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1790;
                    this.parametersandqualifiers();
                    break;

                case 2:
                    localctx = new NoptrabstractdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractdeclarator);
                    this.state = 1791;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1792;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 1794;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                        this.state = 1793;
                        this.constantexpression();
                    }

                    this.state = 1796;
                    this.match(CPP14Parser.RightBracket);
                    this.state = 1798;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
                    if(la_===1) {
                        this.state = 1797;
                        this.attributespecifierseq(0);

                    }
                    break;

                } 
            }
            this.state = 1804;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,203,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AbstractpackdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_abstractpackdeclarator;
    return this;
}

AbstractpackdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractpackdeclaratorContext.prototype.constructor = AbstractpackdeclaratorContext;

AbstractpackdeclaratorContext.prototype.noptrabstractpackdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractpackdeclaratorContext,0);
};

AbstractpackdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

AbstractpackdeclaratorContext.prototype.abstractpackdeclarator = function() {
    return this.getTypedRuleContext(AbstractpackdeclaratorContext,0);
};

AbstractpackdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAbstractpackdeclarator(this);
	}
};

AbstractpackdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAbstractpackdeclarator(this);
	}
};




CPP14Parser.AbstractpackdeclaratorContext = AbstractpackdeclaratorContext;

CPP14Parser.prototype.abstractpackdeclarator = function() {

    var localctx = new AbstractpackdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CPP14Parser.RULE_abstractpackdeclarator);
    try {
        this.state = 1809;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Ellipsis:
            this.enterOuterAlt(localctx, 1);
            this.state = 1805;
            this.noptrabstractpackdeclarator(0);
            break;
        case CPP14Parser.T__2:
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1806;
            this.ptroperator();
            this.state = 1807;
            this.abstractpackdeclarator();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NoptrabstractpackdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrabstractpackdeclarator;
    return this;
}

NoptrabstractpackdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrabstractpackdeclaratorContext.prototype.constructor = NoptrabstractpackdeclaratorContext;

NoptrabstractpackdeclaratorContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

NoptrabstractpackdeclaratorContext.prototype.noptrabstractpackdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractpackdeclaratorContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

NoptrabstractpackdeclaratorContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

NoptrabstractpackdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNoptrabstractpackdeclarator(this);
	}
};

NoptrabstractpackdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNoptrabstractpackdeclarator(this);
	}
};



CPP14Parser.prototype.noptrabstractpackdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrabstractpackdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 268;
    this.enterRecursionRule(localctx, 268, CPP14Parser.RULE_noptrabstractpackdeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1812;
        this.match(CPP14Parser.Ellipsis);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1827;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,208,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1825;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NoptrabstractpackdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractpackdeclarator);
                    this.state = 1814;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1815;
                    this.parametersandqualifiers();
                    break;

                case 2:
                    localctx = new NoptrabstractpackdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractpackdeclarator);
                    this.state = 1816;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1817;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 1819;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                        this.state = 1818;
                        this.constantexpression();
                    }

                    this.state = 1821;
                    this.match(CPP14Parser.RightBracket);
                    this.state = 1823;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
                    if(la_===1) {
                        this.state = 1822;
                        this.attributespecifierseq(0);

                    }
                    break;

                } 
            }
            this.state = 1829;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,208,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ParameterdeclarationclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterdeclarationclause;
    return this;
}

ParameterdeclarationclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterdeclarationclauseContext.prototype.constructor = ParameterdeclarationclauseContext;

ParameterdeclarationclauseContext.prototype.parameterdeclarationlist = function() {
    return this.getTypedRuleContext(ParameterdeclarationlistContext,0);
};

ParameterdeclarationclauseContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

ParameterdeclarationclauseContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

ParameterdeclarationclauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterParameterdeclarationclause(this);
	}
};

ParameterdeclarationclauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitParameterdeclarationclause(this);
	}
};




CPP14Parser.ParameterdeclarationclauseContext = ParameterdeclarationclauseContext;

CPP14Parser.prototype.parameterdeclarationclause = function() {

    var localctx = new ParameterdeclarationclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CPP14Parser.RULE_parameterdeclarationclause);
    var _la = 0; // Token type
    try {
        this.state = 1840;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Enum - 32)) | (1 << (CPP14Parser.Explicit - 32)) | (1 << (CPP14Parser.Extern - 32)) | (1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.Thread_local - 65)) | (1 << (CPP14Parser.Typedef - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Virtual - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftBracket - 65)))) !== 0) || _la===CPP14Parser.Doublecolon || _la===CPP14Parser.Identifier) {
                this.state = 1830;
                this.parameterdeclarationlist(0);
            }

            this.state = 1834;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 1833;
                this.match(CPP14Parser.Ellipsis);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1836;
            this.parameterdeclarationlist(0);
            this.state = 1837;
            this.match(CPP14Parser.Comma);
            this.state = 1838;
            this.match(CPP14Parser.Ellipsis);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterdeclarationlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterdeclarationlist;
    return this;
}

ParameterdeclarationlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterdeclarationlistContext.prototype.constructor = ParameterdeclarationlistContext;

ParameterdeclarationlistContext.prototype.parameterdeclaration = function() {
    return this.getTypedRuleContext(ParameterdeclarationContext,0);
};

ParameterdeclarationlistContext.prototype.parameterdeclarationlist = function() {
    return this.getTypedRuleContext(ParameterdeclarationlistContext,0);
};

ParameterdeclarationlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

ParameterdeclarationlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterParameterdeclarationlist(this);
	}
};

ParameterdeclarationlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitParameterdeclarationlist(this);
	}
};



CPP14Parser.prototype.parameterdeclarationlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterdeclarationlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 272;
    this.enterRecursionRule(localctx, 272, CPP14Parser.RULE_parameterdeclarationlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1843;
        this.parameterdeclaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1850;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParameterdeclarationlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_parameterdeclarationlist);
                this.state = 1845;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1846;
                this.match(CPP14Parser.Comma);
                this.state = 1847;
                this.parameterdeclaration(); 
            }
            this.state = 1852;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ParameterdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterdeclaration;
    return this;
}

ParameterdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterdeclarationContext.prototype.constructor = ParameterdeclarationContext;

ParameterdeclarationContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

ParameterdeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ParameterdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ParameterdeclarationContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

ParameterdeclarationContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

ParameterdeclarationContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

ParameterdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterParameterdeclaration(this);
	}
};

ParameterdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitParameterdeclaration(this);
	}
};




CPP14Parser.ParameterdeclarationContext = ParameterdeclarationContext;

CPP14Parser.prototype.parameterdeclaration = function() {

    var localctx = new ParameterdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CPP14Parser.RULE_parameterdeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1884;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1854;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1853;
                this.attributespecifierseq(0);
            }

            this.state = 1856;
            this.declspecifierseq();
            this.state = 1857;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1860;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1859;
                this.attributespecifierseq(0);
            }

            this.state = 1862;
            this.declspecifierseq();
            this.state = 1863;
            this.declarator();
            this.state = 1864;
            this.match(CPP14Parser.Assign);
            this.state = 1865;
            this.initializerclause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1868;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1867;
                this.attributespecifierseq(0);
            }

            this.state = 1870;
            this.declspecifierseq();
            this.state = 1872;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
            if(la_===1) {
                this.state = 1871;
                this.abstractdeclarator();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1875;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1874;
                this.attributespecifierseq(0);
            }

            this.state = 1877;
            this.declspecifierseq();
            this.state = 1879;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.T__2 || _la===CPP14Parser.Decltype || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (CPP14Parser.LeftParen - 84)) | (1 << (CPP14Parser.LeftBracket - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)))) !== 0)) {
                this.state = 1878;
                this.abstractdeclarator();
            }

            this.state = 1881;
            this.match(CPP14Parser.Assign);
            this.state = 1882;
            this.initializerclause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctiondefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functiondefinition;
    return this;
}

FunctiondefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiondefinitionContext.prototype.constructor = FunctiondefinitionContext;

FunctiondefinitionContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

FunctiondefinitionContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

FunctiondefinitionContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

FunctiondefinitionContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

FunctiondefinitionContext.prototype.virtspecifierseq = function() {
    return this.getTypedRuleContext(VirtspecifierseqContext,0);
};

FunctiondefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterFunctiondefinition(this);
	}
};

FunctiondefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitFunctiondefinition(this);
	}
};




CPP14Parser.FunctiondefinitionContext = FunctiondefinitionContext;

CPP14Parser.prototype.functiondefinition = function() {

    var localctx = new FunctiondefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CPP14Parser.RULE_functiondefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1887;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1886;
            this.attributespecifierseq(0);
        }

        this.state = 1890;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
        if(la_===1) {
            this.state = 1889;
            this.declspecifierseq();

        }
        this.state = 1892;
        this.declarator();
        this.state = 1894;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Final || _la===CPP14Parser.Override) {
            this.state = 1893;
            this.virtspecifierseq(0);
        }

        this.state = 1896;
        this.functionbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionbody;
    return this;
}

FunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionbodyContext.prototype.constructor = FunctionbodyContext;

FunctionbodyContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

FunctionbodyContext.prototype.ctorinitializer = function() {
    return this.getTypedRuleContext(CtorinitializerContext,0);
};

FunctionbodyContext.prototype.functiontryblock = function() {
    return this.getTypedRuleContext(FunctiontryblockContext,0);
};

FunctionbodyContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

FunctionbodyContext.prototype.Default = function() {
    return this.getToken(CPP14Parser.Default, 0);
};

FunctionbodyContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

FunctionbodyContext.prototype.Delete = function() {
    return this.getToken(CPP14Parser.Delete, 0);
};

FunctionbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterFunctionbody(this);
	}
};

FunctionbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitFunctionbody(this);
	}
};




CPP14Parser.FunctionbodyContext = FunctionbodyContext;

CPP14Parser.prototype.functionbody = function() {

    var localctx = new FunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CPP14Parser.RULE_functionbody);
    var _la = 0; // Token type
    try {
        this.state = 1909;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1899;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1898;
                this.ctorinitializer();
            }

            this.state = 1901;
            this.compoundstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1902;
            this.functiontryblock();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1903;
            this.match(CPP14Parser.Assign);
            this.state = 1904;
            this.match(CPP14Parser.Default);
            this.state = 1905;
            this.match(CPP14Parser.Semi);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1906;
            this.match(CPP14Parser.Assign);
            this.state = 1907;
            this.match(CPP14Parser.Delete);
            this.state = 1908;
            this.match(CPP14Parser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.braceorequalinitializer = function() {
    return this.getTypedRuleContext(BraceorequalinitializerContext,0);
};

InitializerContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

InitializerContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

InitializerContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitInitializer(this);
	}
};




CPP14Parser.InitializerContext = InitializerContext;

CPP14Parser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CPP14Parser.RULE_initializer);
    try {
        this.state = 1916;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftBrace:
        case CPP14Parser.Assign:
            this.enterOuterAlt(localctx, 1);
            this.state = 1911;
            this.braceorequalinitializer();
            break;
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 2);
            this.state = 1912;
            this.match(CPP14Parser.LeftParen);
            this.state = 1913;
            this.expressionlist();
            this.state = 1914;
            this.match(CPP14Parser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BraceorequalinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_braceorequalinitializer;
    return this;
}

BraceorequalinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BraceorequalinitializerContext.prototype.constructor = BraceorequalinitializerContext;

BraceorequalinitializerContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

BraceorequalinitializerContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

BraceorequalinitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

BraceorequalinitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBraceorequalinitializer(this);
	}
};

BraceorequalinitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBraceorequalinitializer(this);
	}
};




CPP14Parser.BraceorequalinitializerContext = BraceorequalinitializerContext;

CPP14Parser.prototype.braceorequalinitializer = function() {

    var localctx = new BraceorequalinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CPP14Parser.RULE_braceorequalinitializer);
    try {
        this.state = 1921;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Assign:
            this.enterOuterAlt(localctx, 1);
            this.state = 1918;
            this.match(CPP14Parser.Assign);
            this.state = 1919;
            this.initializerclause();
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 1920;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitializerclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializerclause;
    return this;
}

InitializerclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerclauseContext.prototype.constructor = InitializerclauseContext;

InitializerclauseContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

InitializerclauseContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

InitializerclauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterInitializerclause(this);
	}
};

InitializerclauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitInitializerclause(this);
	}
};




CPP14Parser.InitializerclauseContext = InitializerclauseContext;

CPP14Parser.prototype.initializerclause = function() {

    var localctx = new InitializerclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CPP14Parser.RULE_initializerclause);
    try {
        this.state = 1925;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.T__0:
        case CPP14Parser.T__1:
        case CPP14Parser.Alignof:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Const_cast:
        case CPP14Parser.Decltype:
        case CPP14Parser.Delete:
        case CPP14Parser.Double:
        case CPP14Parser.Dynamic_cast:
        case CPP14Parser.False:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.New:
        case CPP14Parser.Noexcept:
        case CPP14Parser.Nullptr:
        case CPP14Parser.Operator:
        case CPP14Parser.Reinterpret_cast:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Sizeof:
        case CPP14Parser.Static_cast:
        case CPP14Parser.This:
        case CPP14Parser.Throw:
        case CPP14Parser.True:
        case CPP14Parser.Typeid_:
        case CPP14Parser.Typename_:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Plus:
        case CPP14Parser.Minus:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Or:
        case CPP14Parser.Tilde:
        case CPP14Parser.PlusPlus:
        case CPP14Parser.MinusMinus:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
        case CPP14Parser.Integerliteral:
        case CPP14Parser.Characterliteral:
        case CPP14Parser.Floatingliteral:
        case CPP14Parser.Stringliteral:
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 1923;
            this.assignmentexpression();
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 1924;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitializerlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializerlist;
    return this;
}

InitializerlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerlistContext.prototype.constructor = InitializerlistContext;

InitializerlistContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

InitializerlistContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

InitializerlistContext.prototype.initializerlist = function() {
    return this.getTypedRuleContext(InitializerlistContext,0);
};

InitializerlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

InitializerlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterInitializerlist(this);
	}
};

InitializerlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitInitializerlist(this);
	}
};



CPP14Parser.prototype.initializerlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InitializerlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 286;
    this.enterRecursionRule(localctx, 286, CPP14Parser.RULE_initializerlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1928;
        this.initializerclause();
        this.state = 1930;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
        if(la_===1) {
            this.state = 1929;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1940;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,230,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InitializerlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_initializerlist);
                this.state = 1932;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1933;
                this.match(CPP14Parser.Comma);
                this.state = 1934;
                this.initializerclause();
                this.state = 1936;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
                if(la_===1) {
                    this.state = 1935;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 1942;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,230,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function BracedinitlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_bracedinitlist;
    return this;
}

BracedinitlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BracedinitlistContext.prototype.constructor = BracedinitlistContext;

BracedinitlistContext.prototype.LeftBrace = function() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
};

BracedinitlistContext.prototype.initializerlist = function() {
    return this.getTypedRuleContext(InitializerlistContext,0);
};

BracedinitlistContext.prototype.RightBrace = function() {
    return this.getToken(CPP14Parser.RightBrace, 0);
};

BracedinitlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

BracedinitlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBracedinitlist(this);
	}
};

BracedinitlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBracedinitlist(this);
	}
};




CPP14Parser.BracedinitlistContext = BracedinitlistContext;

CPP14Parser.prototype.bracedinitlist = function() {

    var localctx = new BracedinitlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CPP14Parser.RULE_bracedinitlist);
    var _la = 0; // Token type
    try {
        this.state = 1952;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1943;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1944;
            this.initializerlist(0);
            this.state = 1946;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Comma) {
                this.state = 1945;
                this.match(CPP14Parser.Comma);
            }

            this.state = 1948;
            this.match(CPP14Parser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1950;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1951;
            this.match(CPP14Parser.RightBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classname;
    return this;
}

ClassnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassnameContext.prototype.constructor = ClassnameContext;

ClassnameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

ClassnameContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

ClassnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterClassname(this);
	}
};

ClassnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitClassname(this);
	}
};




CPP14Parser.ClassnameContext = ClassnameContext;

CPP14Parser.prototype.classname = function() {

    var localctx = new ClassnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CPP14Parser.RULE_classname);
    try {
        this.state = 1956;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1954;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1955;
            this.simpletemplateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classspecifier;
    return this;
}

ClassspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassspecifierContext.prototype.constructor = ClassspecifierContext;

ClassspecifierContext.prototype.classhead = function() {
    return this.getTypedRuleContext(ClassheadContext,0);
};

ClassspecifierContext.prototype.LeftBrace = function() {
    return this.getToken(CPP14Parser.LeftBrace, 0);
};

ClassspecifierContext.prototype.RightBrace = function() {
    return this.getToken(CPP14Parser.RightBrace, 0);
};

ClassspecifierContext.prototype.memberspecification = function() {
    return this.getTypedRuleContext(MemberspecificationContext,0);
};

ClassspecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterClassspecifier(this);
	}
};

ClassspecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitClassspecifier(this);
	}
};




CPP14Parser.ClassspecifierContext = ClassspecifierContext;

CPP14Parser.prototype.classspecifier = function() {

    var localctx = new ClassspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CPP14Parser.RULE_classspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1958;
        this.classhead();
        this.state = 1959;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1961;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CPP14Parser.T__2 - 3)) | (1 << (CPP14Parser.Alignas - 3)) | (1 << (CPP14Parser.Auto - 3)) | (1 << (CPP14Parser.Bool - 3)) | (1 << (CPP14Parser.Char - 3)) | (1 << (CPP14Parser.Char16 - 3)) | (1 << (CPP14Parser.Char32 - 3)) | (1 << (CPP14Parser.Class - 3)) | (1 << (CPP14Parser.Const - 3)) | (1 << (CPP14Parser.Constexpr - 3)) | (1 << (CPP14Parser.Decltype - 3)) | (1 << (CPP14Parser.Double - 3)) | (1 << (CPP14Parser.Enum - 3)) | (1 << (CPP14Parser.Explicit - 3)))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CPP14Parser.Extern - 35)) | (1 << (CPP14Parser.Float - 35)) | (1 << (CPP14Parser.Friend - 35)) | (1 << (CPP14Parser.Inline - 35)) | (1 << (CPP14Parser.Int - 35)) | (1 << (CPP14Parser.Long - 35)) | (1 << (CPP14Parser.Mutable - 35)) | (1 << (CPP14Parser.Operator - 35)) | (1 << (CPP14Parser.Private - 35)) | (1 << (CPP14Parser.Protected - 35)) | (1 << (CPP14Parser.Public - 35)) | (1 << (CPP14Parser.Register - 35)) | (1 << (CPP14Parser.Short - 35)) | (1 << (CPP14Parser.Signed - 35)) | (1 << (CPP14Parser.Static - 35)) | (1 << (CPP14Parser.Static_assert - 35)) | (1 << (CPP14Parser.Struct - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Template - 67)) | (1 << (CPP14Parser.Thread_local - 67)) | (1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename_ - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CPP14Parser.Colon - 127)) | (1 << (CPP14Parser.Doublecolon - 127)) | (1 << (CPP14Parser.Semi - 127)) | (1 << (CPP14Parser.Ellipsis - 127)) | (1 << (CPP14Parser.Identifier - 127)))) !== 0)) {
            this.state = 1960;
            this.memberspecification();
        }

        this.state = 1963;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassheadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classhead;
    return this;
}

ClassheadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassheadContext.prototype.constructor = ClassheadContext;

ClassheadContext.prototype.classkey = function() {
    return this.getTypedRuleContext(ClasskeyContext,0);
};

ClassheadContext.prototype.classheadname = function() {
    return this.getTypedRuleContext(ClassheadnameContext,0);
};

ClassheadContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ClassheadContext.prototype.classvirtspecifier = function() {
    return this.getTypedRuleContext(ClassvirtspecifierContext,0);
};

ClassheadContext.prototype.baseclause = function() {
    return this.getTypedRuleContext(BaseclauseContext,0);
};

ClassheadContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterClasshead(this);
	}
};

ClassheadContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitClasshead(this);
	}
};




CPP14Parser.ClassheadContext = ClassheadContext;

CPP14Parser.prototype.classhead = function() {

    var localctx = new ClassheadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CPP14Parser.RULE_classhead);
    var _la = 0; // Token type
    try {
        this.state = 1983;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1965;
            this.classkey();
            this.state = 1967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1966;
                this.attributespecifierseq(0);
            }

            this.state = 1969;
            this.classheadname();
            this.state = 1971;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Final) {
                this.state = 1970;
                this.classvirtspecifier();
            }

            this.state = 1974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1973;
                this.baseclause();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1976;
            this.classkey();
            this.state = 1978;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1977;
                this.attributespecifierseq(0);
            }

            this.state = 1981;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1980;
                this.baseclause();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassheadnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classheadname;
    return this;
}

ClassheadnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassheadnameContext.prototype.constructor = ClassheadnameContext;

ClassheadnameContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

ClassheadnameContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ClassheadnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterClassheadname(this);
	}
};

ClassheadnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitClassheadname(this);
	}
};




CPP14Parser.ClassheadnameContext = ClassheadnameContext;

CPP14Parser.prototype.classheadname = function() {

    var localctx = new ClassheadnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CPP14Parser.RULE_classheadname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1986;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
        if(la_===1) {
            this.state = 1985;
            this.nestednamespecifier(0);

        }
        this.state = 1988;
        this.classname();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassvirtspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classvirtspecifier;
    return this;
}

ClassvirtspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassvirtspecifierContext.prototype.constructor = ClassvirtspecifierContext;

ClassvirtspecifierContext.prototype.Final = function() {
    return this.getToken(CPP14Parser.Final, 0);
};

ClassvirtspecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterClassvirtspecifier(this);
	}
};

ClassvirtspecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitClassvirtspecifier(this);
	}
};




CPP14Parser.ClassvirtspecifierContext = ClassvirtspecifierContext;

CPP14Parser.prototype.classvirtspecifier = function() {

    var localctx = new ClassvirtspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CPP14Parser.RULE_classvirtspecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1990;
        this.match(CPP14Parser.Final);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClasskeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classkey;
    return this;
}

ClasskeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClasskeyContext.prototype.constructor = ClasskeyContext;

ClasskeyContext.prototype.Class = function() {
    return this.getToken(CPP14Parser.Class, 0);
};

ClasskeyContext.prototype.Struct = function() {
    return this.getToken(CPP14Parser.Struct, 0);
};

ClasskeyContext.prototype.Union = function() {
    return this.getToken(CPP14Parser.Union, 0);
};

ClasskeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterClasskey(this);
	}
};

ClasskeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitClasskey(this);
	}
};




CPP14Parser.ClasskeyContext = ClasskeyContext;

CPP14Parser.prototype.classkey = function() {

    var localctx = new ClasskeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CPP14Parser.RULE_classkey);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1992;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Class || _la===CPP14Parser.Struct || _la===CPP14Parser.Union)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MemberspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberspecification;
    return this;
}

MemberspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberspecificationContext.prototype.constructor = MemberspecificationContext;

MemberspecificationContext.prototype.memberdeclaration = function() {
    return this.getTypedRuleContext(MemberdeclarationContext,0);
};

MemberspecificationContext.prototype.memberspecification = function() {
    return this.getTypedRuleContext(MemberspecificationContext,0);
};

MemberspecificationContext.prototype.accessspecifier = function() {
    return this.getTypedRuleContext(AccessspecifierContext,0);
};

MemberspecificationContext.prototype.Colon = function() {
    return this.getToken(CPP14Parser.Colon, 0);
};

MemberspecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterMemberspecification(this);
	}
};

MemberspecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitMemberspecification(this);
	}
};




CPP14Parser.MemberspecificationContext = MemberspecificationContext;

CPP14Parser.prototype.memberspecification = function() {

    var localctx = new MemberspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CPP14Parser.RULE_memberspecification);
    var _la = 0; // Token type
    try {
        this.state = 2003;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.T__2:
        case CPP14Parser.Alignas:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Constexpr:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.Enum:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Float:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Mutable:
        case CPP14Parser.Operator:
        case CPP14Parser.Register:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Static:
        case CPP14Parser.Static_assert:
        case CPP14Parser.Struct:
        case CPP14Parser.Template:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Typename_:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Using:
        case CPP14Parser.Virtual:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Tilde:
        case CPP14Parser.Colon:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Semi:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1994;
            this.memberdeclaration();
            this.state = 1996;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CPP14Parser.T__2 - 3)) | (1 << (CPP14Parser.Alignas - 3)) | (1 << (CPP14Parser.Auto - 3)) | (1 << (CPP14Parser.Bool - 3)) | (1 << (CPP14Parser.Char - 3)) | (1 << (CPP14Parser.Char16 - 3)) | (1 << (CPP14Parser.Char32 - 3)) | (1 << (CPP14Parser.Class - 3)) | (1 << (CPP14Parser.Const - 3)) | (1 << (CPP14Parser.Constexpr - 3)) | (1 << (CPP14Parser.Decltype - 3)) | (1 << (CPP14Parser.Double - 3)) | (1 << (CPP14Parser.Enum - 3)) | (1 << (CPP14Parser.Explicit - 3)))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CPP14Parser.Extern - 35)) | (1 << (CPP14Parser.Float - 35)) | (1 << (CPP14Parser.Friend - 35)) | (1 << (CPP14Parser.Inline - 35)) | (1 << (CPP14Parser.Int - 35)) | (1 << (CPP14Parser.Long - 35)) | (1 << (CPP14Parser.Mutable - 35)) | (1 << (CPP14Parser.Operator - 35)) | (1 << (CPP14Parser.Private - 35)) | (1 << (CPP14Parser.Protected - 35)) | (1 << (CPP14Parser.Public - 35)) | (1 << (CPP14Parser.Register - 35)) | (1 << (CPP14Parser.Short - 35)) | (1 << (CPP14Parser.Signed - 35)) | (1 << (CPP14Parser.Static - 35)) | (1 << (CPP14Parser.Static_assert - 35)) | (1 << (CPP14Parser.Struct - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Template - 67)) | (1 << (CPP14Parser.Thread_local - 67)) | (1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename_ - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CPP14Parser.Colon - 127)) | (1 << (CPP14Parser.Doublecolon - 127)) | (1 << (CPP14Parser.Semi - 127)) | (1 << (CPP14Parser.Ellipsis - 127)) | (1 << (CPP14Parser.Identifier - 127)))) !== 0)) {
                this.state = 1995;
                this.memberspecification();
            }

            break;
        case CPP14Parser.Private:
        case CPP14Parser.Protected:
        case CPP14Parser.Public:
            this.enterOuterAlt(localctx, 2);
            this.state = 1998;
            this.accessspecifier();
            this.state = 1999;
            this.match(CPP14Parser.Colon);
            this.state = 2001;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (CPP14Parser.T__2 - 3)) | (1 << (CPP14Parser.Alignas - 3)) | (1 << (CPP14Parser.Auto - 3)) | (1 << (CPP14Parser.Bool - 3)) | (1 << (CPP14Parser.Char - 3)) | (1 << (CPP14Parser.Char16 - 3)) | (1 << (CPP14Parser.Char32 - 3)) | (1 << (CPP14Parser.Class - 3)) | (1 << (CPP14Parser.Const - 3)) | (1 << (CPP14Parser.Constexpr - 3)) | (1 << (CPP14Parser.Decltype - 3)) | (1 << (CPP14Parser.Double - 3)) | (1 << (CPP14Parser.Enum - 3)) | (1 << (CPP14Parser.Explicit - 3)))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (CPP14Parser.Extern - 35)) | (1 << (CPP14Parser.Float - 35)) | (1 << (CPP14Parser.Friend - 35)) | (1 << (CPP14Parser.Inline - 35)) | (1 << (CPP14Parser.Int - 35)) | (1 << (CPP14Parser.Long - 35)) | (1 << (CPP14Parser.Mutable - 35)) | (1 << (CPP14Parser.Operator - 35)) | (1 << (CPP14Parser.Private - 35)) | (1 << (CPP14Parser.Protected - 35)) | (1 << (CPP14Parser.Public - 35)) | (1 << (CPP14Parser.Register - 35)) | (1 << (CPP14Parser.Short - 35)) | (1 << (CPP14Parser.Signed - 35)) | (1 << (CPP14Parser.Static - 35)) | (1 << (CPP14Parser.Static_assert - 35)) | (1 << (CPP14Parser.Struct - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Template - 67)) | (1 << (CPP14Parser.Thread_local - 67)) | (1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename_ - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CPP14Parser.Colon - 127)) | (1 << (CPP14Parser.Doublecolon - 127)) | (1 << (CPP14Parser.Semi - 127)) | (1 << (CPP14Parser.Ellipsis - 127)) | (1 << (CPP14Parser.Identifier - 127)))) !== 0)) {
                this.state = 2000;
                this.memberspecification();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MemberdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclaration;
    return this;
}

MemberdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberdeclarationContext.prototype.constructor = MemberdeclarationContext;

MemberdeclarationContext.prototype.Semi = function() {
    return this.getToken(CPP14Parser.Semi, 0);
};

MemberdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

MemberdeclarationContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

MemberdeclarationContext.prototype.memberdeclaratorlist = function() {
    return this.getTypedRuleContext(MemberdeclaratorlistContext,0);
};

MemberdeclarationContext.prototype.functiondefinition = function() {
    return this.getTypedRuleContext(FunctiondefinitionContext,0);
};

MemberdeclarationContext.prototype.usingdeclaration = function() {
    return this.getTypedRuleContext(UsingdeclarationContext,0);
};

MemberdeclarationContext.prototype.static_assertdeclaration = function() {
    return this.getTypedRuleContext(Static_assertdeclarationContext,0);
};

MemberdeclarationContext.prototype.templatedeclaration = function() {
    return this.getTypedRuleContext(TemplatedeclarationContext,0);
};

MemberdeclarationContext.prototype.aliasdeclaration = function() {
    return this.getTypedRuleContext(AliasdeclarationContext,0);
};

MemberdeclarationContext.prototype.emptydeclaration = function() {
    return this.getTypedRuleContext(EmptydeclarationContext,0);
};

MemberdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterMemberdeclaration(this);
	}
};

MemberdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitMemberdeclaration(this);
	}
};




CPP14Parser.MemberdeclarationContext = MemberdeclarationContext;

CPP14Parser.prototype.memberdeclaration = function() {

    var localctx = new MemberdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CPP14Parser.RULE_memberdeclaration);
    var _la = 0; // Token type
    try {
        this.state = 2021;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2006;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
            if(la_===1) {
                this.state = 2005;
                this.attributespecifierseq(0);

            }
            this.state = 2009;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
            if(la_===1) {
                this.state = 2008;
                this.declspecifierseq();

            }
            this.state = 2012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype))) !== 0) || _la===CPP14Parser.Operator || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (CPP14Parser.LeftParen - 84)) | (1 << (CPP14Parser.LeftBracket - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Tilde - 84)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CPP14Parser.Colon - 127)) | (1 << (CPP14Parser.Doublecolon - 127)) | (1 << (CPP14Parser.Ellipsis - 127)) | (1 << (CPP14Parser.Identifier - 127)))) !== 0)) {
                this.state = 2011;
                this.memberdeclaratorlist(0);
            }

            this.state = 2014;
            this.match(CPP14Parser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2015;
            this.functiondefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2016;
            this.usingdeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2017;
            this.static_assertdeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2018;
            this.templatedeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2019;
            this.aliasdeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2020;
            this.emptydeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MemberdeclaratorlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclaratorlist;
    return this;
}

MemberdeclaratorlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberdeclaratorlistContext.prototype.constructor = MemberdeclaratorlistContext;

MemberdeclaratorlistContext.prototype.memberdeclarator = function() {
    return this.getTypedRuleContext(MemberdeclaratorContext,0);
};

MemberdeclaratorlistContext.prototype.memberdeclaratorlist = function() {
    return this.getTypedRuleContext(MemberdeclaratorlistContext,0);
};

MemberdeclaratorlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

MemberdeclaratorlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterMemberdeclaratorlist(this);
	}
};

MemberdeclaratorlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitMemberdeclaratorlist(this);
	}
};



CPP14Parser.prototype.memberdeclaratorlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MemberdeclaratorlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 306;
    this.enterRecursionRule(localctx, 306, CPP14Parser.RULE_memberdeclaratorlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2024;
        this.memberdeclarator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2031;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,249,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new MemberdeclaratorlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_memberdeclaratorlist);
                this.state = 2026;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2027;
                this.match(CPP14Parser.Comma);
                this.state = 2028;
                this.memberdeclarator(); 
            }
            this.state = 2033;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,249,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function MemberdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclarator;
    return this;
}

MemberdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberdeclaratorContext.prototype.constructor = MemberdeclaratorContext;

MemberdeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

MemberdeclaratorContext.prototype.virtspecifierseq = function() {
    return this.getTypedRuleContext(VirtspecifierseqContext,0);
};

MemberdeclaratorContext.prototype.purespecifier = function() {
    return this.getTypedRuleContext(PurespecifierContext,0);
};

MemberdeclaratorContext.prototype.braceorequalinitializer = function() {
    return this.getTypedRuleContext(BraceorequalinitializerContext,0);
};

MemberdeclaratorContext.prototype.Colon = function() {
    return this.getToken(CPP14Parser.Colon, 0);
};

MemberdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

MemberdeclaratorContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

MemberdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

MemberdeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterMemberdeclarator(this);
	}
};

MemberdeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitMemberdeclarator(this);
	}
};




CPP14Parser.MemberdeclaratorContext = MemberdeclaratorContext;

CPP14Parser.prototype.memberdeclarator = function() {

    var localctx = new MemberdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CPP14Parser.RULE_memberdeclarator);
    var _la = 0; // Token type
    try {
        this.state = 2053;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2034;
            this.declarator();
            this.state = 2036;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
            if(la_===1) {
                this.state = 2035;
                this.virtspecifierseq(0);

            }
            this.state = 2039;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
            if(la_===1) {
                this.state = 2038;
                this.purespecifier();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2041;
            this.declarator();
            this.state = 2043;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
            if(la_===1) {
                this.state = 2042;
                this.braceorequalinitializer();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2046;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2045;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2049;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2048;
                this.attributespecifierseq(0);
            }

            this.state = 2051;
            this.match(CPP14Parser.Colon);
            this.state = 2052;
            this.constantexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VirtspecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_virtspecifierseq;
    return this;
}

VirtspecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VirtspecifierseqContext.prototype.constructor = VirtspecifierseqContext;

VirtspecifierseqContext.prototype.virtspecifier = function() {
    return this.getTypedRuleContext(VirtspecifierContext,0);
};

VirtspecifierseqContext.prototype.virtspecifierseq = function() {
    return this.getTypedRuleContext(VirtspecifierseqContext,0);
};

VirtspecifierseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterVirtspecifierseq(this);
	}
};

VirtspecifierseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitVirtspecifierseq(this);
	}
};



CPP14Parser.prototype.virtspecifierseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new VirtspecifierseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 310;
    this.enterRecursionRule(localctx, 310, CPP14Parser.RULE_virtspecifierseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2056;
        this.virtspecifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2062;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,256,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new VirtspecifierseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_virtspecifierseq);
                this.state = 2058;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2059;
                this.virtspecifier(); 
            }
            this.state = 2064;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,256,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function VirtspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_virtspecifier;
    return this;
}

VirtspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VirtspecifierContext.prototype.constructor = VirtspecifierContext;

VirtspecifierContext.prototype.Override = function() {
    return this.getToken(CPP14Parser.Override, 0);
};

VirtspecifierContext.prototype.Final = function() {
    return this.getToken(CPP14Parser.Final, 0);
};

VirtspecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterVirtspecifier(this);
	}
};

VirtspecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitVirtspecifier(this);
	}
};




CPP14Parser.VirtspecifierContext = VirtspecifierContext;

CPP14Parser.prototype.virtspecifier = function() {

    var localctx = new VirtspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, CPP14Parser.RULE_virtspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2065;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Final || _la===CPP14Parser.Override)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PurespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_purespecifier;
    this.val = null; // Token
    return this;
}

PurespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PurespecifierContext.prototype.constructor = PurespecifierContext;

PurespecifierContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

PurespecifierContext.prototype.Octalliteral = function() {
    return this.getToken(CPP14Parser.Octalliteral, 0);
};

PurespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterPurespecifier(this);
	}
};

PurespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitPurespecifier(this);
	}
};




CPP14Parser.PurespecifierContext = PurespecifierContext;

CPP14Parser.prototype.purespecifier = function() {

    var localctx = new PurespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CPP14Parser.RULE_purespecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2067;
        this.match(CPP14Parser.Assign);
        this.state = 2068;
        localctx.val = this.match(CPP14Parser.Octalliteral);
        if((localctx.val===null ? null : localctx.val.text).compareTo("0")!=0) throw new InputMismatchException(this);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BaseclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_baseclause;
    return this;
}

BaseclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseclauseContext.prototype.constructor = BaseclauseContext;

BaseclauseContext.prototype.Colon = function() {
    return this.getToken(CPP14Parser.Colon, 0);
};

BaseclauseContext.prototype.basespecifierlist = function() {
    return this.getTypedRuleContext(BasespecifierlistContext,0);
};

BaseclauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBaseclause(this);
	}
};

BaseclauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBaseclause(this);
	}
};




CPP14Parser.BaseclauseContext = BaseclauseContext;

CPP14Parser.prototype.baseclause = function() {

    var localctx = new BaseclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CPP14Parser.RULE_baseclause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2071;
        this.match(CPP14Parser.Colon);
        this.state = 2072;
        this.basespecifierlist(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BasespecifierlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_basespecifierlist;
    return this;
}

BasespecifierlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasespecifierlistContext.prototype.constructor = BasespecifierlistContext;

BasespecifierlistContext.prototype.basespecifier = function() {
    return this.getTypedRuleContext(BasespecifierContext,0);
};

BasespecifierlistContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

BasespecifierlistContext.prototype.basespecifierlist = function() {
    return this.getTypedRuleContext(BasespecifierlistContext,0);
};

BasespecifierlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

BasespecifierlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBasespecifierlist(this);
	}
};

BasespecifierlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBasespecifierlist(this);
	}
};



CPP14Parser.prototype.basespecifierlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BasespecifierlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 318;
    this.enterRecursionRule(localctx, 318, CPP14Parser.RULE_basespecifierlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2075;
        this.basespecifier();
        this.state = 2077;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
        if(la_===1) {
            this.state = 2076;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2087;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,259,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new BasespecifierlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_basespecifierlist);
                this.state = 2079;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2080;
                this.match(CPP14Parser.Comma);
                this.state = 2081;
                this.basespecifier();
                this.state = 2083;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
                if(la_===1) {
                    this.state = 2082;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 2089;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,259,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function BasespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_basespecifier;
    return this;
}

BasespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasespecifierContext.prototype.constructor = BasespecifierContext;

BasespecifierContext.prototype.basetypespecifier = function() {
    return this.getTypedRuleContext(BasetypespecifierContext,0);
};

BasespecifierContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

BasespecifierContext.prototype.Virtual = function() {
    return this.getToken(CPP14Parser.Virtual, 0);
};

BasespecifierContext.prototype.accessspecifier = function() {
    return this.getTypedRuleContext(AccessspecifierContext,0);
};

BasespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBasespecifier(this);
	}
};

BasespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBasespecifier(this);
	}
};




CPP14Parser.BasespecifierContext = BasespecifierContext;

CPP14Parser.prototype.basespecifier = function() {

    var localctx = new BasespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CPP14Parser.RULE_basespecifier);
    var _la = 0; // Token type
    try {
        this.state = 2111;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2091;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2090;
                this.attributespecifierseq(0);
            }

            this.state = 2093;
            this.basetypespecifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2094;
                this.attributespecifierseq(0);
            }

            this.state = 2097;
            this.match(CPP14Parser.Virtual);
            this.state = 2099;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CPP14Parser.Private - 53)) | (1 << (CPP14Parser.Protected - 53)) | (1 << (CPP14Parser.Public - 53)))) !== 0)) {
                this.state = 2098;
                this.accessspecifier();
            }

            this.state = 2101;
            this.basetypespecifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2103;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2102;
                this.attributespecifierseq(0);
            }

            this.state = 2105;
            this.accessspecifier();
            this.state = 2107;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Virtual) {
                this.state = 2106;
                this.match(CPP14Parser.Virtual);
            }

            this.state = 2109;
            this.basetypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassordecltypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classordecltype;
    return this;
}

ClassordecltypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassordecltypeContext.prototype.constructor = ClassordecltypeContext;

ClassordecltypeContext.prototype.classname = function() {
    return this.getTypedRuleContext(ClassnameContext,0);
};

ClassordecltypeContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ClassordecltypeContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

ClassordecltypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterClassordecltype(this);
	}
};

ClassordecltypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitClassordecltype(this);
	}
};




CPP14Parser.ClassordecltypeContext = ClassordecltypeContext;

CPP14Parser.prototype.classordecltype = function() {

    var localctx = new ClassordecltypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CPP14Parser.RULE_classordecltype);
    try {
        this.state = 2118;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2114;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
            if(la_===1) {
                this.state = 2113;
                this.nestednamespecifier(0);

            }
            this.state = 2116;
            this.classname();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2117;
            this.decltypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BasetypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_basetypespecifier;
    return this;
}

BasetypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasetypespecifierContext.prototype.constructor = BasetypespecifierContext;

BasetypespecifierContext.prototype.classordecltype = function() {
    return this.getTypedRuleContext(ClassordecltypeContext,0);
};

BasetypespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBasetypespecifier(this);
	}
};

BasetypespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBasetypespecifier(this);
	}
};




CPP14Parser.BasetypespecifierContext = BasetypespecifierContext;

CPP14Parser.prototype.basetypespecifier = function() {

    var localctx = new BasetypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CPP14Parser.RULE_basetypespecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2120;
        this.classordecltype();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AccessspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_accessspecifier;
    return this;
}

AccessspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccessspecifierContext.prototype.constructor = AccessspecifierContext;

AccessspecifierContext.prototype.Private = function() {
    return this.getToken(CPP14Parser.Private, 0);
};

AccessspecifierContext.prototype.Protected = function() {
    return this.getToken(CPP14Parser.Protected, 0);
};

AccessspecifierContext.prototype.Public = function() {
    return this.getToken(CPP14Parser.Public, 0);
};

AccessspecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterAccessspecifier(this);
	}
};

AccessspecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitAccessspecifier(this);
	}
};




CPP14Parser.AccessspecifierContext = AccessspecifierContext;

CPP14Parser.prototype.accessspecifier = function() {

    var localctx = new AccessspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CPP14Parser.RULE_accessspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2122;
        _la = this._input.LA(1);
        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CPP14Parser.Private - 53)) | (1 << (CPP14Parser.Protected - 53)) | (1 << (CPP14Parser.Public - 53)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConversionfunctionidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversionfunctionid;
    return this;
}

ConversionfunctionidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversionfunctionidContext.prototype.constructor = ConversionfunctionidContext;

ConversionfunctionidContext.prototype.Operator = function() {
    return this.getToken(CPP14Parser.Operator, 0);
};

ConversionfunctionidContext.prototype.conversiontypeid = function() {
    return this.getTypedRuleContext(ConversiontypeidContext,0);
};

ConversionfunctionidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterConversionfunctionid(this);
	}
};

ConversionfunctionidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitConversionfunctionid(this);
	}
};




CPP14Parser.ConversionfunctionidContext = ConversionfunctionidContext;

CPP14Parser.prototype.conversionfunctionid = function() {

    var localctx = new ConversionfunctionidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CPP14Parser.RULE_conversionfunctionid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2124;
        this.match(CPP14Parser.Operator);
        this.state = 2125;
        this.conversiontypeid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConversiontypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversiontypeid;
    return this;
}

ConversiontypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversiontypeidContext.prototype.constructor = ConversiontypeidContext;

ConversiontypeidContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

ConversiontypeidContext.prototype.conversiondeclarator = function() {
    return this.getTypedRuleContext(ConversiondeclaratorContext,0);
};

ConversiontypeidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterConversiontypeid(this);
	}
};

ConversiontypeidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitConversiontypeid(this);
	}
};




CPP14Parser.ConversiontypeidContext = ConversiontypeidContext;

CPP14Parser.prototype.conversiontypeid = function() {

    var localctx = new ConversiontypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CPP14Parser.RULE_conversiontypeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2127;
        this.typespecifierseq();
        this.state = 2129;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
        if(la_===1) {
            this.state = 2128;
            this.conversiondeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConversiondeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversiondeclarator;
    return this;
}

ConversiondeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversiondeclaratorContext.prototype.constructor = ConversiondeclaratorContext;

ConversiondeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

ConversiondeclaratorContext.prototype.conversiondeclarator = function() {
    return this.getTypedRuleContext(ConversiondeclaratorContext,0);
};

ConversiondeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterConversiondeclarator(this);
	}
};

ConversiondeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitConversiondeclarator(this);
	}
};




CPP14Parser.ConversiondeclaratorContext = ConversiondeclaratorContext;

CPP14Parser.prototype.conversiondeclarator = function() {

    var localctx = new ConversiondeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CPP14Parser.RULE_conversiondeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2131;
        this.ptroperator();
        this.state = 2133;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
        if(la_===1) {
            this.state = 2132;
            this.conversiondeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CtorinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ctorinitializer;
    return this;
}

CtorinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CtorinitializerContext.prototype.constructor = CtorinitializerContext;

CtorinitializerContext.prototype.Colon = function() {
    return this.getToken(CPP14Parser.Colon, 0);
};

CtorinitializerContext.prototype.meminitializerlist = function() {
    return this.getTypedRuleContext(MeminitializerlistContext,0);
};

CtorinitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterCtorinitializer(this);
	}
};

CtorinitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitCtorinitializer(this);
	}
};




CPP14Parser.CtorinitializerContext = CtorinitializerContext;

CPP14Parser.prototype.ctorinitializer = function() {

    var localctx = new CtorinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CPP14Parser.RULE_ctorinitializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2135;
        this.match(CPP14Parser.Colon);
        this.state = 2136;
        this.meminitializerlist();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MeminitializerlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializerlist;
    return this;
}

MeminitializerlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MeminitializerlistContext.prototype.constructor = MeminitializerlistContext;

MeminitializerlistContext.prototype.meminitializer = function() {
    return this.getTypedRuleContext(MeminitializerContext,0);
};

MeminitializerlistContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

MeminitializerlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

MeminitializerlistContext.prototype.meminitializerlist = function() {
    return this.getTypedRuleContext(MeminitializerlistContext,0);
};

MeminitializerlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterMeminitializerlist(this);
	}
};

MeminitializerlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitMeminitializerlist(this);
	}
};




CPP14Parser.MeminitializerlistContext = MeminitializerlistContext;

CPP14Parser.prototype.meminitializerlist = function() {

    var localctx = new MeminitializerlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CPP14Parser.RULE_meminitializerlist);
    var _la = 0; // Token type
    try {
        this.state = 2149;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2138;
            this.meminitializer();
            this.state = 2140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 2139;
                this.match(CPP14Parser.Ellipsis);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2142;
            this.meminitializer();
            this.state = 2144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 2143;
                this.match(CPP14Parser.Ellipsis);
            }

            this.state = 2146;
            this.match(CPP14Parser.Comma);
            this.state = 2147;
            this.meminitializerlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MeminitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializer;
    return this;
}

MeminitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MeminitializerContext.prototype.constructor = MeminitializerContext;

MeminitializerContext.prototype.meminitializerid = function() {
    return this.getTypedRuleContext(MeminitializeridContext,0);
};

MeminitializerContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

MeminitializerContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

MeminitializerContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

MeminitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

MeminitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterMeminitializer(this);
	}
};

MeminitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitMeminitializer(this);
	}
};




CPP14Parser.MeminitializerContext = MeminitializerContext;

CPP14Parser.prototype.meminitializer = function() {

    var localctx = new MeminitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CPP14Parser.RULE_meminitializer);
    var _la = 0; // Token type
    try {
        this.state = 2161;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2151;
            this.meminitializerid();
            this.state = 2152;
            this.match(CPP14Parser.LeftParen);
            this.state = 2154;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.Throw - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.LeftBrace - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                this.state = 2153;
                this.expressionlist();
            }

            this.state = 2156;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2158;
            this.meminitializerid();
            this.state = 2159;
            this.bracedinitlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MeminitializeridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializerid;
    return this;
}

MeminitializeridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MeminitializeridContext.prototype.constructor = MeminitializeridContext;

MeminitializeridContext.prototype.classordecltype = function() {
    return this.getTypedRuleContext(ClassordecltypeContext,0);
};

MeminitializeridContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

MeminitializeridContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterMeminitializerid(this);
	}
};

MeminitializeridContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitMeminitializerid(this);
	}
};




CPP14Parser.MeminitializeridContext = MeminitializeridContext;

CPP14Parser.prototype.meminitializerid = function() {

    var localctx = new MeminitializeridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CPP14Parser.RULE_meminitializerid);
    try {
        this.state = 2165;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2163;
            this.classordecltype();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2164;
            this.match(CPP14Parser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorfunctionidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_operatorfunctionid;
    return this;
}

OperatorfunctionidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorfunctionidContext.prototype.constructor = OperatorfunctionidContext;

OperatorfunctionidContext.prototype.Operator = function() {
    return this.getToken(CPP14Parser.Operator, 0);
};

OperatorfunctionidContext.prototype.theoperator = function() {
    return this.getTypedRuleContext(TheoperatorContext,0);
};

OperatorfunctionidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterOperatorfunctionid(this);
	}
};

OperatorfunctionidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitOperatorfunctionid(this);
	}
};




CPP14Parser.OperatorfunctionidContext = OperatorfunctionidContext;

CPP14Parser.prototype.operatorfunctionid = function() {

    var localctx = new OperatorfunctionidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CPP14Parser.RULE_operatorfunctionid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2167;
        this.match(CPP14Parser.Operator);
        this.state = 2168;
        this.theoperator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteraloperatoridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_literaloperatorid;
    return this;
}

LiteraloperatoridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteraloperatoridContext.prototype.constructor = LiteraloperatoridContext;

LiteraloperatoridContext.prototype.Operator = function() {
    return this.getToken(CPP14Parser.Operator, 0);
};

LiteraloperatoridContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

LiteraloperatoridContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

LiteraloperatoridContext.prototype.Userdefinedstringliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedstringliteral, 0);
};

LiteraloperatoridContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLiteraloperatorid(this);
	}
};

LiteraloperatoridContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLiteraloperatorid(this);
	}
};




CPP14Parser.LiteraloperatoridContext = LiteraloperatoridContext;

CPP14Parser.prototype.literaloperatorid = function() {

    var localctx = new LiteraloperatoridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CPP14Parser.RULE_literaloperatorid);
    try {
        this.state = 2175;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2170;
            this.match(CPP14Parser.Operator);
            this.state = 2171;
            this.match(CPP14Parser.Stringliteral);
            this.state = 2172;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2173;
            this.match(CPP14Parser.Operator);
            this.state = 2174;
            this.match(CPP14Parser.Userdefinedstringliteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TemplatedeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templatedeclaration;
    return this;
}

TemplatedeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplatedeclarationContext.prototype.constructor = TemplatedeclarationContext;

TemplatedeclarationContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

TemplatedeclarationContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

TemplatedeclarationContext.prototype.templateparameterlist = function() {
    return this.getTypedRuleContext(TemplateparameterlistContext,0);
};

TemplatedeclarationContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

TemplatedeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

TemplatedeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTemplatedeclaration(this);
	}
};

TemplatedeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTemplatedeclaration(this);
	}
};




CPP14Parser.TemplatedeclarationContext = TemplatedeclarationContext;

CPP14Parser.prototype.templatedeclaration = function() {

    var localctx = new TemplatedeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CPP14Parser.RULE_templatedeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2177;
        this.match(CPP14Parser.Template);
        this.state = 2178;
        this.match(CPP14Parser.Less);
        this.state = 2179;
        this.templateparameterlist(0);
        this.state = 2180;
        this.match(CPP14Parser.Greater);
        this.state = 2181;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TemplateparameterlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateparameterlist;
    return this;
}

TemplateparameterlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateparameterlistContext.prototype.constructor = TemplateparameterlistContext;

TemplateparameterlistContext.prototype.templateparameter = function() {
    return this.getTypedRuleContext(TemplateparameterContext,0);
};

TemplateparameterlistContext.prototype.templateparameterlist = function() {
    return this.getTypedRuleContext(TemplateparameterlistContext,0);
};

TemplateparameterlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

TemplateparameterlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTemplateparameterlist(this);
	}
};

TemplateparameterlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTemplateparameterlist(this);
	}
};



CPP14Parser.prototype.templateparameterlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TemplateparameterlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 348;
    this.enterRecursionRule(localctx, 348, CPP14Parser.RULE_templateparameterlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2184;
        this.templateparameter();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2191;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,277,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TemplateparameterlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_templateparameterlist);
                this.state = 2186;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2187;
                this.match(CPP14Parser.Comma);
                this.state = 2188;
                this.templateparameter(); 
            }
            this.state = 2193;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,277,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TemplateparameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateparameter;
    return this;
}

TemplateparameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateparameterContext.prototype.constructor = TemplateparameterContext;

TemplateparameterContext.prototype.typeparameter = function() {
    return this.getTypedRuleContext(TypeparameterContext,0);
};

TemplateparameterContext.prototype.parameterdeclaration = function() {
    return this.getTypedRuleContext(ParameterdeclarationContext,0);
};

TemplateparameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTemplateparameter(this);
	}
};

TemplateparameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTemplateparameter(this);
	}
};




CPP14Parser.TemplateparameterContext = TemplateparameterContext;

CPP14Parser.prototype.templateparameter = function() {

    var localctx = new TemplateparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CPP14Parser.RULE_templateparameter);
    try {
        this.state = 2196;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2194;
            this.typeparameter();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2195;
            this.parameterdeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeparameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeparameter;
    return this;
}

TypeparameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeparameterContext.prototype.constructor = TypeparameterContext;

TypeparameterContext.prototype.Class = function() {
    return this.getToken(CPP14Parser.Class, 0);
};

TypeparameterContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

TypeparameterContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TypeparameterContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

TypeparameterContext.prototype.thetypeid = function() {
    return this.getTypedRuleContext(ThetypeidContext,0);
};

TypeparameterContext.prototype.Typename_ = function() {
    return this.getToken(CPP14Parser.Typename_, 0);
};

TypeparameterContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

TypeparameterContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

TypeparameterContext.prototype.templateparameterlist = function() {
    return this.getTypedRuleContext(TemplateparameterlistContext,0);
};

TypeparameterContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

TypeparameterContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

TypeparameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTypeparameter(this);
	}
};

TypeparameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTypeparameter(this);
	}
};




CPP14Parser.TypeparameterContext = TypeparameterContext;

CPP14Parser.prototype.typeparameter = function() {

    var localctx = new TypeparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CPP14Parser.RULE_typeparameter);
    var _la = 0; // Token type
    try {
        this.state = 2246;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2198;
            this.match(CPP14Parser.Class);
            this.state = 2200;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
            if(la_===1) {
                this.state = 2199;
                this.match(CPP14Parser.Ellipsis);

            }
            this.state = 2203;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
            if(la_===1) {
                this.state = 2202;
                this.match(CPP14Parser.Identifier);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2205;
            this.match(CPP14Parser.Class);
            this.state = 2207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2206;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2209;
            this.match(CPP14Parser.Assign);
            this.state = 2210;
            this.thetypeid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2211;
            this.match(CPP14Parser.Typename_);
            this.state = 2213;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
            if(la_===1) {
                this.state = 2212;
                this.match(CPP14Parser.Ellipsis);

            }
            this.state = 2216;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
            if(la_===1) {
                this.state = 2215;
                this.match(CPP14Parser.Identifier);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2218;
            this.match(CPP14Parser.Typename_);
            this.state = 2220;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2219;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2222;
            this.match(CPP14Parser.Assign);
            this.state = 2223;
            this.thetypeid();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2224;
            this.match(CPP14Parser.Template);
            this.state = 2225;
            this.match(CPP14Parser.Less);
            this.state = 2226;
            this.templateparameterlist(0);
            this.state = 2227;
            this.match(CPP14Parser.Greater);
            this.state = 2228;
            this.match(CPP14Parser.Class);
            this.state = 2230;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
            if(la_===1) {
                this.state = 2229;
                this.match(CPP14Parser.Ellipsis);

            }
            this.state = 2233;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
            if(la_===1) {
                this.state = 2232;
                this.match(CPP14Parser.Identifier);

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2235;
            this.match(CPP14Parser.Template);
            this.state = 2236;
            this.match(CPP14Parser.Less);
            this.state = 2237;
            this.templateparameterlist(0);
            this.state = 2238;
            this.match(CPP14Parser.Greater);
            this.state = 2239;
            this.match(CPP14Parser.Class);
            this.state = 2241;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2240;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2243;
            this.match(CPP14Parser.Assign);
            this.state = 2244;
            this.idexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpletemplateidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpletemplateid;
    return this;
}

SimpletemplateidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpletemplateidContext.prototype.constructor = SimpletemplateidContext;

SimpletemplateidContext.prototype.templatename = function() {
    return this.getTypedRuleContext(TemplatenameContext,0);
};

SimpletemplateidContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

SimpletemplateidContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

SimpletemplateidContext.prototype.templateargumentlist = function() {
    return this.getTypedRuleContext(TemplateargumentlistContext,0);
};

SimpletemplateidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterSimpletemplateid(this);
	}
};

SimpletemplateidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitSimpletemplateid(this);
	}
};




CPP14Parser.SimpletemplateidContext = SimpletemplateidContext;

CPP14Parser.prototype.simpletemplateid = function() {

    var localctx = new SimpletemplateidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CPP14Parser.RULE_simpletemplateid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2248;
        this.templatename();
        this.state = 2249;
        this.match(CPP14Parser.Less);
        this.state = 2251;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CPP14Parser.T__0 - 1)) | (1 << (CPP14Parser.T__1 - 1)) | (1 << (CPP14Parser.Alignof - 1)) | (1 << (CPP14Parser.Auto - 1)) | (1 << (CPP14Parser.Bool - 1)) | (1 << (CPP14Parser.Char - 1)) | (1 << (CPP14Parser.Char16 - 1)) | (1 << (CPP14Parser.Char32 - 1)) | (1 << (CPP14Parser.Class - 1)) | (1 << (CPP14Parser.Const - 1)) | (1 << (CPP14Parser.Const_cast - 1)) | (1 << (CPP14Parser.Decltype - 1)) | (1 << (CPP14Parser.Delete - 1)) | (1 << (CPP14Parser.Double - 1)) | (1 << (CPP14Parser.Dynamic_cast - 1)) | (1 << (CPP14Parser.Enum - 1)))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)) | (1 << (CPP14Parser.Struct - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Union - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Volatile - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
            this.state = 2250;
            this.templateargumentlist(0);
        }

        this.state = 2253;
        this.match(CPP14Parser.Greater);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TemplateidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateid;
    return this;
}

TemplateidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateidContext.prototype.constructor = TemplateidContext;

TemplateidContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

TemplateidContext.prototype.operatorfunctionid = function() {
    return this.getTypedRuleContext(OperatorfunctionidContext,0);
};

TemplateidContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

TemplateidContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

TemplateidContext.prototype.templateargumentlist = function() {
    return this.getTypedRuleContext(TemplateargumentlistContext,0);
};

TemplateidContext.prototype.literaloperatorid = function() {
    return this.getTypedRuleContext(LiteraloperatoridContext,0);
};

TemplateidContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTemplateid(this);
	}
};

TemplateidContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTemplateid(this);
	}
};




CPP14Parser.TemplateidContext = TemplateidContext;

CPP14Parser.prototype.templateid = function() {

    var localctx = new TemplateidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CPP14Parser.RULE_templateid);
    var _la = 0; // Token type
    try {
        this.state = 2270;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2255;
            this.simpletemplateid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2256;
            this.operatorfunctionid();
            this.state = 2257;
            this.match(CPP14Parser.Less);
            this.state = 2259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CPP14Parser.T__0 - 1)) | (1 << (CPP14Parser.T__1 - 1)) | (1 << (CPP14Parser.Alignof - 1)) | (1 << (CPP14Parser.Auto - 1)) | (1 << (CPP14Parser.Bool - 1)) | (1 << (CPP14Parser.Char - 1)) | (1 << (CPP14Parser.Char16 - 1)) | (1 << (CPP14Parser.Char32 - 1)) | (1 << (CPP14Parser.Class - 1)) | (1 << (CPP14Parser.Const - 1)) | (1 << (CPP14Parser.Const_cast - 1)) | (1 << (CPP14Parser.Decltype - 1)) | (1 << (CPP14Parser.Delete - 1)) | (1 << (CPP14Parser.Double - 1)) | (1 << (CPP14Parser.Dynamic_cast - 1)) | (1 << (CPP14Parser.Enum - 1)))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)) | (1 << (CPP14Parser.Struct - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Union - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Volatile - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                this.state = 2258;
                this.templateargumentlist(0);
            }

            this.state = 2261;
            this.match(CPP14Parser.Greater);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2263;
            this.literaloperatorid();
            this.state = 2264;
            this.match(CPP14Parser.Less);
            this.state = 2266;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 1)) & ~0x1f) == 0 && ((1 << (_la - 1)) & ((1 << (CPP14Parser.T__0 - 1)) | (1 << (CPP14Parser.T__1 - 1)) | (1 << (CPP14Parser.Alignof - 1)) | (1 << (CPP14Parser.Auto - 1)) | (1 << (CPP14Parser.Bool - 1)) | (1 << (CPP14Parser.Char - 1)) | (1 << (CPP14Parser.Char16 - 1)) | (1 << (CPP14Parser.Char32 - 1)) | (1 << (CPP14Parser.Class - 1)) | (1 << (CPP14Parser.Const - 1)) | (1 << (CPP14Parser.Const_cast - 1)) | (1 << (CPP14Parser.Decltype - 1)) | (1 << (CPP14Parser.Delete - 1)) | (1 << (CPP14Parser.Double - 1)) | (1 << (CPP14Parser.Dynamic_cast - 1)) | (1 << (CPP14Parser.Enum - 1)))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPP14Parser.False - 36)) | (1 << (CPP14Parser.Float - 36)) | (1 << (CPP14Parser.Int - 36)) | (1 << (CPP14Parser.Long - 36)) | (1 << (CPP14Parser.New - 36)) | (1 << (CPP14Parser.Noexcept - 36)) | (1 << (CPP14Parser.Nullptr - 36)) | (1 << (CPP14Parser.Operator - 36)) | (1 << (CPP14Parser.Reinterpret_cast - 36)) | (1 << (CPP14Parser.Short - 36)) | (1 << (CPP14Parser.Signed - 36)) | (1 << (CPP14Parser.Sizeof - 36)) | (1 << (CPP14Parser.Static_cast - 36)) | (1 << (CPP14Parser.Struct - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.True - 68)) | (1 << (CPP14Parser.Typeid_ - 68)) | (1 << (CPP14Parser.Typename_ - 68)) | (1 << (CPP14Parser.Union - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Volatile - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (CPP14Parser.PlusPlus - 121)) | (1 << (CPP14Parser.MinusMinus - 121)) | (1 << (CPP14Parser.Doublecolon - 121)) | (1 << (CPP14Parser.Identifier - 121)) | (1 << (CPP14Parser.Integerliteral - 121)) | (1 << (CPP14Parser.Characterliteral - 121)) | (1 << (CPP14Parser.Floatingliteral - 121)) | (1 << (CPP14Parser.Stringliteral - 121)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 121)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 121)) | (1 << (CPP14Parser.Userdefinedstringliteral - 121)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 121)))) !== 0)) {
                this.state = 2265;
                this.templateargumentlist(0);
            }

            this.state = 2268;
            this.match(CPP14Parser.Greater);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TemplatenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templatename;
    return this;
}

TemplatenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplatenameContext.prototype.constructor = TemplatenameContext;

TemplatenameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TemplatenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTemplatename(this);
	}
};

TemplatenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTemplatename(this);
	}
};




CPP14Parser.TemplatenameContext = TemplatenameContext;

CPP14Parser.prototype.templatename = function() {

    var localctx = new TemplatenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CPP14Parser.RULE_templatename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2272;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TemplateargumentlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateargumentlist;
    return this;
}

TemplateargumentlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateargumentlistContext.prototype.constructor = TemplateargumentlistContext;

TemplateargumentlistContext.prototype.templateargument = function() {
    return this.getTypedRuleContext(TemplateargumentContext,0);
};

TemplateargumentlistContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

TemplateargumentlistContext.prototype.templateargumentlist = function() {
    return this.getTypedRuleContext(TemplateargumentlistContext,0);
};

TemplateargumentlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

TemplateargumentlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTemplateargumentlist(this);
	}
};

TemplateargumentlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTemplateargumentlist(this);
	}
};



CPP14Parser.prototype.templateargumentlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TemplateargumentlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 360;
    this.enterRecursionRule(localctx, 360, CPP14Parser.RULE_templateargumentlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2275;
        this.templateargument();
        this.state = 2277;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
        if(la_===1) {
            this.state = 2276;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2287;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,295,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TemplateargumentlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_templateargumentlist);
                this.state = 2279;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2280;
                this.match(CPP14Parser.Comma);
                this.state = 2281;
                this.templateargument();
                this.state = 2283;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
                if(la_===1) {
                    this.state = 2282;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 2289;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,295,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TemplateargumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateargument;
    return this;
}

TemplateargumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateargumentContext.prototype.constructor = TemplateargumentContext;

TemplateargumentContext.prototype.thetypeid = function() {
    return this.getTypedRuleContext(ThetypeidContext,0);
};

TemplateargumentContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

TemplateargumentContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

TemplateargumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTemplateargument(this);
	}
};

TemplateargumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTemplateargument(this);
	}
};




CPP14Parser.TemplateargumentContext = TemplateargumentContext;

CPP14Parser.prototype.templateargument = function() {

    var localctx = new TemplateargumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CPP14Parser.RULE_templateargument);
    try {
        this.state = 2293;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2290;
            this.thetypeid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2291;
            this.constantexpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2292;
            this.idexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypenamespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typenamespecifier;
    return this;
}

TypenamespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenamespecifierContext.prototype.constructor = TypenamespecifierContext;

TypenamespecifierContext.prototype.Typename_ = function() {
    return this.getToken(CPP14Parser.Typename_, 0);
};

TypenamespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

TypenamespecifierContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TypenamespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

TypenamespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

TypenamespecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTypenamespecifier(this);
	}
};

TypenamespecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTypenamespecifier(this);
	}
};




CPP14Parser.TypenamespecifierContext = TypenamespecifierContext;

CPP14Parser.prototype.typenamespecifier = function() {

    var localctx = new TypenamespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CPP14Parser.RULE_typenamespecifier);
    var _la = 0; // Token type
    try {
        this.state = 2306;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2295;
            this.match(CPP14Parser.Typename_);
            this.state = 2296;
            this.nestednamespecifier(0);
            this.state = 2297;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2299;
            this.match(CPP14Parser.Typename_);
            this.state = 2300;
            this.nestednamespecifier(0);
            this.state = 2302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Template) {
                this.state = 2301;
                this.match(CPP14Parser.Template);
            }

            this.state = 2304;
            this.simpletemplateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplicitinstantiationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_explicitinstantiation;
    return this;
}

ExplicitinstantiationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitinstantiationContext.prototype.constructor = ExplicitinstantiationContext;

ExplicitinstantiationContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

ExplicitinstantiationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExplicitinstantiationContext.prototype.Extern = function() {
    return this.getToken(CPP14Parser.Extern, 0);
};

ExplicitinstantiationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterExplicitinstantiation(this);
	}
};

ExplicitinstantiationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitExplicitinstantiation(this);
	}
};




CPP14Parser.ExplicitinstantiationContext = ExplicitinstantiationContext;

CPP14Parser.prototype.explicitinstantiation = function() {

    var localctx = new ExplicitinstantiationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CPP14Parser.RULE_explicitinstantiation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Extern) {
            this.state = 2308;
            this.match(CPP14Parser.Extern);
        }

        this.state = 2311;
        this.match(CPP14Parser.Template);
        this.state = 2312;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplicitspecializationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_explicitspecialization;
    return this;
}

ExplicitspecializationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitspecializationContext.prototype.constructor = ExplicitspecializationContext;

ExplicitspecializationContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

ExplicitspecializationContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

ExplicitspecializationContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

ExplicitspecializationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExplicitspecializationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterExplicitspecialization(this);
	}
};

ExplicitspecializationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitExplicitspecialization(this);
	}
};




CPP14Parser.ExplicitspecializationContext = ExplicitspecializationContext;

CPP14Parser.prototype.explicitspecialization = function() {

    var localctx = new ExplicitspecializationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CPP14Parser.RULE_explicitspecialization);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2314;
        this.match(CPP14Parser.Template);
        this.state = 2315;
        this.match(CPP14Parser.Less);
        this.state = 2316;
        this.match(CPP14Parser.Greater);
        this.state = 2317;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryblockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_tryblock;
    return this;
}

TryblockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryblockContext.prototype.constructor = TryblockContext;

TryblockContext.prototype.Try = function() {
    return this.getToken(CPP14Parser.Try, 0);
};

TryblockContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

TryblockContext.prototype.handlerseq = function() {
    return this.getTypedRuleContext(HandlerseqContext,0);
};

TryblockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTryblock(this);
	}
};

TryblockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTryblock(this);
	}
};




CPP14Parser.TryblockContext = TryblockContext;

CPP14Parser.prototype.tryblock = function() {

    var localctx = new TryblockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CPP14Parser.RULE_tryblock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2319;
        this.match(CPP14Parser.Try);
        this.state = 2320;
        this.compoundstatement();
        this.state = 2321;
        this.handlerseq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctiontryblockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functiontryblock;
    return this;
}

FunctiontryblockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiontryblockContext.prototype.constructor = FunctiontryblockContext;

FunctiontryblockContext.prototype.Try = function() {
    return this.getToken(CPP14Parser.Try, 0);
};

FunctiontryblockContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

FunctiontryblockContext.prototype.handlerseq = function() {
    return this.getTypedRuleContext(HandlerseqContext,0);
};

FunctiontryblockContext.prototype.ctorinitializer = function() {
    return this.getTypedRuleContext(CtorinitializerContext,0);
};

FunctiontryblockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterFunctiontryblock(this);
	}
};

FunctiontryblockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitFunctiontryblock(this);
	}
};




CPP14Parser.FunctiontryblockContext = FunctiontryblockContext;

CPP14Parser.prototype.functiontryblock = function() {

    var localctx = new FunctiontryblockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CPP14Parser.RULE_functiontryblock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2323;
        this.match(CPP14Parser.Try);
        this.state = 2325;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Colon) {
            this.state = 2324;
            this.ctorinitializer();
        }

        this.state = 2327;
        this.compoundstatement();
        this.state = 2328;
        this.handlerseq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_handlerseq;
    return this;
}

HandlerseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerseqContext.prototype.constructor = HandlerseqContext;

HandlerseqContext.prototype.handler = function() {
    return this.getTypedRuleContext(HandlerContext,0);
};

HandlerseqContext.prototype.handlerseq = function() {
    return this.getTypedRuleContext(HandlerseqContext,0);
};

HandlerseqContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterHandlerseq(this);
	}
};

HandlerseqContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitHandlerseq(this);
	}
};




CPP14Parser.HandlerseqContext = HandlerseqContext;

CPP14Parser.prototype.handlerseq = function() {

    var localctx = new HandlerseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CPP14Parser.RULE_handlerseq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2330;
        this.handler();
        this.state = 2332;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
        if(la_===1) {
            this.state = 2331;
            this.handlerseq();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_handler;
    return this;
}

HandlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerContext.prototype.constructor = HandlerContext;

HandlerContext.prototype.Catch = function() {
    return this.getToken(CPP14Parser.Catch, 0);
};

HandlerContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

HandlerContext.prototype.exceptiondeclaration = function() {
    return this.getTypedRuleContext(ExceptiondeclarationContext,0);
};

HandlerContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

HandlerContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

HandlerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterHandler(this);
	}
};

HandlerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitHandler(this);
	}
};




CPP14Parser.HandlerContext = HandlerContext;

CPP14Parser.prototype.handler = function() {

    var localctx = new HandlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CPP14Parser.RULE_handler);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2334;
        this.match(CPP14Parser.Catch);
        this.state = 2335;
        this.match(CPP14Parser.LeftParen);
        this.state = 2336;
        this.exceptiondeclaration();
        this.state = 2337;
        this.match(CPP14Parser.RightParen);
        this.state = 2338;
        this.compoundstatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptiondeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exceptiondeclaration;
    return this;
}

ExceptiondeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptiondeclarationContext.prototype.constructor = ExceptiondeclarationContext;

ExceptiondeclarationContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

ExceptiondeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ExceptiondeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ExceptiondeclarationContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

ExceptiondeclarationContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

ExceptiondeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterExceptiondeclaration(this);
	}
};

ExceptiondeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitExceptiondeclaration(this);
	}
};




CPP14Parser.ExceptiondeclarationContext = ExceptiondeclarationContext;

CPP14Parser.prototype.exceptiondeclaration = function() {

    var localctx = new ExceptiondeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CPP14Parser.RULE_exceptiondeclaration);
    var _la = 0; // Token type
    try {
        this.state = 2354;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2340;
                this.attributespecifierseq(0);
            }

            this.state = 2343;
            this.typespecifierseq();
            this.state = 2344;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2346;
                this.attributespecifierseq(0);
            }

            this.state = 2349;
            this.typespecifierseq();
            this.state = 2351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.T__2 || _la===CPP14Parser.Decltype || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (CPP14Parser.LeftParen - 84)) | (1 << (CPP14Parser.LeftBracket - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)))) !== 0)) {
                this.state = 2350;
                this.abstractdeclarator();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2353;
            this.match(CPP14Parser.Ellipsis);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThrowexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_throwexpression;
    return this;
}

ThrowexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowexpressionContext.prototype.constructor = ThrowexpressionContext;

ThrowexpressionContext.prototype.Throw = function() {
    return this.getToken(CPP14Parser.Throw, 0);
};

ThrowexpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

ThrowexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterThrowexpression(this);
	}
};

ThrowexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitThrowexpression(this);
	}
};




CPP14Parser.ThrowexpressionContext = ThrowexpressionContext;

CPP14Parser.prototype.throwexpression = function() {

    var localctx = new ThrowexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CPP14Parser.RULE_throwexpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2356;
        this.match(CPP14Parser.Throw);
        this.state = 2358;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
        if(la_===1) {
            this.state = 2357;
            this.assignmentexpression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptionspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exceptionspecification;
    return this;
}

ExceptionspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionspecificationContext.prototype.constructor = ExceptionspecificationContext;

ExceptionspecificationContext.prototype.dynamicexceptionspecification = function() {
    return this.getTypedRuleContext(DynamicexceptionspecificationContext,0);
};

ExceptionspecificationContext.prototype.noexceptspecification = function() {
    return this.getTypedRuleContext(NoexceptspecificationContext,0);
};

ExceptionspecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterExceptionspecification(this);
	}
};

ExceptionspecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitExceptionspecification(this);
	}
};




CPP14Parser.ExceptionspecificationContext = ExceptionspecificationContext;

CPP14Parser.prototype.exceptionspecification = function() {

    var localctx = new ExceptionspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CPP14Parser.RULE_exceptionspecification);
    try {
        this.state = 2362;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Throw:
            this.enterOuterAlt(localctx, 1);
            this.state = 2360;
            this.dynamicexceptionspecification();
            break;
        case CPP14Parser.Noexcept:
            this.enterOuterAlt(localctx, 2);
            this.state = 2361;
            this.noexceptspecification();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DynamicexceptionspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_dynamicexceptionspecification;
    return this;
}

DynamicexceptionspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DynamicexceptionspecificationContext.prototype.constructor = DynamicexceptionspecificationContext;

DynamicexceptionspecificationContext.prototype.Throw = function() {
    return this.getToken(CPP14Parser.Throw, 0);
};

DynamicexceptionspecificationContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

DynamicexceptionspecificationContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

DynamicexceptionspecificationContext.prototype.typeidlist = function() {
    return this.getTypedRuleContext(TypeidlistContext,0);
};

DynamicexceptionspecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterDynamicexceptionspecification(this);
	}
};

DynamicexceptionspecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitDynamicexceptionspecification(this);
	}
};




CPP14Parser.DynamicexceptionspecificationContext = DynamicexceptionspecificationContext;

CPP14Parser.prototype.dynamicexceptionspecification = function() {

    var localctx = new DynamicexceptionspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CPP14Parser.RULE_dynamicexceptionspecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2364;
        this.match(CPP14Parser.Throw);
        this.state = 2365;
        this.match(CPP14Parser.LeftParen);
        this.state = 2367;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Enum - 32)) | (1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)))) !== 0) || _la===CPP14Parser.Doublecolon || _la===CPP14Parser.Identifier) {
            this.state = 2366;
            this.typeidlist(0);
        }

        this.state = 2369;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeidlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeidlist;
    return this;
}

TypeidlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeidlistContext.prototype.constructor = TypeidlistContext;

TypeidlistContext.prototype.thetypeid = function() {
    return this.getTypedRuleContext(ThetypeidContext,0);
};

TypeidlistContext.prototype.Ellipsis = function() {
    return this.getToken(CPP14Parser.Ellipsis, 0);
};

TypeidlistContext.prototype.typeidlist = function() {
    return this.getTypedRuleContext(TypeidlistContext,0);
};

TypeidlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

TypeidlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTypeidlist(this);
	}
};

TypeidlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTypeidlist(this);
	}
};



CPP14Parser.prototype.typeidlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeidlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 386;
    this.enterRecursionRule(localctx, 386, CPP14Parser.RULE_typeidlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2372;
        this.thetypeid();
        this.state = 2374;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
        if(la_===1) {
            this.state = 2373;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2384;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,311,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeidlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_typeidlist);
                this.state = 2376;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2377;
                this.match(CPP14Parser.Comma);
                this.state = 2378;
                this.thetypeid();
                this.state = 2380;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
                if(la_===1) {
                    this.state = 2379;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 2386;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,311,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function NoexceptspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noexceptspecification;
    return this;
}

NoexceptspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoexceptspecificationContext.prototype.constructor = NoexceptspecificationContext;

NoexceptspecificationContext.prototype.Noexcept = function() {
    return this.getToken(CPP14Parser.Noexcept, 0);
};

NoexceptspecificationContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

NoexceptspecificationContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoexceptspecificationContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

NoexceptspecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterNoexceptspecification(this);
	}
};

NoexceptspecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitNoexceptspecification(this);
	}
};




CPP14Parser.NoexceptspecificationContext = NoexceptspecificationContext;

CPP14Parser.prototype.noexceptspecification = function() {

    var localctx = new NoexceptspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CPP14Parser.RULE_noexceptspecification);
    try {
        this.state = 2393;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2387;
            this.match(CPP14Parser.Noexcept);
            this.state = 2388;
            this.match(CPP14Parser.LeftParen);
            this.state = 2389;
            this.constantexpression();
            this.state = 2390;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2392;
            this.match(CPP14Parser.Noexcept);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TheoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_theoperator;
    return this;
}

TheoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TheoperatorContext.prototype.constructor = TheoperatorContext;

TheoperatorContext.prototype.New = function() {
    return this.getToken(CPP14Parser.New, 0);
};

TheoperatorContext.prototype.Delete = function() {
    return this.getToken(CPP14Parser.Delete, 0);
};

TheoperatorContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

TheoperatorContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

TheoperatorContext.prototype.Plus = function() {
    return this.getToken(CPP14Parser.Plus, 0);
};

TheoperatorContext.prototype.Minus = function() {
    return this.getToken(CPP14Parser.Minus, 0);
};

TheoperatorContext.prototype.Star = function() {
    return this.getToken(CPP14Parser.Star, 0);
};

TheoperatorContext.prototype.Div = function() {
    return this.getToken(CPP14Parser.Div, 0);
};

TheoperatorContext.prototype.Mod = function() {
    return this.getToken(CPP14Parser.Mod, 0);
};

TheoperatorContext.prototype.Caret = function() {
    return this.getToken(CPP14Parser.Caret, 0);
};

TheoperatorContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

TheoperatorContext.prototype.Or = function() {
    return this.getToken(CPP14Parser.Or, 0);
};

TheoperatorContext.prototype.Tilde = function() {
    return this.getToken(CPP14Parser.Tilde, 0);
};

TheoperatorContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

TheoperatorContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

TheoperatorContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

TheoperatorContext.prototype.PlusAssign = function() {
    return this.getToken(CPP14Parser.PlusAssign, 0);
};

TheoperatorContext.prototype.MinusAssign = function() {
    return this.getToken(CPP14Parser.MinusAssign, 0);
};

TheoperatorContext.prototype.StarAssign = function() {
    return this.getToken(CPP14Parser.StarAssign, 0);
};

TheoperatorContext.prototype.DivAssign = function() {
    return this.getToken(CPP14Parser.DivAssign, 0);
};

TheoperatorContext.prototype.ModAssign = function() {
    return this.getToken(CPP14Parser.ModAssign, 0);
};

TheoperatorContext.prototype.XorAssign = function() {
    return this.getToken(CPP14Parser.XorAssign, 0);
};

TheoperatorContext.prototype.AndAssign = function() {
    return this.getToken(CPP14Parser.AndAssign, 0);
};

TheoperatorContext.prototype.OrAssign = function() {
    return this.getToken(CPP14Parser.OrAssign, 0);
};

TheoperatorContext.prototype.LeftShift = function() {
    return this.getToken(CPP14Parser.LeftShift, 0);
};

TheoperatorContext.prototype.RightShift = function() {
    return this.getToken(CPP14Parser.RightShift, 0);
};

TheoperatorContext.prototype.RightShiftAssign = function() {
    return this.getToken(CPP14Parser.RightShiftAssign, 0);
};

TheoperatorContext.prototype.LeftShiftAssign = function() {
    return this.getToken(CPP14Parser.LeftShiftAssign, 0);
};

TheoperatorContext.prototype.Equal = function() {
    return this.getToken(CPP14Parser.Equal, 0);
};

TheoperatorContext.prototype.NotEqual = function() {
    return this.getToken(CPP14Parser.NotEqual, 0);
};

TheoperatorContext.prototype.LessEqual = function() {
    return this.getToken(CPP14Parser.LessEqual, 0);
};

TheoperatorContext.prototype.GreaterEqual = function() {
    return this.getToken(CPP14Parser.GreaterEqual, 0);
};

TheoperatorContext.prototype.PlusPlus = function() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
};

TheoperatorContext.prototype.MinusMinus = function() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
};

TheoperatorContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

TheoperatorContext.prototype.ArrowStar = function() {
    return this.getToken(CPP14Parser.ArrowStar, 0);
};

TheoperatorContext.prototype.Arrow = function() {
    return this.getToken(CPP14Parser.Arrow, 0);
};

TheoperatorContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

TheoperatorContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

TheoperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterTheoperator(this);
	}
};

TheoperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitTheoperator(this);
	}
};




CPP14Parser.TheoperatorContext = TheoperatorContext;

CPP14Parser.prototype.theoperator = function() {

    var localctx = new TheoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CPP14Parser.RULE_theoperator);
    try {
        this.state = 2446;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,313,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2395;
            this.match(CPP14Parser.New);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2396;
            this.match(CPP14Parser.Delete);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2397;
            this.match(CPP14Parser.New);
            this.state = 2398;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2399;
            this.match(CPP14Parser.RightBracket);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2400;
            this.match(CPP14Parser.Delete);
            this.state = 2401;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2402;
            this.match(CPP14Parser.RightBracket);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2403;
            this.match(CPP14Parser.Plus);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2404;
            this.match(CPP14Parser.Minus);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2405;
            this.match(CPP14Parser.Star);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2406;
            this.match(CPP14Parser.Div);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2407;
            this.match(CPP14Parser.Mod);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2408;
            this.match(CPP14Parser.Caret);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2409;
            this.match(CPP14Parser.And);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2410;
            this.match(CPP14Parser.Or);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2411;
            this.match(CPP14Parser.Tilde);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2412;
            this.match(CPP14Parser.T__0);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2413;
            this.match(CPP14Parser.T__1);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2414;
            this.match(CPP14Parser.Assign);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2415;
            this.match(CPP14Parser.Less);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2416;
            this.match(CPP14Parser.Greater);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2417;
            this.match(CPP14Parser.PlusAssign);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 2418;
            this.match(CPP14Parser.MinusAssign);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 2419;
            this.match(CPP14Parser.StarAssign);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 2420;
            this.match(CPP14Parser.DivAssign);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 2421;
            this.match(CPP14Parser.ModAssign);
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 2422;
            this.match(CPP14Parser.XorAssign);
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 2423;
            this.match(CPP14Parser.AndAssign);
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 2424;
            this.match(CPP14Parser.OrAssign);
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 2425;
            this.match(CPP14Parser.LeftShift);
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 2426;
            this.match(CPP14Parser.RightShift);
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 2427;
            this.match(CPP14Parser.RightShiftAssign);
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 2428;
            this.match(CPP14Parser.LeftShiftAssign);
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 2429;
            this.match(CPP14Parser.Equal);
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 2430;
            this.match(CPP14Parser.NotEqual);
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 2431;
            this.match(CPP14Parser.LessEqual);
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 2432;
            this.match(CPP14Parser.GreaterEqual);
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 2433;
            this.match(CPP14Parser.T__2);
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 2434;
            this.match(CPP14Parser.T__3);
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 2435;
            this.match(CPP14Parser.T__4);
            break;

        case 38:
            this.enterOuterAlt(localctx, 38);
            this.state = 2436;
            this.match(CPP14Parser.T__5);
            break;

        case 39:
            this.enterOuterAlt(localctx, 39);
            this.state = 2437;
            this.match(CPP14Parser.PlusPlus);
            break;

        case 40:
            this.enterOuterAlt(localctx, 40);
            this.state = 2438;
            this.match(CPP14Parser.MinusMinus);
            break;

        case 41:
            this.enterOuterAlt(localctx, 41);
            this.state = 2439;
            this.match(CPP14Parser.Comma);
            break;

        case 42:
            this.enterOuterAlt(localctx, 42);
            this.state = 2440;
            this.match(CPP14Parser.ArrowStar);
            break;

        case 43:
            this.enterOuterAlt(localctx, 43);
            this.state = 2441;
            this.match(CPP14Parser.Arrow);
            break;

        case 44:
            this.enterOuterAlt(localctx, 44);
            this.state = 2442;
            this.match(CPP14Parser.LeftParen);
            this.state = 2443;
            this.match(CPP14Parser.RightParen);
            break;

        case 45:
            this.enterOuterAlt(localctx, 45);
            this.state = 2444;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2445;
            this.match(CPP14Parser.RightBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.Integerliteral = function() {
    return this.getToken(CPP14Parser.Integerliteral, 0);
};

LiteralContext.prototype.Characterliteral = function() {
    return this.getToken(CPP14Parser.Characterliteral, 0);
};

LiteralContext.prototype.Floatingliteral = function() {
    return this.getToken(CPP14Parser.Floatingliteral, 0);
};

LiteralContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

LiteralContext.prototype.booleanliteral = function() {
    return this.getTypedRuleContext(BooleanliteralContext,0);
};

LiteralContext.prototype.pointerliteral = function() {
    return this.getTypedRuleContext(PointerliteralContext,0);
};

LiteralContext.prototype.userdefinedliteral = function() {
    return this.getTypedRuleContext(UserdefinedliteralContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitLiteral(this);
	}
};




CPP14Parser.LiteralContext = LiteralContext;

CPP14Parser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CPP14Parser.RULE_literal);
    try {
        this.state = 2455;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Integerliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 2448;
            this.match(CPP14Parser.Integerliteral);
            break;
        case CPP14Parser.Characterliteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 2449;
            this.match(CPP14Parser.Characterliteral);
            break;
        case CPP14Parser.Floatingliteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 2450;
            this.match(CPP14Parser.Floatingliteral);
            break;
        case CPP14Parser.Stringliteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 2451;
            this.match(CPP14Parser.Stringliteral);
            break;
        case CPP14Parser.False:
        case CPP14Parser.True:
            this.enterOuterAlt(localctx, 5);
            this.state = 2452;
            this.booleanliteral();
            break;
        case CPP14Parser.Nullptr:
            this.enterOuterAlt(localctx, 6);
            this.state = 2453;
            this.pointerliteral();
            break;
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 7);
            this.state = 2454;
            this.userdefinedliteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_booleanliteral;
    return this;
}

BooleanliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanliteralContext.prototype.constructor = BooleanliteralContext;

BooleanliteralContext.prototype.False = function() {
    return this.getToken(CPP14Parser.False, 0);
};

BooleanliteralContext.prototype.True = function() {
    return this.getToken(CPP14Parser.True, 0);
};

BooleanliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterBooleanliteral(this);
	}
};

BooleanliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitBooleanliteral(this);
	}
};




CPP14Parser.BooleanliteralContext = BooleanliteralContext;

CPP14Parser.prototype.booleanliteral = function() {

    var localctx = new BooleanliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CPP14Parser.RULE_booleanliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2457;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.False || _la===CPP14Parser.True)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PointerliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pointerliteral;
    return this;
}

PointerliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointerliteralContext.prototype.constructor = PointerliteralContext;

PointerliteralContext.prototype.Nullptr = function() {
    return this.getToken(CPP14Parser.Nullptr, 0);
};

PointerliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterPointerliteral(this);
	}
};

PointerliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitPointerliteral(this);
	}
};




CPP14Parser.PointerliteralContext = PointerliteralContext;

CPP14Parser.prototype.pointerliteral = function() {

    var localctx = new PointerliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, CPP14Parser.RULE_pointerliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2459;
        this.match(CPP14Parser.Nullptr);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserdefinedliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_userdefinedliteral;
    return this;
}

UserdefinedliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserdefinedliteralContext.prototype.constructor = UserdefinedliteralContext;

UserdefinedliteralContext.prototype.Userdefinedintegerliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedintegerliteral, 0);
};

UserdefinedliteralContext.prototype.Userdefinedfloatingliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedfloatingliteral, 0);
};

UserdefinedliteralContext.prototype.Userdefinedstringliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedstringliteral, 0);
};

UserdefinedliteralContext.prototype.Userdefinedcharacterliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedcharacterliteral, 0);
};

UserdefinedliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.enterUserdefinedliteral(this);
	}
};

UserdefinedliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CPP14Listener ) {
        listener.exitUserdefinedliteral(this);
	}
};




CPP14Parser.UserdefinedliteralContext = UserdefinedliteralContext;

CPP14Parser.prototype.userdefinedliteral = function() {

    var localctx = new UserdefinedliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, CPP14Parser.RULE_userdefinedliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2461;
        _la = this._input.LA(1);
        if(!(((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (CPP14Parser.Userdefinedintegerliteral - 143)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 143)) | (1 << (CPP14Parser.Userdefinedstringliteral - 143)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 143)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CPP14Parser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 5:
			return this.nestednamespecifier_sempred(localctx, predIndex);
	case 10:
			return this.capturelist_sempred(localctx, predIndex);
	case 15:
			return this.postfixexpression_sempred(localctx, predIndex);
	case 26:
			return this.noptrnewdeclarator_sempred(localctx, predIndex);
	case 31:
			return this.pmexpression_sempred(localctx, predIndex);
	case 32:
			return this.multiplicativeexpression_sempred(localctx, predIndex);
	case 33:
			return this.additiveexpression_sempred(localctx, predIndex);
	case 34:
			return this.shiftexpression_sempred(localctx, predIndex);
	case 36:
			return this.relationalexpression_sempred(localctx, predIndex);
	case 37:
			return this.equalityexpression_sempred(localctx, predIndex);
	case 38:
			return this.andexpression_sempred(localctx, predIndex);
	case 39:
			return this.exclusiveorexpression_sempred(localctx, predIndex);
	case 40:
			return this.inclusiveorexpression_sempred(localctx, predIndex);
	case 41:
			return this.logicalandexpression_sempred(localctx, predIndex);
	case 42:
			return this.logicalorexpression_sempred(localctx, predIndex);
	case 46:
			return this.expression_sempred(localctx, predIndex);
	case 52:
			return this.statementseq_sempred(localctx, predIndex);
	case 61:
			return this.declarationseq_sempred(localctx, predIndex);
	case 88:
			return this.enumeratorlist_sempred(localctx, predIndex);
	case 106:
			return this.attributespecifierseq_sempred(localctx, predIndex);
	case 109:
			return this.attributelist_sempred(localctx, predIndex);
	case 115:
			return this.balancedtokenseq_sempred(localctx, predIndex);
	case 117:
			return this.initdeclaratorlist_sempred(localctx, predIndex);
	case 121:
			return this.noptrdeclarator_sempred(localctx, predIndex);
	case 132:
			return this.noptrabstractdeclarator_sempred(localctx, predIndex);
	case 134:
			return this.noptrabstractpackdeclarator_sempred(localctx, predIndex);
	case 136:
			return this.parameterdeclarationlist_sempred(localctx, predIndex);
	case 143:
			return this.initializerlist_sempred(localctx, predIndex);
	case 153:
			return this.memberdeclaratorlist_sempred(localctx, predIndex);
	case 155:
			return this.virtspecifierseq_sempred(localctx, predIndex);
	case 159:
			return this.basespecifierlist_sempred(localctx, predIndex);
	case 174:
			return this.templateparameterlist_sempred(localctx, predIndex);
	case 180:
			return this.templateargumentlist_sempred(localctx, predIndex);
	case 193:
			return this.typeidlist_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CPP14Parser.prototype.nestednamespecifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.capturelist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.postfixexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 19);
		case 4:
			return this.precpred(this._ctx, 18);
		case 5:
			return this.precpred(this._ctx, 17);
		case 6:
			return this.precpred(this._ctx, 12);
		case 7:
			return this.precpred(this._ctx, 11);
		case 8:
			return this.precpred(this._ctx, 10);
		case 9:
			return this.precpred(this._ctx, 9);
		case 10:
			return this.precpred(this._ctx, 8);
		case 11:
			return this.precpred(this._ctx, 7);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrnewdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.pmexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 13:
			return this.precpred(this._ctx, 2);
		case 14:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.multiplicativeexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 15:
			return this.precpred(this._ctx, 3);
		case 16:
			return this.precpred(this._ctx, 2);
		case 17:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.additiveexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 18:
			return this.precpred(this._ctx, 2);
		case 19:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.shiftexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 20:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.relationalexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 21:
			return this.precpred(this._ctx, 4);
		case 22:
			return this.precpred(this._ctx, 3);
		case 23:
			return this.precpred(this._ctx, 2);
		case 24:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.equalityexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 25:
			return this.precpred(this._ctx, 2);
		case 26:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.andexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 27:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.exclusiveorexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 28:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.inclusiveorexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.logicalandexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 30:
			return this.precpred(this._ctx, 2);
		case 31:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.logicalorexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 32:
			return this.precpred(this._ctx, 2);
		case 33:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.statementseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.declarationseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 36:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.enumeratorlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.attributespecifierseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 38:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.attributelist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 39:
			return this.precpred(this._ctx, 3);
		case 40:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.balancedtokenseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 41:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.initdeclaratorlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 42:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 43:
			return this.precpred(this._ctx, 3);
		case 44:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrabstractdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 45:
			return this.precpred(this._ctx, 5);
		case 46:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrabstractpackdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.precpred(this._ctx, 3);
		case 48:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.parameterdeclarationlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 49:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.initializerlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 50:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.memberdeclaratorlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 51:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.virtspecifierseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 52:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.basespecifierlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 53:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.templateparameterlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 54:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.templateargumentlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 55:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.typeidlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 56:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CPP14Parser = CPP14Parser;
