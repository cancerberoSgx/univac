// @ts-nocheck
// Generated from Erlang.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ErlangListener = require('./ErlangListener').ErlangListener;
var grammarFileName = "Erlang.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003J\u03ea\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0003\u0002\u0006\u0002\u00ce\n\u0002\r\u0002",
    "\u000e\u0002\u00cf\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u00d7\n\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00f7\n\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u0101\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0005\f\u0114\n\f\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u011e\n\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0131\n",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0007\u0011\u013a\n\u0011\f\u0011\u000e\u0011\u013d",
    "\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0142\n",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u0147\n\u0013",
    "\f\u0013\u000e\u0013\u014a\u000b\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u0155\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0007\u0015\u015a\n\u0015\f\u0015\u000e\u0015\u015d\u000b\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0162\n\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0169\n",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u016e\n\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0007\u0019\u0177\n\u0019\f\u0019\u000e\u0019\u017a\u000b",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0007\u001a\u0183\n\u001a\f\u001a\u000e\u001a\u0186",
    "\u000b\u001a\u0003\u001b\u0005\u001b\u0189\n\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0005\u001c\u01d0\n\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u01d8\n",
    "\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u01dc\n\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0007\u001f\u01e5\n\u001f\f\u001f\u000e\u001f\u01e8\u000b\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005",
    "!\u01fe\n!\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u0219\n$\u0003",
    "%\u0003%\u0003%\u0007%\u021e\n%\f%\u000e%\u0221\u000b%\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003(\u0003(\u0005(\u022c\n",
    "(\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0005*\u0234\n*\u0003+\u0003",
    "+\u0003+\u0007+\u0239\n+\f+\u000e+\u023c\u000b+\u0003,\u0003,\u0003",
    ",\u0007,\u0241\n,\f,\u000e,\u0244\u000b,\u0003-\u0003-\u0003-\u0007",
    "-\u0249\n-\f-\u000e-\u024c\u000b-\u0003.\u0003.\u0003.\u0003.\u0005",
    ".\u0252\n.\u0003/\u0003/\u0003/\u0003/\u0007/\u0258\n/\f/\u000e/\u025b",
    "\u000b/\u00030\u00030\u00030\u00030\u00070\u0261\n0\f0\u000e0\u0264",
    "\u000b0\u00031\u00031\u00031\u00031\u00071\u026a\n1\f1\u000e1\u026d",
    "\u000b1\u00032\u00052\u0270\n2\u00032\u00032\u00033\u00033\u00033\u0005",
    "3\u0277\n3\u00034\u00034\u00034\u00054\u027c\n4\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00055\u0292\n5\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00056\u029a\n6\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u02a5\n7\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00058\u02ad\n8\u00039\u00039\u00039\u0007",
    "9\u02b2\n9\f9\u000e9\u02b5\u000b9\u0003:\u0003:\u0003:\u0003:\u0003",
    ";\u0005;\u02bc\n;\u0003;\u0003;\u0003<\u0003<\u0005<\u02c2\n<\u0003",
    "=\u0003=\u0005=\u02c6\n=\u0003>\u0003>\u0003>\u0007>\u02cb\n>\f>\u000e",
    ">\u02ce\u000b>\u0003?\u0003?\u0003?\u0005?\u02d3\n?\u0003@\u0003@\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003C\u0003C\u0003C\u0007C\u02e6\nC\fC\u000eC\u02e9\u000b",
    "C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005",
    "D\u02f4\nD\u0003E\u0003E\u0005E\u02f8\nE\u0003E\u0003E\u0003F\u0003",
    "F\u0005F\u02fe\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u0305\n",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u030d\nF\u0007F\u030f",
    "\nF\fF\u000eF\u0312\u000bF\u0003G\u0003G\u0005G\u0316\nG\u0003G\u0003",
    "G\u0003H\u0003H\u0003H\u0007H\u031d\nH\fH\u000eH\u0320\u000bH\u0003",
    "I\u0003I\u0005I\u0324\nI\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003",
    "K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0007L\u0333\nL\fL\u000e",
    "L\u0336\u000bL\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003O\u0003O\u0003O\u0007O\u0344\nO\fO\u000eO\u0347\u000b",
    "O\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0005Q\u035e\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005",
    "R\u0370\nR\u0003S\u0003S\u0005S\u0374\nS\u0003T\u0003T\u0005T\u0378",
    "\nT\u0003U\u0003U\u0003U\u0007U\u037d\nU\fU\u000eU\u0380\u000bU\u0003",
    "V\u0003V\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0005W\u038a\nW\u0003",
    "W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0005X\u039c\nX\u0003Y\u0003Y\u0003",
    "Y\u0007Y\u03a1\nY\fY\u000eY\u03a4\u000bY\u0003Z\u0003Z\u0003Z\u0005",
    "Z\u03a9\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0005[\u03b1\n",
    "[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0007\\\u03b8\n\\\f\\\u000e",
    "\\\u03bb\u000b\\\u0003]\u0003]\u0003]\u0007]\u03c0\n]\f]\u000e]\u03c3",
    "\u000b]\u0003^\u0003^\u0003^\u0003^\u0003^\u0006^\u03ca\n^\r^\u000e",
    "^\u03cb\u0005^\u03ce\n^\u0003_\u0003_\u0003`\u0003`\u0003a\u0003a\u0003",
    "b\u0003b\u0003c\u0003c\u0003d\u0003d\u0003d\u0007d\u03dd\nd\fd\u000e",
    "d\u03e0\u000bd\u0003e\u0003e\u0003e\u0003e\u0003e\u0003f\u0003f\u0003",
    "f\u0003f\u0002\u000502\u008ag\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be",
    "\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u0002\b\u0003\u0002\u001b\u001c",
    "\u0004\u0002\u0004\u0004*,\u0005\u0002\b\b\u0019\u0019-0\u0005\u0002",
    "\u0004\u0004**16\u0003\u000278\u0003\u00029@\u0002\u03fe\u0002\u00cd",
    "\u0003\u0002\u0002\u0002\u0004\u00d6\u0003\u0002\u0002\u0002\u0006\u00da",
    "\u0003\u0002\u0002\u0002\b\u00dc\u0003\u0002\u0002\u0002\n\u00de\u0003",
    "\u0002\u0002\u0002\f\u00e0\u0003\u0002\u0002\u0002\u000e\u00e2\u0003",
    "\u0002\u0002\u0002\u0010\u00e4\u0003\u0002\u0002\u0002\u0012\u00f6\u0003",
    "\u0002\u0002\u0002\u0014\u0100\u0003\u0002\u0002\u0002\u0016\u0113\u0003",
    "\u0002\u0002\u0002\u0018\u011d\u0003\u0002\u0002\u0002\u001a\u011f\u0003",
    "\u0002\u0002\u0002\u001c\u0130\u0003\u0002\u0002\u0002\u001e\u0132\u0003",
    "\u0002\u0002\u0002 \u0136\u0003\u0002\u0002\u0002\"\u013e\u0003\u0002",
    "\u0002\u0002$\u0143\u0003\u0002\u0002\u0002&\u0154\u0003\u0002\u0002",
    "\u0002(\u0156\u0003\u0002\u0002\u0002*\u0161\u0003\u0002\u0002\u0002",
    ",\u0165\u0003\u0002\u0002\u0002.\u016a\u0003\u0002\u0002\u00020\u016f",
    "\u0003\u0002\u0002\u00022\u017b\u0003\u0002\u0002\u00024\u0188\u0003",
    "\u0002\u0002\u00026\u01cf\u0003\u0002\u0002\u00028\u01d7\u0003\u0002",
    "\u0002\u0002:\u01d9\u0003\u0002\u0002\u0002<\u01e1\u0003\u0002\u0002",
    "\u0002>\u01e9\u0003\u0002\u0002\u0002@\u01fd\u0003\u0002\u0002\u0002",
    "B\u01ff\u0003\u0002\u0002\u0002D\u0203\u0003\u0002\u0002\u0002F\u0218",
    "\u0003\u0002\u0002\u0002H\u021a\u0003\u0002\u0002\u0002J\u0222\u0003",
    "\u0002\u0002\u0002L\u0227\u0003\u0002\u0002\u0002N\u022b\u0003\u0002",
    "\u0002\u0002P\u022d\u0003\u0002\u0002\u0002R\u0233\u0003\u0002\u0002",
    "\u0002T\u0235\u0003\u0002\u0002\u0002V\u023d\u0003\u0002\u0002\u0002",
    "X\u0245\u0003\u0002\u0002\u0002Z\u024d\u0003\u0002\u0002\u0002\\\u0253",
    "\u0003\u0002\u0002\u0002^\u025c\u0003\u0002\u0002\u0002`\u0265\u0003",
    "\u0002\u0002\u0002b\u026f\u0003\u0002\u0002\u0002d\u0276\u0003\u0002",
    "\u0002\u0002f\u0278\u0003\u0002\u0002\u0002h\u0291\u0003\u0002\u0002",
    "\u0002j\u0299\u0003\u0002\u0002\u0002l\u02a4\u0003\u0002\u0002\u0002",
    "n\u02ac\u0003\u0002\u0002\u0002p\u02ae\u0003\u0002\u0002\u0002r\u02b6",
    "\u0003\u0002\u0002\u0002t\u02bb\u0003\u0002\u0002\u0002v\u02c1\u0003",
    "\u0002\u0002\u0002x\u02c5\u0003\u0002\u0002\u0002z\u02c7\u0003\u0002",
    "\u0002\u0002|\u02cf\u0003\u0002\u0002\u0002~\u02d4\u0003\u0002\u0002",
    "\u0002\u0080\u02d6\u0003\u0002\u0002\u0002\u0082\u02dc\u0003\u0002\u0002",
    "\u0002\u0084\u02e2\u0003\u0002\u0002\u0002\u0086\u02f3\u0003\u0002\u0002",
    "\u0002\u0088\u02f5\u0003\u0002\u0002\u0002\u008a\u02fb\u0003\u0002\u0002",
    "\u0002\u008c\u0313\u0003\u0002\u0002\u0002\u008e\u0319\u0003\u0002\u0002",
    "\u0002\u0090\u0323\u0003\u0002\u0002\u0002\u0092\u0328\u0003\u0002\u0002",
    "\u0002\u0094\u032b\u0003\u0002\u0002\u0002\u0096\u032f\u0003\u0002\u0002",
    "\u0002\u0098\u0337\u0003\u0002\u0002\u0002\u009a\u033a\u0003\u0002\u0002",
    "\u0002\u009c\u0340\u0003\u0002\u0002\u0002\u009e\u0348\u0003\u0002\u0002",
    "\u0002\u00a0\u035d\u0003\u0002\u0002\u0002\u00a2\u036f\u0003\u0002\u0002",
    "\u0002\u00a4\u0373\u0003\u0002\u0002\u0002\u00a6\u0377\u0003\u0002\u0002",
    "\u0002\u00a8\u0379\u0003\u0002\u0002\u0002\u00aa\u0381\u0003\u0002\u0002",
    "\u0002\u00ac\u0385\u0003\u0002\u0002\u0002\u00ae\u039b\u0003\u0002\u0002",
    "\u0002\u00b0\u039d\u0003\u0002\u0002\u0002\u00b2\u03a8\u0003\u0002\u0002",
    "\u0002\u00b4\u03ae\u0003\u0002\u0002\u0002\u00b6\u03b4\u0003\u0002\u0002",
    "\u0002\u00b8\u03bc\u0003\u0002\u0002\u0002\u00ba\u03cd\u0003\u0002\u0002",
    "\u0002\u00bc\u03cf\u0003\u0002\u0002\u0002\u00be\u03d1\u0003\u0002\u0002",
    "\u0002\u00c0\u03d3\u0003\u0002\u0002\u0002\u00c2\u03d5\u0003\u0002\u0002",
    "\u0002\u00c4\u03d7\u0003\u0002\u0002\u0002\u00c6\u03d9\u0003\u0002\u0002",
    "\u0002\u00c8\u03e1\u0003\u0002\u0002\u0002\u00ca\u03e6\u0003\u0002\u0002",
    "\u0002\u00cc\u00ce\u0005\u0004\u0003\u0002\u00cd\u00cc\u0003\u0002\u0002",
    "\u0002\u00ce\u00cf\u0003\u0002\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002",
    "\u0002\u00cf\u00d0\u0003\u0002\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002",
    "\u0002\u00d1\u00d2\u0007\u0002\u0002\u0003\u00d2\u0003\u0003\u0002\u0002",
    "\u0002\u00d3\u00d7\u0005\u0012\n\u0002\u00d4\u00d7\u0005H%\u0002\u00d5",
    "\u00d7\u0005\u00c6d\u0002\u00d6\u00d3\u0003\u0002\u0002\u0002\u00d6",
    "\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d5\u0003\u0002\u0002\u0002\u00d7",
    "\u00d8\u0003\u0002\u0002\u0002\u00d8\u00d9\u0007\u0003\u0002\u0002\u00d9",
    "\u0005\u0003\u0002\u0002\u0002\u00da\u00db\u0007B\u0002\u0002\u00db",
    "\u0007\u0003\u0002\u0002\u0002\u00dc\u00dd\u0007C\u0002\u0002\u00dd",
    "\t\u0003\u0002\u0002\u0002\u00de\u00df\u0007D\u0002\u0002\u00df\u000b",
    "\u0003\u0002\u0002\u0002\u00e0\u00e1\u0007E\u0002\u0002\u00e1\r\u0003",
    "\u0002\u0002\u0002\u00e2\u00e3\u0007F\u0002\u0002\u00e3\u000f\u0003",
    "\u0002\u0002\u0002\u00e4\u00e5\u0007G\u0002\u0002\u00e5\u0011\u0003",
    "\u0002\u0002\u0002\u00e6\u00e7\u0007\u0004\u0002\u0002\u00e7\u00e8\u0005",
    "\u0006\u0004\u0002\u00e8\u00e9\u0005F$\u0002\u00e9\u00f7\u0003\u0002",
    "\u0002\u0002\u00ea\u00eb\u0007\u0004\u0002\u0002\u00eb\u00ec\u0005\u0006",
    "\u0004\u0002\u00ec\u00ed\u0005\u0018\r\u0002\u00ed\u00f7\u0003\u0002",
    "\u0002\u0002\u00ee\u00ef\u0007\u0004\u0002\u0002\u00ef\u00f0\u0005\u0006",
    "\u0004\u0002\u00f0\u00f1\u0007\u0005\u0002\u0002\u00f1\u00f2\u0005\u0018",
    "\r\u0002\u00f2\u00f3\u0007\u0006\u0002\u0002\u00f3\u00f7\u0003\u0002",
    "\u0002\u0002\u00f4\u00f5\u0007H\u0002\u0002\u00f5\u00f7\u0005\u0014",
    "\u000b\u0002\u00f6\u00e6\u0003\u0002\u0002\u0002\u00f6\u00ea\u0003\u0002",
    "\u0002\u0002\u00f6\u00ee\u0003\u0002\u0002\u0002\u00f6\u00f4\u0003\u0002",
    "\u0002\u0002\u00f7\u0013\u0003\u0002\u0002\u0002\u00f8\u00f9\u0005\u0016",
    "\f\u0002\u00f9\u00fa\u0005 \u0011\u0002\u00fa\u0101\u0003\u0002\u0002",
    "\u0002\u00fb\u00fc\u0007\u0005\u0002\u0002\u00fc\u00fd\u0005\u0016\f",
    "\u0002\u00fd\u00fe\u0005 \u0011\u0002\u00fe\u00ff\u0007\u0006\u0002",
    "\u0002\u00ff\u0101\u0003\u0002\u0002\u0002\u0100\u00f8\u0003\u0002\u0002",
    "\u0002\u0100\u00fb\u0003\u0002\u0002\u0002\u0101\u0015\u0003\u0002\u0002",
    "\u0002\u0102\u0114\u0005\u0006\u0004\u0002\u0103\u0104\u0005\u0006\u0004",
    "\u0002\u0104\u0105\u0007\u0007\u0002\u0002\u0105\u0106\u0005\u0006\u0004",
    "\u0002\u0106\u0114\u0003\u0002\u0002\u0002\u0107\u0108\u0005\u0006\u0004",
    "\u0002\u0108\u0109\u0007\b\u0002\u0002\u0109\u010a\u0005\f\u0007\u0002",
    "\u010a\u010b\u0007\t\u0002\u0002\u010b\u0114\u0003\u0002\u0002\u0002",
    "\u010c\u010d\u0005\u0006\u0004\u0002\u010d\u010e\u0007\u0007\u0002\u0002",
    "\u010e\u010f\u0005\u0006\u0004\u0002\u010f\u0110\u0007\b\u0002\u0002",
    "\u0110\u0111\u0005\f\u0007\u0002\u0111\u0112\u0007\t\u0002\u0002\u0112",
    "\u0114\u0003\u0002\u0002\u0002\u0113\u0102\u0003\u0002\u0002\u0002\u0113",
    "\u0103\u0003\u0002\u0002\u0002\u0113\u0107\u0003\u0002\u0002\u0002\u0113",
    "\u010c\u0003\u0002\u0002\u0002\u0114\u0017\u0003\u0002\u0002\u0002\u0115",
    "\u0116\u0005R*\u0002\u0116\u0117\u0007\n\u0002\u0002\u0117\u0118\u0005",
    "\u001a\u000e\u0002\u0118\u011e\u0003\u0002\u0002\u0002\u0119\u011a\u0005",
    "R*\u0002\u011a\u011b\u0007\t\u0002\u0002\u011b\u011c\u0005*\u0016\u0002",
    "\u011c\u011e\u0003\u0002\u0002\u0002\u011d\u0115\u0003\u0002\u0002\u0002",
    "\u011d\u0119\u0003\u0002\u0002\u0002\u011e\u0019\u0003\u0002\u0002\u0002",
    "\u011f\u0120\u0007\u000b\u0002\u0002\u0120\u0121\u0005\u001c\u000f\u0002",
    "\u0121\u0122\u0007\f\u0002\u0002\u0122\u001b\u0003\u0002\u0002\u0002",
    "\u0123\u0131\u0005\u001e\u0010\u0002\u0124\u0125\u0005\u001e\u0010\u0002",
    "\u0125\u0126\u0007\n\u0002\u0002\u0126\u0127\u0005\u001c\u000f\u0002",
    "\u0127\u0131\u0003\u0002\u0002\u0002\u0128\u0129\u0005R*\u0002\u0129",
    "\u012a\u0007\n\u0002\u0002\u012a\u012b\u0005\u001c\u000f\u0002\u012b",
    "\u0131\u0003\u0002\u0002\u0002\u012c\u012d\u0005\u001e\u0010\u0002\u012d",
    "\u012e\u0007\n\u0002\u0002\u012e\u012f\u0005\u00b6\\\u0002\u012f\u0131",
    "\u0003\u0002\u0002\u0002\u0130\u0123\u0003\u0002\u0002\u0002\u0130\u0124",
    "\u0003\u0002\u0002\u0002\u0130\u0128\u0003\u0002\u0002\u0002\u0130\u012c",
    "\u0003\u0002\u0002\u0002\u0131\u001d\u0003\u0002\u0002\u0002\u0132\u0133",
    "\u0005R*\u0002\u0133\u0134\u0007\t\u0002\u0002\u0134\u0135\u0005*\u0016",
    "\u0002\u0135\u001f\u0003\u0002\u0002\u0002\u0136\u013b\u0005\"\u0012",
    "\u0002\u0137\u0138\u0007\r\u0002\u0002\u0138\u013a\u0005\"\u0012\u0002",
    "\u0139\u0137\u0003\u0002\u0002\u0002\u013a\u013d\u0003\u0002\u0002\u0002",
    "\u013b\u0139\u0003\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002",
    "\u013c!\u0003\u0002\u0002\u0002\u013d\u013b\u0003\u0002\u0002\u0002",
    "\u013e\u0141\u0005:\u001e\u0002\u013f\u0140\u0007\u000e\u0002\u0002",
    "\u0140\u0142\u0005$\u0013\u0002\u0141\u013f\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u0003\u0002\u0002\u0002\u0142#\u0003\u0002\u0002\u0002",
    "\u0143\u0148\u0005&\u0014\u0002\u0144\u0145\u0007\n\u0002\u0002\u0145",
    "\u0147\u0005&\u0014\u0002\u0146\u0144\u0003\u0002\u0002\u0002\u0147",
    "\u014a\u0003\u0002\u0002\u0002\u0148\u0146\u0003\u0002\u0002\u0002\u0148",
    "\u0149\u0003\u0002\u0002\u0002\u0149%\u0003\u0002\u0002\u0002\u014a",
    "\u0148\u0003\u0002\u0002\u0002\u014b\u014c\u0005\u0006\u0004\u0002\u014c",
    "\u014d\u0007\u0005\u0002\u0002\u014d\u014e\u0005(\u0015\u0002\u014e",
    "\u014f\u0007\u0006\u0002\u0002\u014f\u0155\u0003\u0002\u0002\u0002\u0150",
    "\u0151\u0005\b\u0005\u0002\u0151\u0152\u0007\t\u0002\u0002\u0152\u0153",
    "\u0005*\u0016\u0002\u0153\u0155\u0003\u0002\u0002\u0002\u0154\u014b",
    "\u0003\u0002\u0002\u0002\u0154\u0150\u0003\u0002\u0002\u0002\u0155\'",
    "\u0003\u0002\u0002\u0002\u0156\u015b\u0005*\u0016\u0002\u0157\u0158",
    "\u0007\n\u0002\u0002\u0158\u015a\u0005*\u0016\u0002\u0159\u0157\u0003",
    "\u0002\u0002\u0002\u015a\u015d\u0003\u0002\u0002\u0002\u015b\u0159\u0003",
    "\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c)\u0003",
    "\u0002\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015e\u015f\u0005",
    "\b\u0005\u0002\u015f\u0160\u0007\t\u0002\u0002\u0160\u0162\u0003\u0002",
    "\u0002\u0002\u0161\u015e\u0003\u0002\u0002\u0002\u0161\u0162\u0003\u0002",
    "\u0002\u0002\u0162\u0163\u0003\u0002\u0002\u0002\u0163\u0164\u0005,",
    "\u0017\u0002\u0164+\u0003\u0002\u0002\u0002\u0165\u0168\u0005.\u0018",
    "\u0002\u0166\u0167\u0007\u000f\u0002\u0002\u0167\u0169\u0005,\u0017",
    "\u0002\u0168\u0166\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002\u0002",
    "\u0002\u0169-\u0003\u0002\u0002\u0002\u016a\u016d\u00050\u0019\u0002",
    "\u016b\u016c\u0007\u0010\u0002\u0002\u016c\u016e\u00050\u0019\u0002",
    "\u016d\u016b\u0003\u0002\u0002\u0002\u016d\u016e\u0003\u0002\u0002\u0002",
    "\u016e/\u0003\u0002\u0002\u0002\u016f\u0170\b\u0019\u0001\u0002\u0170",
    "\u0171\u00052\u001a\u0002\u0171\u0178\u0003\u0002\u0002\u0002\u0172",
    "\u0173\f\u0004\u0002\u0002\u0173\u0174\u0005\u00c0a\u0002\u0174\u0175",
    "\u00052\u001a\u0002\u0175\u0177\u0003\u0002\u0002\u0002\u0176\u0172",
    "\u0003\u0002\u0002\u0002\u0177\u017a\u0003\u0002\u0002\u0002\u0178\u0176",
    "\u0003\u0002\u0002\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u01791",
    "\u0003\u0002\u0002\u0002\u017a\u0178\u0003\u0002\u0002\u0002\u017b\u017c",
    "\b\u001a\u0001\u0002\u017c\u017d\u00054\u001b\u0002\u017d\u0184\u0003",
    "\u0002\u0002\u0002\u017e\u017f\f\u0004\u0002\u0002\u017f\u0180\u0005",
    "\u00be`\u0002\u0180\u0181\u00054\u001b\u0002\u0181\u0183\u0003\u0002",
    "\u0002\u0002\u0182\u017e\u0003\u0002\u0002\u0002\u0183\u0186\u0003\u0002",
    "\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002",
    "\u0002\u0002\u01853\u0003\u0002\u0002\u0002\u0186\u0184\u0003\u0002",
    "\u0002\u0002\u0187\u0189\u0005\u00bc_\u0002\u0188\u0187\u0003\u0002",
    "\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002",
    "\u0002\u0002\u018a\u018b\u00056\u001c\u0002\u018b5\u0003\u0002\u0002",
    "\u0002\u018c\u018d\u0007\u0005\u0002\u0002\u018d\u018e\u0005*\u0016",
    "\u0002\u018e\u018f\u0007\u0006\u0002\u0002\u018f\u01d0\u0003\u0002\u0002",
    "\u0002\u0190\u01d0\u0005\b\u0005\u0002\u0191\u01d0\u0005\u0006\u0004",
    "\u0002\u0192\u0193\u0005\u0006\u0004\u0002\u0193\u0194\u0007\u0005\u0002",
    "\u0002\u0194\u0195\u0007\u0006\u0002\u0002\u0195\u01d0\u0003\u0002\u0002",
    "\u0002\u0196\u0197\u0005\u0006\u0004\u0002\u0197\u0198\u0007\u0005\u0002",
    "\u0002\u0198\u0199\u0005(\u0015\u0002\u0199\u019a\u0007\u0006\u0002",
    "\u0002\u019a\u01d0\u0003\u0002\u0002\u0002\u019b\u019c\u0005\u0006\u0004",
    "\u0002\u019c\u019d\u0007\u0007\u0002\u0002\u019d\u019e\u0005\u0006\u0004",
    "\u0002\u019e\u019f\u0007\u0005\u0002\u0002\u019f\u01a0\u0007\u0006\u0002",
    "\u0002\u01a0\u01d0\u0003\u0002\u0002\u0002\u01a1\u01a2\u0005\u0006\u0004",
    "\u0002\u01a2\u01a3\u0007\u0007\u0002\u0002\u01a3\u01a4\u0005\u0006\u0004",
    "\u0002\u01a4\u01a5\u0007\u0005\u0002\u0002\u01a5\u01a6\u0005(\u0015",
    "\u0002\u01a6\u01a7\u0007\u0006\u0002\u0002\u01a7\u01d0\u0003\u0002\u0002",
    "\u0002\u01a8\u01a9\u0007\u0011\u0002\u0002\u01a9\u01d0\u0007\u0012\u0002",
    "\u0002\u01aa\u01ab\u0007\u0011\u0002\u0002\u01ab\u01ac\u0005*\u0016",
    "\u0002\u01ac\u01ad\u0007\u0012\u0002\u0002\u01ad\u01d0\u0003\u0002\u0002",
    "\u0002\u01ae\u01af\u0007\u0011\u0002\u0002\u01af\u01b0\u0005*\u0016",
    "\u0002\u01b0\u01b1\u0007\n\u0002\u0002\u01b1\u01b2\u0007\u0013\u0002",
    "\u0002\u01b2\u01b3\u0007\u0012\u0002\u0002\u01b3\u01d0\u0003\u0002\u0002",
    "\u0002\u01b4\u01b5\u0007\u000b\u0002\u0002\u01b5\u01d0\u0007\f\u0002",
    "\u0002\u01b6\u01b7\u0007\u000b\u0002\u0002\u01b7\u01b8\u0005(\u0015",
    "\u0002\u01b8\u01b9\u0007\f\u0002\u0002\u01b9\u01d0\u0003\u0002\u0002",
    "\u0002\u01ba\u01bb\u0007\u0014\u0002\u0002\u01bb\u01bc\u0005\u0006\u0004",
    "\u0002\u01bc\u01bd\u0007\u000b\u0002\u0002\u01bd\u01be\u0007\f\u0002",
    "\u0002\u01be\u01d0\u0003\u0002\u0002\u0002\u01bf\u01c0\u0007\u0014\u0002",
    "\u0002\u01c0\u01c1\u0005\u0006\u0004\u0002\u01c1\u01c2\u0007\u000b\u0002",
    "\u0002\u01c2\u01c3\u0005<\u001f\u0002\u01c3\u01c4\u0007\f\u0002\u0002",
    "\u01c4\u01d0\u0003\u0002\u0002\u0002\u01c5\u01d0\u0005@!\u0002\u01c6",
    "\u01d0\u0005\f\u0007\u0002\u01c7\u01c8\u0007\u0015\u0002\u0002\u01c8",
    "\u01c9\u0007\u0005\u0002\u0002\u01c9\u01d0\u0007\u0006\u0002\u0002\u01ca",
    "\u01cb\u0007\u0015\u0002\u0002\u01cb\u01cc\u0007\u0005\u0002\u0002\u01cc",
    "\u01cd\u00058\u001d\u0002\u01cd\u01ce\u0007\u0006\u0002\u0002\u01ce",
    "\u01d0\u0003\u0002\u0002\u0002\u01cf\u018c\u0003\u0002\u0002\u0002\u01cf",
    "\u0190\u0003\u0002\u0002\u0002\u01cf\u0191\u0003\u0002\u0002\u0002\u01cf",
    "\u0192\u0003\u0002\u0002\u0002\u01cf\u0196\u0003\u0002\u0002\u0002\u01cf",
    "\u019b\u0003\u0002\u0002\u0002\u01cf\u01a1\u0003\u0002\u0002\u0002\u01cf",
    "\u01a8\u0003\u0002\u0002\u0002\u01cf\u01aa\u0003\u0002\u0002\u0002\u01cf",
    "\u01ae\u0003\u0002\u0002\u0002\u01cf\u01b4\u0003\u0002\u0002\u0002\u01cf",
    "\u01b6\u0003\u0002\u0002\u0002\u01cf\u01ba\u0003\u0002\u0002\u0002\u01cf",
    "\u01bf\u0003\u0002\u0002\u0002\u01cf\u01c5\u0003\u0002\u0002\u0002\u01cf",
    "\u01c6\u0003\u0002\u0002\u0002\u01cf\u01c7\u0003\u0002\u0002\u0002\u01cf",
    "\u01ca\u0003\u0002\u0002\u0002\u01d07\u0003\u0002\u0002\u0002\u01d1",
    "\u01d2\u0007\u0005\u0002\u0002\u01d2\u01d3\u0007\u0013\u0002\u0002\u01d3",
    "\u01d4\u0007\u0006\u0002\u0002\u01d4\u01d5\u0007\u0016\u0002\u0002\u01d5",
    "\u01d8\u0005*\u0016\u0002\u01d6\u01d8\u0005:\u001e\u0002\u01d7\u01d1",
    "\u0003\u0002\u0002\u0002\u01d7\u01d6\u0003\u0002\u0002\u0002\u01d89",
    "\u0003\u0002\u0002\u0002\u01d9\u01db\u0007\u0005\u0002\u0002\u01da\u01dc",
    "\u0005(\u0015\u0002\u01db\u01da\u0003\u0002\u0002\u0002\u01db\u01dc",
    "\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd\u01de",
    "\u0007\u0006\u0002\u0002\u01de\u01df\u0007\u0016\u0002\u0002\u01df\u01e0",
    "\u0005*\u0016\u0002\u01e0;\u0003\u0002\u0002\u0002\u01e1\u01e6\u0005",
    "> \u0002\u01e2\u01e3\u0007\n\u0002\u0002\u01e3\u01e5\u0005> \u0002\u01e4",
    "\u01e2\u0003\u0002\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6",
    "\u01e4\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7",
    "=\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e9",
    "\u01ea\u0005\u0006\u0004\u0002\u01ea\u01eb\u0007\t\u0002\u0002\u01eb",
    "\u01ec\u0005*\u0016\u0002\u01ec?\u0003\u0002\u0002\u0002\u01ed\u01ee",
    "\u0007\u0017\u0002\u0002\u01ee\u01fe\u0007\u0018\u0002\u0002\u01ef\u01f0",
    "\u0007\u0017\u0002\u0002\u01f0\u01f1\u0005B\"\u0002\u01f1\u01f2\u0007",
    "\u0018\u0002\u0002\u01f2\u01fe\u0003\u0002\u0002\u0002\u01f3\u01f4\u0007",
    "\u0017\u0002\u0002\u01f4\u01f5\u0005D#\u0002\u01f5\u01f6\u0007\u0018",
    "\u0002\u0002\u01f6\u01fe\u0003\u0002\u0002\u0002\u01f7\u01f8\u0007\u0017",
    "\u0002\u0002\u01f8\u01f9\u0005B\"\u0002\u01f9\u01fa\u0007\n\u0002\u0002",
    "\u01fa\u01fb\u0005D#\u0002\u01fb\u01fc\u0007\u0018\u0002\u0002\u01fc",
    "\u01fe\u0003\u0002\u0002\u0002\u01fd\u01ed\u0003\u0002\u0002\u0002\u01fd",
    "\u01ef\u0003\u0002\u0002\u0002\u01fd\u01f3\u0003\u0002\u0002\u0002\u01fd",
    "\u01f7\u0003\u0002\u0002\u0002\u01feA\u0003\u0002\u0002\u0002\u01ff",
    "\u0200\u0005\b\u0005\u0002\u0200\u0201\u0007\u0007\u0002\u0002\u0201",
    "\u0202\u00056\u001c\u0002\u0202C\u0003\u0002\u0002\u0002\u0203\u0204",
    "\u0005\b\u0005\u0002\u0204\u0205\u0007\u0007\u0002\u0002\u0205\u0206",
    "\u0005\b\u0005\u0002\u0206\u0207\u0007\u0019\u0002\u0002\u0207\u0208",
    "\u00056\u001c\u0002\u0208E\u0003\u0002\u0002\u0002\u0209\u0219\u0005",
    "R*\u0002\u020a\u020b\u0007\u0005\u0002\u0002\u020b\u020c\u0005R*\u0002",
    "\u020c\u020d\u0007\u0006\u0002\u0002\u020d\u0219\u0003\u0002\u0002\u0002",
    "\u020e\u020f\u0005R*\u0002\u020f\u0210\u0007\n\u0002\u0002\u0210\u0211",
    "\u0005\u00b6\\\u0002\u0211\u0219\u0003\u0002\u0002\u0002\u0212\u0213",
    "\u0007\u0005\u0002\u0002\u0213\u0214\u0005R*\u0002\u0214\u0215\u0007",
    "\n\u0002\u0002\u0215\u0216\u0005\u00b6\\\u0002\u0216\u0217\u0007\u0006",
    "\u0002\u0002\u0217\u0219\u0003\u0002\u0002\u0002\u0218\u0209\u0003\u0002",
    "\u0002\u0002\u0218\u020a\u0003\u0002\u0002\u0002\u0218\u020e\u0003\u0002",
    "\u0002\u0002\u0218\u0212\u0003\u0002\u0002\u0002\u0219G\u0003\u0002",
    "\u0002\u0002\u021a\u021f\u0005J&\u0002\u021b\u021c\u0007\r\u0002\u0002",
    "\u021c\u021e\u0005J&\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021e",
    "\u0221\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u021f",
    "\u0220\u0003\u0002\u0002\u0002\u0220I\u0003\u0002\u0002\u0002\u0221",
    "\u021f\u0003\u0002\u0002\u0002\u0222\u0223\u0005\u0006\u0004\u0002\u0223",
    "\u0224\u0005L\'\u0002\u0224\u0225\u0005N(\u0002\u0225\u0226\u0005P)",
    "\u0002\u0226K\u0003\u0002\u0002\u0002\u0227\u0228\u0005\u00b4[\u0002",
    "\u0228M\u0003\u0002\u0002\u0002\u0229\u022a\u0007\u000e\u0002\u0002",
    "\u022a\u022c\u0005\u00b8]\u0002\u022b\u0229\u0003\u0002\u0002\u0002",
    "\u022b\u022c\u0003\u0002\u0002\u0002\u022cO\u0003\u0002\u0002\u0002",
    "\u022d\u022e\u0007\u0016\u0002\u0002\u022e\u022f\u0005\u00b6\\\u0002",
    "\u022fQ\u0003\u0002\u0002\u0002\u0230\u0231\u0007\u001a\u0002\u0002",
    "\u0231\u0234\u0005R*\u0002\u0232\u0234\u0005T+\u0002\u0233\u0230\u0003",
    "\u0002\u0002\u0002\u0233\u0232\u0003\u0002\u0002\u0002\u0234S\u0003",
    "\u0002\u0002\u0002\u0235\u023a\u0005V,\u0002\u0236\u0237\t\u0002\u0002",
    "\u0002\u0237\u0239\u0005V,\u0002\u0238\u0236\u0003\u0002\u0002\u0002",
    "\u0239\u023c\u0003\u0002\u0002\u0002\u023a\u0238\u0003\u0002\u0002\u0002",
    "\u023a\u023b\u0003\u0002\u0002\u0002\u023bU\u0003\u0002\u0002\u0002",
    "\u023c\u023a\u0003\u0002\u0002\u0002\u023d\u0242\u0005X-\u0002\u023e",
    "\u023f\u0007\u001d\u0002\u0002\u023f\u0241\u0005X-\u0002\u0240\u023e",
    "\u0003\u0002\u0002\u0002\u0241\u0244\u0003\u0002\u0002\u0002\u0242\u0240",
    "\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002\u0243W",
    "\u0003\u0002\u0002\u0002\u0244\u0242\u0003\u0002\u0002\u0002\u0245\u024a",
    "\u0005Z.\u0002\u0246\u0247\u0007\u001e\u0002\u0002\u0247\u0249\u0005",
    "Z.\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0249\u024c\u0003\u0002",
    "\u0002\u0002\u024a\u0248\u0003\u0002\u0002\u0002\u024a\u024b\u0003\u0002",
    "\u0002\u0002\u024bY\u0003\u0002\u0002\u0002\u024c\u024a\u0003\u0002",
    "\u0002\u0002\u024d\u0251\u0005\\/\u0002\u024e\u024f\u0005\u00c4c\u0002",
    "\u024f\u0250\u0005\\/\u0002\u0250\u0252\u0003\u0002\u0002\u0002\u0251",
    "\u024e\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252",
    "[\u0003\u0002\u0002\u0002\u0253\u0259\u0005^0\u0002\u0254\u0255\u0005",
    "\u00c2b\u0002\u0255\u0256\u0005^0\u0002\u0256\u0258\u0003\u0002\u0002",
    "\u0002\u0257\u0254\u0003\u0002\u0002\u0002\u0258\u025b\u0003\u0002\u0002",
    "\u0002\u0259\u0257\u0003\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002",
    "\u0002\u025a]\u0003\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002",
    "\u0002\u025c\u0262\u0005`1\u0002\u025d\u025e\u0005\u00c0a\u0002\u025e",
    "\u025f\u0005`1\u0002\u025f\u0261\u0003\u0002\u0002\u0002\u0260\u025d",
    "\u0003\u0002\u0002\u0002\u0261\u0264\u0003\u0002\u0002\u0002\u0262\u0260",
    "\u0003\u0002\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263_",
    "\u0003\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0265\u026b",
    "\u0005b2\u0002\u0266\u0267\u0005\u00be`\u0002\u0267\u0268\u0005b2\u0002",
    "\u0268\u026a\u0003\u0002\u0002\u0002\u0269\u0266\u0003\u0002\u0002\u0002",
    "\u026a\u026d\u0003\u0002\u0002\u0002\u026b\u0269\u0003\u0002\u0002\u0002",
    "\u026b\u026c\u0003\u0002\u0002\u0002\u026ca\u0003\u0002\u0002\u0002",
    "\u026d\u026b\u0003\u0002\u0002\u0002\u026e\u0270\u0005\u00bc_\u0002",
    "\u026f\u026e\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002\u0002",
    "\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0272\u0005d3\u0002\u0272",
    "c\u0003\u0002\u0002\u0002\u0273\u0277\u0005\u0092J\u0002\u0274\u0277",
    "\u0005\u008aF\u0002\u0275\u0277\u0005f4\u0002\u0276\u0273\u0003\u0002",
    "\u0002\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0276\u0275\u0003\u0002",
    "\u0002\u0002\u0277e\u0003\u0002\u0002\u0002\u0278\u027b\u0005h5\u0002",
    "\u0279\u027a\u0007\u0007\u0002\u0002\u027a\u027c\u0005h5\u0002\u027b",
    "\u0279\u0003\u0002\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c",
    "g\u0003\u0002\u0002\u0002\u027d\u0292\u0005\b\u0005\u0002\u027e\u0292",
    "\u0005\u00ba^\u0002\u027f\u0292\u0005j6\u0002\u0280\u0292\u0005n8\u0002",
    "\u0281\u0292\u0005\u0080A\u0002\u0282\u0292\u0005\u0082B\u0002\u0283",
    "\u0292\u0005\u0088E\u0002\u0284\u0285\u0007\u0005\u0002\u0002\u0285",
    "\u0286\u0005R*\u0002\u0286\u0287\u0007\u0006\u0002\u0002\u0287\u0292",
    "\u0003\u0002\u0002\u0002\u0288\u0289\u0007\u001f\u0002\u0002\u0289\u028a",
    "\u0005\u00b6\\\u0002\u028a\u028b\u0007 \u0002\u0002\u028b\u0292\u0003",
    "\u0002\u0002\u0002\u028c\u0292\u0005\u0094K\u0002\u028d\u0292\u0005",
    "\u009aN\u0002\u028e\u0292\u0005\u00a0Q\u0002\u028f\u0292\u0005\u00a2",
    "R\u0002\u0290\u0292\u0005\u00acW\u0002\u0291\u027d\u0003\u0002\u0002",
    "\u0002\u0291\u027e\u0003\u0002\u0002\u0002\u0291\u027f\u0003\u0002\u0002",
    "\u0002\u0291\u0280\u0003\u0002\u0002\u0002\u0291\u0281\u0003\u0002\u0002",
    "\u0002\u0291\u0282\u0003\u0002\u0002\u0002\u0291\u0283\u0003\u0002\u0002",
    "\u0002\u0291\u0284\u0003\u0002\u0002\u0002\u0291\u0288\u0003\u0002\u0002",
    "\u0002\u0291\u028c\u0003\u0002\u0002\u0002\u0291\u028d\u0003\u0002\u0002",
    "\u0002\u0291\u028e\u0003\u0002\u0002\u0002\u0291\u028f\u0003\u0002\u0002",
    "\u0002\u0291\u0290\u0003\u0002\u0002\u0002\u0292i\u0003\u0002\u0002",
    "\u0002\u0293\u0294\u0007\u0011\u0002\u0002\u0294\u029a\u0007\u0012\u0002",
    "\u0002\u0295\u0296\u0007\u0011\u0002\u0002\u0296\u0297\u0005R*\u0002",
    "\u0297\u0298\u0005l7\u0002\u0298\u029a\u0003\u0002\u0002\u0002\u0299",
    "\u0293\u0003\u0002\u0002\u0002\u0299\u0295\u0003\u0002\u0002\u0002\u029a",
    "k\u0003\u0002\u0002\u0002\u029b\u02a5\u0007\u0012\u0002\u0002\u029c",
    "\u029d\u0007\u000f\u0002\u0002\u029d\u029e\u0005R*\u0002\u029e\u029f",
    "\u0007\u0012\u0002\u0002\u029f\u02a5\u0003\u0002\u0002\u0002\u02a0\u02a1",
    "\u0007\n\u0002\u0002\u02a1\u02a2\u0005R*\u0002\u02a2\u02a3\u0005l7\u0002",
    "\u02a3\u02a5\u0003\u0002\u0002\u0002\u02a4\u029b\u0003\u0002\u0002\u0002",
    "\u02a4\u029c\u0003\u0002\u0002\u0002\u02a4\u02a0\u0003\u0002\u0002\u0002",
    "\u02a5m\u0003\u0002\u0002\u0002\u02a6\u02a7\u0007\u0017\u0002\u0002",
    "\u02a7\u02ad\u0007\u0018\u0002\u0002\u02a8\u02a9\u0007\u0017\u0002\u0002",
    "\u02a9\u02aa\u0005p9\u0002\u02aa\u02ab\u0007\u0018\u0002\u0002\u02ab",
    "\u02ad\u0003\u0002\u0002\u0002\u02ac\u02a6\u0003\u0002\u0002\u0002\u02ac",
    "\u02a8\u0003\u0002\u0002\u0002\u02ado\u0003\u0002\u0002\u0002\u02ae",
    "\u02b3\u0005r:\u0002\u02af\u02b0\u0007\n\u0002\u0002\u02b0\u02b2\u0005",
    "r:\u0002\u02b1\u02af\u0003\u0002\u0002\u0002\u02b2\u02b5\u0003\u0002",
    "\u0002\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002",
    "\u0002\u0002\u02b4q\u0003\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002",
    "\u0002\u0002\u02b6\u02b7\u0005t;\u0002\u02b7\u02b8\u0005v<\u0002\u02b8",
    "\u02b9\u0005x=\u0002\u02b9s\u0003\u0002\u0002\u0002\u02ba\u02bc\u0005",
    "\u00bc_\u0002\u02bb\u02ba\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003",
    "\u0002\u0002\u0002\u02bc\u02bd\u0003\u0002\u0002\u0002\u02bd\u02be\u0005",
    "h5\u0002\u02beu\u0003\u0002\u0002\u0002\u02bf\u02c0\u0007\u0007\u0002",
    "\u0002\u02c0\u02c2\u0005~@\u0002\u02c1\u02bf\u0003\u0002\u0002\u0002",
    "\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2w\u0003\u0002\u0002\u0002",
    "\u02c3\u02c4\u0007\b\u0002\u0002\u02c4\u02c6\u0005z>\u0002\u02c5\u02c3",
    "\u0003\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6y",
    "\u0003\u0002\u0002\u0002\u02c7\u02cc\u0005|?\u0002\u02c8\u02c9\u0007",
    "\u0004\u0002\u0002\u02c9\u02cb\u0005|?\u0002\u02ca\u02c8\u0003\u0002",
    "\u0002\u0002\u02cb\u02ce\u0003\u0002\u0002\u0002\u02cc\u02ca\u0003\u0002",
    "\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd{\u0003\u0002",
    "\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002\u02cf\u02d2\u0005\u0006",
    "\u0004\u0002\u02d0\u02d1\u0007\u0007\u0002\u0002\u02d1\u02d3\u0005\f",
    "\u0007\u0002\u02d2\u02d0\u0003\u0002\u0002\u0002\u02d2\u02d3\u0003\u0002",
    "\u0002\u0002\u02d3}\u0003\u0002\u0002\u0002\u02d4\u02d5\u0005h5\u0002",
    "\u02d5\u007f\u0003\u0002\u0002\u0002\u02d6\u02d7\u0007\u0011\u0002\u0002",
    "\u02d7\u02d8\u0005R*\u0002\u02d8\u02d9\u0007!\u0002\u0002\u02d9\u02da",
    "\u0005\u0084C\u0002\u02da\u02db\u0007\u0012\u0002\u0002\u02db\u0081",
    "\u0003\u0002\u0002\u0002\u02dc\u02dd\u0007\u0017\u0002\u0002\u02dd\u02de",
    "\u0005n8\u0002\u02de\u02df\u0007!\u0002\u0002\u02df\u02e0\u0005\u0084",
    "C\u0002\u02e0\u02e1\u0007\u0018\u0002\u0002\u02e1\u0083\u0003\u0002",
    "\u0002\u0002\u02e2\u02e7\u0005\u0086D\u0002\u02e3\u02e4\u0007\n\u0002",
    "\u0002\u02e4\u02e6\u0005\u0086D\u0002\u02e5\u02e3\u0003\u0002\u0002",
    "\u0002\u02e6\u02e9\u0003\u0002\u0002\u0002\u02e7\u02e5\u0003\u0002\u0002",
    "\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8\u0085\u0003\u0002\u0002",
    "\u0002\u02e9\u02e7\u0003\u0002\u0002\u0002\u02ea\u02f4\u0005R*\u0002",
    "\u02eb\u02ec\u0005R*\u0002\u02ec\u02ed\u0007\"\u0002\u0002\u02ed\u02ee",
    "\u0005R*\u0002\u02ee\u02f4\u0003\u0002\u0002\u0002\u02ef\u02f0\u0005",
    "n8\u0002\u02f0\u02f1\u0007#\u0002\u0002\u02f1\u02f2\u0005R*\u0002\u02f2",
    "\u02f4\u0003\u0002\u0002\u0002\u02f3\u02ea\u0003\u0002\u0002\u0002\u02f3",
    "\u02eb\u0003\u0002\u0002\u0002\u02f3\u02ef\u0003\u0002\u0002\u0002\u02f4",
    "\u0087\u0003\u0002\u0002\u0002\u02f5\u02f7\u0007\u000b\u0002\u0002\u02f6",
    "\u02f8\u0005\u00b6\\\u0002\u02f7\u02f6\u0003\u0002\u0002\u0002\u02f7",
    "\u02f8\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9",
    "\u02fa\u0007\f\u0002\u0002\u02fa\u0089\u0003\u0002\u0002\u0002\u02fb",
    "\u02fd\bF\u0001\u0002\u02fc\u02fe\u0005h5\u0002\u02fd\u02fc\u0003\u0002",
    "\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002",
    "\u0002\u0002\u02ff\u0300\u0007\u0014\u0002\u0002\u0300\u0304\u0005\u0006",
    "\u0004\u0002\u0301\u0302\u0007\u0003\u0002\u0002\u0302\u0305\u0005\u0006",
    "\u0004\u0002\u0303\u0305\u0005\u008cG\u0002\u0304\u0301\u0003\u0002",
    "\u0002\u0002\u0304\u0303\u0003\u0002\u0002\u0002\u0305\u0310\u0003\u0002",
    "\u0002\u0002\u0306\u0307\f\u0003\u0002\u0002\u0307\u0308\u0007\u0014",
    "\u0002\u0002\u0308\u030c\u0005\u0006\u0004\u0002\u0309\u030a\u0007\u0003",
    "\u0002\u0002\u030a\u030d\u0005\u0006\u0004\u0002\u030b\u030d\u0005\u008c",
    "G\u0002\u030c\u0309\u0003\u0002\u0002\u0002\u030c\u030b\u0003\u0002",
    "\u0002\u0002\u030d\u030f\u0003\u0002\u0002\u0002\u030e\u0306\u0003\u0002",
    "\u0002\u0002\u030f\u0312\u0003\u0002\u0002\u0002\u0310\u030e\u0003\u0002",
    "\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311\u008b\u0003\u0002",
    "\u0002\u0002\u0312\u0310\u0003\u0002\u0002\u0002\u0313\u0315\u0007\u000b",
    "\u0002\u0002\u0314\u0316\u0005\u008eH\u0002\u0315\u0314\u0003\u0002",
    "\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316\u0317\u0003\u0002",
    "\u0002\u0002\u0317\u0318\u0007\f\u0002\u0002\u0318\u008d\u0003\u0002",
    "\u0002\u0002\u0319\u031e\u0005\u0090I\u0002\u031a\u031b\u0007\n\u0002",
    "\u0002\u031b\u031d\u0005\u0090I\u0002\u031c\u031a\u0003\u0002\u0002",
    "\u0002\u031d\u0320\u0003\u0002\u0002\u0002\u031e\u031c\u0003\u0002\u0002",
    "\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f\u008f\u0003\u0002\u0002",
    "\u0002\u0320\u031e\u0003\u0002\u0002\u0002\u0321\u0324\u0005\b\u0005",
    "\u0002\u0322\u0324\u0005\u0006\u0004\u0002\u0323\u0321\u0003\u0002\u0002",
    "\u0002\u0323\u0322\u0003\u0002\u0002\u0002\u0324\u0325\u0003\u0002\u0002",
    "\u0002\u0325\u0326\u0007\u001b\u0002\u0002\u0326\u0327\u0005R*\u0002",
    "\u0327\u0091\u0003\u0002\u0002\u0002\u0328\u0329\u0005f4\u0002\u0329",
    "\u032a\u0005\u00b4[\u0002\u032a\u0093\u0003\u0002\u0002\u0002\u032b",
    "\u032c\u0007$\u0002\u0002\u032c\u032d\u0005\u0096L\u0002\u032d\u032e",
    "\u0007 \u0002\u0002\u032e\u0095\u0003\u0002\u0002\u0002\u032f\u0334",
    "\u0005\u0098M\u0002\u0330\u0331\u0007\r\u0002\u0002\u0331\u0333\u0005",
    "\u0098M\u0002\u0332\u0330\u0003\u0002\u0002\u0002\u0333\u0336\u0003",
    "\u0002\u0002\u0002\u0334\u0332\u0003\u0002\u0002\u0002\u0334\u0335\u0003",
    "\u0002\u0002\u0002\u0335\u0097\u0003\u0002\u0002\u0002\u0336\u0334\u0003",
    "\u0002\u0002\u0002\u0337\u0338\u0005\u00b8]\u0002\u0338\u0339\u0005",
    "P)\u0002\u0339\u0099\u0003\u0002\u0002\u0002\u033a\u033b\u0007%\u0002",
    "\u0002\u033b\u033c\u0005R*\u0002\u033c\u033d\u0007&\u0002\u0002\u033d",
    "\u033e\u0005\u009cO\u0002\u033e\u033f\u0007 \u0002\u0002\u033f\u009b",
    "\u0003\u0002\u0002\u0002\u0340\u0345\u0005\u009eP\u0002\u0341\u0342",
    "\u0007\r\u0002\u0002\u0342\u0344\u0005\u009eP\u0002\u0343\u0341\u0003",
    "\u0002\u0002\u0002\u0344\u0347\u0003\u0002\u0002\u0002\u0345\u0343\u0003",
    "\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u009d\u0003",
    "\u0002\u0002\u0002\u0347\u0345\u0003\u0002\u0002\u0002\u0348\u0349\u0005",
    "R*\u0002\u0349\u034a\u0005N(\u0002\u034a\u034b\u0005P)\u0002\u034b\u009f",
    "\u0003\u0002\u0002\u0002\u034c\u034d\u0007\'\u0002\u0002\u034d\u034e",
    "\u0005\u009cO\u0002\u034e\u034f\u0007 \u0002\u0002\u034f\u035e\u0003",
    "\u0002\u0002\u0002\u0350\u0351\u0007\'\u0002\u0002\u0351\u0352\u0007",
    "(\u0002\u0002\u0352\u0353\u0005R*\u0002\u0353\u0354\u0005P)\u0002\u0354",
    "\u0355\u0007 \u0002\u0002\u0355\u035e\u0003\u0002\u0002\u0002\u0356",
    "\u0357\u0007\'\u0002\u0002\u0357\u0358\u0005\u009cO\u0002\u0358\u0359",
    "\u0007(\u0002\u0002\u0359\u035a\u0005R*\u0002\u035a\u035b\u0005P)\u0002",
    "\u035b\u035c\u0007 \u0002\u0002\u035c\u035e\u0003\u0002\u0002\u0002",
    "\u035d\u034c\u0003\u0002\u0002\u0002\u035d\u0350\u0003\u0002\u0002\u0002",
    "\u035d\u0356\u0003\u0002\u0002\u0002\u035e\u00a1\u0003\u0002\u0002\u0002",
    "\u035f\u0360\u0007\u0015\u0002\u0002\u0360\u0361\u0005\u0006\u0004\u0002",
    "\u0361\u0362\u0007\b\u0002\u0002\u0362\u0363\u0005\f\u0007\u0002\u0363",
    "\u0370\u0003\u0002\u0002\u0002\u0364\u0365\u0007\u0015\u0002\u0002\u0365",
    "\u0366\u0005\u00a4S\u0002\u0366\u0367\u0007\u0007\u0002\u0002\u0367",
    "\u0368\u0005\u00a4S\u0002\u0368\u0369\u0007\b\u0002\u0002\u0369\u036a",
    "\u0005\u00a6T\u0002\u036a\u0370\u0003\u0002\u0002\u0002\u036b\u036c",
    "\u0007\u0015\u0002\u0002\u036c\u036d\u0005\u00a8U\u0002\u036d\u036e",
    "\u0007 \u0002\u0002\u036e\u0370\u0003\u0002\u0002\u0002\u036f\u035f",
    "\u0003\u0002\u0002\u0002\u036f\u0364\u0003\u0002\u0002\u0002\u036f\u036b",
    "\u0003\u0002\u0002\u0002\u0370\u00a3\u0003\u0002\u0002\u0002\u0371\u0374",
    "\u0005\u0006\u0004\u0002\u0372\u0374\u0005\b\u0005\u0002\u0373\u0371",
    "\u0003\u0002\u0002\u0002\u0373\u0372\u0003\u0002\u0002\u0002\u0374\u00a5",
    "\u0003\u0002\u0002\u0002\u0375\u0378\u0005\f\u0007\u0002\u0376\u0378",
    "\u0005\b\u0005\u0002\u0377\u0375\u0003\u0002\u0002\u0002\u0377\u0376",
    "\u0003\u0002\u0002\u0002\u0378\u00a7\u0003\u0002\u0002\u0002\u0379\u037e",
    "\u0005\u00aaV\u0002\u037a\u037b\u0007\r\u0002\u0002\u037b\u037d\u0005",
    "\u00aaV\u0002\u037c\u037a\u0003\u0002\u0002\u0002\u037d\u0380\u0003",
    "\u0002\u0002\u0002\u037e\u037c\u0003\u0002\u0002\u0002\u037e\u037f\u0003",
    "\u0002\u0002\u0002\u037f\u00a9\u0003\u0002\u0002\u0002\u0380\u037e\u0003",
    "\u0002\u0002\u0002\u0381\u0382\u0005\u00b4[\u0002\u0382\u0383\u0005",
    "N(\u0002\u0383\u0384\u0005P)\u0002\u0384\u00ab\u0003\u0002\u0002\u0002",
    "\u0385\u0386\u0007)\u0002\u0002\u0386\u0389\u0005\u00b6\\\u0002\u0387",
    "\u0388\u0007&\u0002\u0002\u0388\u038a\u0005\u009cO\u0002\u0389\u0387",
    "\u0003\u0002\u0002\u0002\u0389\u038a\u0003\u0002\u0002\u0002\u038a\u038b",
    "\u0003\u0002\u0002\u0002\u038b\u038c\u0005\u00aeX\u0002\u038c\u00ad",
    "\u0003\u0002\u0002\u0002\u038d\u038e\u0007\u001a\u0002\u0002\u038e\u038f",
    "\u0005\u00b0Y\u0002\u038f\u0390\u0007 \u0002\u0002\u0390\u039c\u0003",
    "\u0002\u0002\u0002\u0391\u0392\u0007\u001a\u0002\u0002\u0392\u0393\u0005",
    "\u00b0Y\u0002\u0393\u0394\u0007(\u0002\u0002\u0394\u0395\u0005\u00b6",
    "\\\u0002\u0395\u0396\u0007 \u0002\u0002\u0396\u039c\u0003\u0002\u0002",
    "\u0002\u0397\u0398\u0007(\u0002\u0002\u0398\u0399\u0005\u00b6\\\u0002",
    "\u0399\u039a\u0007 \u0002\u0002\u039a\u039c\u0003\u0002\u0002\u0002",
    "\u039b\u038d\u0003\u0002\u0002\u0002\u039b\u0391\u0003\u0002\u0002\u0002",
    "\u039b\u0397\u0003\u0002\u0002\u0002\u039c\u00af\u0003\u0002\u0002\u0002",
    "\u039d\u03a2\u0005\u00b2Z\u0002\u039e\u039f\u0007\r\u0002\u0002\u039f",
    "\u03a1\u0005\u00b2Z\u0002\u03a0\u039e\u0003\u0002\u0002\u0002\u03a1",
    "\u03a4\u0003\u0002\u0002\u0002\u03a2\u03a0\u0003\u0002\u0002\u0002\u03a2",
    "\u03a3\u0003\u0002\u0002\u0002\u03a3\u00b1\u0003\u0002\u0002\u0002\u03a4",
    "\u03a2\u0003\u0002\u0002\u0002\u03a5\u03a6\u0005\u00a4S\u0002\u03a6",
    "\u03a7\u0007\u0007\u0002\u0002\u03a7\u03a9\u0003\u0002\u0002\u0002\u03a8",
    "\u03a5\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002\u03a9",
    "\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ab\u0005R*\u0002\u03ab\u03ac",
    "\u0005N(\u0002\u03ac\u03ad\u0005P)\u0002\u03ad\u00b3\u0003\u0002\u0002",
    "\u0002\u03ae\u03b0\u0007\u0005\u0002\u0002\u03af\u03b1\u0005\u00b6\\",
    "\u0002\u03b0\u03af\u0003\u0002\u0002\u0002\u03b0\u03b1\u0003\u0002\u0002",
    "\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2\u03b3\u0007\u0006\u0002",
    "\u0002\u03b3\u00b5\u0003\u0002\u0002\u0002\u03b4\u03b9\u0005R*\u0002",
    "\u03b5\u03b6\u0007\n\u0002\u0002\u03b6\u03b8\u0005R*\u0002\u03b7\u03b5",
    "\u0003\u0002\u0002\u0002\u03b8\u03bb\u0003\u0002\u0002\u0002\u03b9\u03b7",
    "\u0003\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u00b7",
    "\u0003\u0002\u0002\u0002\u03bb\u03b9\u0003\u0002\u0002\u0002\u03bc\u03c1",
    "\u0005\u00b6\\\u0002\u03bd\u03be\u0007\r\u0002\u0002\u03be\u03c0\u0005",
    "\u00b6\\\u0002\u03bf\u03bd\u0003\u0002\u0002\u0002\u03c0\u03c3\u0003",
    "\u0002\u0002\u0002\u03c1\u03bf\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003",
    "\u0002\u0002\u0002\u03c2\u00b9\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003",
    "\u0002\u0002\u0002\u03c4\u03ce\u0005\u000e\b\u0002\u03c5\u03ce\u0005",
    "\f\u0007\u0002\u03c6\u03ce\u0005\n\u0006\u0002\u03c7\u03ce\u0005\u0006",
    "\u0004\u0002\u03c8\u03ca\u0005\u0010\t\u0002\u03c9\u03c8\u0003\u0002",
    "\u0002\u0002\u03ca\u03cb\u0003\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002",
    "\u0002\u0002\u03cb\u03cc\u0003\u0002\u0002\u0002\u03cc\u03ce\u0003\u0002",
    "\u0002\u0002\u03cd\u03c4\u0003\u0002\u0002\u0002\u03cd\u03c5\u0003\u0002",
    "\u0002\u0002\u03cd\u03c6\u0003\u0002\u0002\u0002\u03cd\u03c7\u0003\u0002",
    "\u0002\u0002\u03cd\u03c9\u0003\u0002\u0002\u0002\u03ce\u00bb\u0003\u0002",
    "\u0002\u0002\u03cf\u03d0\t\u0003\u0002\u0002\u03d0\u00bd\u0003\u0002",
    "\u0002\u0002\u03d1\u03d2\t\u0004\u0002\u0002\u03d2\u00bf\u0003\u0002",
    "\u0002\u0002\u03d3\u03d4\t\u0005\u0002\u0002\u03d4\u00c1\u0003\u0002",
    "\u0002\u0002\u03d5\u03d6\t\u0006\u0002\u0002\u03d6\u00c3\u0003\u0002",
    "\u0002\u0002\u03d7\u03d8\t\u0007\u0002\u0002\u03d8\u00c5\u0003\u0002",
    "\u0002\u0002\u03d9\u03de\u0005\u00c8e\u0002\u03da\u03db\u0007\r\u0002",
    "\u0002\u03db\u03dd\u0005\u00c8e\u0002\u03dc\u03da\u0003\u0002\u0002",
    "\u0002\u03dd\u03e0\u0003\u0002\u0002\u0002\u03de\u03dc\u0003\u0002\u0002",
    "\u0002\u03de\u03df\u0003\u0002\u0002\u0002\u03df\u00c7\u0003\u0002\u0002",
    "\u0002\u03e0\u03de\u0003\u0002\u0002\u0002\u03e1\u03e2\u0005\u0006\u0004",
    "\u0002\u03e2\u03e3\u0005L\'\u0002\u03e3\u03e4\u0005N(\u0002\u03e4\u03e5",
    "\u0005\u00caf\u0002\u03e5\u00c9\u0003\u0002\u0002\u0002\u03e6\u03e7",
    "\u0007A\u0002\u0002\u03e7\u03e8\u0005\u0084C\u0002\u03e8\u00cb\u0003",
    "\u0002\u0002\u0002L\u00cf\u00d6\u00f6\u0100\u0113\u011d\u0130\u013b",
    "\u0141\u0148\u0154\u015b\u0161\u0168\u016d\u0178\u0184\u0188\u01cf\u01d7",
    "\u01db\u01e6\u01fd\u0218\u021f\u022b\u0233\u023a\u0242\u024a\u0251\u0259",
    "\u0262\u026b\u026f\u0276\u027b\u0291\u0299\u02a4\u02ac\u02b3\u02bb\u02c1",
    "\u02c5\u02cc\u02d2\u02e7\u02f3\u02f7\u02fd\u0304\u030c\u0310\u0315\u031e",
    "\u0323\u0334\u0345\u035d\u036f\u0373\u0377\u037e\u0389\u039b\u03a2\u03a8",
    "\u03b0\u03b9\u03c1\u03cb\u03cd\u03de"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'.'", "'-'", "'('", "')'", "':'", "'/'", "'::'", 
                     "','", "'{'", "'}'", "';'", "'when'", "'|'", "'..'", 
                     "'['", "']'", "'...'", "'#'", "'fun'", "'->'", "'<<'", 
                     "'>>'", "'*'", "'catch'", "'='", "'!'", "'orelse'", 
                     "'andalso'", "'begin'", "'end'", "'||'", "'<-'", "'<='", 
                     "'if'", "'case'", "'of'", "'receive'", "'after'", "'try'", 
                     "'+'", "'bnot'", "'not'", "'div'", "'rem'", "'band'", 
                     "'and'", "'bor'", "'bxor'", "'bsl'", "'bsr'", "'or'", 
                     "'xor'", "'++'", "'--'", "'=='", "'/='", "'=<'", "'<'", 
                     "'>='", "'>'", "'=:='", "'=/='", "':-'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, "TokAtom", "TokVar", "TokFloat", "TokInteger", 
                      "TokChar", "TokString", "AttrName", "Comment", "WS" ];

var ruleNames =  [ "forms", "form", "tokAtom", "tokVar", "tokFloat", "tokInteger", 
                   "tokChar", "tokString", "attribute", "typeSpec", "specFun", 
                   "typedAttrVal", "typedRecordFields", "typedExprs", "typedExpr", 
                   "typeSigs", "typeSig", "typeGuards", "typeGuard", "topTypes", 
                   "topType", "topType100", "type200", "type300", "type400", 
                   "type500", "type", "funType100", "funType", "fieldTypes", 
                   "fieldType", "binaryType", "binBaseType", "binUnitType", 
                   "attrVal", "function", "functionClause", "clauseArgs", 
                   "clauseGuard", "clauseBody", "expr", "expr100", "expr150", 
                   "expr160", "expr200", "expr300", "expr400", "expr500", 
                   "expr600", "expr700", "expr800", "exprMax", "list", "tail", 
                   "binary", "binElements", "binElement", "bitExpr", "optBitSizeExpr", 
                   "optBitTypeList", "bitTypeList", "bitType", "bitSizeExpr", 
                   "listComprehension", "binaryComprehension", "lcExprs", 
                   "lcExpr", "tuple", "recordExpr", "recordTuple", "recordFields", 
                   "recordField", "functionCall", "ifExpr", "ifClauses", 
                   "ifClause", "caseExpr", "crClauses", "crClause", "receiveExpr", 
                   "funExpr", "atomOrVar", "integerOrVar", "funClauses", 
                   "funClause", "tryExpr", "tryCatch", "tryClauses", "tryClause", 
                   "argumentList", "exprs", "guard", "atomic", "prefixOp", 
                   "multOp", "addOp", "listOp", "compOp", "ruleClauses", 
                   "ruleClause", "ruleBody" ];

function ErlangParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ErlangParser.prototype = Object.create(antlr4.Parser.prototype);
ErlangParser.prototype.constructor = ErlangParser;

Object.defineProperty(ErlangParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ErlangParser.EOF = antlr4.Token.EOF;
ErlangParser.T__0 = 1;
ErlangParser.T__1 = 2;
ErlangParser.T__2 = 3;
ErlangParser.T__3 = 4;
ErlangParser.T__4 = 5;
ErlangParser.T__5 = 6;
ErlangParser.T__6 = 7;
ErlangParser.T__7 = 8;
ErlangParser.T__8 = 9;
ErlangParser.T__9 = 10;
ErlangParser.T__10 = 11;
ErlangParser.T__11 = 12;
ErlangParser.T__12 = 13;
ErlangParser.T__13 = 14;
ErlangParser.T__14 = 15;
ErlangParser.T__15 = 16;
ErlangParser.T__16 = 17;
ErlangParser.T__17 = 18;
ErlangParser.T__18 = 19;
ErlangParser.T__19 = 20;
ErlangParser.T__20 = 21;
ErlangParser.T__21 = 22;
ErlangParser.T__22 = 23;
ErlangParser.T__23 = 24;
ErlangParser.T__24 = 25;
ErlangParser.T__25 = 26;
ErlangParser.T__26 = 27;
ErlangParser.T__27 = 28;
ErlangParser.T__28 = 29;
ErlangParser.T__29 = 30;
ErlangParser.T__30 = 31;
ErlangParser.T__31 = 32;
ErlangParser.T__32 = 33;
ErlangParser.T__33 = 34;
ErlangParser.T__34 = 35;
ErlangParser.T__35 = 36;
ErlangParser.T__36 = 37;
ErlangParser.T__37 = 38;
ErlangParser.T__38 = 39;
ErlangParser.T__39 = 40;
ErlangParser.T__40 = 41;
ErlangParser.T__41 = 42;
ErlangParser.T__42 = 43;
ErlangParser.T__43 = 44;
ErlangParser.T__44 = 45;
ErlangParser.T__45 = 46;
ErlangParser.T__46 = 47;
ErlangParser.T__47 = 48;
ErlangParser.T__48 = 49;
ErlangParser.T__49 = 50;
ErlangParser.T__50 = 51;
ErlangParser.T__51 = 52;
ErlangParser.T__52 = 53;
ErlangParser.T__53 = 54;
ErlangParser.T__54 = 55;
ErlangParser.T__55 = 56;
ErlangParser.T__56 = 57;
ErlangParser.T__57 = 58;
ErlangParser.T__58 = 59;
ErlangParser.T__59 = 60;
ErlangParser.T__60 = 61;
ErlangParser.T__61 = 62;
ErlangParser.T__62 = 63;
ErlangParser.TokAtom = 64;
ErlangParser.TokVar = 65;
ErlangParser.TokFloat = 66;
ErlangParser.TokInteger = 67;
ErlangParser.TokChar = 68;
ErlangParser.TokString = 69;
ErlangParser.AttrName = 70;
ErlangParser.Comment = 71;
ErlangParser.WS = 72;

ErlangParser.RULE_forms = 0;
ErlangParser.RULE_form = 1;
ErlangParser.RULE_tokAtom = 2;
ErlangParser.RULE_tokVar = 3;
ErlangParser.RULE_tokFloat = 4;
ErlangParser.RULE_tokInteger = 5;
ErlangParser.RULE_tokChar = 6;
ErlangParser.RULE_tokString = 7;
ErlangParser.RULE_attribute = 8;
ErlangParser.RULE_typeSpec = 9;
ErlangParser.RULE_specFun = 10;
ErlangParser.RULE_typedAttrVal = 11;
ErlangParser.RULE_typedRecordFields = 12;
ErlangParser.RULE_typedExprs = 13;
ErlangParser.RULE_typedExpr = 14;
ErlangParser.RULE_typeSigs = 15;
ErlangParser.RULE_typeSig = 16;
ErlangParser.RULE_typeGuards = 17;
ErlangParser.RULE_typeGuard = 18;
ErlangParser.RULE_topTypes = 19;
ErlangParser.RULE_topType = 20;
ErlangParser.RULE_topType100 = 21;
ErlangParser.RULE_type200 = 22;
ErlangParser.RULE_type300 = 23;
ErlangParser.RULE_type400 = 24;
ErlangParser.RULE_type500 = 25;
ErlangParser.RULE_type = 26;
ErlangParser.RULE_funType100 = 27;
ErlangParser.RULE_funType = 28;
ErlangParser.RULE_fieldTypes = 29;
ErlangParser.RULE_fieldType = 30;
ErlangParser.RULE_binaryType = 31;
ErlangParser.RULE_binBaseType = 32;
ErlangParser.RULE_binUnitType = 33;
ErlangParser.RULE_attrVal = 34;
ErlangParser.RULE_function = 35;
ErlangParser.RULE_functionClause = 36;
ErlangParser.RULE_clauseArgs = 37;
ErlangParser.RULE_clauseGuard = 38;
ErlangParser.RULE_clauseBody = 39;
ErlangParser.RULE_expr = 40;
ErlangParser.RULE_expr100 = 41;
ErlangParser.RULE_expr150 = 42;
ErlangParser.RULE_expr160 = 43;
ErlangParser.RULE_expr200 = 44;
ErlangParser.RULE_expr300 = 45;
ErlangParser.RULE_expr400 = 46;
ErlangParser.RULE_expr500 = 47;
ErlangParser.RULE_expr600 = 48;
ErlangParser.RULE_expr700 = 49;
ErlangParser.RULE_expr800 = 50;
ErlangParser.RULE_exprMax = 51;
ErlangParser.RULE_list = 52;
ErlangParser.RULE_tail = 53;
ErlangParser.RULE_binary = 54;
ErlangParser.RULE_binElements = 55;
ErlangParser.RULE_binElement = 56;
ErlangParser.RULE_bitExpr = 57;
ErlangParser.RULE_optBitSizeExpr = 58;
ErlangParser.RULE_optBitTypeList = 59;
ErlangParser.RULE_bitTypeList = 60;
ErlangParser.RULE_bitType = 61;
ErlangParser.RULE_bitSizeExpr = 62;
ErlangParser.RULE_listComprehension = 63;
ErlangParser.RULE_binaryComprehension = 64;
ErlangParser.RULE_lcExprs = 65;
ErlangParser.RULE_lcExpr = 66;
ErlangParser.RULE_tuple = 67;
ErlangParser.RULE_recordExpr = 68;
ErlangParser.RULE_recordTuple = 69;
ErlangParser.RULE_recordFields = 70;
ErlangParser.RULE_recordField = 71;
ErlangParser.RULE_functionCall = 72;
ErlangParser.RULE_ifExpr = 73;
ErlangParser.RULE_ifClauses = 74;
ErlangParser.RULE_ifClause = 75;
ErlangParser.RULE_caseExpr = 76;
ErlangParser.RULE_crClauses = 77;
ErlangParser.RULE_crClause = 78;
ErlangParser.RULE_receiveExpr = 79;
ErlangParser.RULE_funExpr = 80;
ErlangParser.RULE_atomOrVar = 81;
ErlangParser.RULE_integerOrVar = 82;
ErlangParser.RULE_funClauses = 83;
ErlangParser.RULE_funClause = 84;
ErlangParser.RULE_tryExpr = 85;
ErlangParser.RULE_tryCatch = 86;
ErlangParser.RULE_tryClauses = 87;
ErlangParser.RULE_tryClause = 88;
ErlangParser.RULE_argumentList = 89;
ErlangParser.RULE_exprs = 90;
ErlangParser.RULE_guard = 91;
ErlangParser.RULE_atomic = 92;
ErlangParser.RULE_prefixOp = 93;
ErlangParser.RULE_multOp = 94;
ErlangParser.RULE_addOp = 95;
ErlangParser.RULE_listOp = 96;
ErlangParser.RULE_compOp = 97;
ErlangParser.RULE_ruleClauses = 98;
ErlangParser.RULE_ruleClause = 99;
ErlangParser.RULE_ruleBody = 100;


function FormsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_forms;
    return this;
}

FormsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormsContext.prototype.constructor = FormsContext;

FormsContext.prototype.EOF = function() {
    return this.getToken(ErlangParser.EOF, 0);
};

FormsContext.prototype.form = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormContext);
    } else {
        return this.getTypedRuleContext(FormContext,i);
    }
};

FormsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterForms(this);
	}
};

FormsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitForms(this);
	}
};




ErlangParser.FormsContext = FormsContext;

ErlangParser.prototype.forms = function() {

    var localctx = new FormsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ErlangParser.RULE_forms);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 203; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 202;
            this.form();
            this.state = 205; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ErlangParser.T__1 || _la===ErlangParser.TokAtom || _la===ErlangParser.AttrName);
        this.state = 207;
        this.match(ErlangParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_form;
    return this;
}

FormContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormContext.prototype.constructor = FormContext;

FormContext.prototype.attribute = function() {
    return this.getTypedRuleContext(AttributeContext,0);
};

FormContext.prototype.function = function() {
    return this.getTypedRuleContext(FunctionContext,0);
};

FormContext.prototype.ruleClauses = function() {
    return this.getTypedRuleContext(RuleClausesContext,0);
};

FormContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterForm(this);
	}
};

FormContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitForm(this);
	}
};




ErlangParser.FormContext = FormContext;

ErlangParser.prototype.form = function() {

    var localctx = new FormContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ErlangParser.RULE_form);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 212;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.state = 209;
            this.attribute();
            break;

        case 2:
            this.state = 210;
            this.function();
            break;

        case 3:
            this.state = 211;
            this.ruleClauses();
            break;

        }
        this.state = 214;
        this.match(ErlangParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TokAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tokAtom;
    return this;
}

TokAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TokAtomContext.prototype.constructor = TokAtomContext;

TokAtomContext.prototype.TokAtom = function() {
    return this.getToken(ErlangParser.TokAtom, 0);
};

TokAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTokAtom(this);
	}
};

TokAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTokAtom(this);
	}
};




ErlangParser.TokAtomContext = TokAtomContext;

ErlangParser.prototype.tokAtom = function() {

    var localctx = new TokAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ErlangParser.RULE_tokAtom);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 216;
        this.match(ErlangParser.TokAtom);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TokVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tokVar;
    return this;
}

TokVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TokVarContext.prototype.constructor = TokVarContext;

TokVarContext.prototype.TokVar = function() {
    return this.getToken(ErlangParser.TokVar, 0);
};

TokVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTokVar(this);
	}
};

TokVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTokVar(this);
	}
};




ErlangParser.TokVarContext = TokVarContext;

ErlangParser.prototype.tokVar = function() {

    var localctx = new TokVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ErlangParser.RULE_tokVar);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 218;
        this.match(ErlangParser.TokVar);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TokFloatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tokFloat;
    return this;
}

TokFloatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TokFloatContext.prototype.constructor = TokFloatContext;

TokFloatContext.prototype.TokFloat = function() {
    return this.getToken(ErlangParser.TokFloat, 0);
};

TokFloatContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTokFloat(this);
	}
};

TokFloatContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTokFloat(this);
	}
};




ErlangParser.TokFloatContext = TokFloatContext;

ErlangParser.prototype.tokFloat = function() {

    var localctx = new TokFloatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ErlangParser.RULE_tokFloat);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 220;
        this.match(ErlangParser.TokFloat);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TokIntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tokInteger;
    return this;
}

TokIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TokIntegerContext.prototype.constructor = TokIntegerContext;

TokIntegerContext.prototype.TokInteger = function() {
    return this.getToken(ErlangParser.TokInteger, 0);
};

TokIntegerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTokInteger(this);
	}
};

TokIntegerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTokInteger(this);
	}
};




ErlangParser.TokIntegerContext = TokIntegerContext;

ErlangParser.prototype.tokInteger = function() {

    var localctx = new TokIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ErlangParser.RULE_tokInteger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 222;
        this.match(ErlangParser.TokInteger);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TokCharContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tokChar;
    return this;
}

TokCharContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TokCharContext.prototype.constructor = TokCharContext;

TokCharContext.prototype.TokChar = function() {
    return this.getToken(ErlangParser.TokChar, 0);
};

TokCharContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTokChar(this);
	}
};

TokCharContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTokChar(this);
	}
};




ErlangParser.TokCharContext = TokCharContext;

ErlangParser.prototype.tokChar = function() {

    var localctx = new TokCharContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ErlangParser.RULE_tokChar);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 224;
        this.match(ErlangParser.TokChar);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TokStringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tokString;
    return this;
}

TokStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TokStringContext.prototype.constructor = TokStringContext;

TokStringContext.prototype.TokString = function() {
    return this.getToken(ErlangParser.TokString, 0);
};

TokStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTokString(this);
	}
};

TokStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTokString(this);
	}
};




ErlangParser.TokStringContext = TokStringContext;

ErlangParser.prototype.tokString = function() {

    var localctx = new TokStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ErlangParser.RULE_tokString);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 226;
        this.match(ErlangParser.TokString);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_attribute;
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

AttributeContext.prototype.attrVal = function() {
    return this.getTypedRuleContext(AttrValContext,0);
};

AttributeContext.prototype.typedAttrVal = function() {
    return this.getTypedRuleContext(TypedAttrValContext,0);
};

AttributeContext.prototype.AttrName = function() {
    return this.getToken(ErlangParser.AttrName, 0);
};

AttributeContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};

AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterAttribute(this);
	}
};

AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitAttribute(this);
	}
};




ErlangParser.AttributeContext = AttributeContext;

ErlangParser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ErlangParser.RULE_attribute);
    try {
        this.state = 244;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 228;
            this.match(ErlangParser.T__1);
            this.state = 229;
            this.tokAtom();
            this.state = 230;
            this.attrVal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 232;
            this.match(ErlangParser.T__1);
            this.state = 233;
            this.tokAtom();
            this.state = 234;
            this.typedAttrVal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 236;
            this.match(ErlangParser.T__1);
            this.state = 237;
            this.tokAtom();
            this.state = 238;
            this.match(ErlangParser.T__2);
            this.state = 239;
            this.typedAttrVal();
            this.state = 240;
            this.match(ErlangParser.T__3);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 242;
            this.match(ErlangParser.AttrName);
            this.state = 243;
            this.typeSpec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_typeSpec;
    return this;
}

TypeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecContext.prototype.constructor = TypeSpecContext;

TypeSpecContext.prototype.specFun = function() {
    return this.getTypedRuleContext(SpecFunContext,0);
};

TypeSpecContext.prototype.typeSigs = function() {
    return this.getTypedRuleContext(TypeSigsContext,0);
};

TypeSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTypeSpec(this);
	}
};

TypeSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTypeSpec(this);
	}
};




ErlangParser.TypeSpecContext = TypeSpecContext;

ErlangParser.prototype.typeSpec = function() {

    var localctx = new TypeSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ErlangParser.RULE_typeSpec);
    try {
        this.state = 254;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ErlangParser.TokAtom:
            this.enterOuterAlt(localctx, 1);
            this.state = 246;
            this.specFun();
            this.state = 247;
            this.typeSigs();
            break;
        case ErlangParser.T__2:
            this.enterOuterAlt(localctx, 2);
            this.state = 249;
            this.match(ErlangParser.T__2);
            this.state = 250;
            this.specFun();
            this.state = 251;
            this.typeSigs();
            this.state = 252;
            this.match(ErlangParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecFunContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_specFun;
    return this;
}

SpecFunContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecFunContext.prototype.constructor = SpecFunContext;

SpecFunContext.prototype.tokAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TokAtomContext);
    } else {
        return this.getTypedRuleContext(TokAtomContext,i);
    }
};

SpecFunContext.prototype.tokInteger = function() {
    return this.getTypedRuleContext(TokIntegerContext,0);
};

SpecFunContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterSpecFun(this);
	}
};

SpecFunContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitSpecFun(this);
	}
};




ErlangParser.SpecFunContext = SpecFunContext;

ErlangParser.prototype.specFun = function() {

    var localctx = new SpecFunContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ErlangParser.RULE_specFun);
    try {
        this.state = 273;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 256;
            this.tokAtom();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 257;
            this.tokAtom();
            this.state = 258;
            this.match(ErlangParser.T__4);
            this.state = 259;
            this.tokAtom();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 261;
            this.tokAtom();
            this.state = 262;
            this.match(ErlangParser.T__5);
            this.state = 263;
            this.tokInteger();
            this.state = 264;
            this.match(ErlangParser.T__6);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 266;
            this.tokAtom();
            this.state = 267;
            this.match(ErlangParser.T__4);
            this.state = 268;
            this.tokAtom();
            this.state = 269;
            this.match(ErlangParser.T__5);
            this.state = 270;
            this.tokInteger();
            this.state = 271;
            this.match(ErlangParser.T__6);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypedAttrValContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_typedAttrVal;
    return this;
}

TypedAttrValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedAttrValContext.prototype.constructor = TypedAttrValContext;

TypedAttrValContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TypedAttrValContext.prototype.typedRecordFields = function() {
    return this.getTypedRuleContext(TypedRecordFieldsContext,0);
};

TypedAttrValContext.prototype.topType = function() {
    return this.getTypedRuleContext(TopTypeContext,0);
};

TypedAttrValContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTypedAttrVal(this);
	}
};

TypedAttrValContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTypedAttrVal(this);
	}
};




ErlangParser.TypedAttrValContext = TypedAttrValContext;

ErlangParser.prototype.typedAttrVal = function() {

    var localctx = new TypedAttrValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ErlangParser.RULE_typedAttrVal);
    try {
        this.state = 283;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 275;
            this.expr();
            this.state = 276;
            this.match(ErlangParser.T__7);
            this.state = 277;
            this.typedRecordFields();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 279;
            this.expr();
            this.state = 280;
            this.match(ErlangParser.T__6);
            this.state = 281;
            this.topType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypedRecordFieldsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_typedRecordFields;
    return this;
}

TypedRecordFieldsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedRecordFieldsContext.prototype.constructor = TypedRecordFieldsContext;

TypedRecordFieldsContext.prototype.typedExprs = function() {
    return this.getTypedRuleContext(TypedExprsContext,0);
};

TypedRecordFieldsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTypedRecordFields(this);
	}
};

TypedRecordFieldsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTypedRecordFields(this);
	}
};




ErlangParser.TypedRecordFieldsContext = TypedRecordFieldsContext;

ErlangParser.prototype.typedRecordFields = function() {

    var localctx = new TypedRecordFieldsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ErlangParser.RULE_typedRecordFields);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 285;
        this.match(ErlangParser.T__8);
        this.state = 286;
        this.typedExprs();
        this.state = 287;
        this.match(ErlangParser.T__9);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypedExprsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_typedExprs;
    return this;
}

TypedExprsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedExprsContext.prototype.constructor = TypedExprsContext;

TypedExprsContext.prototype.typedExpr = function() {
    return this.getTypedRuleContext(TypedExprContext,0);
};

TypedExprsContext.prototype.typedExprs = function() {
    return this.getTypedRuleContext(TypedExprsContext,0);
};

TypedExprsContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TypedExprsContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

TypedExprsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTypedExprs(this);
	}
};

TypedExprsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTypedExprs(this);
	}
};




ErlangParser.TypedExprsContext = TypedExprsContext;

ErlangParser.prototype.typedExprs = function() {

    var localctx = new TypedExprsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ErlangParser.RULE_typedExprs);
    try {
        this.state = 302;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 289;
            this.typedExpr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 290;
            this.typedExpr();
            this.state = 291;
            this.match(ErlangParser.T__7);
            this.state = 292;
            this.typedExprs();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 294;
            this.expr();
            this.state = 295;
            this.match(ErlangParser.T__7);
            this.state = 296;
            this.typedExprs();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 298;
            this.typedExpr();
            this.state = 299;
            this.match(ErlangParser.T__7);
            this.state = 300;
            this.exprs();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypedExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_typedExpr;
    return this;
}

TypedExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedExprContext.prototype.constructor = TypedExprContext;

TypedExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TypedExprContext.prototype.topType = function() {
    return this.getTypedRuleContext(TopTypeContext,0);
};

TypedExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTypedExpr(this);
	}
};

TypedExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTypedExpr(this);
	}
};




ErlangParser.TypedExprContext = TypedExprContext;

ErlangParser.prototype.typedExpr = function() {

    var localctx = new TypedExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ErlangParser.RULE_typedExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 304;
        this.expr();
        this.state = 305;
        this.match(ErlangParser.T__6);
        this.state = 306;
        this.topType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSigsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_typeSigs;
    return this;
}

TypeSigsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSigsContext.prototype.constructor = TypeSigsContext;

TypeSigsContext.prototype.typeSig = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeSigContext);
    } else {
        return this.getTypedRuleContext(TypeSigContext,i);
    }
};

TypeSigsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTypeSigs(this);
	}
};

TypeSigsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTypeSigs(this);
	}
};




ErlangParser.TypeSigsContext = TypeSigsContext;

ErlangParser.prototype.typeSigs = function() {

    var localctx = new TypeSigsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ErlangParser.RULE_typeSigs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 308;
        this.typeSig();
        this.state = 313;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__10) {
            this.state = 309;
            this.match(ErlangParser.T__10);
            this.state = 310;
            this.typeSig();
            this.state = 315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSigContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_typeSig;
    return this;
}

TypeSigContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSigContext.prototype.constructor = TypeSigContext;

TypeSigContext.prototype.funType = function() {
    return this.getTypedRuleContext(FunTypeContext,0);
};

TypeSigContext.prototype.typeGuards = function() {
    return this.getTypedRuleContext(TypeGuardsContext,0);
};

TypeSigContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTypeSig(this);
	}
};

TypeSigContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTypeSig(this);
	}
};




ErlangParser.TypeSigContext = TypeSigContext;

ErlangParser.prototype.typeSig = function() {

    var localctx = new TypeSigContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ErlangParser.RULE_typeSig);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this.funType();
        this.state = 319;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__11) {
            this.state = 317;
            this.match(ErlangParser.T__11);
            this.state = 318;
            this.typeGuards();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeGuardsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_typeGuards;
    return this;
}

TypeGuardsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeGuardsContext.prototype.constructor = TypeGuardsContext;

TypeGuardsContext.prototype.typeGuard = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeGuardContext);
    } else {
        return this.getTypedRuleContext(TypeGuardContext,i);
    }
};

TypeGuardsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTypeGuards(this);
	}
};

TypeGuardsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTypeGuards(this);
	}
};




ErlangParser.TypeGuardsContext = TypeGuardsContext;

ErlangParser.prototype.typeGuards = function() {

    var localctx = new TypeGuardsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ErlangParser.RULE_typeGuards);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this.typeGuard();
        this.state = 326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__7) {
            this.state = 322;
            this.match(ErlangParser.T__7);
            this.state = 323;
            this.typeGuard();
            this.state = 328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeGuardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_typeGuard;
    return this;
}

TypeGuardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeGuardContext.prototype.constructor = TypeGuardContext;

TypeGuardContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

TypeGuardContext.prototype.topTypes = function() {
    return this.getTypedRuleContext(TopTypesContext,0);
};

TypeGuardContext.prototype.tokVar = function() {
    return this.getTypedRuleContext(TokVarContext,0);
};

TypeGuardContext.prototype.topType = function() {
    return this.getTypedRuleContext(TopTypeContext,0);
};

TypeGuardContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTypeGuard(this);
	}
};

TypeGuardContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTypeGuard(this);
	}
};




ErlangParser.TypeGuardContext = TypeGuardContext;

ErlangParser.prototype.typeGuard = function() {

    var localctx = new TypeGuardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ErlangParser.RULE_typeGuard);
    try {
        this.state = 338;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ErlangParser.TokAtom:
            this.enterOuterAlt(localctx, 1);
            this.state = 329;
            this.tokAtom();
            this.state = 330;
            this.match(ErlangParser.T__2);
            this.state = 331;
            this.topTypes();
            this.state = 332;
            this.match(ErlangParser.T__3);
            break;
        case ErlangParser.TokVar:
            this.enterOuterAlt(localctx, 2);
            this.state = 334;
            this.tokVar();
            this.state = 335;
            this.match(ErlangParser.T__6);
            this.state = 336;
            this.topType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopTypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_topTypes;
    return this;
}

TopTypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopTypesContext.prototype.constructor = TopTypesContext;

TopTypesContext.prototype.topType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopTypeContext);
    } else {
        return this.getTypedRuleContext(TopTypeContext,i);
    }
};

TopTypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTopTypes(this);
	}
};

TopTypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTopTypes(this);
	}
};




ErlangParser.TopTypesContext = TopTypesContext;

ErlangParser.prototype.topTypes = function() {

    var localctx = new TopTypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ErlangParser.RULE_topTypes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this.topType();
        this.state = 345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__7) {
            this.state = 341;
            this.match(ErlangParser.T__7);
            this.state = 342;
            this.topType();
            this.state = 347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_topType;
    return this;
}

TopTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopTypeContext.prototype.constructor = TopTypeContext;

TopTypeContext.prototype.topType100 = function() {
    return this.getTypedRuleContext(TopType100Context,0);
};

TopTypeContext.prototype.tokVar = function() {
    return this.getTypedRuleContext(TokVarContext,0);
};

TopTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTopType(this);
	}
};

TopTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTopType(this);
	}
};




ErlangParser.TopTypeContext = TopTypeContext;

ErlangParser.prototype.topType = function() {

    var localctx = new TopTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ErlangParser.RULE_topType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        if(la_===1) {
            this.state = 348;
            this.tokVar();
            this.state = 349;
            this.match(ErlangParser.T__6);

        }
        this.state = 353;
        this.topType100();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopType100Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_topType100;
    return this;
}

TopType100Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopType100Context.prototype.constructor = TopType100Context;

TopType100Context.prototype.type200 = function() {
    return this.getTypedRuleContext(Type200Context,0);
};

TopType100Context.prototype.topType100 = function() {
    return this.getTypedRuleContext(TopType100Context,0);
};

TopType100Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTopType100(this);
	}
};

TopType100Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTopType100(this);
	}
};




ErlangParser.TopType100Context = TopType100Context;

ErlangParser.prototype.topType100 = function() {

    var localctx = new TopType100Context(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ErlangParser.RULE_topType100);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.type200();
        this.state = 358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__12) {
            this.state = 356;
            this.match(ErlangParser.T__12);
            this.state = 357;
            this.topType100();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type200Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_type200;
    return this;
}

Type200Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type200Context.prototype.constructor = Type200Context;

Type200Context.prototype.type300 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type300Context);
    } else {
        return this.getTypedRuleContext(Type300Context,i);
    }
};

Type200Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterType200(this);
	}
};

Type200Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitType200(this);
	}
};




ErlangParser.Type200Context = Type200Context;

ErlangParser.prototype.type200 = function() {

    var localctx = new Type200Context(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ErlangParser.RULE_type200);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        this.type300(0);
        this.state = 363;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__13) {
            this.state = 361;
            this.match(ErlangParser.T__13);
            this.state = 362;
            this.type300(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type300Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_type300;
    return this;
}

Type300Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type300Context.prototype.constructor = Type300Context;

Type300Context.prototype.type400 = function() {
    return this.getTypedRuleContext(Type400Context,0);
};

Type300Context.prototype.type300 = function() {
    return this.getTypedRuleContext(Type300Context,0);
};

Type300Context.prototype.addOp = function() {
    return this.getTypedRuleContext(AddOpContext,0);
};

Type300Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterType300(this);
	}
};

Type300Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitType300(this);
	}
};



ErlangParser.prototype.type300 = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Type300Context(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 46;
    this.enterRecursionRule(localctx, 46, ErlangParser.RULE_type300, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.type400(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 374;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Type300Context(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_type300);
                this.state = 368;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 369;
                this.addOp();
                this.state = 370;
                this.type400(0); 
            }
            this.state = 376;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Type400Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_type400;
    return this;
}

Type400Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type400Context.prototype.constructor = Type400Context;

Type400Context.prototype.type500 = function() {
    return this.getTypedRuleContext(Type500Context,0);
};

Type400Context.prototype.type400 = function() {
    return this.getTypedRuleContext(Type400Context,0);
};

Type400Context.prototype.multOp = function() {
    return this.getTypedRuleContext(MultOpContext,0);
};

Type400Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterType400(this);
	}
};

Type400Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitType400(this);
	}
};



ErlangParser.prototype.type400 = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Type400Context(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 48;
    this.enterRecursionRule(localctx, 48, ErlangParser.RULE_type400, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        this.type500();
        this._ctx.stop = this._input.LT(-1);
        this.state = 386;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Type400Context(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_type400);
                this.state = 380;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 381;
                this.multOp();
                this.state = 382;
                this.type500(); 
            }
            this.state = 388;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Type500Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_type500;
    return this;
}

Type500Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type500Context.prototype.constructor = Type500Context;

Type500Context.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Type500Context.prototype.prefixOp = function() {
    return this.getTypedRuleContext(PrefixOpContext,0);
};

Type500Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterType500(this);
	}
};

Type500Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitType500(this);
	}
};




ErlangParser.Type500Context = Type500Context;

ErlangParser.prototype.type500 = function() {

    var localctx = new Type500Context(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ErlangParser.RULE_type500);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__1 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ErlangParser.T__39 - 40)) | (1 << (ErlangParser.T__40 - 40)) | (1 << (ErlangParser.T__41 - 40)))) !== 0)) {
            this.state = 389;
            this.prefixOp();
        }

        this.state = 392;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.topType = function() {
    return this.getTypedRuleContext(TopTypeContext,0);
};

TypeContext.prototype.tokVar = function() {
    return this.getTypedRuleContext(TokVarContext,0);
};

TypeContext.prototype.tokAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TokAtomContext);
    } else {
        return this.getTypedRuleContext(TokAtomContext,i);
    }
};

TypeContext.prototype.topTypes = function() {
    return this.getTypedRuleContext(TopTypesContext,0);
};

TypeContext.prototype.fieldTypes = function() {
    return this.getTypedRuleContext(FieldTypesContext,0);
};

TypeContext.prototype.binaryType = function() {
    return this.getTypedRuleContext(BinaryTypeContext,0);
};

TypeContext.prototype.tokInteger = function() {
    return this.getTypedRuleContext(TokIntegerContext,0);
};

TypeContext.prototype.funType100 = function() {
    return this.getTypedRuleContext(FunType100Context,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitType(this);
	}
};




ErlangParser.TypeContext = TypeContext;

ErlangParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ErlangParser.RULE_type);
    try {
        this.state = 461;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 394;
            this.match(ErlangParser.T__2);
            this.state = 395;
            this.topType();
            this.state = 396;
            this.match(ErlangParser.T__3);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 398;
            this.tokVar();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 399;
            this.tokAtom();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 400;
            this.tokAtom();
            this.state = 401;
            this.match(ErlangParser.T__2);
            this.state = 402;
            this.match(ErlangParser.T__3);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 404;
            this.tokAtom();
            this.state = 405;
            this.match(ErlangParser.T__2);
            this.state = 406;
            this.topTypes();
            this.state = 407;
            this.match(ErlangParser.T__3);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 409;
            this.tokAtom();
            this.state = 410;
            this.match(ErlangParser.T__4);
            this.state = 411;
            this.tokAtom();
            this.state = 412;
            this.match(ErlangParser.T__2);
            this.state = 413;
            this.match(ErlangParser.T__3);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 415;
            this.tokAtom();
            this.state = 416;
            this.match(ErlangParser.T__4);
            this.state = 417;
            this.tokAtom();
            this.state = 418;
            this.match(ErlangParser.T__2);
            this.state = 419;
            this.topTypes();
            this.state = 420;
            this.match(ErlangParser.T__3);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 422;
            this.match(ErlangParser.T__14);
            this.state = 423;
            this.match(ErlangParser.T__15);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 424;
            this.match(ErlangParser.T__14);
            this.state = 425;
            this.topType();
            this.state = 426;
            this.match(ErlangParser.T__15);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 428;
            this.match(ErlangParser.T__14);
            this.state = 429;
            this.topType();
            this.state = 430;
            this.match(ErlangParser.T__7);
            this.state = 431;
            this.match(ErlangParser.T__16);
            this.state = 432;
            this.match(ErlangParser.T__15);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 434;
            this.match(ErlangParser.T__8);
            this.state = 435;
            this.match(ErlangParser.T__9);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 436;
            this.match(ErlangParser.T__8);
            this.state = 437;
            this.topTypes();
            this.state = 438;
            this.match(ErlangParser.T__9);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 440;
            this.match(ErlangParser.T__17);
            this.state = 441;
            this.tokAtom();
            this.state = 442;
            this.match(ErlangParser.T__8);
            this.state = 443;
            this.match(ErlangParser.T__9);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 445;
            this.match(ErlangParser.T__17);
            this.state = 446;
            this.tokAtom();
            this.state = 447;
            this.match(ErlangParser.T__8);
            this.state = 448;
            this.fieldTypes();
            this.state = 449;
            this.match(ErlangParser.T__9);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 451;
            this.binaryType();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 452;
            this.tokInteger();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 453;
            this.match(ErlangParser.T__18);
            this.state = 454;
            this.match(ErlangParser.T__2);
            this.state = 455;
            this.match(ErlangParser.T__3);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 456;
            this.match(ErlangParser.T__18);
            this.state = 457;
            this.match(ErlangParser.T__2);
            this.state = 458;
            this.funType100();
            this.state = 459;
            this.match(ErlangParser.T__3);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunType100Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_funType100;
    return this;
}

FunType100Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunType100Context.prototype.constructor = FunType100Context;

FunType100Context.prototype.topType = function() {
    return this.getTypedRuleContext(TopTypeContext,0);
};

FunType100Context.prototype.funType = function() {
    return this.getTypedRuleContext(FunTypeContext,0);
};

FunType100Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFunType100(this);
	}
};

FunType100Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFunType100(this);
	}
};




ErlangParser.FunType100Context = FunType100Context;

ErlangParser.prototype.funType100 = function() {

    var localctx = new FunType100Context(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ErlangParser.RULE_funType100);
    try {
        this.state = 469;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 463;
            this.match(ErlangParser.T__2);
            this.state = 464;
            this.match(ErlangParser.T__16);
            this.state = 465;
            this.match(ErlangParser.T__3);
            this.state = 466;
            this.match(ErlangParser.T__19);
            this.state = 467;
            this.topType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 468;
            this.funType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_funType;
    return this;
}

FunTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunTypeContext.prototype.constructor = FunTypeContext;

FunTypeContext.prototype.topType = function() {
    return this.getTypedRuleContext(TopTypeContext,0);
};

FunTypeContext.prototype.topTypes = function() {
    return this.getTypedRuleContext(TopTypesContext,0);
};

FunTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFunType(this);
	}
};

FunTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFunType(this);
	}
};




ErlangParser.FunTypeContext = FunTypeContext;

ErlangParser.prototype.funType = function() {

    var localctx = new FunTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ErlangParser.RULE_funType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        this.match(ErlangParser.T__2);
        this.state = 473;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__8) | (1 << ErlangParser.T__14) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__18) | (1 << ErlangParser.T__20))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ErlangParser.T__39 - 40)) | (1 << (ErlangParser.T__40 - 40)) | (1 << (ErlangParser.T__41 - 40)) | (1 << (ErlangParser.TokAtom - 40)) | (1 << (ErlangParser.TokVar - 40)) | (1 << (ErlangParser.TokInteger - 40)))) !== 0)) {
            this.state = 472;
            this.topTypes();
        }

        this.state = 475;
        this.match(ErlangParser.T__3);
        this.state = 476;
        this.match(ErlangParser.T__19);
        this.state = 477;
        this.topType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldTypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_fieldTypes;
    return this;
}

FieldTypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldTypesContext.prototype.constructor = FieldTypesContext;

FieldTypesContext.prototype.fieldType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldTypeContext);
    } else {
        return this.getTypedRuleContext(FieldTypeContext,i);
    }
};

FieldTypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFieldTypes(this);
	}
};

FieldTypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFieldTypes(this);
	}
};




ErlangParser.FieldTypesContext = FieldTypesContext;

ErlangParser.prototype.fieldTypes = function() {

    var localctx = new FieldTypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ErlangParser.RULE_fieldTypes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 479;
        this.fieldType();
        this.state = 484;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__7) {
            this.state = 480;
            this.match(ErlangParser.T__7);
            this.state = 481;
            this.fieldType();
            this.state = 486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_fieldType;
    return this;
}

FieldTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldTypeContext.prototype.constructor = FieldTypeContext;

FieldTypeContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

FieldTypeContext.prototype.topType = function() {
    return this.getTypedRuleContext(TopTypeContext,0);
};

FieldTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFieldType(this);
	}
};

FieldTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFieldType(this);
	}
};




ErlangParser.FieldTypeContext = FieldTypeContext;

ErlangParser.prototype.fieldType = function() {

    var localctx = new FieldTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ErlangParser.RULE_fieldType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this.tokAtom();
        this.state = 488;
        this.match(ErlangParser.T__6);
        this.state = 489;
        this.topType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BinaryTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_binaryType;
    return this;
}

BinaryTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryTypeContext.prototype.constructor = BinaryTypeContext;

BinaryTypeContext.prototype.binBaseType = function() {
    return this.getTypedRuleContext(BinBaseTypeContext,0);
};

BinaryTypeContext.prototype.binUnitType = function() {
    return this.getTypedRuleContext(BinUnitTypeContext,0);
};

BinaryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBinaryType(this);
	}
};

BinaryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBinaryType(this);
	}
};




ErlangParser.BinaryTypeContext = BinaryTypeContext;

ErlangParser.prototype.binaryType = function() {

    var localctx = new BinaryTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ErlangParser.RULE_binaryType);
    try {
        this.state = 507;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 491;
            this.match(ErlangParser.T__20);
            this.state = 492;
            this.match(ErlangParser.T__21);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 493;
            this.match(ErlangParser.T__20);
            this.state = 494;
            this.binBaseType();
            this.state = 495;
            this.match(ErlangParser.T__21);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 497;
            this.match(ErlangParser.T__20);
            this.state = 498;
            this.binUnitType();
            this.state = 499;
            this.match(ErlangParser.T__21);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 501;
            this.match(ErlangParser.T__20);
            this.state = 502;
            this.binBaseType();
            this.state = 503;
            this.match(ErlangParser.T__7);
            this.state = 504;
            this.binUnitType();
            this.state = 505;
            this.match(ErlangParser.T__21);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BinBaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_binBaseType;
    return this;
}

BinBaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinBaseTypeContext.prototype.constructor = BinBaseTypeContext;

BinBaseTypeContext.prototype.tokVar = function() {
    return this.getTypedRuleContext(TokVarContext,0);
};

BinBaseTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

BinBaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBinBaseType(this);
	}
};

BinBaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBinBaseType(this);
	}
};




ErlangParser.BinBaseTypeContext = BinBaseTypeContext;

ErlangParser.prototype.binBaseType = function() {

    var localctx = new BinBaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ErlangParser.RULE_binBaseType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this.tokVar();
        this.state = 510;
        this.match(ErlangParser.T__4);
        this.state = 511;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BinUnitTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_binUnitType;
    return this;
}

BinUnitTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinUnitTypeContext.prototype.constructor = BinUnitTypeContext;

BinUnitTypeContext.prototype.tokVar = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TokVarContext);
    } else {
        return this.getTypedRuleContext(TokVarContext,i);
    }
};

BinUnitTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

BinUnitTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBinUnitType(this);
	}
};

BinUnitTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBinUnitType(this);
	}
};




ErlangParser.BinUnitTypeContext = BinUnitTypeContext;

ErlangParser.prototype.binUnitType = function() {

    var localctx = new BinUnitTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ErlangParser.RULE_binUnitType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 513;
        this.tokVar();
        this.state = 514;
        this.match(ErlangParser.T__4);
        this.state = 515;
        this.tokVar();
        this.state = 516;
        this.match(ErlangParser.T__22);
        this.state = 517;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttrValContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_attrVal;
    return this;
}

AttrValContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttrValContext.prototype.constructor = AttrValContext;

AttrValContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AttrValContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

AttrValContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterAttrVal(this);
	}
};

AttrValContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitAttrVal(this);
	}
};




ErlangParser.AttrValContext = AttrValContext;

ErlangParser.prototype.attrVal = function() {

    var localctx = new AttrValContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ErlangParser.RULE_attrVal);
    try {
        this.state = 534;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 519;
            this.expr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 520;
            this.match(ErlangParser.T__2);
            this.state = 521;
            this.expr();
            this.state = 522;
            this.match(ErlangParser.T__3);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 524;
            this.expr();
            this.state = 525;
            this.match(ErlangParser.T__7);
            this.state = 526;
            this.exprs();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 528;
            this.match(ErlangParser.T__2);
            this.state = 529;
            this.expr();
            this.state = 530;
            this.match(ErlangParser.T__7);
            this.state = 531;
            this.exprs();
            this.state = 532;
            this.match(ErlangParser.T__3);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_function;
    return this;
}

FunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionContext.prototype.constructor = FunctionContext;

FunctionContext.prototype.functionClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionClauseContext);
    } else {
        return this.getTypedRuleContext(FunctionClauseContext,i);
    }
};

FunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFunction(this);
	}
};

FunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFunction(this);
	}
};




ErlangParser.FunctionContext = FunctionContext;

ErlangParser.prototype.function = function() {

    var localctx = new FunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ErlangParser.RULE_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 536;
        this.functionClause();
        this.state = 541;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__10) {
            this.state = 537;
            this.match(ErlangParser.T__10);
            this.state = 538;
            this.functionClause();
            this.state = 543;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_functionClause;
    return this;
}

FunctionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionClauseContext.prototype.constructor = FunctionClauseContext;

FunctionClauseContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

FunctionClauseContext.prototype.clauseArgs = function() {
    return this.getTypedRuleContext(ClauseArgsContext,0);
};

FunctionClauseContext.prototype.clauseGuard = function() {
    return this.getTypedRuleContext(ClauseGuardContext,0);
};

FunctionClauseContext.prototype.clauseBody = function() {
    return this.getTypedRuleContext(ClauseBodyContext,0);
};

FunctionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFunctionClause(this);
	}
};

FunctionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFunctionClause(this);
	}
};




ErlangParser.FunctionClauseContext = FunctionClauseContext;

ErlangParser.prototype.functionClause = function() {

    var localctx = new FunctionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ErlangParser.RULE_functionClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 544;
        this.tokAtom();
        this.state = 545;
        this.clauseArgs();
        this.state = 546;
        this.clauseGuard();
        this.state = 547;
        this.clauseBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClauseArgsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_clauseArgs;
    return this;
}

ClauseArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClauseArgsContext.prototype.constructor = ClauseArgsContext;

ClauseArgsContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ClauseArgsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterClauseArgs(this);
	}
};

ClauseArgsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitClauseArgs(this);
	}
};




ErlangParser.ClauseArgsContext = ClauseArgsContext;

ErlangParser.prototype.clauseArgs = function() {

    var localctx = new ClauseArgsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ErlangParser.RULE_clauseArgs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 549;
        this.argumentList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClauseGuardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_clauseGuard;
    return this;
}

ClauseGuardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClauseGuardContext.prototype.constructor = ClauseGuardContext;

ClauseGuardContext.prototype.guard = function() {
    return this.getTypedRuleContext(GuardContext,0);
};

ClauseGuardContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterClauseGuard(this);
	}
};

ClauseGuardContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitClauseGuard(this);
	}
};




ErlangParser.ClauseGuardContext = ClauseGuardContext;

ErlangParser.prototype.clauseGuard = function() {

    var localctx = new ClauseGuardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ErlangParser.RULE_clauseGuard);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__11) {
            this.state = 551;
            this.match(ErlangParser.T__11);
            this.state = 552;
            this.guard();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClauseBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_clauseBody;
    return this;
}

ClauseBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClauseBodyContext.prototype.constructor = ClauseBodyContext;

ClauseBodyContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

ClauseBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterClauseBody(this);
	}
};

ClauseBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitClauseBody(this);
	}
};




ErlangParser.ClauseBodyContext = ClauseBodyContext;

ErlangParser.prototype.clauseBody = function() {

    var localctx = new ClauseBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ErlangParser.RULE_clauseBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 555;
        this.match(ErlangParser.T__19);
        this.state = 556;
        this.exprs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ExprContext.prototype.expr100 = function() {
    return this.getTypedRuleContext(Expr100Context,0);
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr(this);
	}
};




ErlangParser.ExprContext = ExprContext;

ErlangParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ErlangParser.RULE_expr);
    try {
        this.state = 561;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ErlangParser.T__23:
            this.enterOuterAlt(localctx, 1);
            this.state = 558;
            this.match(ErlangParser.T__23);
            this.state = 559;
            this.expr();
            break;
        case ErlangParser.T__1:
        case ErlangParser.T__2:
        case ErlangParser.T__8:
        case ErlangParser.T__14:
        case ErlangParser.T__17:
        case ErlangParser.T__18:
        case ErlangParser.T__20:
        case ErlangParser.T__28:
        case ErlangParser.T__33:
        case ErlangParser.T__34:
        case ErlangParser.T__36:
        case ErlangParser.T__38:
        case ErlangParser.T__39:
        case ErlangParser.T__40:
        case ErlangParser.T__41:
        case ErlangParser.TokAtom:
        case ErlangParser.TokVar:
        case ErlangParser.TokFloat:
        case ErlangParser.TokInteger:
        case ErlangParser.TokChar:
        case ErlangParser.TokString:
            this.enterOuterAlt(localctx, 2);
            this.state = 560;
            this.expr100();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr100Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr100;
    return this;
}

Expr100Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr100Context.prototype.constructor = Expr100Context;

Expr100Context.prototype.expr150 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr150Context);
    } else {
        return this.getTypedRuleContext(Expr150Context,i);
    }
};

Expr100Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr100(this);
	}
};

Expr100Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr100(this);
	}
};




ErlangParser.Expr100Context = Expr100Context;

ErlangParser.prototype.expr100 = function() {

    var localctx = new Expr100Context(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ErlangParser.RULE_expr100);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this.expr150();
        this.state = 568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__24 || _la===ErlangParser.T__25) {
            this.state = 564;
            _la = this._input.LA(1);
            if(!(_la===ErlangParser.T__24 || _la===ErlangParser.T__25)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 565;
            this.expr150();
            this.state = 570;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr150Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr150;
    return this;
}

Expr150Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr150Context.prototype.constructor = Expr150Context;

Expr150Context.prototype.expr160 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr160Context);
    } else {
        return this.getTypedRuleContext(Expr160Context,i);
    }
};

Expr150Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr150(this);
	}
};

Expr150Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr150(this);
	}
};




ErlangParser.Expr150Context = Expr150Context;

ErlangParser.prototype.expr150 = function() {

    var localctx = new Expr150Context(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ErlangParser.RULE_expr150);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        this.expr160();
        this.state = 576;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__26) {
            this.state = 572;
            this.match(ErlangParser.T__26);
            this.state = 573;
            this.expr160();
            this.state = 578;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr160Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr160;
    return this;
}

Expr160Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr160Context.prototype.constructor = Expr160Context;

Expr160Context.prototype.expr200 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr200Context);
    } else {
        return this.getTypedRuleContext(Expr200Context,i);
    }
};

Expr160Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr160(this);
	}
};

Expr160Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr160(this);
	}
};




ErlangParser.Expr160Context = Expr160Context;

ErlangParser.prototype.expr160 = function() {

    var localctx = new Expr160Context(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ErlangParser.RULE_expr160);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 579;
        this.expr200();
        this.state = 584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__27) {
            this.state = 580;
            this.match(ErlangParser.T__27);
            this.state = 581;
            this.expr200();
            this.state = 586;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr200Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr200;
    return this;
}

Expr200Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr200Context.prototype.constructor = Expr200Context;

Expr200Context.prototype.expr300 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr300Context);
    } else {
        return this.getTypedRuleContext(Expr300Context,i);
    }
};

Expr200Context.prototype.compOp = function() {
    return this.getTypedRuleContext(CompOpContext,0);
};

Expr200Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr200(this);
	}
};

Expr200Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr200(this);
	}
};




ErlangParser.Expr200Context = Expr200Context;

ErlangParser.prototype.expr200 = function() {

    var localctx = new Expr200Context(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ErlangParser.RULE_expr200);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 587;
        this.expr300();
        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (ErlangParser.T__54 - 55)) | (1 << (ErlangParser.T__55 - 55)) | (1 << (ErlangParser.T__56 - 55)) | (1 << (ErlangParser.T__57 - 55)) | (1 << (ErlangParser.T__58 - 55)) | (1 << (ErlangParser.T__59 - 55)) | (1 << (ErlangParser.T__60 - 55)) | (1 << (ErlangParser.T__61 - 55)))) !== 0)) {
            this.state = 588;
            this.compOp();
            this.state = 589;
            this.expr300();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr300Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr300;
    return this;
}

Expr300Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr300Context.prototype.constructor = Expr300Context;

Expr300Context.prototype.expr400 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr400Context);
    } else {
        return this.getTypedRuleContext(Expr400Context,i);
    }
};

Expr300Context.prototype.listOp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ListOpContext);
    } else {
        return this.getTypedRuleContext(ListOpContext,i);
    }
};

Expr300Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr300(this);
	}
};

Expr300Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr300(this);
	}
};




ErlangParser.Expr300Context = Expr300Context;

ErlangParser.prototype.expr300 = function() {

    var localctx = new Expr300Context(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ErlangParser.RULE_expr300);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        this.expr400();
        this.state = 599;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__52 || _la===ErlangParser.T__53) {
            this.state = 594;
            this.listOp();
            this.state = 595;
            this.expr400();
            this.state = 601;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr400Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr400;
    return this;
}

Expr400Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr400Context.prototype.constructor = Expr400Context;

Expr400Context.prototype.expr500 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr500Context);
    } else {
        return this.getTypedRuleContext(Expr500Context,i);
    }
};

Expr400Context.prototype.addOp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AddOpContext);
    } else {
        return this.getTypedRuleContext(AddOpContext,i);
    }
};

Expr400Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr400(this);
	}
};

Expr400Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr400(this);
	}
};




ErlangParser.Expr400Context = Expr400Context;

ErlangParser.prototype.expr400 = function() {

    var localctx = new Expr400Context(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ErlangParser.RULE_expr400);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        this.expr500();
        this.state = 608;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__1 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ErlangParser.T__39 - 40)) | (1 << (ErlangParser.T__46 - 40)) | (1 << (ErlangParser.T__47 - 40)) | (1 << (ErlangParser.T__48 - 40)) | (1 << (ErlangParser.T__49 - 40)) | (1 << (ErlangParser.T__50 - 40)) | (1 << (ErlangParser.T__51 - 40)))) !== 0)) {
            this.state = 603;
            this.addOp();
            this.state = 604;
            this.expr500();
            this.state = 610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr500Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr500;
    return this;
}

Expr500Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr500Context.prototype.constructor = Expr500Context;

Expr500Context.prototype.expr600 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expr600Context);
    } else {
        return this.getTypedRuleContext(Expr600Context,i);
    }
};

Expr500Context.prototype.multOp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultOpContext);
    } else {
        return this.getTypedRuleContext(MultOpContext,i);
    }
};

Expr500Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr500(this);
	}
};

Expr500Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr500(this);
	}
};




ErlangParser.Expr500Context = Expr500Context;

ErlangParser.prototype.expr500 = function() {

    var localctx = new Expr500Context(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ErlangParser.RULE_expr500);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 611;
        this.expr600();
        this.state = 617;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__5 || _la===ErlangParser.T__22 || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (ErlangParser.T__42 - 43)) | (1 << (ErlangParser.T__43 - 43)) | (1 << (ErlangParser.T__44 - 43)) | (1 << (ErlangParser.T__45 - 43)))) !== 0)) {
            this.state = 612;
            this.multOp();
            this.state = 613;
            this.expr600();
            this.state = 619;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr600Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr600;
    return this;
}

Expr600Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr600Context.prototype.constructor = Expr600Context;

Expr600Context.prototype.expr700 = function() {
    return this.getTypedRuleContext(Expr700Context,0);
};

Expr600Context.prototype.prefixOp = function() {
    return this.getTypedRuleContext(PrefixOpContext,0);
};

Expr600Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr600(this);
	}
};

Expr600Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr600(this);
	}
};




ErlangParser.Expr600Context = Expr600Context;

ErlangParser.prototype.expr600 = function() {

    var localctx = new Expr600Context(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ErlangParser.RULE_expr600);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__1 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ErlangParser.T__39 - 40)) | (1 << (ErlangParser.T__40 - 40)) | (1 << (ErlangParser.T__41 - 40)))) !== 0)) {
            this.state = 620;
            this.prefixOp();
        }

        this.state = 623;
        this.expr700();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr700Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr700;
    return this;
}

Expr700Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr700Context.prototype.constructor = Expr700Context;

Expr700Context.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

Expr700Context.prototype.recordExpr = function() {
    return this.getTypedRuleContext(RecordExprContext,0);
};

Expr700Context.prototype.expr800 = function() {
    return this.getTypedRuleContext(Expr800Context,0);
};

Expr700Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr700(this);
	}
};

Expr700Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr700(this);
	}
};




ErlangParser.Expr700Context = Expr700Context;

ErlangParser.prototype.expr700 = function() {

    var localctx = new Expr700Context(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ErlangParser.RULE_expr700);
    try {
        this.state = 628;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 625;
            this.functionCall();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 626;
            this.recordExpr(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 627;
            this.expr800();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr800Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_expr800;
    return this;
}

Expr800Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr800Context.prototype.constructor = Expr800Context;

Expr800Context.prototype.exprMax = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprMaxContext);
    } else {
        return this.getTypedRuleContext(ExprMaxContext,i);
    }
};

Expr800Context.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExpr800(this);
	}
};

Expr800Context.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExpr800(this);
	}
};




ErlangParser.Expr800Context = Expr800Context;

ErlangParser.prototype.expr800 = function() {

    var localctx = new Expr800Context(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ErlangParser.RULE_expr800);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.exprMax();
        this.state = 633;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__4) {
            this.state = 631;
            this.match(ErlangParser.T__4);
            this.state = 632;
            this.exprMax();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprMaxContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_exprMax;
    return this;
}

ExprMaxContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprMaxContext.prototype.constructor = ExprMaxContext;

ExprMaxContext.prototype.tokVar = function() {
    return this.getTypedRuleContext(TokVarContext,0);
};

ExprMaxContext.prototype.atomic = function() {
    return this.getTypedRuleContext(AtomicContext,0);
};

ExprMaxContext.prototype.list = function() {
    return this.getTypedRuleContext(ListContext,0);
};

ExprMaxContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

ExprMaxContext.prototype.listComprehension = function() {
    return this.getTypedRuleContext(ListComprehensionContext,0);
};

ExprMaxContext.prototype.binaryComprehension = function() {
    return this.getTypedRuleContext(BinaryComprehensionContext,0);
};

ExprMaxContext.prototype.tuple = function() {
    return this.getTypedRuleContext(TupleContext,0);
};

ExprMaxContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ExprMaxContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

ExprMaxContext.prototype.ifExpr = function() {
    return this.getTypedRuleContext(IfExprContext,0);
};

ExprMaxContext.prototype.caseExpr = function() {
    return this.getTypedRuleContext(CaseExprContext,0);
};

ExprMaxContext.prototype.receiveExpr = function() {
    return this.getTypedRuleContext(ReceiveExprContext,0);
};

ExprMaxContext.prototype.funExpr = function() {
    return this.getTypedRuleContext(FunExprContext,0);
};

ExprMaxContext.prototype.tryExpr = function() {
    return this.getTypedRuleContext(TryExprContext,0);
};

ExprMaxContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExprMax(this);
	}
};

ExprMaxContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExprMax(this);
	}
};




ErlangParser.ExprMaxContext = ExprMaxContext;

ErlangParser.prototype.exprMax = function() {

    var localctx = new ExprMaxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ErlangParser.RULE_exprMax);
    try {
        this.state = 655;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 635;
            this.tokVar();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 636;
            this.atomic();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 637;
            this.list();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 638;
            this.binary();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 639;
            this.listComprehension();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 640;
            this.binaryComprehension();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 641;
            this.tuple();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 642;
            this.match(ErlangParser.T__2);
            this.state = 643;
            this.expr();
            this.state = 644;
            this.match(ErlangParser.T__3);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 646;
            this.match(ErlangParser.T__28);
            this.state = 647;
            this.exprs();
            this.state = 648;
            this.match(ErlangParser.T__29);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 650;
            this.ifExpr();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 651;
            this.caseExpr();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 652;
            this.receiveExpr();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 653;
            this.funExpr();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 654;
            this.tryExpr();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_list;
    return this;
}

ListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListContext.prototype.constructor = ListContext;

ListContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ListContext.prototype.tail = function() {
    return this.getTypedRuleContext(TailContext,0);
};

ListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterList(this);
	}
};

ListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitList(this);
	}
};




ErlangParser.ListContext = ListContext;

ErlangParser.prototype.list = function() {

    var localctx = new ListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ErlangParser.RULE_list);
    try {
        this.state = 663;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 657;
            this.match(ErlangParser.T__14);
            this.state = 658;
            this.match(ErlangParser.T__15);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 659;
            this.match(ErlangParser.T__14);
            this.state = 660;
            this.expr();
            this.state = 661;
            this.tail();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tail;
    return this;
}

TailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TailContext.prototype.constructor = TailContext;

TailContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TailContext.prototype.tail = function() {
    return this.getTypedRuleContext(TailContext,0);
};

TailContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTail(this);
	}
};

TailContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTail(this);
	}
};




ErlangParser.TailContext = TailContext;

ErlangParser.prototype.tail = function() {

    var localctx = new TailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ErlangParser.RULE_tail);
    try {
        this.state = 674;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ErlangParser.T__15:
            this.enterOuterAlt(localctx, 1);
            this.state = 665;
            this.match(ErlangParser.T__15);
            break;
        case ErlangParser.T__12:
            this.enterOuterAlt(localctx, 2);
            this.state = 666;
            this.match(ErlangParser.T__12);
            this.state = 667;
            this.expr();
            this.state = 668;
            this.match(ErlangParser.T__15);
            break;
        case ErlangParser.T__7:
            this.enterOuterAlt(localctx, 3);
            this.state = 670;
            this.match(ErlangParser.T__7);
            this.state = 671;
            this.expr();
            this.state = 672;
            this.tail();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BinaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_binary;
    return this;
}

BinaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryContext.prototype.constructor = BinaryContext;

BinaryContext.prototype.binElements = function() {
    return this.getTypedRuleContext(BinElementsContext,0);
};

BinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBinary(this);
	}
};

BinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBinary(this);
	}
};




ErlangParser.BinaryContext = BinaryContext;

ErlangParser.prototype.binary = function() {

    var localctx = new BinaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ErlangParser.RULE_binary);
    try {
        this.state = 682;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 676;
            this.match(ErlangParser.T__20);
            this.state = 677;
            this.match(ErlangParser.T__21);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 678;
            this.match(ErlangParser.T__20);
            this.state = 679;
            this.binElements();
            this.state = 680;
            this.match(ErlangParser.T__21);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BinElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_binElements;
    return this;
}

BinElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinElementsContext.prototype.constructor = BinElementsContext;

BinElementsContext.prototype.binElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BinElementContext);
    } else {
        return this.getTypedRuleContext(BinElementContext,i);
    }
};

BinElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBinElements(this);
	}
};

BinElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBinElements(this);
	}
};




ErlangParser.BinElementsContext = BinElementsContext;

ErlangParser.prototype.binElements = function() {

    var localctx = new BinElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ErlangParser.RULE_binElements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this.binElement();
        this.state = 689;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__7) {
            this.state = 685;
            this.match(ErlangParser.T__7);
            this.state = 686;
            this.binElement();
            this.state = 691;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BinElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_binElement;
    return this;
}

BinElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinElementContext.prototype.constructor = BinElementContext;

BinElementContext.prototype.bitExpr = function() {
    return this.getTypedRuleContext(BitExprContext,0);
};

BinElementContext.prototype.optBitSizeExpr = function() {
    return this.getTypedRuleContext(OptBitSizeExprContext,0);
};

BinElementContext.prototype.optBitTypeList = function() {
    return this.getTypedRuleContext(OptBitTypeListContext,0);
};

BinElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBinElement(this);
	}
};

BinElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBinElement(this);
	}
};




ErlangParser.BinElementContext = BinElementContext;

ErlangParser.prototype.binElement = function() {

    var localctx = new BinElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ErlangParser.RULE_binElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 692;
        this.bitExpr();
        this.state = 693;
        this.optBitSizeExpr();
        this.state = 694;
        this.optBitTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_bitExpr;
    return this;
}

BitExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitExprContext.prototype.constructor = BitExprContext;

BitExprContext.prototype.exprMax = function() {
    return this.getTypedRuleContext(ExprMaxContext,0);
};

BitExprContext.prototype.prefixOp = function() {
    return this.getTypedRuleContext(PrefixOpContext,0);
};

BitExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBitExpr(this);
	}
};

BitExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBitExpr(this);
	}
};




ErlangParser.BitExprContext = BitExprContext;

ErlangParser.prototype.bitExpr = function() {

    var localctx = new BitExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ErlangParser.RULE_bitExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__1 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ErlangParser.T__39 - 40)) | (1 << (ErlangParser.T__40 - 40)) | (1 << (ErlangParser.T__41 - 40)))) !== 0)) {
            this.state = 696;
            this.prefixOp();
        }

        this.state = 699;
        this.exprMax();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptBitSizeExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_optBitSizeExpr;
    return this;
}

OptBitSizeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptBitSizeExprContext.prototype.constructor = OptBitSizeExprContext;

OptBitSizeExprContext.prototype.bitSizeExpr = function() {
    return this.getTypedRuleContext(BitSizeExprContext,0);
};

OptBitSizeExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterOptBitSizeExpr(this);
	}
};

OptBitSizeExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitOptBitSizeExpr(this);
	}
};




ErlangParser.OptBitSizeExprContext = OptBitSizeExprContext;

ErlangParser.prototype.optBitSizeExpr = function() {

    var localctx = new OptBitSizeExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ErlangParser.RULE_optBitSizeExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__4) {
            this.state = 701;
            this.match(ErlangParser.T__4);
            this.state = 702;
            this.bitSizeExpr();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptBitTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_optBitTypeList;
    return this;
}

OptBitTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptBitTypeListContext.prototype.constructor = OptBitTypeListContext;

OptBitTypeListContext.prototype.bitTypeList = function() {
    return this.getTypedRuleContext(BitTypeListContext,0);
};

OptBitTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterOptBitTypeList(this);
	}
};

OptBitTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitOptBitTypeList(this);
	}
};




ErlangParser.OptBitTypeListContext = OptBitTypeListContext;

ErlangParser.prototype.optBitTypeList = function() {

    var localctx = new OptBitTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ErlangParser.RULE_optBitTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 707;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__5) {
            this.state = 705;
            this.match(ErlangParser.T__5);
            this.state = 706;
            this.bitTypeList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_bitTypeList;
    return this;
}

BitTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitTypeListContext.prototype.constructor = BitTypeListContext;

BitTypeListContext.prototype.bitType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BitTypeContext);
    } else {
        return this.getTypedRuleContext(BitTypeContext,i);
    }
};

BitTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBitTypeList(this);
	}
};

BitTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBitTypeList(this);
	}
};




ErlangParser.BitTypeListContext = BitTypeListContext;

ErlangParser.prototype.bitTypeList = function() {

    var localctx = new BitTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ErlangParser.RULE_bitTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 709;
        this.bitType();
        this.state = 714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__1) {
            this.state = 710;
            this.match(ErlangParser.T__1);
            this.state = 711;
            this.bitType();
            this.state = 716;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_bitType;
    return this;
}

BitTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitTypeContext.prototype.constructor = BitTypeContext;

BitTypeContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

BitTypeContext.prototype.tokInteger = function() {
    return this.getTypedRuleContext(TokIntegerContext,0);
};

BitTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBitType(this);
	}
};

BitTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBitType(this);
	}
};




ErlangParser.BitTypeContext = BitTypeContext;

ErlangParser.prototype.bitType = function() {

    var localctx = new BitTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ErlangParser.RULE_bitType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 717;
        this.tokAtom();
        this.state = 720;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__4) {
            this.state = 718;
            this.match(ErlangParser.T__4);
            this.state = 719;
            this.tokInteger();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitSizeExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_bitSizeExpr;
    return this;
}

BitSizeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitSizeExprContext.prototype.constructor = BitSizeExprContext;

BitSizeExprContext.prototype.exprMax = function() {
    return this.getTypedRuleContext(ExprMaxContext,0);
};

BitSizeExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBitSizeExpr(this);
	}
};

BitSizeExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBitSizeExpr(this);
	}
};




ErlangParser.BitSizeExprContext = BitSizeExprContext;

ErlangParser.prototype.bitSizeExpr = function() {

    var localctx = new BitSizeExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ErlangParser.RULE_bitSizeExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 722;
        this.exprMax();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListComprehensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_listComprehension;
    return this;
}

ListComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListComprehensionContext.prototype.constructor = ListComprehensionContext;

ListComprehensionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ListComprehensionContext.prototype.lcExprs = function() {
    return this.getTypedRuleContext(LcExprsContext,0);
};

ListComprehensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterListComprehension(this);
	}
};

ListComprehensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitListComprehension(this);
	}
};




ErlangParser.ListComprehensionContext = ListComprehensionContext;

ErlangParser.prototype.listComprehension = function() {

    var localctx = new ListComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ErlangParser.RULE_listComprehension);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.match(ErlangParser.T__14);
        this.state = 725;
        this.expr();
        this.state = 726;
        this.match(ErlangParser.T__30);
        this.state = 727;
        this.lcExprs();
        this.state = 728;
        this.match(ErlangParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BinaryComprehensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_binaryComprehension;
    return this;
}

BinaryComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryComprehensionContext.prototype.constructor = BinaryComprehensionContext;

BinaryComprehensionContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

BinaryComprehensionContext.prototype.lcExprs = function() {
    return this.getTypedRuleContext(LcExprsContext,0);
};

BinaryComprehensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterBinaryComprehension(this);
	}
};

BinaryComprehensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitBinaryComprehension(this);
	}
};




ErlangParser.BinaryComprehensionContext = BinaryComprehensionContext;

ErlangParser.prototype.binaryComprehension = function() {

    var localctx = new BinaryComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ErlangParser.RULE_binaryComprehension);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 730;
        this.match(ErlangParser.T__20);
        this.state = 731;
        this.binary();
        this.state = 732;
        this.match(ErlangParser.T__30);
        this.state = 733;
        this.lcExprs();
        this.state = 734;
        this.match(ErlangParser.T__21);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LcExprsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_lcExprs;
    return this;
}

LcExprsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LcExprsContext.prototype.constructor = LcExprsContext;

LcExprsContext.prototype.lcExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LcExprContext);
    } else {
        return this.getTypedRuleContext(LcExprContext,i);
    }
};

LcExprsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterLcExprs(this);
	}
};

LcExprsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitLcExprs(this);
	}
};




ErlangParser.LcExprsContext = LcExprsContext;

ErlangParser.prototype.lcExprs = function() {

    var localctx = new LcExprsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ErlangParser.RULE_lcExprs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 736;
        this.lcExpr();
        this.state = 741;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__7) {
            this.state = 737;
            this.match(ErlangParser.T__7);
            this.state = 738;
            this.lcExpr();
            this.state = 743;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LcExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_lcExpr;
    return this;
}

LcExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LcExprContext.prototype.constructor = LcExprContext;

LcExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

LcExprContext.prototype.binary = function() {
    return this.getTypedRuleContext(BinaryContext,0);
};

LcExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterLcExpr(this);
	}
};

LcExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitLcExpr(this);
	}
};




ErlangParser.LcExprContext = LcExprContext;

ErlangParser.prototype.lcExpr = function() {

    var localctx = new LcExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ErlangParser.RULE_lcExpr);
    try {
        this.state = 753;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 744;
            this.expr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 745;
            this.expr();
            this.state = 746;
            this.match(ErlangParser.T__31);
            this.state = 747;
            this.expr();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 749;
            this.binary();
            this.state = 750;
            this.match(ErlangParser.T__32);
            this.state = 751;
            this.expr();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tuple;
    return this;
}

TupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleContext.prototype.constructor = TupleContext;

TupleContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

TupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTuple(this);
	}
};

TupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTuple(this);
	}
};




ErlangParser.TupleContext = TupleContext;

ErlangParser.prototype.tuple = function() {

    var localctx = new TupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ErlangParser.RULE_tuple);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 755;
        this.match(ErlangParser.T__8);
        this.state = 757;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__8) | (1 << ErlangParser.T__14) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__18) | (1 << ErlangParser.T__20) | (1 << ErlangParser.T__23) | (1 << ErlangParser.T__28))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ErlangParser.T__33 - 34)) | (1 << (ErlangParser.T__34 - 34)) | (1 << (ErlangParser.T__36 - 34)) | (1 << (ErlangParser.T__38 - 34)) | (1 << (ErlangParser.T__39 - 34)) | (1 << (ErlangParser.T__40 - 34)) | (1 << (ErlangParser.T__41 - 34)) | (1 << (ErlangParser.TokAtom - 34)) | (1 << (ErlangParser.TokVar - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ErlangParser.TokFloat - 66)) | (1 << (ErlangParser.TokInteger - 66)) | (1 << (ErlangParser.TokChar - 66)) | (1 << (ErlangParser.TokString - 66)))) !== 0)) {
            this.state = 756;
            this.exprs();
        }

        this.state = 759;
        this.match(ErlangParser.T__9);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RecordExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_recordExpr;
    return this;
}

RecordExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecordExprContext.prototype.constructor = RecordExprContext;

RecordExprContext.prototype.tokAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TokAtomContext);
    } else {
        return this.getTypedRuleContext(TokAtomContext,i);
    }
};

RecordExprContext.prototype.recordTuple = function() {
    return this.getTypedRuleContext(RecordTupleContext,0);
};

RecordExprContext.prototype.exprMax = function() {
    return this.getTypedRuleContext(ExprMaxContext,0);
};

RecordExprContext.prototype.recordExpr = function() {
    return this.getTypedRuleContext(RecordExprContext,0);
};

RecordExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterRecordExpr(this);
	}
};

RecordExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitRecordExpr(this);
	}
};



ErlangParser.prototype.recordExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RecordExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 136;
    this.enterRecursionRule(localctx, 136, ErlangParser.RULE_recordExpr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 763;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__2) | (1 << ErlangParser.T__8) | (1 << ErlangParser.T__14) | (1 << ErlangParser.T__18) | (1 << ErlangParser.T__20) | (1 << ErlangParser.T__28))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ErlangParser.T__33 - 34)) | (1 << (ErlangParser.T__34 - 34)) | (1 << (ErlangParser.T__36 - 34)) | (1 << (ErlangParser.T__38 - 34)) | (1 << (ErlangParser.TokAtom - 34)) | (1 << (ErlangParser.TokVar - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ErlangParser.TokFloat - 66)) | (1 << (ErlangParser.TokInteger - 66)) | (1 << (ErlangParser.TokChar - 66)) | (1 << (ErlangParser.TokString - 66)))) !== 0)) {
            this.state = 762;
            this.exprMax();
        }

        this.state = 765;
        this.match(ErlangParser.T__17);
        this.state = 766;
        this.tokAtom();
        this.state = 770;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ErlangParser.T__0:
            this.state = 767;
            this.match(ErlangParser.T__0);
            this.state = 768;
            this.tokAtom();
            break;
        case ErlangParser.T__8:
            this.state = 769;
            this.recordTuple();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 782;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new RecordExprContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, ErlangParser.RULE_recordExpr);
                this.state = 772;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 773;
                this.match(ErlangParser.T__17);
                this.state = 774;
                this.tokAtom();
                this.state = 778;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case ErlangParser.T__0:
                    this.state = 775;
                    this.match(ErlangParser.T__0);
                    this.state = 776;
                    this.tokAtom();
                    break;
                case ErlangParser.T__8:
                    this.state = 777;
                    this.recordTuple();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 784;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function RecordTupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_recordTuple;
    return this;
}

RecordTupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecordTupleContext.prototype.constructor = RecordTupleContext;

RecordTupleContext.prototype.recordFields = function() {
    return this.getTypedRuleContext(RecordFieldsContext,0);
};

RecordTupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterRecordTuple(this);
	}
};

RecordTupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitRecordTuple(this);
	}
};




ErlangParser.RecordTupleContext = RecordTupleContext;

ErlangParser.prototype.recordTuple = function() {

    var localctx = new RecordTupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ErlangParser.RULE_recordTuple);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 785;
        this.match(ErlangParser.T__8);
        this.state = 787;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.TokAtom || _la===ErlangParser.TokVar) {
            this.state = 786;
            this.recordFields();
        }

        this.state = 789;
        this.match(ErlangParser.T__9);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RecordFieldsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_recordFields;
    return this;
}

RecordFieldsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecordFieldsContext.prototype.constructor = RecordFieldsContext;

RecordFieldsContext.prototype.recordField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RecordFieldContext);
    } else {
        return this.getTypedRuleContext(RecordFieldContext,i);
    }
};

RecordFieldsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterRecordFields(this);
	}
};

RecordFieldsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitRecordFields(this);
	}
};




ErlangParser.RecordFieldsContext = RecordFieldsContext;

ErlangParser.prototype.recordFields = function() {

    var localctx = new RecordFieldsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ErlangParser.RULE_recordFields);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 791;
        this.recordField();
        this.state = 796;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__7) {
            this.state = 792;
            this.match(ErlangParser.T__7);
            this.state = 793;
            this.recordField();
            this.state = 798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RecordFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_recordField;
    return this;
}

RecordFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RecordFieldContext.prototype.constructor = RecordFieldContext;

RecordFieldContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

RecordFieldContext.prototype.tokVar = function() {
    return this.getTypedRuleContext(TokVarContext,0);
};

RecordFieldContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

RecordFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterRecordField(this);
	}
};

RecordFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitRecordField(this);
	}
};




ErlangParser.RecordFieldContext = RecordFieldContext;

ErlangParser.prototype.recordField = function() {

    var localctx = new RecordFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ErlangParser.RULE_recordField);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 801;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ErlangParser.TokVar:
            this.state = 799;
            this.tokVar();
            break;
        case ErlangParser.TokAtom:
            this.state = 800;
            this.tokAtom();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 803;
        this.match(ErlangParser.T__24);
        this.state = 804;
        this.expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FunctionCallContext.prototype.expr800 = function() {
    return this.getTypedRuleContext(Expr800Context,0);
};

FunctionCallContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFunctionCall(this);
	}
};




ErlangParser.FunctionCallContext = FunctionCallContext;

ErlangParser.prototype.functionCall = function() {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ErlangParser.RULE_functionCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 806;
        this.expr800();
        this.state = 807;
        this.argumentList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_ifExpr;
    return this;
}

IfExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExprContext.prototype.constructor = IfExprContext;

IfExprContext.prototype.ifClauses = function() {
    return this.getTypedRuleContext(IfClausesContext,0);
};

IfExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterIfExpr(this);
	}
};

IfExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitIfExpr(this);
	}
};




ErlangParser.IfExprContext = IfExprContext;

ErlangParser.prototype.ifExpr = function() {

    var localctx = new IfExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ErlangParser.RULE_ifExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        this.match(ErlangParser.T__33);
        this.state = 810;
        this.ifClauses();
        this.state = 811;
        this.match(ErlangParser.T__29);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_ifClauses;
    return this;
}

IfClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfClausesContext.prototype.constructor = IfClausesContext;

IfClausesContext.prototype.ifClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IfClauseContext);
    } else {
        return this.getTypedRuleContext(IfClauseContext,i);
    }
};

IfClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterIfClauses(this);
	}
};

IfClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitIfClauses(this);
	}
};




ErlangParser.IfClausesContext = IfClausesContext;

ErlangParser.prototype.ifClauses = function() {

    var localctx = new IfClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ErlangParser.RULE_ifClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 813;
        this.ifClause();
        this.state = 818;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__10) {
            this.state = 814;
            this.match(ErlangParser.T__10);
            this.state = 815;
            this.ifClause();
            this.state = 820;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_ifClause;
    return this;
}

IfClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfClauseContext.prototype.constructor = IfClauseContext;

IfClauseContext.prototype.guard = function() {
    return this.getTypedRuleContext(GuardContext,0);
};

IfClauseContext.prototype.clauseBody = function() {
    return this.getTypedRuleContext(ClauseBodyContext,0);
};

IfClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterIfClause(this);
	}
};

IfClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitIfClause(this);
	}
};




ErlangParser.IfClauseContext = IfClauseContext;

ErlangParser.prototype.ifClause = function() {

    var localctx = new IfClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ErlangParser.RULE_ifClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.guard();
        this.state = 822;
        this.clauseBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_caseExpr;
    return this;
}

CaseExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseExprContext.prototype.constructor = CaseExprContext;

CaseExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CaseExprContext.prototype.crClauses = function() {
    return this.getTypedRuleContext(CrClausesContext,0);
};

CaseExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterCaseExpr(this);
	}
};

CaseExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitCaseExpr(this);
	}
};




ErlangParser.CaseExprContext = CaseExprContext;

ErlangParser.prototype.caseExpr = function() {

    var localctx = new CaseExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ErlangParser.RULE_caseExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.match(ErlangParser.T__34);
        this.state = 825;
        this.expr();
        this.state = 826;
        this.match(ErlangParser.T__35);
        this.state = 827;
        this.crClauses();
        this.state = 828;
        this.match(ErlangParser.T__29);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CrClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_crClauses;
    return this;
}

CrClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CrClausesContext.prototype.constructor = CrClausesContext;

CrClausesContext.prototype.crClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrClauseContext);
    } else {
        return this.getTypedRuleContext(CrClauseContext,i);
    }
};

CrClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterCrClauses(this);
	}
};

CrClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitCrClauses(this);
	}
};




ErlangParser.CrClausesContext = CrClausesContext;

ErlangParser.prototype.crClauses = function() {

    var localctx = new CrClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ErlangParser.RULE_crClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 830;
        this.crClause();
        this.state = 835;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__10) {
            this.state = 831;
            this.match(ErlangParser.T__10);
            this.state = 832;
            this.crClause();
            this.state = 837;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CrClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_crClause;
    return this;
}

CrClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CrClauseContext.prototype.constructor = CrClauseContext;

CrClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

CrClauseContext.prototype.clauseGuard = function() {
    return this.getTypedRuleContext(ClauseGuardContext,0);
};

CrClauseContext.prototype.clauseBody = function() {
    return this.getTypedRuleContext(ClauseBodyContext,0);
};

CrClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterCrClause(this);
	}
};

CrClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitCrClause(this);
	}
};




ErlangParser.CrClauseContext = CrClauseContext;

ErlangParser.prototype.crClause = function() {

    var localctx = new CrClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ErlangParser.RULE_crClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 838;
        this.expr();
        this.state = 839;
        this.clauseGuard();
        this.state = 840;
        this.clauseBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReceiveExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_receiveExpr;
    return this;
}

ReceiveExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReceiveExprContext.prototype.constructor = ReceiveExprContext;

ReceiveExprContext.prototype.crClauses = function() {
    return this.getTypedRuleContext(CrClausesContext,0);
};

ReceiveExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ReceiveExprContext.prototype.clauseBody = function() {
    return this.getTypedRuleContext(ClauseBodyContext,0);
};

ReceiveExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterReceiveExpr(this);
	}
};

ReceiveExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitReceiveExpr(this);
	}
};




ErlangParser.ReceiveExprContext = ReceiveExprContext;

ErlangParser.prototype.receiveExpr = function() {

    var localctx = new ReceiveExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ErlangParser.RULE_receiveExpr);
    try {
        this.state = 859;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 842;
            this.match(ErlangParser.T__36);
            this.state = 843;
            this.crClauses();
            this.state = 844;
            this.match(ErlangParser.T__29);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 846;
            this.match(ErlangParser.T__36);
            this.state = 847;
            this.match(ErlangParser.T__37);
            this.state = 848;
            this.expr();
            this.state = 849;
            this.clauseBody();
            this.state = 850;
            this.match(ErlangParser.T__29);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 852;
            this.match(ErlangParser.T__36);
            this.state = 853;
            this.crClauses();
            this.state = 854;
            this.match(ErlangParser.T__37);
            this.state = 855;
            this.expr();
            this.state = 856;
            this.clauseBody();
            this.state = 857;
            this.match(ErlangParser.T__29);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_funExpr;
    return this;
}

FunExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunExprContext.prototype.constructor = FunExprContext;

FunExprContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

FunExprContext.prototype.tokInteger = function() {
    return this.getTypedRuleContext(TokIntegerContext,0);
};

FunExprContext.prototype.atomOrVar = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AtomOrVarContext);
    } else {
        return this.getTypedRuleContext(AtomOrVarContext,i);
    }
};

FunExprContext.prototype.integerOrVar = function() {
    return this.getTypedRuleContext(IntegerOrVarContext,0);
};

FunExprContext.prototype.funClauses = function() {
    return this.getTypedRuleContext(FunClausesContext,0);
};

FunExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFunExpr(this);
	}
};

FunExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFunExpr(this);
	}
};




ErlangParser.FunExprContext = FunExprContext;

ErlangParser.prototype.funExpr = function() {

    var localctx = new FunExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ErlangParser.RULE_funExpr);
    try {
        this.state = 877;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 861;
            this.match(ErlangParser.T__18);
            this.state = 862;
            this.tokAtom();
            this.state = 863;
            this.match(ErlangParser.T__5);
            this.state = 864;
            this.tokInteger();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 866;
            this.match(ErlangParser.T__18);
            this.state = 867;
            this.atomOrVar();
            this.state = 868;
            this.match(ErlangParser.T__4);
            this.state = 869;
            this.atomOrVar();
            this.state = 870;
            this.match(ErlangParser.T__5);
            this.state = 871;
            this.integerOrVar();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 873;
            this.match(ErlangParser.T__18);
            this.state = 874;
            this.funClauses();
            this.state = 875;
            this.match(ErlangParser.T__29);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AtomOrVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_atomOrVar;
    return this;
}

AtomOrVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomOrVarContext.prototype.constructor = AtomOrVarContext;

AtomOrVarContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

AtomOrVarContext.prototype.tokVar = function() {
    return this.getTypedRuleContext(TokVarContext,0);
};

AtomOrVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterAtomOrVar(this);
	}
};

AtomOrVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitAtomOrVar(this);
	}
};




ErlangParser.AtomOrVarContext = AtomOrVarContext;

ErlangParser.prototype.atomOrVar = function() {

    var localctx = new AtomOrVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ErlangParser.RULE_atomOrVar);
    try {
        this.state = 881;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ErlangParser.TokAtom:
            this.enterOuterAlt(localctx, 1);
            this.state = 879;
            this.tokAtom();
            break;
        case ErlangParser.TokVar:
            this.enterOuterAlt(localctx, 2);
            this.state = 880;
            this.tokVar();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntegerOrVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_integerOrVar;
    return this;
}

IntegerOrVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerOrVarContext.prototype.constructor = IntegerOrVarContext;

IntegerOrVarContext.prototype.tokInteger = function() {
    return this.getTypedRuleContext(TokIntegerContext,0);
};

IntegerOrVarContext.prototype.tokVar = function() {
    return this.getTypedRuleContext(TokVarContext,0);
};

IntegerOrVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterIntegerOrVar(this);
	}
};

IntegerOrVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitIntegerOrVar(this);
	}
};




ErlangParser.IntegerOrVarContext = IntegerOrVarContext;

ErlangParser.prototype.integerOrVar = function() {

    var localctx = new IntegerOrVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ErlangParser.RULE_integerOrVar);
    try {
        this.state = 885;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ErlangParser.TokInteger:
            this.enterOuterAlt(localctx, 1);
            this.state = 883;
            this.tokInteger();
            break;
        case ErlangParser.TokVar:
            this.enterOuterAlt(localctx, 2);
            this.state = 884;
            this.tokVar();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_funClauses;
    return this;
}

FunClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunClausesContext.prototype.constructor = FunClausesContext;

FunClausesContext.prototype.funClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunClauseContext);
    } else {
        return this.getTypedRuleContext(FunClauseContext,i);
    }
};

FunClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFunClauses(this);
	}
};

FunClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFunClauses(this);
	}
};




ErlangParser.FunClausesContext = FunClausesContext;

ErlangParser.prototype.funClauses = function() {

    var localctx = new FunClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ErlangParser.RULE_funClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 887;
        this.funClause();
        this.state = 892;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__10) {
            this.state = 888;
            this.match(ErlangParser.T__10);
            this.state = 889;
            this.funClause();
            this.state = 894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_funClause;
    return this;
}

FunClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunClauseContext.prototype.constructor = FunClauseContext;

FunClauseContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

FunClauseContext.prototype.clauseGuard = function() {
    return this.getTypedRuleContext(ClauseGuardContext,0);
};

FunClauseContext.prototype.clauseBody = function() {
    return this.getTypedRuleContext(ClauseBodyContext,0);
};

FunClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterFunClause(this);
	}
};

FunClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitFunClause(this);
	}
};




ErlangParser.FunClauseContext = FunClauseContext;

ErlangParser.prototype.funClause = function() {

    var localctx = new FunClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ErlangParser.RULE_funClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 895;
        this.argumentList();
        this.state = 896;
        this.clauseGuard();
        this.state = 897;
        this.clauseBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tryExpr;
    return this;
}

TryExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryExprContext.prototype.constructor = TryExprContext;

TryExprContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

TryExprContext.prototype.tryCatch = function() {
    return this.getTypedRuleContext(TryCatchContext,0);
};

TryExprContext.prototype.crClauses = function() {
    return this.getTypedRuleContext(CrClausesContext,0);
};

TryExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTryExpr(this);
	}
};

TryExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTryExpr(this);
	}
};




ErlangParser.TryExprContext = TryExprContext;

ErlangParser.prototype.tryExpr = function() {

    var localctx = new TryExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ErlangParser.RULE_tryExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 899;
        this.match(ErlangParser.T__38);
        this.state = 900;
        this.exprs();
        this.state = 903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ErlangParser.T__35) {
            this.state = 901;
            this.match(ErlangParser.T__35);
            this.state = 902;
            this.crClauses();
        }

        this.state = 905;
        this.tryCatch();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryCatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tryCatch;
    return this;
}

TryCatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryCatchContext.prototype.constructor = TryCatchContext;

TryCatchContext.prototype.tryClauses = function() {
    return this.getTypedRuleContext(TryClausesContext,0);
};

TryCatchContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

TryCatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTryCatch(this);
	}
};

TryCatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTryCatch(this);
	}
};




ErlangParser.TryCatchContext = TryCatchContext;

ErlangParser.prototype.tryCatch = function() {

    var localctx = new TryCatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ErlangParser.RULE_tryCatch);
    try {
        this.state = 921;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 907;
            this.match(ErlangParser.T__23);
            this.state = 908;
            this.tryClauses();
            this.state = 909;
            this.match(ErlangParser.T__29);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 911;
            this.match(ErlangParser.T__23);
            this.state = 912;
            this.tryClauses();
            this.state = 913;
            this.match(ErlangParser.T__37);
            this.state = 914;
            this.exprs();
            this.state = 915;
            this.match(ErlangParser.T__29);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 917;
            this.match(ErlangParser.T__37);
            this.state = 918;
            this.exprs();
            this.state = 919;
            this.match(ErlangParser.T__29);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tryClauses;
    return this;
}

TryClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryClausesContext.prototype.constructor = TryClausesContext;

TryClausesContext.prototype.tryClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TryClauseContext);
    } else {
        return this.getTypedRuleContext(TryClauseContext,i);
    }
};

TryClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTryClauses(this);
	}
};

TryClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTryClauses(this);
	}
};




ErlangParser.TryClausesContext = TryClausesContext;

ErlangParser.prototype.tryClauses = function() {

    var localctx = new TryClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ErlangParser.RULE_tryClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        this.tryClause();
        this.state = 928;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__10) {
            this.state = 924;
            this.match(ErlangParser.T__10);
            this.state = 925;
            this.tryClause();
            this.state = 930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_tryClause;
    return this;
}

TryClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryClauseContext.prototype.constructor = TryClauseContext;

TryClauseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

TryClauseContext.prototype.clauseGuard = function() {
    return this.getTypedRuleContext(ClauseGuardContext,0);
};

TryClauseContext.prototype.clauseBody = function() {
    return this.getTypedRuleContext(ClauseBodyContext,0);
};

TryClauseContext.prototype.atomOrVar = function() {
    return this.getTypedRuleContext(AtomOrVarContext,0);
};

TryClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterTryClause(this);
	}
};

TryClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitTryClause(this);
	}
};




ErlangParser.TryClauseContext = TryClauseContext;

ErlangParser.prototype.tryClause = function() {

    var localctx = new TryClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ErlangParser.RULE_tryClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 934;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 931;
            this.atomOrVar();
            this.state = 932;
            this.match(ErlangParser.T__4);

        }
        this.state = 936;
        this.expr();
        this.state = 937;
        this.clauseGuard();
        this.state = 938;
        this.clauseBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.exprs = function() {
    return this.getTypedRuleContext(ExprsContext,0);
};

ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitArgumentList(this);
	}
};




ErlangParser.ArgumentListContext = ArgumentListContext;

ErlangParser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ErlangParser.RULE_argumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 940;
        this.match(ErlangParser.T__2);
        this.state = 942;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__8) | (1 << ErlangParser.T__14) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__18) | (1 << ErlangParser.T__20) | (1 << ErlangParser.T__23) | (1 << ErlangParser.T__28))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ErlangParser.T__33 - 34)) | (1 << (ErlangParser.T__34 - 34)) | (1 << (ErlangParser.T__36 - 34)) | (1 << (ErlangParser.T__38 - 34)) | (1 << (ErlangParser.T__39 - 34)) | (1 << (ErlangParser.T__40 - 34)) | (1 << (ErlangParser.T__41 - 34)) | (1 << (ErlangParser.TokAtom - 34)) | (1 << (ErlangParser.TokVar - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ErlangParser.TokFloat - 66)) | (1 << (ErlangParser.TokInteger - 66)) | (1 << (ErlangParser.TokChar - 66)) | (1 << (ErlangParser.TokString - 66)))) !== 0)) {
            this.state = 941;
            this.exprs();
        }

        this.state = 944;
        this.match(ErlangParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_exprs;
    return this;
}

ExprsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprsContext.prototype.constructor = ExprsContext;

ExprsContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterExprs(this);
	}
};

ExprsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitExprs(this);
	}
};




ErlangParser.ExprsContext = ExprsContext;

ErlangParser.prototype.exprs = function() {

    var localctx = new ExprsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ErlangParser.RULE_exprs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        this.expr();
        this.state = 951;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__7) {
            this.state = 947;
            this.match(ErlangParser.T__7);
            this.state = 948;
            this.expr();
            this.state = 953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GuardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_guard;
    return this;
}

GuardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GuardContext.prototype.constructor = GuardContext;

GuardContext.prototype.exprs = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprsContext);
    } else {
        return this.getTypedRuleContext(ExprsContext,i);
    }
};

GuardContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterGuard(this);
	}
};

GuardContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitGuard(this);
	}
};




ErlangParser.GuardContext = GuardContext;

ErlangParser.prototype.guard = function() {

    var localctx = new GuardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ErlangParser.RULE_guard);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 954;
        this.exprs();
        this.state = 959;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__10) {
            this.state = 955;
            this.match(ErlangParser.T__10);
            this.state = 956;
            this.exprs();
            this.state = 961;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AtomicContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_atomic;
    return this;
}

AtomicContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomicContext.prototype.constructor = AtomicContext;

AtomicContext.prototype.tokChar = function() {
    return this.getTypedRuleContext(TokCharContext,0);
};

AtomicContext.prototype.tokInteger = function() {
    return this.getTypedRuleContext(TokIntegerContext,0);
};

AtomicContext.prototype.tokFloat = function() {
    return this.getTypedRuleContext(TokFloatContext,0);
};

AtomicContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

AtomicContext.prototype.tokString = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TokStringContext);
    } else {
        return this.getTypedRuleContext(TokStringContext,i);
    }
};

AtomicContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterAtomic(this);
	}
};

AtomicContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitAtomic(this);
	}
};




ErlangParser.AtomicContext = AtomicContext;

ErlangParser.prototype.atomic = function() {

    var localctx = new AtomicContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ErlangParser.RULE_atomic);
    var _la = 0; // Token type
    try {
        this.state = 971;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ErlangParser.TokChar:
            this.enterOuterAlt(localctx, 1);
            this.state = 962;
            this.tokChar();
            break;
        case ErlangParser.TokInteger:
            this.enterOuterAlt(localctx, 2);
            this.state = 963;
            this.tokInteger();
            break;
        case ErlangParser.TokFloat:
            this.enterOuterAlt(localctx, 3);
            this.state = 964;
            this.tokFloat();
            break;
        case ErlangParser.TokAtom:
            this.enterOuterAlt(localctx, 4);
            this.state = 965;
            this.tokAtom();
            break;
        case ErlangParser.TokString:
            this.enterOuterAlt(localctx, 5);
            this.state = 967; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 966;
                this.tokString();
                this.state = 969; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ErlangParser.TokString);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrefixOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_prefixOp;
    return this;
}

PrefixOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixOpContext.prototype.constructor = PrefixOpContext;


PrefixOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterPrefixOp(this);
	}
};

PrefixOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitPrefixOp(this);
	}
};




ErlangParser.PrefixOpContext = PrefixOpContext;

ErlangParser.prototype.prefixOp = function() {

    var localctx = new PrefixOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ErlangParser.RULE_prefixOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 973;
        _la = this._input.LA(1);
        if(!(_la===ErlangParser.T__1 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ErlangParser.T__39 - 40)) | (1 << (ErlangParser.T__40 - 40)) | (1 << (ErlangParser.T__41 - 40)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_multOp;
    return this;
}

MultOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultOpContext.prototype.constructor = MultOpContext;


MultOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterMultOp(this);
	}
};

MultOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitMultOp(this);
	}
};




ErlangParser.MultOpContext = MultOpContext;

ErlangParser.prototype.multOp = function() {

    var localctx = new MultOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ErlangParser.RULE_multOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        _la = this._input.LA(1);
        if(!(_la===ErlangParser.T__5 || _la===ErlangParser.T__22 || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (ErlangParser.T__42 - 43)) | (1 << (ErlangParser.T__43 - 43)) | (1 << (ErlangParser.T__44 - 43)) | (1 << (ErlangParser.T__45 - 43)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AddOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_addOp;
    return this;
}

AddOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AddOpContext.prototype.constructor = AddOpContext;


AddOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterAddOp(this);
	}
};

AddOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitAddOp(this);
	}
};




ErlangParser.AddOpContext = AddOpContext;

ErlangParser.prototype.addOp = function() {

    var localctx = new AddOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ErlangParser.RULE_addOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 977;
        _la = this._input.LA(1);
        if(!(_la===ErlangParser.T__1 || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ErlangParser.T__39 - 40)) | (1 << (ErlangParser.T__46 - 40)) | (1 << (ErlangParser.T__47 - 40)) | (1 << (ErlangParser.T__48 - 40)) | (1 << (ErlangParser.T__49 - 40)) | (1 << (ErlangParser.T__50 - 40)) | (1 << (ErlangParser.T__51 - 40)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_listOp;
    return this;
}

ListOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListOpContext.prototype.constructor = ListOpContext;


ListOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterListOp(this);
	}
};

ListOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitListOp(this);
	}
};




ErlangParser.ListOpContext = ListOpContext;

ErlangParser.prototype.listOp = function() {

    var localctx = new ListOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ErlangParser.RULE_listOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 979;
        _la = this._input.LA(1);
        if(!(_la===ErlangParser.T__52 || _la===ErlangParser.T__53)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_compOp;
    return this;
}

CompOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompOpContext.prototype.constructor = CompOpContext;


CompOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterCompOp(this);
	}
};

CompOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitCompOp(this);
	}
};




ErlangParser.CompOpContext = CompOpContext;

ErlangParser.prototype.compOp = function() {

    var localctx = new CompOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ErlangParser.RULE_compOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 981;
        _la = this._input.LA(1);
        if(!(((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (ErlangParser.T__54 - 55)) | (1 << (ErlangParser.T__55 - 55)) | (1 << (ErlangParser.T__56 - 55)) | (1 << (ErlangParser.T__57 - 55)) | (1 << (ErlangParser.T__58 - 55)) | (1 << (ErlangParser.T__59 - 55)) | (1 << (ErlangParser.T__60 - 55)) | (1 << (ErlangParser.T__61 - 55)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_ruleClauses;
    return this;
}

RuleClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleClausesContext.prototype.constructor = RuleClausesContext;

RuleClausesContext.prototype.ruleClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RuleClauseContext);
    } else {
        return this.getTypedRuleContext(RuleClauseContext,i);
    }
};

RuleClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterRuleClauses(this);
	}
};

RuleClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitRuleClauses(this);
	}
};




ErlangParser.RuleClausesContext = RuleClausesContext;

ErlangParser.prototype.ruleClauses = function() {

    var localctx = new RuleClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ErlangParser.RULE_ruleClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 983;
        this.ruleClause();
        this.state = 988;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ErlangParser.T__10) {
            this.state = 984;
            this.match(ErlangParser.T__10);
            this.state = 985;
            this.ruleClause();
            this.state = 990;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_ruleClause;
    return this;
}

RuleClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleClauseContext.prototype.constructor = RuleClauseContext;

RuleClauseContext.prototype.tokAtom = function() {
    return this.getTypedRuleContext(TokAtomContext,0);
};

RuleClauseContext.prototype.clauseArgs = function() {
    return this.getTypedRuleContext(ClauseArgsContext,0);
};

RuleClauseContext.prototype.clauseGuard = function() {
    return this.getTypedRuleContext(ClauseGuardContext,0);
};

RuleClauseContext.prototype.ruleBody = function() {
    return this.getTypedRuleContext(RuleBodyContext,0);
};

RuleClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterRuleClause(this);
	}
};

RuleClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitRuleClause(this);
	}
};




ErlangParser.RuleClauseContext = RuleClauseContext;

ErlangParser.prototype.ruleClause = function() {

    var localctx = new RuleClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ErlangParser.RULE_ruleClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 991;
        this.tokAtom();
        this.state = 992;
        this.clauseArgs();
        this.state = 993;
        this.clauseGuard();
        this.state = 994;
        this.ruleBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RuleBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ErlangParser.RULE_ruleBody;
    return this;
}

RuleBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleBodyContext.prototype.constructor = RuleBodyContext;

RuleBodyContext.prototype.lcExprs = function() {
    return this.getTypedRuleContext(LcExprsContext,0);
};

RuleBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.enterRuleBody(this);
	}
};

RuleBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ErlangListener ) {
        listener.exitRuleBody(this);
	}
};




ErlangParser.RuleBodyContext = RuleBodyContext;

ErlangParser.prototype.ruleBody = function() {

    var localctx = new RuleBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ErlangParser.RULE_ruleBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 996;
        this.match(ErlangParser.T__62);
        this.state = 997;
        this.lcExprs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ErlangParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 23:
			return this.type300_sempred(localctx, predIndex);
	case 24:
			return this.type400_sempred(localctx, predIndex);
	case 68:
			return this.recordExpr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ErlangParser.prototype.type300_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ErlangParser.prototype.type400_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ErlangParser.prototype.recordExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ErlangParser = ErlangParser;
