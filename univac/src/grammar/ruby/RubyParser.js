// @ts-nocheck
// Generated from Ruby.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var RubyListener = require('./RubyListener').RubyListener;
var grammarFileName = "Ruby.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003>\u033a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u009a\n\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u00a0\n\u0003\f\u0003",
    "\u000e\u0003\u00a3\u000b\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u00af\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u00d6\n\u000e\u0003\u000f\u0003\u000f\u0005\u000f\u00da\n\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0005\u0010\u00e3\n\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u00eb\n\u0011",
    "\f\u0011\u000e\u0011\u00ee\u000b\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0101\n\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0007\u0016\u010b\n\u0016\f\u0016\u000e\u0016\u010e\u000b",
    "\u0016\u0003\u0017\u0003\u0017\u0005\u0017\u0112\n\u0017\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0118\n\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u0120\n\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0129\n\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0140\n\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0158\n\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0170\n\u001f",
    "\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u018e",
    "\n!\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0005#\u0196\n#\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u019e\n$\f$\u000e$\u01a1",
    "\u000b$\u0003%\u0003%\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'",
    "\u0003\'\u0003\'\u0007\'\u01ad\n\'\f\'\u000e\'\u01b0\u000b\'\u0003(",
    "\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0005)\u01bd\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0007)\u01ca\n)\f)\u000e)\u01cd\u000b)\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u01d7\n*\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u01e1\n+\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u01eb\n,\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u01f5\n-\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u01ff\n.\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u00030\u00030\u00030\u00030\u00031\u0003",
    "1\u00031\u00031\u00032\u00032\u00032\u00052\u0211\n2\u00032\u00032\u0003",
    "2\u00032\u00052\u0217\n2\u00072\u0219\n2\f2\u000e2\u021c\u000b2\u0003",
    "3\u00033\u00033\u00033\u00053\u0222\n3\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00053\u022a\n3\u00033\u00033\u00053\u022e\n3\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00054\u024a\n4\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00074\u0261\n4\f",
    "4\u000e4\u0264\u000b4\u00035\u00035\u00035\u00055\u0269\n5\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00056\u0271\n6\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00076\u0279\n6\f6\u000e6\u027c\u000b6\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00057\u028c\n7\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00077\u029a\n7\f7\u000e",
    "7\u029d\u000b7\u00038\u00038\u00038\u00038\u00038\u00038\u00058\u02a5",
    "\n8\u00038\u00038\u00038\u00038\u00038\u00038\u00078\u02ad\n8\f8\u000e",
    "8\u02b0\u000b8\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00059\u02c7\n9\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u02d1\n:\u0003;\u0003;\u0003;\u0005;\u02d6",
    "\n;\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u02f4",
    "\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0007=\u0311\n=\f",
    "=\u000e=\u0314\u000b=\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003",
    "A\u0003A\u0003B\u0003B\u0003C\u0003C\u0003D\u0003D\u0003E\u0003E\u0003",
    "F\u0003F\u0003G\u0003G\u0003G\u0005G\u032b\nG\u0003G\u0003G\u0003G\u0003",
    "G\u0007G\u0331\nG\fG\u000eG\u0334\u000bG\u0003H\u0003H\u0003I\u0003",
    "I\u0003I\u0002\u000f\u0004 *FLPbfjlnx\u008cJ\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0002\f\u0003\u0002#(\u0003\u0002\u0018\u001a",
    "\u0003\u0002\u0016\u0017\u0003\u0002\u001e!\u0003\u0002\u001c\u001d",
    "\u0004\u0002,,11\u0003\u0002-.\u0003\u0002*+\u0003\u0002/0\u0003\u0002",
    "\u0014\u0015\u0002\u036f\u0002\u0092\u0003\u0002\u0002\u0002\u0004\u0099",
    "\u0003\u0002\u0002\u0002\u0006\u00ae\u0003\u0002\u0002\u0002\b\u00b0",
    "\u0003\u0002\u0002\u0002\n\u00b4\u0003\u0002\u0002\u0002\f\u00b8\u0003",
    "\u0002\u0002\u0002\u000e\u00ba\u0003\u0002\u0002\u0002\u0010\u00bc\u0003",
    "\u0002\u0002\u0002\u0012\u00bf\u0003\u0002\u0002\u0002\u0014\u00c4\u0003",
    "\u0002\u0002\u0002\u0016\u00c6\u0003\u0002\u0002\u0002\u0018\u00ca\u0003",
    "\u0002\u0002\u0002\u001a\u00d5\u0003\u0002\u0002\u0002\u001c\u00d9\u0003",
    "\u0002\u0002\u0002\u001e\u00e2\u0003\u0002\u0002\u0002 \u00e4\u0003",
    "\u0002\u0002\u0002\"\u00ef\u0003\u0002\u0002\u0002$\u00f1\u0003\u0002",
    "\u0002\u0002&\u0100\u0003\u0002\u0002\u0002(\u0102\u0003\u0002\u0002",
    "\u0002*\u0104\u0003\u0002\u0002\u0002,\u0111\u0003\u0002\u0002\u0002",
    ".\u0117\u0003\u0002\u0002\u00020\u0119\u0003\u0002\u0002\u00022\u0121",
    "\u0003\u0002\u0002\u00024\u0128\u0003\u0002\u0002\u00026\u012a\u0003",
    "\u0002\u0002\u00028\u013f\u0003\u0002\u0002\u0002:\u0157\u0003\u0002",
    "\u0002\u0002<\u016f\u0003\u0002\u0002\u0002>\u0171\u0003\u0002\u0002",
    "\u0002@\u018d\u0003\u0002\u0002\u0002B\u018f\u0003\u0002\u0002\u0002",
    "D\u0195\u0003\u0002\u0002\u0002F\u0197\u0003\u0002\u0002\u0002H\u01a2",
    "\u0003\u0002\u0002\u0002J\u01a4\u0003\u0002\u0002\u0002L\u01a6\u0003",
    "\u0002\u0002\u0002N\u01b1\u0003\u0002\u0002\u0002P\u01bc\u0003\u0002",
    "\u0002\u0002R\u01d6\u0003\u0002\u0002\u0002T\u01e0\u0003\u0002\u0002",
    "\u0002V\u01ea\u0003\u0002\u0002\u0002X\u01f4\u0003\u0002\u0002\u0002",
    "Z\u01fe\u0003\u0002\u0002\u0002\\\u0200\u0003\u0002\u0002\u0002^\u0205",
    "\u0003\u0002\u0002\u0002`\u0209\u0003\u0002\u0002\u0002b\u020d\u0003",
    "\u0002\u0002\u0002d\u022d\u0003\u0002\u0002\u0002f\u0249\u0003\u0002",
    "\u0002\u0002h\u0268\u0003\u0002\u0002\u0002j\u0270\u0003\u0002\u0002",
    "\u0002l\u028b\u0003\u0002\u0002\u0002n\u02a4\u0003\u0002\u0002\u0002",
    "p\u02c6\u0003\u0002\u0002\u0002r\u02d0\u0003\u0002\u0002\u0002t\u02d5",
    "\u0003\u0002\u0002\u0002v\u02d7\u0003\u0002\u0002\u0002x\u02f3\u0003",
    "\u0002\u0002\u0002z\u0315\u0003\u0002\u0002\u0002|\u0317\u0003\u0002",
    "\u0002\u0002~\u0319\u0003\u0002\u0002\u0002\u0080\u031b\u0003\u0002",
    "\u0002\u0002\u0082\u031d\u0003\u0002\u0002\u0002\u0084\u031f\u0003\u0002",
    "\u0002\u0002\u0086\u0321\u0003\u0002\u0002\u0002\u0088\u0323\u0003\u0002",
    "\u0002\u0002\u008a\u0325\u0003\u0002\u0002\u0002\u008c\u032a\u0003\u0002",
    "\u0002\u0002\u008e\u0335\u0003\u0002\u0002\u0002\u0090\u0337\u0003\u0002",
    "\u0002\u0002\u0092\u0093\u0005\u0004\u0003\u0002\u0093\u0003\u0003\u0002",
    "\u0002\u0002\u0094\u0095\b\u0003\u0001\u0002\u0095\u0096\u0005\u0006",
    "\u0004\u0002\u0096\u0097\u0005\u008cG\u0002\u0097\u009a\u0003\u0002",
    "\u0002\u0002\u0098\u009a\u0005\u008cG\u0002\u0099\u0094\u0003\u0002",
    "\u0002\u0002\u0099\u0098\u0003\u0002\u0002\u0002\u009a\u00a1\u0003\u0002",
    "\u0002\u0002\u009b\u009c\f\u0004\u0002\u0002\u009c\u009d\u0005\u0006",
    "\u0004\u0002\u009d\u009e\u0005\u008cG\u0002\u009e\u00a0\u0003\u0002",
    "\u0002\u0002\u009f\u009b\u0003\u0002\u0002\u0002\u00a0\u00a3\u0003\u0002",
    "\u0002\u0002\u00a1\u009f\u0003\u0002\u0002\u0002\u00a1\u00a2\u0003\u0002",
    "\u0002\u0002\u00a2\u0005\u0003\u0002\u0002\u0002\u00a3\u00a1\u0003\u0002",
    "\u0002\u0002\u00a4\u00af\u0005\u0016\f\u0002\u00a5\u00af\u0005\u000e",
    "\b\u0002\u00a6\u00af\u0005\u0010\t\u0002\u00a7\u00af\u0005:\u001e\u0002",
    "\u00a8\u00af\u0005<\u001f\u0002\u00a9\u00af\u0005x=\u0002\u00aa\u00af",
    "\u0005$\u0013\u0002\u00ab\u00af\u0005> \u0002\u00ac\u00af\u0005@!\u0002",
    "\u00ad\u00af\u0005\u0012\n\u0002\u00ae\u00a4\u0003\u0002\u0002\u0002",
    "\u00ae\u00a5\u0003\u0002\u0002\u0002\u00ae\u00a6\u0003\u0002\u0002\u0002",
    "\u00ae\u00a7\u0003\u0002\u0002\u0002\u00ae\u00a8\u0003\u0002\u0002\u0002",
    "\u00ae\u00a9\u0003\u0002\u0002\u0002\u00ae\u00aa\u0003\u0002\u0002\u0002",
    "\u00ae\u00ab\u0003\u0002\u0002\u0002\u00ae\u00ac\u0003\u0002\u0002\u0002",
    "\u00ae\u00ad\u0003\u0002\u0002\u0002\u00af\u0007\u0003\u0002\u0002\u0002",
    "\u00b0\u00b1\u0005v<\u0002\u00b1\u00b2\u0007\"\u0002\u0002\u00b2\u00b3",
    "\u0005\u0088E\u0002\u00b3\t\u0003\u0002\u0002\u0002\u00b4\u00b5\u0005",
    "\u0088E\u0002\u00b5\u00b6\u0007\"\u0002\u0002\u00b6\u00b7\u00054\u001b",
    "\u0002\u00b7\u000b\u0003\u0002\u0002\u0002\u00b8\u00b9\u0005\u0088E",
    "\u0002\u00b9\r\u0003\u0002\u0002\u0002\u00ba\u00bb\u0005&\u0014\u0002",
    "\u00bb\u000f\u0003\u0002\u0002\u0002\u00bc\u00bd\u0007\u0007\u0002\u0002",
    "\u00bd\u00be\u0005|?\u0002\u00be\u0011\u0003\u0002\u0002\u0002\u00bf",
    "\u00c0\u0007\u000b\u0002\u0002\u00c0\u00c1\u0005\u0090I\u0002\u00c1",
    "\u00c2\u0005\u0014\u000b\u0002\u00c2\u00c3\u0007\b\u0002\u0002\u00c3",
    "\u0013\u0003\u0002\u0002\u0002\u00c4\u00c5\u0005\u0004\u0003\u0002\u00c5",
    "\u0015\u0003\u0002\u0002\u0002\u00c6\u00c7\u0005\u001a\u000e\u0002\u00c7",
    "\u00c8\u0005\u0018\r\u0002\u00c8\u00c9\u0007\b\u0002\u0002\u00c9\u0017",
    "\u0003\u0002\u0002\u0002\u00ca\u00cb\u0005\u0004\u0003\u0002\u00cb\u0019",
    "\u0003\u0002\u0002\u0002\u00cc\u00cd\u0007\t\u0002\u0002\u00cd\u00ce",
    "\u0005\u001c\u000f\u0002\u00ce\u00cf\u0005\u0090I\u0002\u00cf\u00d6",
    "\u0003\u0002\u0002\u0002\u00d0\u00d1\u0007\t\u0002\u0002\u00d1\u00d2",
    "\u0005\u001c\u000f\u0002\u00d2\u00d3\u0005\u001e\u0010\u0002\u00d3\u00d4",
    "\u0005\u0090I\u0002\u00d4\u00d6\u0003\u0002\u0002\u0002\u00d5\u00cc",
    "\u0003\u0002\u0002\u0002\u00d5\u00d0\u0003\u0002\u0002\u0002\u00d6\u001b",
    "\u0003\u0002\u0002\u0002\u00d7\u00da\u0005\u008aF\u0002\u00d8\u00da",
    "\u0005\u0086D\u0002\u00d9\u00d7\u0003\u0002\u0002\u0002\u00d9\u00d8",
    "\u0003\u0002\u0002\u0002\u00da\u001d\u0003\u0002\u0002\u0002\u00db\u00dc",
    "\u00072\u0002\u0002\u00dc\u00e3\u00073\u0002\u0002\u00dd\u00de\u0007",
    "2\u0002\u0002\u00de\u00df\u0005 \u0011\u0002\u00df\u00e0\u00073\u0002",
    "\u0002\u00e0\u00e3\u0003\u0002\u0002\u0002\u00e1\u00e3\u0005 \u0011",
    "\u0002\u00e2\u00db\u0003\u0002\u0002\u0002\u00e2\u00dd\u0003\u0002\u0002",
    "\u0002\u00e2\u00e1\u0003\u0002\u0002\u0002\u00e3\u001f\u0003\u0002\u0002",
    "\u0002\u00e4\u00e5\b\u0011\u0001\u0002\u00e5\u00e6\u0005\"\u0012\u0002",
    "\u00e6\u00ec\u0003\u0002\u0002\u0002\u00e7\u00e8\f\u0003\u0002\u0002",
    "\u00e8\u00e9\u0007\u0004\u0002\u0002\u00e9\u00eb\u0005\"\u0012\u0002",
    "\u00ea\u00e7\u0003\u0002\u0002\u0002\u00eb\u00ee\u0003\u0002\u0002\u0002",
    "\u00ec\u00ea\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002",
    "\u00ed!\u0003\u0002\u0002\u0002\u00ee\u00ec\u0003\u0002\u0002\u0002",
    "\u00ef\u00f0\u0005\u0086D\u0002\u00f0#\u0003\u0002\u0002\u0002\u00f1",
    "\u00f2\u0007\n\u0002\u0002\u00f2\u00f3\u00054\u001b\u0002\u00f3%\u0003",
    "\u0002\u0002\u0002\u00f4\u00f5\u0005\u001c\u000f\u0002\u00f5\u00f6\u0007",
    "2\u0002\u0002\u00f6\u00f7\u0005(\u0015\u0002\u00f7\u00f8\u00073\u0002",
    "\u0002\u00f8\u0101\u0003\u0002\u0002\u0002\u00f9\u00fa\u0005\u001c\u000f",
    "\u0002\u00fa\u00fb\u0005(\u0015\u0002\u00fb\u0101\u0003\u0002\u0002",
    "\u0002\u00fc\u00fd\u0005\u001c\u000f\u0002\u00fd\u00fe\u00072\u0002",
    "\u0002\u00fe\u00ff\u00073\u0002\u0002\u00ff\u0101\u0003\u0002\u0002",
    "\u0002\u0100\u00f4\u0003\u0002\u0002\u0002\u0100\u00f9\u0003\u0002\u0002",
    "\u0002\u0100\u00fc\u0003\u0002\u0002\u0002\u0101\'\u0003\u0002\u0002",
    "\u0002\u0102\u0103\u0005*\u0016\u0002\u0103)\u0003\u0002\u0002\u0002",
    "\u0104\u0105\b\u0016\u0001\u0002\u0105\u0106\u0005,\u0017\u0002\u0106",
    "\u010c\u0003\u0002\u0002\u0002\u0107\u0108\f\u0003\u0002\u0002\u0108",
    "\u0109\u0007\u0004\u0002\u0002\u0109\u010b\u0005,\u0017\u0002\u010a",
    "\u0107\u0003\u0002\u0002\u0002\u010b\u010e\u0003\u0002\u0002\u0002\u010c",
    "\u010a\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d",
    "+\u0003\u0002\u0002\u0002\u010e\u010c\u0003\u0002\u0002\u0002\u010f",
    "\u0112\u0005.\u0018\u0002\u0110\u0112\u00050\u0019\u0002\u0111\u010f",
    "\u0003\u0002\u0002\u0002\u0111\u0110\u0003\u0002\u0002\u0002\u0112-",
    "\u0003\u0002\u0002\u0002\u0113\u0118\u0005j6\u0002\u0114\u0118\u0005",
    "l7\u0002\u0115\u0118\u0005n8\u0002\u0116\u0118\u0005f4\u0002\u0117\u0113",
    "\u0003\u0002\u0002\u0002\u0117\u0114\u0003\u0002\u0002\u0002\u0117\u0115",
    "\u0003\u0002\u0002\u0002\u0117\u0116\u0003\u0002\u0002\u0002\u0118/",
    "\u0003\u0002\u0002\u0002\u0119\u011a\u0005\u0086D\u0002\u011a\u011f",
    "\u0007\"\u0002\u0002\u011b\u0120\u0005j6\u0002\u011c\u0120\u0005l7\u0002",
    "\u011d\u0120\u0005n8\u0002\u011e\u0120\u0005f4\u0002\u011f\u011b\u0003",
    "\u0002\u0002\u0002\u011f\u011c\u0003\u0002\u0002\u0002\u011f\u011d\u0003",
    "\u0002\u0002\u0002\u011f\u011e\u0003\u0002\u0002\u0002\u01201\u0003",
    "\u0002\u0002\u0002\u0121\u0122\u0005&\u0014\u0002\u01223\u0003\u0002",
    "\u0002\u0002\u0123\u0129\u0005j6\u0002\u0124\u0129\u0005l7\u0002\u0125",
    "\u0129\u0005n8\u0002\u0126\u0129\u0005f4\u0002\u0127\u0129\u0005\f\u0007",
    "\u0002\u0128\u0123\u0003\u0002\u0002\u0002\u0128\u0124\u0003\u0002\u0002",
    "\u0002\u0128\u0125\u0003\u0002\u0002\u0002\u0128\u0126\u0003\u0002\u0002",
    "\u0002\u0128\u0127\u0003\u0002\u0002\u0002\u01295\u0003\u0002\u0002",
    "\u0002\u012a\u012b\u00058\u001d\u0002\u012b7\u0003\u0002\u0002\u0002",
    "\u012c\u012d\u0007\u000e\u0002\u0002\u012d\u012e\u0005H%\u0002\u012e",
    "\u012f\u0005\u0090I\u0002\u012f\u0130\u0005N(\u0002\u0130\u0140\u0003",
    "\u0002\u0002\u0002\u0131\u0132\u0007\u000e\u0002\u0002\u0132\u0133\u0005",
    "H%\u0002\u0133\u0134\u0005\u0090I\u0002\u0134\u0135\u0005N(\u0002\u0135",
    "\u0136\u0005\u008eH\u0002\u0136\u0137\u0005\u0090I\u0002\u0137\u0138",
    "\u0005N(\u0002\u0138\u0140\u0003\u0002\u0002\u0002\u0139\u013a\u0007",
    "\u000e\u0002\u0002\u013a\u013b\u0005H%\u0002\u013b\u013c\u0005\u0090",
    "I\u0002\u013c\u013d\u0005N(\u0002\u013d\u013e\u00058\u001d\u0002\u013e",
    "\u0140\u0003\u0002\u0002\u0002\u013f\u012c\u0003\u0002\u0002\u0002\u013f",
    "\u0131\u0003\u0002\u0002\u0002\u013f\u0139\u0003\u0002\u0002\u0002\u0140",
    "9\u0003\u0002\u0002\u0002\u0141\u0142\u0007\f\u0002\u0002\u0142\u0143",
    "\u0005H%\u0002\u0143\u0144\u0005\u0090I\u0002\u0144\u0145\u0005N(\u0002",
    "\u0145\u0146\u0007\b\u0002\u0002\u0146\u0158\u0003\u0002\u0002\u0002",
    "\u0147\u0148\u0007\f\u0002\u0002\u0148\u0149\u0005H%\u0002\u0149\u014a",
    "\u0005\u0090I\u0002\u014a\u014b\u0005N(\u0002\u014b\u014c\u0005\u008e",
    "H\u0002\u014c\u014d\u0005\u0090I\u0002\u014d\u014e\u0005N(\u0002\u014e",
    "\u014f\u0007\b\u0002\u0002\u014f\u0158\u0003\u0002\u0002\u0002\u0150",
    "\u0151\u0007\f\u0002\u0002\u0151\u0152\u0005H%\u0002\u0152\u0153\u0005",
    "\u0090I\u0002\u0153\u0154\u0005N(\u0002\u0154\u0155\u00056\u001c\u0002",
    "\u0155\u0156\u0007\b\u0002\u0002\u0156\u0158\u0003\u0002\u0002\u0002",
    "\u0157\u0141\u0003\u0002\u0002\u0002\u0157\u0147\u0003\u0002\u0002\u0002",
    "\u0157\u0150\u0003\u0002\u0002\u0002\u0158;\u0003\u0002\u0002\u0002",
    "\u0159\u015a\u0007\u000f\u0002\u0002\u015a\u015b\u0005H%\u0002\u015b",
    "\u015c\u0005\u0090I\u0002\u015c\u015d\u0005N(\u0002\u015d\u015e\u0007",
    "\b\u0002\u0002\u015e\u0170\u0003\u0002\u0002\u0002\u015f\u0160\u0007",
    "\u000f\u0002\u0002\u0160\u0161\u0005H%\u0002\u0161\u0162\u0005\u0090",
    "I\u0002\u0162\u0163\u0005N(\u0002\u0163\u0164\u0005\u008eH\u0002\u0164",
    "\u0165\u0005\u0090I\u0002\u0165\u0166\u0005N(\u0002\u0166\u0167\u0007",
    "\b\u0002\u0002\u0167\u0170\u0003\u0002\u0002\u0002\u0168\u0169\u0007",
    "\u000f\u0002\u0002\u0169\u016a\u0005H%\u0002\u016a\u016b\u0005\u0090",
    "I\u0002\u016b\u016c\u0005N(\u0002\u016c\u016d\u00056\u001c\u0002\u016d",
    "\u016e\u0007\b\u0002\u0002\u016e\u0170\u0003\u0002\u0002\u0002\u016f",
    "\u0159\u0003\u0002\u0002\u0002\u016f\u015f\u0003\u0002\u0002\u0002\u016f",
    "\u0168\u0003\u0002\u0002\u0002\u0170=\u0003\u0002\u0002\u0002\u0171",
    "\u0172\u0007\u0010\u0002\u0002\u0172\u0173\u0005H%\u0002\u0173\u0174",
    "\u0005\u0090I\u0002\u0174\u0175\u0005N(\u0002\u0175\u0176\u0007\b\u0002",
    "\u0002\u0176?\u0003\u0002\u0002\u0002\u0177\u0178\u0007\u0013\u0002",
    "\u0002\u0178\u0179\u00072\u0002\u0002\u0179\u017a\u0005B\"\u0002\u017a",
    "\u017b\u0007\u0005\u0002\u0002\u017b\u017c\u0005H%\u0002\u017c\u017d",
    "\u0007\u0005\u0002\u0002\u017d\u017e\u0005J&\u0002\u017e\u017f\u0007",
    "3\u0002\u0002\u017f\u0180\u0005\u0090I\u0002\u0180\u0181\u0005N(\u0002",
    "\u0181\u0182\u0007\b\u0002\u0002\u0182\u018e\u0003\u0002\u0002\u0002",
    "\u0183\u0184\u0007\u0013\u0002\u0002\u0184\u0185\u0005B\"\u0002\u0185",
    "\u0186\u0007\u0005\u0002\u0002\u0186\u0187\u0005H%\u0002\u0187\u0188",
    "\u0007\u0005\u0002\u0002\u0188\u0189\u0005J&\u0002\u0189\u018a\u0005",
    "\u0090I\u0002\u018a\u018b\u0005N(\u0002\u018b\u018c\u0007\b\u0002\u0002",
    "\u018c\u018e\u0003\u0002\u0002\u0002\u018d\u0177\u0003\u0002\u0002\u0002",
    "\u018d\u0183\u0003\u0002\u0002\u0002\u018eA\u0003\u0002\u0002\u0002",
    "\u018f\u0190\u0005F$\u0002\u0190C\u0003\u0002\u0002\u0002\u0191\u0196",
    "\u0005V,\u0002\u0192\u0196\u0005X-\u0002\u0193\u0196\u0005Z.\u0002\u0194",
    "\u0196\u0005T+\u0002\u0195\u0191\u0003\u0002\u0002\u0002\u0195\u0192",
    "\u0003\u0002\u0002\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0195\u0194",
    "\u0003\u0002\u0002\u0002\u0196E\u0003\u0002\u0002\u0002\u0197\u0198",
    "\b$\u0001\u0002\u0198\u0199\u0005D#\u0002\u0199\u019f\u0003\u0002\u0002",
    "\u0002\u019a\u019b\f\u0004\u0002\u0002\u019b\u019c\u0007\u0004\u0002",
    "\u0002\u019c\u019e\u0005D#\u0002\u019d\u019a\u0003\u0002\u0002\u0002",
    "\u019e\u01a1\u0003\u0002\u0002\u0002\u019f\u019d\u0003\u0002\u0002\u0002",
    "\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0G\u0003\u0002\u0002\u0002",
    "\u01a1\u019f\u0003\u0002\u0002\u0002\u01a2\u01a3\u0005p9\u0002\u01a3",
    "I\u0003\u0002\u0002\u0002\u01a4\u01a5\u0005L\'\u0002\u01a5K\u0003\u0002",
    "\u0002\u0002\u01a6\u01a7\b\'\u0001\u0002\u01a7\u01a8\u0005D#\u0002\u01a8",
    "\u01ae\u0003\u0002\u0002\u0002\u01a9\u01aa\f\u0004\u0002\u0002\u01aa",
    "\u01ab\u0007\u0004\u0002\u0002\u01ab\u01ad\u0005D#\u0002\u01ac\u01a9",
    "\u0003\u0002\u0002\u0002\u01ad\u01b0\u0003\u0002\u0002\u0002\u01ae\u01ac",
    "\u0003\u0002\u0002\u0002\u01ae\u01af\u0003\u0002\u0002\u0002\u01afM",
    "\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b1\u01b2",
    "\u0005P)\u0002\u01b2O\u0003\u0002\u0002\u0002\u01b3\u01b4\b)\u0001\u0002",
    "\u01b4\u01b5\u0005\u0006\u0004\u0002\u01b5\u01b6\u0005\u008cG\u0002",
    "\u01b6\u01bd\u0003\u0002\u0002\u0002\u01b7\u01b8\u0007\u0011\u0002\u0002",
    "\u01b8\u01bd\u0005\u008cG\u0002\u01b9\u01ba\u0005z>\u0002\u01ba\u01bb",
    "\u0005\u008cG\u0002\u01bb\u01bd\u0003\u0002\u0002\u0002\u01bc\u01b3",
    "\u0003\u0002\u0002\u0002\u01bc\u01b7\u0003\u0002\u0002\u0002\u01bc\u01b9",
    "\u0003\u0002\u0002\u0002\u01bd\u01cb\u0003\u0002\u0002\u0002\u01be\u01bf",
    "\f\u0005\u0002\u0002\u01bf\u01c0\u0005\u0006\u0004\u0002\u01c0\u01c1",
    "\u0005\u008cG\u0002\u01c1\u01ca\u0003\u0002\u0002\u0002\u01c2\u01c3",
    "\f\u0004\u0002\u0002\u01c3\u01c4\u0007\u0011\u0002\u0002\u01c4\u01ca",
    "\u0005\u008cG\u0002\u01c5\u01c6\f\u0003\u0002\u0002\u01c6\u01c7\u0005",
    "z>\u0002\u01c7\u01c8\u0005\u008cG\u0002\u01c8\u01ca\u0003\u0002\u0002",
    "\u0002\u01c9\u01be\u0003\u0002\u0002\u0002\u01c9\u01c2\u0003\u0002\u0002",
    "\u0002\u01c9\u01c5\u0003\u0002\u0002\u0002\u01ca\u01cd\u0003\u0002\u0002",
    "\u0002\u01cb\u01c9\u0003\u0002\u0002\u0002\u01cb\u01cc\u0003\u0002\u0002",
    "\u0002\u01ccQ\u0003\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002\u0002",
    "\u0002\u01ce\u01cf\u0005v<\u0002\u01cf\u01d0\u0007\"\u0002\u0002\u01d0",
    "\u01d1\u0005x=\u0002\u01d1\u01d7\u0003\u0002\u0002\u0002\u01d2\u01d3",
    "\u0005v<\u0002\u01d3\u01d4\t\u0002\u0002\u0002\u01d4\u01d5\u0005x=\u0002",
    "\u01d5\u01d7\u0003\u0002\u0002\u0002\u01d6\u01ce\u0003\u0002\u0002\u0002",
    "\u01d6\u01d2\u0003\u0002\u0002\u0002\u01d7S\u0003\u0002\u0002\u0002",
    "\u01d8\u01d9\u0005v<\u0002\u01d9\u01da\u0007\"\u0002\u0002\u01da\u01db",
    "\u0005f4\u0002\u01db\u01e1\u0003\u0002\u0002\u0002\u01dc\u01dd\u0005",
    "v<\u0002\u01dd\u01de\t\u0002\u0002\u0002\u01de\u01df\u0005f4\u0002\u01df",
    "\u01e1\u0003\u0002\u0002\u0002\u01e0\u01d8\u0003\u0002\u0002\u0002\u01e0",
    "\u01dc\u0003\u0002\u0002\u0002\u01e1U\u0003\u0002\u0002\u0002\u01e2",
    "\u01e3\u0005v<\u0002\u01e3\u01e4\u0007\"\u0002\u0002\u01e4\u01e5\u0005",
    "j6\u0002\u01e5\u01eb\u0003\u0002\u0002\u0002\u01e6\u01e7\u0005v<\u0002",
    "\u01e7\u01e8\t\u0002\u0002\u0002\u01e8\u01e9\u0005j6\u0002\u01e9\u01eb",
    "\u0003\u0002\u0002\u0002\u01ea\u01e2\u0003\u0002\u0002\u0002\u01ea\u01e6",
    "\u0003\u0002\u0002\u0002\u01ebW\u0003\u0002\u0002\u0002\u01ec\u01ed",
    "\u0005v<\u0002\u01ed\u01ee\u0007\"\u0002\u0002\u01ee\u01ef\u0005l7\u0002",
    "\u01ef\u01f5\u0003\u0002\u0002\u0002\u01f0\u01f1\u0005v<\u0002\u01f1",
    "\u01f2\t\u0002\u0002\u0002\u01f2\u01f3\u0005l7\u0002\u01f3\u01f5\u0003",
    "\u0002\u0002\u0002\u01f4\u01ec\u0003\u0002\u0002\u0002\u01f4\u01f0\u0003",
    "\u0002\u0002\u0002\u01f5Y\u0003\u0002\u0002\u0002\u01f6\u01f7\u0005",
    "v<\u0002\u01f7\u01f8\u0007\"\u0002\u0002\u01f8\u01f9\u0005n8\u0002\u01f9",
    "\u01ff\u0003\u0002\u0002\u0002\u01fa\u01fb\u0005v<\u0002\u01fb\u01fc",
    "\u0007#\u0002\u0002\u01fc\u01fd\u0005n8\u0002\u01fd\u01ff\u0003\u0002",
    "\u0002\u0002\u01fe\u01f6\u0003\u0002\u0002\u0002\u01fe\u01fa\u0003\u0002",
    "\u0002\u0002\u01ff[\u0003\u0002\u0002\u0002\u0200\u0201\u0005v<\u0002",
    "\u0201\u0202\u0007\"\u0002\u0002\u0202\u0203\u00074\u0002\u0002\u0203",
    "\u0204\u00075\u0002\u0002\u0204]\u0003\u0002\u0002\u0002\u0205\u0206",
    "\u0005d3\u0002\u0206\u0207\u0007\"\u0002\u0002\u0207\u0208\u00054\u001b",
    "\u0002\u0208_\u0003\u0002\u0002\u0002\u0209\u020a\u00074\u0002\u0002",
    "\u020a\u020b\u0005b2\u0002\u020b\u020c\u00075\u0002\u0002\u020ca\u0003",
    "\u0002\u0002\u0002\u020d\u0210\b2\u0001\u0002\u020e\u0211\u0005j6\u0002",
    "\u020f\u0211\u0005f4\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0210",
    "\u020f\u0003\u0002\u0002\u0002\u0211\u021a\u0003\u0002\u0002\u0002\u0212",
    "\u0213\f\u0003\u0002\u0002\u0213\u0216\u0007\u0004\u0002\u0002\u0214",
    "\u0217\u0005j6\u0002\u0215\u0217\u0005f4\u0002\u0216\u0214\u0003\u0002",
    "\u0002\u0002\u0216\u0215\u0003\u0002\u0002\u0002\u0217\u0219\u0003\u0002",
    "\u0002\u0002\u0218\u0212\u0003\u0002\u0002\u0002\u0219\u021c\u0003\u0002",
    "\u0002\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002",
    "\u0002\u0002\u021bc\u0003\u0002\u0002\u0002\u021c\u021a\u0003\u0002",
    "\u0002\u0002\u021d\u021e\u0005\u0086D\u0002\u021e\u0221\u00074\u0002",
    "\u0002\u021f\u0222\u0005j6\u0002\u0220\u0222\u0005f4\u0002\u0221\u021f",
    "\u0003\u0002\u0002\u0002\u0221\u0220\u0003\u0002\u0002\u0002\u0222\u0223",
    "\u0003\u0002\u0002\u0002\u0223\u0224\u00075\u0002\u0002\u0224\u022e",
    "\u0003\u0002\u0002\u0002\u0225\u0226\u0005\u0088E\u0002\u0226\u0229",
    "\u00074\u0002\u0002\u0227\u022a\u0005j6\u0002\u0228\u022a\u0005f4\u0002",
    "\u0229\u0227\u0003\u0002\u0002\u0002\u0229\u0228\u0003\u0002\u0002\u0002",
    "\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022c\u00075\u0002\u0002",
    "\u022c\u022e\u0003\u0002\u0002\u0002\u022d\u021d\u0003\u0002\u0002\u0002",
    "\u022d\u0225\u0003\u0002\u0002\u0002\u022ee\u0003\u0002\u0002\u0002",
    "\u022f\u0230\b4\u0001\u0002\u0230\u0231\u0005j6\u0002\u0231\u0232\t",
    "\u0003\u0002\u0002\u0232\u0233\u0005f4\u000f\u0233\u024a\u0003\u0002",
    "\u0002\u0002\u0234\u0235\u0005l7\u0002\u0235\u0236\t\u0003\u0002\u0002",
    "\u0236\u0237\u0005f4\r\u0237\u024a\u0003\u0002\u0002\u0002\u0238\u0239",
    "\u0005n8\u0002\u0239\u023a\u0007\u0018\u0002\u0002\u023a\u023b\u0005",
    "f4\n\u023b\u024a\u0003\u0002\u0002\u0002\u023c\u023d\u0005j6\u0002\u023d",
    "\u023e\t\u0004\u0002\u0002\u023e\u023f\u0005f4\b\u023f\u024a\u0003\u0002",
    "\u0002\u0002\u0240\u0241\u0005l7\u0002\u0241\u0242\t\u0004\u0002\u0002",
    "\u0242\u0243\u0005f4\u0006\u0243\u024a\u0003\u0002\u0002\u0002\u0244",
    "\u0245\u00072\u0002\u0002\u0245\u0246\u0005f4\u0002\u0246\u0247\u0007",
    "3\u0002\u0002\u0247\u024a\u0003\u0002\u0002\u0002\u0248\u024a\u0005",
    "h5\u0002\u0249\u022f\u0003\u0002\u0002\u0002\u0249\u0234\u0003\u0002",
    "\u0002\u0002\u0249\u0238\u0003\u0002\u0002\u0002\u0249\u023c\u0003\u0002",
    "\u0002\u0002\u0249\u0240\u0003\u0002\u0002\u0002\u0249\u0244\u0003\u0002",
    "\u0002\u0002\u0249\u0248\u0003\u0002\u0002\u0002\u024a\u0262\u0003\u0002",
    "\u0002\u0002\u024b\u024c\f\f\u0002\u0002\u024c\u024d\t\u0003\u0002\u0002",
    "\u024d\u0261\u0005f4\r\u024e\u024f\f\u0005\u0002\u0002\u024f\u0250\t",
    "\u0004\u0002\u0002\u0250\u0261\u0005f4\u0006\u0251\u0252\f\u0010\u0002",
    "\u0002\u0252\u0253\t\u0003\u0002\u0002\u0253\u0261\u0005j6\u0002\u0254",
    "\u0255\f\u000e\u0002\u0002\u0255\u0256\t\u0003\u0002\u0002\u0256\u0261",
    "\u0005l7\u0002\u0257\u0258\f\u000b\u0002\u0002\u0258\u0259\u0007\u0018",
    "\u0002\u0002\u0259\u0261\u0005n8\u0002\u025a\u025b\f\t\u0002\u0002\u025b",
    "\u025c\t\u0004\u0002\u0002\u025c\u0261\u0005j6\u0002\u025d\u025e\f\u0007",
    "\u0002\u0002\u025e\u025f\t\u0004\u0002\u0002\u025f\u0261\u0005l7\u0002",
    "\u0260\u024b\u0003\u0002\u0002\u0002\u0260\u024e\u0003\u0002\u0002\u0002",
    "\u0260\u0251\u0003\u0002\u0002\u0002\u0260\u0254\u0003\u0002\u0002\u0002",
    "\u0260\u0257\u0003\u0002\u0002\u0002\u0260\u025a\u0003\u0002\u0002\u0002",
    "\u0260\u025d\u0003\u0002\u0002\u0002\u0261\u0264\u0003\u0002\u0002\u0002",
    "\u0262\u0260\u0003\u0002\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002",
    "\u0263g\u0003\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002",
    "\u0265\u0269\u0005\u0086D\u0002\u0266\u0269\u00052\u001a\u0002\u0267",
    "\u0269\u0005d3\u0002\u0268\u0265\u0003\u0002\u0002\u0002\u0268\u0266",
    "\u0003\u0002\u0002\u0002\u0268\u0267\u0003\u0002\u0002\u0002\u0269i",
    "\u0003\u0002\u0002\u0002\u026a\u026b\b6\u0001\u0002\u026b\u026c\u0007",
    "2\u0002\u0002\u026c\u026d\u0005j6\u0002\u026d\u026e\u00073\u0002\u0002",
    "\u026e\u0271\u0003\u0002\u0002\u0002\u026f\u0271\u0005\u0080A\u0002",
    "\u0270\u026a\u0003\u0002\u0002\u0002\u0270\u026f\u0003\u0002\u0002\u0002",
    "\u0271\u027a\u0003\u0002\u0002\u0002\u0272\u0273\f\u0006\u0002\u0002",
    "\u0273\u0274\t\u0003\u0002\u0002\u0274\u0279\u0005j6\u0007\u0275\u0276",
    "\f\u0005\u0002\u0002\u0276\u0277\t\u0004\u0002\u0002\u0277\u0279\u0005",
    "j6\u0006\u0278\u0272\u0003\u0002\u0002\u0002\u0278\u0275\u0003\u0002",
    "\u0002\u0002\u0279\u027c\u0003\u0002\u0002\u0002\u027a\u0278\u0003\u0002",
    "\u0002\u0002\u027a\u027b\u0003\u0002\u0002\u0002\u027bk\u0003\u0002",
    "\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027d\u027e\b7\u0001",
    "\u0002\u027e\u027f\u0005j6\u0002\u027f\u0280\t\u0003\u0002\u0002\u0280",
    "\u0281\u0005l7\t\u0281\u028c\u0003\u0002\u0002\u0002\u0282\u0283\u0005",
    "j6\u0002\u0283\u0284\t\u0004\u0002\u0002\u0284\u0285\u0005l7\u0006\u0285",
    "\u028c\u0003\u0002\u0002\u0002\u0286\u0287\u00072\u0002\u0002\u0287",
    "\u0288\u0005l7\u0002\u0288\u0289\u00073\u0002\u0002\u0289\u028c\u0003",
    "\u0002\u0002\u0002\u028a\u028c\u0005~@\u0002\u028b\u027d\u0003\u0002",
    "\u0002\u0002\u028b\u0282\u0003\u0002\u0002\u0002\u028b\u0286\u0003\u0002",
    "\u0002\u0002\u028b\u028a\u0003\u0002\u0002\u0002\u028c\u029b\u0003\u0002",
    "\u0002\u0002\u028d\u028e\f\n\u0002\u0002\u028e\u028f\t\u0003\u0002\u0002",
    "\u028f\u029a\u0005l7\u000b\u0290\u0291\f\u0007\u0002\u0002\u0291\u0292",
    "\t\u0004\u0002\u0002\u0292\u029a\u0005l7\b\u0293\u0294\f\b\u0002\u0002",
    "\u0294\u0295\t\u0003\u0002\u0002\u0295\u029a\u0005j6\u0002\u0296\u0297",
    "\f\u0005\u0002\u0002\u0297\u0298\t\u0004\u0002\u0002\u0298\u029a\u0005",
    "j6\u0002\u0299\u028d\u0003\u0002\u0002\u0002\u0299\u0290\u0003\u0002",
    "\u0002\u0002\u0299\u0293\u0003\u0002\u0002\u0002\u0299\u0296\u0003\u0002",
    "\u0002\u0002\u029a\u029d\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002",
    "\u0002\u0002\u029b\u029c\u0003\u0002\u0002\u0002\u029cm\u0003\u0002",
    "\u0002\u0002\u029d\u029b\u0003\u0002\u0002\u0002\u029e\u029f\b8\u0001",
    "\u0002\u029f\u02a0\u0005j6\u0002\u02a0\u02a1\u0007\u0018\u0002\u0002",
    "\u02a1\u02a2\u0005n8\u0005\u02a2\u02a5\u0003\u0002\u0002\u0002\u02a3",
    "\u02a5\u0005|?\u0002\u02a4\u029e\u0003\u0002\u0002\u0002\u02a4\u02a3",
    "\u0003\u0002\u0002\u0002\u02a5\u02ae\u0003\u0002\u0002\u0002\u02a6\u02a7",
    "\f\u0004\u0002\u0002\u02a7\u02a8\u0007\u0016\u0002\u0002\u02a8\u02ad",
    "\u0005n8\u0005\u02a9\u02aa\f\u0006\u0002\u0002\u02aa\u02ab\u0007\u0018",
    "\u0002\u0002\u02ab\u02ad\u0005j6\u0002\u02ac\u02a6\u0003\u0002\u0002",
    "\u0002\u02ac\u02a9\u0003\u0002\u0002\u0002\u02ad\u02b0\u0003\u0002\u0002",
    "\u0002\u02ae\u02ac\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002",
    "\u0002\u02afo\u0003\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002\u0002",
    "\u0002\u02b1\u02b2\u0005r:\u0002\u02b2\u02b3\u0007)\u0002\u0002\u02b3",
    "\u02b4\u0005p9\u0002\u02b4\u02c7\u0003\u0002\u0002\u0002\u02b5\u02b6",
    "\u0005r:\u0002\u02b6\u02b7\u0007/\u0002\u0002\u02b7\u02b8\u0005p9\u0002",
    "\u02b8\u02c7\u0003\u0002\u0002\u0002\u02b9\u02ba\u0005r:\u0002\u02ba",
    "\u02bb\u0007*\u0002\u0002\u02bb\u02bc\u0005p9\u0002\u02bc\u02c7\u0003",
    "\u0002\u0002\u0002\u02bd\u02be\u0005r:\u0002\u02be\u02bf\u00070\u0002",
    "\u0002\u02bf\u02c0\u0005p9\u0002\u02c0\u02c7\u0003\u0002\u0002\u0002",
    "\u02c1\u02c2\u00072\u0002\u0002\u02c2\u02c3\u0005p9\u0002\u02c3\u02c4",
    "\u00073\u0002\u0002\u02c4\u02c7\u0003\u0002\u0002\u0002\u02c5\u02c7",
    "\u0005r:\u0002\u02c6\u02b1\u0003\u0002\u0002\u0002\u02c6\u02b5\u0003",
    "\u0002\u0002\u0002\u02c6\u02b9\u0003\u0002\u0002\u0002\u02c6\u02bd\u0003",
    "\u0002\u0002\u0002\u02c6\u02c1\u0003\u0002\u0002\u0002\u02c6\u02c5\u0003",
    "\u0002\u0002\u0002\u02c7q\u0003\u0002\u0002\u0002\u02c8\u02c9\u0005",
    "t;\u0002\u02c9\u02ca\t\u0005\u0002\u0002\u02ca\u02cb\u0005t;\u0002\u02cb",
    "\u02d1\u0003\u0002\u0002\u0002\u02cc\u02cd\u0005t;\u0002\u02cd\u02ce",
    "\t\u0006\u0002\u0002\u02ce\u02cf\u0005t;\u0002\u02cf\u02d1\u0003\u0002",
    "\u0002\u0002\u02d0\u02c8\u0003\u0002\u0002\u0002\u02d0\u02cc\u0003\u0002",
    "\u0002\u0002\u02d1s\u0003\u0002\u0002\u0002\u02d2\u02d6\u00054\u001b",
    "\u0002\u02d3\u02d6\u0005d3\u0002\u02d4\u02d6\u0005\u0086D\u0002\u02d5",
    "\u02d2\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003\u0002\u0002\u0002\u02d5",
    "\u02d4\u0003\u0002\u0002\u0002\u02d6u\u0003\u0002\u0002\u0002\u02d7",
    "\u02d8\u0005\u0086D\u0002\u02d8w\u0003\u0002\u0002\u0002\u02d9\u02da",
    "\b=\u0001\u0002\u02da\u02f4\u0005v<\u0002\u02db\u02f4\u0005\\/\u0002",
    "\u02dc\u02f4\u0005^0\u0002\u02dd\u02f4\u0005j6\u0002\u02de\u02f4\u0005",
    "l7\u0002\u02df\u02f4\u0005n8\u0002\u02e0\u02f4\u0005\n\u0006\u0002\u02e1",
    "\u02f4\u0005\b\u0005\u0002\u02e2\u02f4\u0005T+\u0002\u02e3\u02f4\u0005",
    "Z.\u0002\u02e4\u02f4\u0005X-\u0002\u02e5\u02f4\u0005V,\u0002\u02e6\u02f4",
    "\u0005R*\u0002\u02e7\u02f4\u0005&\u0014\u0002\u02e8\u02f4\u0005|?\u0002",
    "\u02e9\u02f4\u0005\u0082B\u0002\u02ea\u02f4\u0005~@\u0002\u02eb\u02f4",
    "\u0005\u0080A\u0002\u02ec\u02f4\u0005\u0084C\u0002\u02ed\u02ee\t\u0007",
    "\u0002\u0002\u02ee\u02f4\u0005x=\f\u02ef\u02f0\u00072\u0002\u0002\u02f0",
    "\u02f1\u0005x=\u0002\u02f1\u02f2\u00073\u0002\u0002\u02f2\u02f4\u0003",
    "\u0002\u0002\u0002\u02f3\u02d9\u0003\u0002\u0002\u0002\u02f3\u02db\u0003",
    "\u0002\u0002\u0002\u02f3\u02dc\u0003\u0002\u0002\u0002\u02f3\u02dd\u0003",
    "\u0002\u0002\u0002\u02f3\u02de\u0003\u0002\u0002\u0002\u02f3\u02df\u0003",
    "\u0002\u0002\u0002\u02f3\u02e0\u0003\u0002\u0002\u0002\u02f3\u02e1\u0003",
    "\u0002\u0002\u0002\u02f3\u02e2\u0003\u0002\u0002\u0002\u02f3\u02e3\u0003",
    "\u0002\u0002\u0002\u02f3\u02e4\u0003\u0002\u0002\u0002\u02f3\u02e5\u0003",
    "\u0002\u0002\u0002\u02f3\u02e6\u0003\u0002\u0002\u0002\u02f3\u02e7\u0003",
    "\u0002\u0002\u0002\u02f3\u02e8\u0003\u0002\u0002\u0002\u02f3\u02e9\u0003",
    "\u0002\u0002\u0002\u02f3\u02ea\u0003\u0002\u0002\u0002\u02f3\u02eb\u0003",
    "\u0002\u0002\u0002\u02f3\u02ec\u0003\u0002\u0002\u0002\u02f3\u02ed\u0003",
    "\u0002\u0002\u0002\u02f3\u02ef\u0003\u0002\u0002\u0002\u02f4\u0312\u0003",
    "\u0002\u0002\u0002\u02f5\u02f6\f\r\u0002\u0002\u02f6\u02f7\u0007\u001b",
    "\u0002\u0002\u02f7\u0311\u0005x=\u000e\u02f8\u02f9\f\u000b\u0002\u0002",
    "\u02f9\u02fa\t\u0003\u0002\u0002\u02fa\u0311\u0005x=\f\u02fb\u02fc\f",
    "\n\u0002\u0002\u02fc\u02fd\t\u0004\u0002\u0002\u02fd\u0311\u0005x=\u000b",
    "\u02fe\u02ff\f\t\u0002\u0002\u02ff\u0300\t\b\u0002\u0002\u0300\u0311",
    "\u0005x=\n\u0301\u0302\f\b\u0002\u0002\u0302\u0303\u0007)\u0002\u0002",
    "\u0303\u0311\u0005x=\t\u0304\u0305\f\u0007\u0002\u0002\u0305\u0306\t",
    "\t\u0002\u0002\u0306\u0311\u0005x=\b\u0307\u0308\f\u0006\u0002\u0002",
    "\u0308\u0309\t\u0005\u0002\u0002\u0309\u0311\u0005x=\u0007\u030a\u030b",
    "\f\u0005\u0002\u0002\u030b\u030c\t\u0006\u0002\u0002\u030c\u0311\u0005",
    "x=\u0006\u030d\u030e\f\u0004\u0002\u0002\u030e\u030f\t\n\u0002\u0002",
    "\u030f\u0311\u0005x=\u0005\u0310\u02f5\u0003\u0002\u0002\u0002\u0310",
    "\u02f8\u0003\u0002\u0002\u0002\u0310\u02fb\u0003\u0002\u0002\u0002\u0310",
    "\u02fe\u0003\u0002\u0002\u0002\u0310\u0301\u0003\u0002\u0002\u0002\u0310",
    "\u0304\u0003\u0002\u0002\u0002\u0310\u0307\u0003\u0002\u0002\u0002\u0310",
    "\u030a\u0003\u0002\u0002\u0002\u0310\u030d\u0003\u0002\u0002\u0002\u0311",
    "\u0314\u0003\u0002\u0002\u0002\u0312\u0310\u0003\u0002\u0002\u0002\u0312",
    "\u0313\u0003\u0002\u0002\u0002\u0313y\u0003\u0002\u0002\u0002\u0314",
    "\u0312\u0003\u0002\u0002\u0002\u0315\u0316\u0007\u0012\u0002\u0002\u0316",
    "{\u0003\u0002\u0002\u0002\u0317\u0318\u0007\u0003\u0002\u0002\u0318",
    "}\u0003\u0002\u0002\u0002\u0319\u031a\u0007;\u0002\u0002\u031a\u007f",
    "\u0003\u0002\u0002\u0002\u031b\u031c\u0007:\u0002\u0002\u031c\u0081",
    "\u0003\u0002\u0002\u0002\u031d\u031e\t\u000b\u0002\u0002\u031e\u0083",
    "\u0003\u0002\u0002\u0002\u031f\u0320\u00076\u0002\u0002\u0320\u0085",
    "\u0003\u0002\u0002\u0002\u0321\u0322\u0007<\u0002\u0002\u0322\u0087",
    "\u0003\u0002\u0002\u0002\u0323\u0324\u0007=\u0002\u0002\u0324\u0089",
    "\u0003\u0002\u0002\u0002\u0325\u0326\u0007>\u0002\u0002\u0326\u008b",
    "\u0003\u0002\u0002\u0002\u0327\u0328\bG\u0001\u0002\u0328\u032b\u0007",
    "\u0005\u0002\u0002\u0329\u032b\u0005\u0090I\u0002\u032a\u0327\u0003",
    "\u0002\u0002\u0002\u032a\u0329\u0003\u0002\u0002\u0002\u032b\u0332\u0003",
    "\u0002\u0002\u0002\u032c\u032d\f\u0006\u0002\u0002\u032d\u0331\u0007",
    "\u0005\u0002\u0002\u032e\u032f\f\u0005\u0002\u0002\u032f\u0331\u0005",
    "\u0090I\u0002\u0330\u032c\u0003\u0002\u0002\u0002\u0330\u032e\u0003",
    "\u0002\u0002\u0002\u0331\u0334\u0003\u0002\u0002\u0002\u0332\u0330\u0003",
    "\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u008d\u0003",
    "\u0002\u0002\u0002\u0334\u0332\u0003\u0002\u0002\u0002\u0335\u0336\u0007",
    "\r\u0002\u0002\u0336\u008f\u0003\u0002\u0002\u0002\u0337\u0338\u0007",
    "\u0006\u0002\u0002\u0338\u0091\u0003\u0002\u0002\u0002:\u0099\u00a1",
    "\u00ae\u00d5\u00d9\u00e2\u00ec\u0100\u010c\u0111\u0117\u011f\u0128\u013f",
    "\u0157\u016f\u018d\u0195\u019f\u01ae\u01bc\u01c9\u01cb\u01d6\u01e0\u01ea",
    "\u01f4\u01fe\u0210\u0216\u021a\u0221\u0229\u022d\u0249\u0260\u0262\u0268",
    "\u0270\u0278\u027a\u028b\u0299\u029b\u02a4\u02ac\u02ae\u02c6\u02d0\u02d5",
    "\u02f3\u0310\u0312\u032a\u0330\u0332"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, "','", "';'", null, "'require'", "'end'", 
                     "'def'", "'return'", "'pir'", "'if'", "'else'", "'elsif'", 
                     "'unless'", "'while'", "'retry'", "'break'", "'for'", 
                     "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'**'", "'=='", "'!='", "'>'", "'<'", "'<='", "'>='", 
                     "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'**='", 
                     "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", null, null, 
                     null, "'('", "')'", "'['", "']'", "'nil'" ];

var symbolicNames = [ null, "LITERAL", "COMMA", "SEMICOLON", "CRLF", "REQUIRE", 
                      "END", "DEF", "RETURN", "PIR", "IF", "ELSE", "ELSIF", 
                      "UNLESS", "WHILE", "RETRY", "BREAK", "FOR", "TRUE", 
                      "FALSE", "PLUS", "MINUS", "MUL", "DIV", "MOD", "EXP", 
                      "EQUAL", "NOT_EQUAL", "GREATER", "LESS", "LESS_EQUAL", 
                      "GREATER_EQUAL", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "EXP_ASSIGN", 
                      "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "BIT_SHL", 
                      "BIT_SHR", "AND", "OR", "NOT", "LEFT_RBRACKET", "RIGHT_RBRACKET", 
                      "LEFT_SBRACKET", "RIGHT_SBRACKET", "NIL", "SL_COMMENT", 
                      "ML_COMMENT", "WS", "INT", "FLOAT", "ID", "ID_GLOBAL", 
                      "ID_FUNCTION" ];

var ruleNames =  [ "prog", "expression_list", "expression", "global_get", 
                   "global_set", "global_result", "function_inline_call", 
                   "require_block", "pir_inline", "pir_expression_list", 
                   "function_definition", "function_definition_body", "function_definition_header", 
                   "function_name", "function_definition_params", "function_definition_params_list", 
                   "function_definition_param_id", "return_statement", "function_call", 
                   "function_call_param_list", "function_call_params", "function_param", 
                   "function_unnamed_param", "function_named_param", "function_call_assignment", 
                   "all_result", "elsif_statement", "if_elsif_statement", 
                   "if_statement", "unless_statement", "while_statement", 
                   "for_statement", "init_expression", "all_assignment", 
                   "for_init_list", "cond_expression", "loop_expression", 
                   "for_loop_list", "statement_body", "statement_expression_list", 
                   "assignment", "dynamic_assignment", "int_assignment", 
                   "float_assignment", "string_assignment", "initial_array_assignment", 
                   "array_assignment", "array_definition", "array_definition_elements", 
                   "array_selector", "dynamic_result", "dynamic", "int_result", 
                   "float_result", "string_result", "comparison_list", "comparison", 
                   "comp_var", "lvalue", "rvalue", "break_expression", "literal_t", 
                   "float_t", "int_t", "bool_t", "nil_t", "id", "id_global", 
                   "id_function", "terminator", "else_token", "crlf" ];

function RubyParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

RubyParser.prototype = Object.create(antlr4.Parser.prototype);
RubyParser.prototype.constructor = RubyParser;

Object.defineProperty(RubyParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

RubyParser.EOF = antlr4.Token.EOF;
RubyParser.LITERAL = 1;
RubyParser.COMMA = 2;
RubyParser.SEMICOLON = 3;
RubyParser.CRLF = 4;
RubyParser.REQUIRE = 5;
RubyParser.END = 6;
RubyParser.DEF = 7;
RubyParser.RETURN = 8;
RubyParser.PIR = 9;
RubyParser.IF = 10;
RubyParser.ELSE = 11;
RubyParser.ELSIF = 12;
RubyParser.UNLESS = 13;
RubyParser.WHILE = 14;
RubyParser.RETRY = 15;
RubyParser.BREAK = 16;
RubyParser.FOR = 17;
RubyParser.TRUE = 18;
RubyParser.FALSE = 19;
RubyParser.PLUS = 20;
RubyParser.MINUS = 21;
RubyParser.MUL = 22;
RubyParser.DIV = 23;
RubyParser.MOD = 24;
RubyParser.EXP = 25;
RubyParser.EQUAL = 26;
RubyParser.NOT_EQUAL = 27;
RubyParser.GREATER = 28;
RubyParser.LESS = 29;
RubyParser.LESS_EQUAL = 30;
RubyParser.GREATER_EQUAL = 31;
RubyParser.ASSIGN = 32;
RubyParser.PLUS_ASSIGN = 33;
RubyParser.MINUS_ASSIGN = 34;
RubyParser.MUL_ASSIGN = 35;
RubyParser.DIV_ASSIGN = 36;
RubyParser.MOD_ASSIGN = 37;
RubyParser.EXP_ASSIGN = 38;
RubyParser.BIT_AND = 39;
RubyParser.BIT_OR = 40;
RubyParser.BIT_XOR = 41;
RubyParser.BIT_NOT = 42;
RubyParser.BIT_SHL = 43;
RubyParser.BIT_SHR = 44;
RubyParser.AND = 45;
RubyParser.OR = 46;
RubyParser.NOT = 47;
RubyParser.LEFT_RBRACKET = 48;
RubyParser.RIGHT_RBRACKET = 49;
RubyParser.LEFT_SBRACKET = 50;
RubyParser.RIGHT_SBRACKET = 51;
RubyParser.NIL = 52;
RubyParser.SL_COMMENT = 53;
RubyParser.ML_COMMENT = 54;
RubyParser.WS = 55;
RubyParser.INT = 56;
RubyParser.FLOAT = 57;
RubyParser.ID = 58;
RubyParser.ID_GLOBAL = 59;
RubyParser.ID_FUNCTION = 60;

RubyParser.RULE_prog = 0;
RubyParser.RULE_expression_list = 1;
RubyParser.RULE_expression = 2;
RubyParser.RULE_global_get = 3;
RubyParser.RULE_global_set = 4;
RubyParser.RULE_global_result = 5;
RubyParser.RULE_function_inline_call = 6;
RubyParser.RULE_require_block = 7;
RubyParser.RULE_pir_inline = 8;
RubyParser.RULE_pir_expression_list = 9;
RubyParser.RULE_function_definition = 10;
RubyParser.RULE_function_definition_body = 11;
RubyParser.RULE_function_definition_header = 12;
RubyParser.RULE_function_name = 13;
RubyParser.RULE_function_definition_params = 14;
RubyParser.RULE_function_definition_params_list = 15;
RubyParser.RULE_function_definition_param_id = 16;
RubyParser.RULE_return_statement = 17;
RubyParser.RULE_function_call = 18;
RubyParser.RULE_function_call_param_list = 19;
RubyParser.RULE_function_call_params = 20;
RubyParser.RULE_function_param = 21;
RubyParser.RULE_function_unnamed_param = 22;
RubyParser.RULE_function_named_param = 23;
RubyParser.RULE_function_call_assignment = 24;
RubyParser.RULE_all_result = 25;
RubyParser.RULE_elsif_statement = 26;
RubyParser.RULE_if_elsif_statement = 27;
RubyParser.RULE_if_statement = 28;
RubyParser.RULE_unless_statement = 29;
RubyParser.RULE_while_statement = 30;
RubyParser.RULE_for_statement = 31;
RubyParser.RULE_init_expression = 32;
RubyParser.RULE_all_assignment = 33;
RubyParser.RULE_for_init_list = 34;
RubyParser.RULE_cond_expression = 35;
RubyParser.RULE_loop_expression = 36;
RubyParser.RULE_for_loop_list = 37;
RubyParser.RULE_statement_body = 38;
RubyParser.RULE_statement_expression_list = 39;
RubyParser.RULE_assignment = 40;
RubyParser.RULE_dynamic_assignment = 41;
RubyParser.RULE_int_assignment = 42;
RubyParser.RULE_float_assignment = 43;
RubyParser.RULE_string_assignment = 44;
RubyParser.RULE_initial_array_assignment = 45;
RubyParser.RULE_array_assignment = 46;
RubyParser.RULE_array_definition = 47;
RubyParser.RULE_array_definition_elements = 48;
RubyParser.RULE_array_selector = 49;
RubyParser.RULE_dynamic_result = 50;
RubyParser.RULE_dynamic = 51;
RubyParser.RULE_int_result = 52;
RubyParser.RULE_float_result = 53;
RubyParser.RULE_string_result = 54;
RubyParser.RULE_comparison_list = 55;
RubyParser.RULE_comparison = 56;
RubyParser.RULE_comp_var = 57;
RubyParser.RULE_lvalue = 58;
RubyParser.RULE_rvalue = 59;
RubyParser.RULE_break_expression = 60;
RubyParser.RULE_literal_t = 61;
RubyParser.RULE_float_t = 62;
RubyParser.RULE_int_t = 63;
RubyParser.RULE_bool_t = 64;
RubyParser.RULE_nil_t = 65;
RubyParser.RULE_id = 66;
RubyParser.RULE_id_global = 67;
RubyParser.RULE_id_function = 68;
RubyParser.RULE_terminator = 69;
RubyParser.RULE_else_token = 70;
RubyParser.RULE_crlf = 71;


function ProgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_prog;
    return this;
}

ProgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgContext.prototype.constructor = ProgContext;

ProgContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

ProgContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterProg(this);
	}
};

ProgContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitProg(this);
	}
};




RubyParser.ProgContext = ProgContext;

RubyParser.prototype.prog = function() {

    var localctx = new ProgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, RubyParser.RULE_prog);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 144;
        this.expression_list(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Expression_listContext.prototype.terminator = function() {
    return this.getTypedRuleContext(TerminatorContext,0);
};

Expression_listContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitExpression_list(this);
	}
};



RubyParser.prototype.expression_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Expression_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 2;
    this.enterRecursionRule(localctx, 2, RubyParser.RULE_expression_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 151;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case RubyParser.LITERAL:
        case RubyParser.REQUIRE:
        case RubyParser.DEF:
        case RubyParser.RETURN:
        case RubyParser.PIR:
        case RubyParser.IF:
        case RubyParser.UNLESS:
        case RubyParser.WHILE:
        case RubyParser.FOR:
        case RubyParser.TRUE:
        case RubyParser.FALSE:
        case RubyParser.BIT_NOT:
        case RubyParser.NOT:
        case RubyParser.LEFT_RBRACKET:
        case RubyParser.NIL:
        case RubyParser.INT:
        case RubyParser.FLOAT:
        case RubyParser.ID:
        case RubyParser.ID_GLOBAL:
        case RubyParser.ID_FUNCTION:
            this.state = 147;
            this.expression();
            this.state = 148;
            this.terminator(0);
            break;
        case RubyParser.SEMICOLON:
        case RubyParser.CRLF:
            this.state = 150;
            this.terminator(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 159;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Expression_listContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_expression_list);
                this.state = 153;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 154;
                this.expression();
                this.state = 155;
                this.terminator(0); 
            }
            this.state = 161;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.function_definition = function() {
    return this.getTypedRuleContext(Function_definitionContext,0);
};

ExpressionContext.prototype.function_inline_call = function() {
    return this.getTypedRuleContext(Function_inline_callContext,0);
};

ExpressionContext.prototype.require_block = function() {
    return this.getTypedRuleContext(Require_blockContext,0);
};

ExpressionContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};

ExpressionContext.prototype.unless_statement = function() {
    return this.getTypedRuleContext(Unless_statementContext,0);
};

ExpressionContext.prototype.rvalue = function() {
    return this.getTypedRuleContext(RvalueContext,0);
};

ExpressionContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};

ExpressionContext.prototype.while_statement = function() {
    return this.getTypedRuleContext(While_statementContext,0);
};

ExpressionContext.prototype.for_statement = function() {
    return this.getTypedRuleContext(For_statementContext,0);
};

ExpressionContext.prototype.pir_inline = function() {
    return this.getTypedRuleContext(Pir_inlineContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitExpression(this);
	}
};




RubyParser.ExpressionContext = ExpressionContext;

RubyParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, RubyParser.RULE_expression);
    try {
        this.state = 172;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 162;
            this.function_definition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 163;
            this.function_inline_call();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 164;
            this.require_block();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 165;
            this.if_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 166;
            this.unless_statement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 167;
            this.rvalue(0);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 168;
            this.return_statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 169;
            this.while_statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 170;
            this.for_statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 171;
            this.pir_inline();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Global_getContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_global_get;
    this.var_name = null; // LvalueContext
    this.op = null; // Token
    this.global_name = null; // Id_globalContext
    return this;
}

Global_getContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_getContext.prototype.constructor = Global_getContext;

Global_getContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

Global_getContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

Global_getContext.prototype.id_global = function() {
    return this.getTypedRuleContext(Id_globalContext,0);
};

Global_getContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterGlobal_get(this);
	}
};

Global_getContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitGlobal_get(this);
	}
};




RubyParser.Global_getContext = Global_getContext;

RubyParser.prototype.global_get = function() {

    var localctx = new Global_getContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, RubyParser.RULE_global_get);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 174;
        localctx.var_name = this.lvalue();
        this.state = 175;
        localctx.op = this.match(RubyParser.ASSIGN);
        this.state = 176;
        localctx.global_name = this.id_global();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Global_setContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_global_set;
    this.global_name = null; // Id_globalContext
    this.op = null; // Token
    this.result = null; // All_resultContext
    return this;
}

Global_setContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_setContext.prototype.constructor = Global_setContext;

Global_setContext.prototype.id_global = function() {
    return this.getTypedRuleContext(Id_globalContext,0);
};

Global_setContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

Global_setContext.prototype.all_result = function() {
    return this.getTypedRuleContext(All_resultContext,0);
};

Global_setContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterGlobal_set(this);
	}
};

Global_setContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitGlobal_set(this);
	}
};




RubyParser.Global_setContext = Global_setContext;

RubyParser.prototype.global_set = function() {

    var localctx = new Global_setContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, RubyParser.RULE_global_set);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 178;
        localctx.global_name = this.id_global();
        this.state = 179;
        localctx.op = this.match(RubyParser.ASSIGN);
        this.state = 180;
        localctx.result = this.all_result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Global_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_global_result;
    return this;
}

Global_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_resultContext.prototype.constructor = Global_resultContext;

Global_resultContext.prototype.id_global = function() {
    return this.getTypedRuleContext(Id_globalContext,0);
};

Global_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterGlobal_result(this);
	}
};

Global_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitGlobal_result(this);
	}
};




RubyParser.Global_resultContext = Global_resultContext;

RubyParser.prototype.global_result = function() {

    var localctx = new Global_resultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, RubyParser.RULE_global_result);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 182;
        this.id_global();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_inline_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_inline_call;
    return this;
}

Function_inline_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_inline_callContext.prototype.constructor = Function_inline_callContext;

Function_inline_callContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Function_inline_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_inline_call(this);
	}
};

Function_inline_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_inline_call(this);
	}
};




RubyParser.Function_inline_callContext = Function_inline_callContext;

RubyParser.prototype.function_inline_call = function() {

    var localctx = new Function_inline_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, RubyParser.RULE_function_inline_call);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 184;
        this.function_call();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Require_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_require_block;
    return this;
}

Require_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Require_blockContext.prototype.constructor = Require_blockContext;

Require_blockContext.prototype.REQUIRE = function() {
    return this.getToken(RubyParser.REQUIRE, 0);
};

Require_blockContext.prototype.literal_t = function() {
    return this.getTypedRuleContext(Literal_tContext,0);
};

Require_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterRequire_block(this);
	}
};

Require_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitRequire_block(this);
	}
};




RubyParser.Require_blockContext = Require_blockContext;

RubyParser.prototype.require_block = function() {

    var localctx = new Require_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, RubyParser.RULE_require_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 186;
        this.match(RubyParser.REQUIRE);
        this.state = 187;
        this.literal_t();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pir_inlineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_pir_inline;
    return this;
}

Pir_inlineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pir_inlineContext.prototype.constructor = Pir_inlineContext;

Pir_inlineContext.prototype.PIR = function() {
    return this.getToken(RubyParser.PIR, 0);
};

Pir_inlineContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

Pir_inlineContext.prototype.pir_expression_list = function() {
    return this.getTypedRuleContext(Pir_expression_listContext,0);
};

Pir_inlineContext.prototype.END = function() {
    return this.getToken(RubyParser.END, 0);
};

Pir_inlineContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterPir_inline(this);
	}
};

Pir_inlineContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitPir_inline(this);
	}
};




RubyParser.Pir_inlineContext = Pir_inlineContext;

RubyParser.prototype.pir_inline = function() {

    var localctx = new Pir_inlineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, RubyParser.RULE_pir_inline);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 189;
        this.match(RubyParser.PIR);
        this.state = 190;
        this.crlf();
        this.state = 191;
        this.pir_expression_list();
        this.state = 192;
        this.match(RubyParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pir_expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_pir_expression_list;
    return this;
}

Pir_expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pir_expression_listContext.prototype.constructor = Pir_expression_listContext;

Pir_expression_listContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Pir_expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterPir_expression_list(this);
	}
};

Pir_expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitPir_expression_list(this);
	}
};




RubyParser.Pir_expression_listContext = Pir_expression_listContext;

RubyParser.prototype.pir_expression_list = function() {

    var localctx = new Pir_expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, RubyParser.RULE_pir_expression_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 194;
        this.expression_list(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_definition;
    return this;
}

Function_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_definitionContext.prototype.constructor = Function_definitionContext;

Function_definitionContext.prototype.function_definition_header = function() {
    return this.getTypedRuleContext(Function_definition_headerContext,0);
};

Function_definitionContext.prototype.function_definition_body = function() {
    return this.getTypedRuleContext(Function_definition_bodyContext,0);
};

Function_definitionContext.prototype.END = function() {
    return this.getToken(RubyParser.END, 0);
};

Function_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_definition(this);
	}
};

Function_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_definition(this);
	}
};




RubyParser.Function_definitionContext = Function_definitionContext;

RubyParser.prototype.function_definition = function() {

    var localctx = new Function_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, RubyParser.RULE_function_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 196;
        this.function_definition_header();
        this.state = 197;
        this.function_definition_body();
        this.state = 198;
        this.match(RubyParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_definition_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_definition_body;
    return this;
}

Function_definition_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_definition_bodyContext.prototype.constructor = Function_definition_bodyContext;

Function_definition_bodyContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Function_definition_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_definition_body(this);
	}
};

Function_definition_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_definition_body(this);
	}
};




RubyParser.Function_definition_bodyContext = Function_definition_bodyContext;

RubyParser.prototype.function_definition_body = function() {

    var localctx = new Function_definition_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, RubyParser.RULE_function_definition_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 200;
        this.expression_list(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_definition_headerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_definition_header;
    return this;
}

Function_definition_headerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_definition_headerContext.prototype.constructor = Function_definition_headerContext;

Function_definition_headerContext.prototype.DEF = function() {
    return this.getToken(RubyParser.DEF, 0);
};

Function_definition_headerContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Function_definition_headerContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

Function_definition_headerContext.prototype.function_definition_params = function() {
    return this.getTypedRuleContext(Function_definition_paramsContext,0);
};

Function_definition_headerContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_definition_header(this);
	}
};

Function_definition_headerContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_definition_header(this);
	}
};




RubyParser.Function_definition_headerContext = Function_definition_headerContext;

RubyParser.prototype.function_definition_header = function() {

    var localctx = new Function_definition_headerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, RubyParser.RULE_function_definition_header);
    try {
        this.state = 211;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 202;
            this.match(RubyParser.DEF);
            this.state = 203;
            this.function_name();
            this.state = 204;
            this.crlf();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 206;
            this.match(RubyParser.DEF);
            this.state = 207;
            this.function_name();
            this.state = 208;
            this.function_definition_params();
            this.state = 209;
            this.crlf();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.id_function = function() {
    return this.getTypedRuleContext(Id_functionContext,0);
};

Function_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_name(this);
	}
};




RubyParser.Function_nameContext = Function_nameContext;

RubyParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, RubyParser.RULE_function_name);
    try {
        this.state = 215;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case RubyParser.ID_FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 213;
            this.id_function();
            break;
        case RubyParser.ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 214;
            this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_definition_paramsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_definition_params;
    return this;
}

Function_definition_paramsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_definition_paramsContext.prototype.constructor = Function_definition_paramsContext;

Function_definition_paramsContext.prototype.LEFT_RBRACKET = function() {
    return this.getToken(RubyParser.LEFT_RBRACKET, 0);
};

Function_definition_paramsContext.prototype.RIGHT_RBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_RBRACKET, 0);
};

Function_definition_paramsContext.prototype.function_definition_params_list = function() {
    return this.getTypedRuleContext(Function_definition_params_listContext,0);
};

Function_definition_paramsContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_definition_params(this);
	}
};

Function_definition_paramsContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_definition_params(this);
	}
};




RubyParser.Function_definition_paramsContext = Function_definition_paramsContext;

RubyParser.prototype.function_definition_params = function() {

    var localctx = new Function_definition_paramsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, RubyParser.RULE_function_definition_params);
    try {
        this.state = 224;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 217;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 218;
            this.match(RubyParser.RIGHT_RBRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 219;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 220;
            this.function_definition_params_list(0);
            this.state = 221;
            this.match(RubyParser.RIGHT_RBRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 223;
            this.function_definition_params_list(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_definition_params_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_definition_params_list;
    return this;
}

Function_definition_params_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_definition_params_listContext.prototype.constructor = Function_definition_params_listContext;

Function_definition_params_listContext.prototype.function_definition_param_id = function() {
    return this.getTypedRuleContext(Function_definition_param_idContext,0);
};

Function_definition_params_listContext.prototype.function_definition_params_list = function() {
    return this.getTypedRuleContext(Function_definition_params_listContext,0);
};

Function_definition_params_listContext.prototype.COMMA = function() {
    return this.getToken(RubyParser.COMMA, 0);
};

Function_definition_params_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_definition_params_list(this);
	}
};

Function_definition_params_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_definition_params_list(this);
	}
};



RubyParser.prototype.function_definition_params_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Function_definition_params_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 30;
    this.enterRecursionRule(localctx, 30, RubyParser.RULE_function_definition_params_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 227;
        this.function_definition_param_id();
        this._ctx.stop = this._input.LT(-1);
        this.state = 234;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Function_definition_params_listContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_function_definition_params_list);
                this.state = 229;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 230;
                this.match(RubyParser.COMMA);
                this.state = 231;
                this.function_definition_param_id(); 
            }
            this.state = 236;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Function_definition_param_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_definition_param_id;
    return this;
}

Function_definition_param_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_definition_param_idContext.prototype.constructor = Function_definition_param_idContext;

Function_definition_param_idContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Function_definition_param_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_definition_param_id(this);
	}
};

Function_definition_param_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_definition_param_id(this);
	}
};




RubyParser.Function_definition_param_idContext = Function_definition_param_idContext;

RubyParser.prototype.function_definition_param_id = function() {

    var localctx = new Function_definition_param_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, RubyParser.RULE_function_definition_param_id);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 237;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_return_statement;
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(RubyParser.RETURN, 0);
};

Return_statementContext.prototype.all_result = function() {
    return this.getTypedRuleContext(All_resultContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitReturn_statement(this);
	}
};




RubyParser.Return_statementContext = Return_statementContext;

RubyParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, RubyParser.RULE_return_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 239;
        this.match(RubyParser.RETURN);
        this.state = 240;
        this.all_result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_call;
    this.name = null; // Function_nameContext
    this.params = null; // Function_call_param_listContext
    return this;
}

Function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_callContext.prototype.constructor = Function_callContext;

Function_callContext.prototype.LEFT_RBRACKET = function() {
    return this.getToken(RubyParser.LEFT_RBRACKET, 0);
};

Function_callContext.prototype.RIGHT_RBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_RBRACKET, 0);
};

Function_callContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Function_callContext.prototype.function_call_param_list = function() {
    return this.getTypedRuleContext(Function_call_param_listContext,0);
};

Function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_call(this);
	}
};

Function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_call(this);
	}
};




RubyParser.Function_callContext = Function_callContext;

RubyParser.prototype.function_call = function() {

    var localctx = new Function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, RubyParser.RULE_function_call);
    try {
        this.state = 254;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 242;
            localctx.name = this.function_name();
            this.state = 243;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 244;
            localctx.params = this.function_call_param_list();
            this.state = 245;
            this.match(RubyParser.RIGHT_RBRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 247;
            localctx.name = this.function_name();
            this.state = 248;
            localctx.params = this.function_call_param_list();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 250;
            localctx.name = this.function_name();
            this.state = 251;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 252;
            this.match(RubyParser.RIGHT_RBRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_call_param_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_call_param_list;
    return this;
}

Function_call_param_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_call_param_listContext.prototype.constructor = Function_call_param_listContext;

Function_call_param_listContext.prototype.function_call_params = function() {
    return this.getTypedRuleContext(Function_call_paramsContext,0);
};

Function_call_param_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_call_param_list(this);
	}
};

Function_call_param_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_call_param_list(this);
	}
};




RubyParser.Function_call_param_listContext = Function_call_param_listContext;

RubyParser.prototype.function_call_param_list = function() {

    var localctx = new Function_call_param_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, RubyParser.RULE_function_call_param_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        this.function_call_params(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_call_paramsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_call_params;
    return this;
}

Function_call_paramsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_call_paramsContext.prototype.constructor = Function_call_paramsContext;

Function_call_paramsContext.prototype.function_param = function() {
    return this.getTypedRuleContext(Function_paramContext,0);
};

Function_call_paramsContext.prototype.function_call_params = function() {
    return this.getTypedRuleContext(Function_call_paramsContext,0);
};

Function_call_paramsContext.prototype.COMMA = function() {
    return this.getToken(RubyParser.COMMA, 0);
};

Function_call_paramsContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_call_params(this);
	}
};

Function_call_paramsContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_call_params(this);
	}
};



RubyParser.prototype.function_call_params = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Function_call_paramsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 40;
    this.enterRecursionRule(localctx, 40, RubyParser.RULE_function_call_params, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        this.function_param();
        this._ctx.stop = this._input.LT(-1);
        this.state = 266;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Function_call_paramsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_function_call_params);
                this.state = 261;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 262;
                this.match(RubyParser.COMMA);
                this.state = 263;
                this.function_param(); 
            }
            this.state = 268;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Function_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_param;
    return this;
}

Function_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_paramContext.prototype.constructor = Function_paramContext;

Function_paramContext.prototype.function_unnamed_param = function() {
    return this.getTypedRuleContext(Function_unnamed_paramContext,0);
};

Function_paramContext.prototype.function_named_param = function() {
    return this.getTypedRuleContext(Function_named_paramContext,0);
};

Function_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_param(this);
	}
};

Function_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_param(this);
	}
};




RubyParser.Function_paramContext = Function_paramContext;

RubyParser.prototype.function_param = function() {

    var localctx = new Function_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, RubyParser.RULE_function_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.state = 269;
            this.function_unnamed_param();
            break;

        case 2:
            this.state = 270;
            this.function_named_param();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_unnamed_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_unnamed_param;
    return this;
}

Function_unnamed_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_unnamed_paramContext.prototype.constructor = Function_unnamed_paramContext;

Function_unnamed_paramContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

Function_unnamed_paramContext.prototype.float_result = function() {
    return this.getTypedRuleContext(Float_resultContext,0);
};

Function_unnamed_paramContext.prototype.string_result = function() {
    return this.getTypedRuleContext(String_resultContext,0);
};

Function_unnamed_paramContext.prototype.dynamic_result = function() {
    return this.getTypedRuleContext(Dynamic_resultContext,0);
};

Function_unnamed_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_unnamed_param(this);
	}
};

Function_unnamed_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_unnamed_param(this);
	}
};




RubyParser.Function_unnamed_paramContext = Function_unnamed_paramContext;

RubyParser.prototype.function_unnamed_param = function() {

    var localctx = new Function_unnamed_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, RubyParser.RULE_function_unnamed_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 277;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.state = 273;
            this.int_result(0);
            break;

        case 2:
            this.state = 274;
            this.float_result(0);
            break;

        case 3:
            this.state = 275;
            this.string_result(0);
            break;

        case 4:
            this.state = 276;
            this.dynamic_result(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_named_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_named_param;
    this.op = null; // Token
    return this;
}

Function_named_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_named_paramContext.prototype.constructor = Function_named_paramContext;

Function_named_paramContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Function_named_paramContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

Function_named_paramContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

Function_named_paramContext.prototype.float_result = function() {
    return this.getTypedRuleContext(Float_resultContext,0);
};

Function_named_paramContext.prototype.string_result = function() {
    return this.getTypedRuleContext(String_resultContext,0);
};

Function_named_paramContext.prototype.dynamic_result = function() {
    return this.getTypedRuleContext(Dynamic_resultContext,0);
};

Function_named_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_named_param(this);
	}
};

Function_named_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_named_param(this);
	}
};




RubyParser.Function_named_paramContext = Function_named_paramContext;

RubyParser.prototype.function_named_param = function() {

    var localctx = new Function_named_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, RubyParser.RULE_function_named_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 279;
        this.id();
        this.state = 280;
        localctx.op = this.match(RubyParser.ASSIGN);
        this.state = 285;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.state = 281;
            this.int_result(0);
            break;

        case 2:
            this.state = 282;
            this.float_result(0);
            break;

        case 3:
            this.state = 283;
            this.string_result(0);
            break;

        case 4:
            this.state = 284;
            this.dynamic_result(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_call_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_function_call_assignment;
    return this;
}

Function_call_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_call_assignmentContext.prototype.constructor = Function_call_assignmentContext;

Function_call_assignmentContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Function_call_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFunction_call_assignment(this);
	}
};

Function_call_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFunction_call_assignment(this);
	}
};




RubyParser.Function_call_assignmentContext = Function_call_assignmentContext;

RubyParser.prototype.function_call_assignment = function() {

    var localctx = new Function_call_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, RubyParser.RULE_function_call_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        this.function_call();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function All_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_all_result;
    return this;
}

All_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
All_resultContext.prototype.constructor = All_resultContext;

All_resultContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

All_resultContext.prototype.float_result = function() {
    return this.getTypedRuleContext(Float_resultContext,0);
};

All_resultContext.prototype.string_result = function() {
    return this.getTypedRuleContext(String_resultContext,0);
};

All_resultContext.prototype.dynamic_result = function() {
    return this.getTypedRuleContext(Dynamic_resultContext,0);
};

All_resultContext.prototype.global_result = function() {
    return this.getTypedRuleContext(Global_resultContext,0);
};

All_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterAll_result(this);
	}
};

All_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitAll_result(this);
	}
};




RubyParser.All_resultContext = All_resultContext;

RubyParser.prototype.all_result = function() {

    var localctx = new All_resultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, RubyParser.RULE_all_result);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.state = 289;
            this.int_result(0);
            break;

        case 2:
            this.state = 290;
            this.float_result(0);
            break;

        case 3:
            this.state = 291;
            this.string_result(0);
            break;

        case 4:
            this.state = 292;
            this.dynamic_result(0);
            break;

        case 5:
            this.state = 293;
            this.global_result();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Elsif_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_elsif_statement;
    return this;
}

Elsif_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Elsif_statementContext.prototype.constructor = Elsif_statementContext;

Elsif_statementContext.prototype.if_elsif_statement = function() {
    return this.getTypedRuleContext(If_elsif_statementContext,0);
};

Elsif_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterElsif_statement(this);
	}
};

Elsif_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitElsif_statement(this);
	}
};




RubyParser.Elsif_statementContext = Elsif_statementContext;

RubyParser.prototype.elsif_statement = function() {

    var localctx = new Elsif_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, RubyParser.RULE_elsif_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 296;
        this.if_elsif_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_elsif_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_if_elsif_statement;
    return this;
}

If_elsif_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_elsif_statementContext.prototype.constructor = If_elsif_statementContext;

If_elsif_statementContext.prototype.ELSIF = function() {
    return this.getToken(RubyParser.ELSIF, 0);
};

If_elsif_statementContext.prototype.cond_expression = function() {
    return this.getTypedRuleContext(Cond_expressionContext,0);
};

If_elsif_statementContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

If_elsif_statementContext.prototype.statement_body = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_bodyContext);
    } else {
        return this.getTypedRuleContext(Statement_bodyContext,i);
    }
};

If_elsif_statementContext.prototype.else_token = function() {
    return this.getTypedRuleContext(Else_tokenContext,0);
};

If_elsif_statementContext.prototype.if_elsif_statement = function() {
    return this.getTypedRuleContext(If_elsif_statementContext,0);
};

If_elsif_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterIf_elsif_statement(this);
	}
};

If_elsif_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitIf_elsif_statement(this);
	}
};




RubyParser.If_elsif_statementContext = If_elsif_statementContext;

RubyParser.prototype.if_elsif_statement = function() {

    var localctx = new If_elsif_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, RubyParser.RULE_if_elsif_statement);
    try {
        this.state = 317;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 298;
            this.match(RubyParser.ELSIF);
            this.state = 299;
            this.cond_expression();
            this.state = 300;
            this.crlf();
            this.state = 301;
            this.statement_body();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 303;
            this.match(RubyParser.ELSIF);
            this.state = 304;
            this.cond_expression();
            this.state = 305;
            this.crlf();
            this.state = 306;
            this.statement_body();
            this.state = 307;
            this.else_token();
            this.state = 308;
            this.crlf();
            this.state = 309;
            this.statement_body();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 311;
            this.match(RubyParser.ELSIF);
            this.state = 312;
            this.cond_expression();
            this.state = 313;
            this.crlf();
            this.state = 314;
            this.statement_body();
            this.state = 315;
            this.if_elsif_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_if_statement;
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function() {
    return this.getToken(RubyParser.IF, 0);
};

If_statementContext.prototype.cond_expression = function() {
    return this.getTypedRuleContext(Cond_expressionContext,0);
};

If_statementContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

If_statementContext.prototype.statement_body = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_bodyContext);
    } else {
        return this.getTypedRuleContext(Statement_bodyContext,i);
    }
};

If_statementContext.prototype.END = function() {
    return this.getToken(RubyParser.END, 0);
};

If_statementContext.prototype.else_token = function() {
    return this.getTypedRuleContext(Else_tokenContext,0);
};

If_statementContext.prototype.elsif_statement = function() {
    return this.getTypedRuleContext(Elsif_statementContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitIf_statement(this);
	}
};




RubyParser.If_statementContext = If_statementContext;

RubyParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, RubyParser.RULE_if_statement);
    try {
        this.state = 341;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 319;
            this.match(RubyParser.IF);
            this.state = 320;
            this.cond_expression();
            this.state = 321;
            this.crlf();
            this.state = 322;
            this.statement_body();
            this.state = 323;
            this.match(RubyParser.END);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 325;
            this.match(RubyParser.IF);
            this.state = 326;
            this.cond_expression();
            this.state = 327;
            this.crlf();
            this.state = 328;
            this.statement_body();
            this.state = 329;
            this.else_token();
            this.state = 330;
            this.crlf();
            this.state = 331;
            this.statement_body();
            this.state = 332;
            this.match(RubyParser.END);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 334;
            this.match(RubyParser.IF);
            this.state = 335;
            this.cond_expression();
            this.state = 336;
            this.crlf();
            this.state = 337;
            this.statement_body();
            this.state = 338;
            this.elsif_statement();
            this.state = 339;
            this.match(RubyParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Unless_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_unless_statement;
    return this;
}

Unless_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unless_statementContext.prototype.constructor = Unless_statementContext;

Unless_statementContext.prototype.UNLESS = function() {
    return this.getToken(RubyParser.UNLESS, 0);
};

Unless_statementContext.prototype.cond_expression = function() {
    return this.getTypedRuleContext(Cond_expressionContext,0);
};

Unless_statementContext.prototype.crlf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CrlfContext);
    } else {
        return this.getTypedRuleContext(CrlfContext,i);
    }
};

Unless_statementContext.prototype.statement_body = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_bodyContext);
    } else {
        return this.getTypedRuleContext(Statement_bodyContext,i);
    }
};

Unless_statementContext.prototype.END = function() {
    return this.getToken(RubyParser.END, 0);
};

Unless_statementContext.prototype.else_token = function() {
    return this.getTypedRuleContext(Else_tokenContext,0);
};

Unless_statementContext.prototype.elsif_statement = function() {
    return this.getTypedRuleContext(Elsif_statementContext,0);
};

Unless_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterUnless_statement(this);
	}
};

Unless_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitUnless_statement(this);
	}
};




RubyParser.Unless_statementContext = Unless_statementContext;

RubyParser.prototype.unless_statement = function() {

    var localctx = new Unless_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, RubyParser.RULE_unless_statement);
    try {
        this.state = 365;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 343;
            this.match(RubyParser.UNLESS);
            this.state = 344;
            this.cond_expression();
            this.state = 345;
            this.crlf();
            this.state = 346;
            this.statement_body();
            this.state = 347;
            this.match(RubyParser.END);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 349;
            this.match(RubyParser.UNLESS);
            this.state = 350;
            this.cond_expression();
            this.state = 351;
            this.crlf();
            this.state = 352;
            this.statement_body();
            this.state = 353;
            this.else_token();
            this.state = 354;
            this.crlf();
            this.state = 355;
            this.statement_body();
            this.state = 356;
            this.match(RubyParser.END);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 358;
            this.match(RubyParser.UNLESS);
            this.state = 359;
            this.cond_expression();
            this.state = 360;
            this.crlf();
            this.state = 361;
            this.statement_body();
            this.state = 362;
            this.elsif_statement();
            this.state = 363;
            this.match(RubyParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function While_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_while_statement;
    return this;
}

While_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statementContext.prototype.constructor = While_statementContext;

While_statementContext.prototype.WHILE = function() {
    return this.getToken(RubyParser.WHILE, 0);
};

While_statementContext.prototype.cond_expression = function() {
    return this.getTypedRuleContext(Cond_expressionContext,0);
};

While_statementContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

While_statementContext.prototype.statement_body = function() {
    return this.getTypedRuleContext(Statement_bodyContext,0);
};

While_statementContext.prototype.END = function() {
    return this.getToken(RubyParser.END, 0);
};

While_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterWhile_statement(this);
	}
};

While_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitWhile_statement(this);
	}
};




RubyParser.While_statementContext = While_statementContext;

RubyParser.prototype.while_statement = function() {

    var localctx = new While_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, RubyParser.RULE_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 367;
        this.match(RubyParser.WHILE);
        this.state = 368;
        this.cond_expression();
        this.state = 369;
        this.crlf();
        this.state = 370;
        this.statement_body();
        this.state = 371;
        this.match(RubyParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function For_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_for_statement;
    return this;
}

For_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_statementContext.prototype.constructor = For_statementContext;

For_statementContext.prototype.FOR = function() {
    return this.getToken(RubyParser.FOR, 0);
};

For_statementContext.prototype.LEFT_RBRACKET = function() {
    return this.getToken(RubyParser.LEFT_RBRACKET, 0);
};

For_statementContext.prototype.init_expression = function() {
    return this.getTypedRuleContext(Init_expressionContext,0);
};

For_statementContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(RubyParser.SEMICOLON);
    } else {
        return this.getToken(RubyParser.SEMICOLON, i);
    }
};


For_statementContext.prototype.cond_expression = function() {
    return this.getTypedRuleContext(Cond_expressionContext,0);
};

For_statementContext.prototype.loop_expression = function() {
    return this.getTypedRuleContext(Loop_expressionContext,0);
};

For_statementContext.prototype.RIGHT_RBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_RBRACKET, 0);
};

For_statementContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

For_statementContext.prototype.statement_body = function() {
    return this.getTypedRuleContext(Statement_bodyContext,0);
};

For_statementContext.prototype.END = function() {
    return this.getToken(RubyParser.END, 0);
};

For_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFor_statement(this);
	}
};

For_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFor_statement(this);
	}
};




RubyParser.For_statementContext = For_statementContext;

RubyParser.prototype.for_statement = function() {

    var localctx = new For_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, RubyParser.RULE_for_statement);
    try {
        this.state = 395;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 373;
            this.match(RubyParser.FOR);
            this.state = 374;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 375;
            this.init_expression();
            this.state = 376;
            this.match(RubyParser.SEMICOLON);
            this.state = 377;
            this.cond_expression();
            this.state = 378;
            this.match(RubyParser.SEMICOLON);
            this.state = 379;
            this.loop_expression();
            this.state = 380;
            this.match(RubyParser.RIGHT_RBRACKET);
            this.state = 381;
            this.crlf();
            this.state = 382;
            this.statement_body();
            this.state = 383;
            this.match(RubyParser.END);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 385;
            this.match(RubyParser.FOR);
            this.state = 386;
            this.init_expression();
            this.state = 387;
            this.match(RubyParser.SEMICOLON);
            this.state = 388;
            this.cond_expression();
            this.state = 389;
            this.match(RubyParser.SEMICOLON);
            this.state = 390;
            this.loop_expression();
            this.state = 391;
            this.crlf();
            this.state = 392;
            this.statement_body();
            this.state = 393;
            this.match(RubyParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Init_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_init_expression;
    return this;
}

Init_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Init_expressionContext.prototype.constructor = Init_expressionContext;

Init_expressionContext.prototype.for_init_list = function() {
    return this.getTypedRuleContext(For_init_listContext,0);
};

Init_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterInit_expression(this);
	}
};

Init_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitInit_expression(this);
	}
};




RubyParser.Init_expressionContext = Init_expressionContext;

RubyParser.prototype.init_expression = function() {

    var localctx = new Init_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, RubyParser.RULE_init_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        this.for_init_list(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function All_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_all_assignment;
    return this;
}

All_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
All_assignmentContext.prototype.constructor = All_assignmentContext;

All_assignmentContext.prototype.int_assignment = function() {
    return this.getTypedRuleContext(Int_assignmentContext,0);
};

All_assignmentContext.prototype.float_assignment = function() {
    return this.getTypedRuleContext(Float_assignmentContext,0);
};

All_assignmentContext.prototype.string_assignment = function() {
    return this.getTypedRuleContext(String_assignmentContext,0);
};

All_assignmentContext.prototype.dynamic_assignment = function() {
    return this.getTypedRuleContext(Dynamic_assignmentContext,0);
};

All_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterAll_assignment(this);
	}
};

All_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitAll_assignment(this);
	}
};




RubyParser.All_assignmentContext = All_assignmentContext;

RubyParser.prototype.all_assignment = function() {

    var localctx = new All_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, RubyParser.RULE_all_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.state = 399;
            this.int_assignment();
            break;

        case 2:
            this.state = 400;
            this.float_assignment();
            break;

        case 3:
            this.state = 401;
            this.string_assignment();
            break;

        case 4:
            this.state = 402;
            this.dynamic_assignment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function For_init_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_for_init_list;
    return this;
}

For_init_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_init_listContext.prototype.constructor = For_init_listContext;

For_init_listContext.prototype.all_assignment = function() {
    return this.getTypedRuleContext(All_assignmentContext,0);
};

For_init_listContext.prototype.for_init_list = function() {
    return this.getTypedRuleContext(For_init_listContext,0);
};

For_init_listContext.prototype.COMMA = function() {
    return this.getToken(RubyParser.COMMA, 0);
};

For_init_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFor_init_list(this);
	}
};

For_init_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFor_init_list(this);
	}
};



RubyParser.prototype.for_init_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new For_init_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, RubyParser.RULE_for_init_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 406;
        this.all_assignment();
        this._ctx.stop = this._input.LT(-1);
        this.state = 413;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new For_init_listContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_for_init_list);
                this.state = 408;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 409;
                this.match(RubyParser.COMMA);
                this.state = 410;
                this.all_assignment(); 
            }
            this.state = 415;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Cond_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_cond_expression;
    return this;
}

Cond_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cond_expressionContext.prototype.constructor = Cond_expressionContext;

Cond_expressionContext.prototype.comparison_list = function() {
    return this.getTypedRuleContext(Comparison_listContext,0);
};

Cond_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterCond_expression(this);
	}
};

Cond_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitCond_expression(this);
	}
};




RubyParser.Cond_expressionContext = Cond_expressionContext;

RubyParser.prototype.cond_expression = function() {

    var localctx = new Cond_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, RubyParser.RULE_cond_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.comparison_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Loop_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_loop_expression;
    return this;
}

Loop_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Loop_expressionContext.prototype.constructor = Loop_expressionContext;

Loop_expressionContext.prototype.for_loop_list = function() {
    return this.getTypedRuleContext(For_loop_listContext,0);
};

Loop_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterLoop_expression(this);
	}
};

Loop_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitLoop_expression(this);
	}
};




RubyParser.Loop_expressionContext = Loop_expressionContext;

RubyParser.prototype.loop_expression = function() {

    var localctx = new Loop_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, RubyParser.RULE_loop_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 418;
        this.for_loop_list(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function For_loop_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_for_loop_list;
    return this;
}

For_loop_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_loop_listContext.prototype.constructor = For_loop_listContext;

For_loop_listContext.prototype.all_assignment = function() {
    return this.getTypedRuleContext(All_assignmentContext,0);
};

For_loop_listContext.prototype.for_loop_list = function() {
    return this.getTypedRuleContext(For_loop_listContext,0);
};

For_loop_listContext.prototype.COMMA = function() {
    return this.getToken(RubyParser.COMMA, 0);
};

For_loop_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFor_loop_list(this);
	}
};

For_loop_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFor_loop_list(this);
	}
};



RubyParser.prototype.for_loop_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new For_loop_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, RubyParser.RULE_for_loop_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 421;
        this.all_assignment();
        this._ctx.stop = this._input.LT(-1);
        this.state = 428;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new For_loop_listContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_for_loop_list);
                this.state = 423;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 424;
                this.match(RubyParser.COMMA);
                this.state = 425;
                this.all_assignment(); 
            }
            this.state = 430;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Statement_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_statement_body;
    return this;
}

Statement_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_bodyContext.prototype.constructor = Statement_bodyContext;

Statement_bodyContext.prototype.statement_expression_list = function() {
    return this.getTypedRuleContext(Statement_expression_listContext,0);
};

Statement_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterStatement_body(this);
	}
};

Statement_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitStatement_body(this);
	}
};




RubyParser.Statement_bodyContext = Statement_bodyContext;

RubyParser.prototype.statement_body = function() {

    var localctx = new Statement_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, RubyParser.RULE_statement_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.statement_expression_list(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Statement_expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_statement_expression_list;
    return this;
}

Statement_expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_expression_listContext.prototype.constructor = Statement_expression_listContext;

Statement_expression_listContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Statement_expression_listContext.prototype.terminator = function() {
    return this.getTypedRuleContext(TerminatorContext,0);
};

Statement_expression_listContext.prototype.RETRY = function() {
    return this.getToken(RubyParser.RETRY, 0);
};

Statement_expression_listContext.prototype.break_expression = function() {
    return this.getTypedRuleContext(Break_expressionContext,0);
};

Statement_expression_listContext.prototype.statement_expression_list = function() {
    return this.getTypedRuleContext(Statement_expression_listContext,0);
};

Statement_expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterStatement_expression_list(this);
	}
};

Statement_expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitStatement_expression_list(this);
	}
};



RubyParser.prototype.statement_expression_list = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Statement_expression_listContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, RubyParser.RULE_statement_expression_list, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 442;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case RubyParser.LITERAL:
        case RubyParser.REQUIRE:
        case RubyParser.DEF:
        case RubyParser.RETURN:
        case RubyParser.PIR:
        case RubyParser.IF:
        case RubyParser.UNLESS:
        case RubyParser.WHILE:
        case RubyParser.FOR:
        case RubyParser.TRUE:
        case RubyParser.FALSE:
        case RubyParser.BIT_NOT:
        case RubyParser.NOT:
        case RubyParser.LEFT_RBRACKET:
        case RubyParser.NIL:
        case RubyParser.INT:
        case RubyParser.FLOAT:
        case RubyParser.ID:
        case RubyParser.ID_GLOBAL:
        case RubyParser.ID_FUNCTION:
            this.state = 434;
            this.expression();
            this.state = 435;
            this.terminator(0);
            break;
        case RubyParser.RETRY:
            this.state = 437;
            this.match(RubyParser.RETRY);
            this.state = 438;
            this.terminator(0);
            break;
        case RubyParser.BREAK:
            this.state = 439;
            this.break_expression();
            this.state = 440;
            this.terminator(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 457;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 455;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Statement_expression_listContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_statement_expression_list);
                    this.state = 444;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 445;
                    this.expression();
                    this.state = 446;
                    this.terminator(0);
                    break;

                case 2:
                    localctx = new Statement_expression_listContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_statement_expression_list);
                    this.state = 448;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 449;
                    this.match(RubyParser.RETRY);
                    this.state = 450;
                    this.terminator(0);
                    break;

                case 3:
                    localctx = new Statement_expression_listContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_statement_expression_list);
                    this.state = 451;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 452;
                    this.break_expression();
                    this.state = 453;
                    this.terminator(0);
                    break;

                } 
            }
            this.state = 459;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_assignment;
    this.var_id = null; // LvalueContext
    this.op = null; // Token
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.rvalue = function() {
    return this.getTypedRuleContext(RvalueContext,0);
};

AssignmentContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

AssignmentContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

AssignmentContext.prototype.PLUS_ASSIGN = function() {
    return this.getToken(RubyParser.PLUS_ASSIGN, 0);
};

AssignmentContext.prototype.MINUS_ASSIGN = function() {
    return this.getToken(RubyParser.MINUS_ASSIGN, 0);
};

AssignmentContext.prototype.MUL_ASSIGN = function() {
    return this.getToken(RubyParser.MUL_ASSIGN, 0);
};

AssignmentContext.prototype.DIV_ASSIGN = function() {
    return this.getToken(RubyParser.DIV_ASSIGN, 0);
};

AssignmentContext.prototype.MOD_ASSIGN = function() {
    return this.getToken(RubyParser.MOD_ASSIGN, 0);
};

AssignmentContext.prototype.EXP_ASSIGN = function() {
    return this.getToken(RubyParser.EXP_ASSIGN, 0);
};

AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitAssignment(this);
	}
};




RubyParser.AssignmentContext = AssignmentContext;

RubyParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, RubyParser.RULE_assignment);
    var _la = 0; // Token type
    try {
        this.state = 468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 460;
            localctx.var_id = this.lvalue();
            this.state = 461;
            localctx.op = this.match(RubyParser.ASSIGN);
            this.state = 462;
            this.rvalue(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 464;
            localctx.var_id = this.lvalue();
            this.state = 465;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (RubyParser.PLUS_ASSIGN - 33)) | (1 << (RubyParser.MINUS_ASSIGN - 33)) | (1 << (RubyParser.MUL_ASSIGN - 33)) | (1 << (RubyParser.DIV_ASSIGN - 33)) | (1 << (RubyParser.MOD_ASSIGN - 33)) | (1 << (RubyParser.EXP_ASSIGN - 33)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 466;
            this.rvalue(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dynamic_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_dynamic_assignment;
    this.var_id = null; // LvalueContext
    this.op = null; // Token
    return this;
}

Dynamic_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dynamic_assignmentContext.prototype.constructor = Dynamic_assignmentContext;

Dynamic_assignmentContext.prototype.dynamic_result = function() {
    return this.getTypedRuleContext(Dynamic_resultContext,0);
};

Dynamic_assignmentContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

Dynamic_assignmentContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

Dynamic_assignmentContext.prototype.PLUS_ASSIGN = function() {
    return this.getToken(RubyParser.PLUS_ASSIGN, 0);
};

Dynamic_assignmentContext.prototype.MINUS_ASSIGN = function() {
    return this.getToken(RubyParser.MINUS_ASSIGN, 0);
};

Dynamic_assignmentContext.prototype.MUL_ASSIGN = function() {
    return this.getToken(RubyParser.MUL_ASSIGN, 0);
};

Dynamic_assignmentContext.prototype.DIV_ASSIGN = function() {
    return this.getToken(RubyParser.DIV_ASSIGN, 0);
};

Dynamic_assignmentContext.prototype.MOD_ASSIGN = function() {
    return this.getToken(RubyParser.MOD_ASSIGN, 0);
};

Dynamic_assignmentContext.prototype.EXP_ASSIGN = function() {
    return this.getToken(RubyParser.EXP_ASSIGN, 0);
};

Dynamic_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterDynamic_assignment(this);
	}
};

Dynamic_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitDynamic_assignment(this);
	}
};




RubyParser.Dynamic_assignmentContext = Dynamic_assignmentContext;

RubyParser.prototype.dynamic_assignment = function() {

    var localctx = new Dynamic_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, RubyParser.RULE_dynamic_assignment);
    var _la = 0; // Token type
    try {
        this.state = 478;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 470;
            localctx.var_id = this.lvalue();
            this.state = 471;
            localctx.op = this.match(RubyParser.ASSIGN);
            this.state = 472;
            this.dynamic_result(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 474;
            localctx.var_id = this.lvalue();
            this.state = 475;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (RubyParser.PLUS_ASSIGN - 33)) | (1 << (RubyParser.MINUS_ASSIGN - 33)) | (1 << (RubyParser.MUL_ASSIGN - 33)) | (1 << (RubyParser.DIV_ASSIGN - 33)) | (1 << (RubyParser.MOD_ASSIGN - 33)) | (1 << (RubyParser.EXP_ASSIGN - 33)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 476;
            this.dynamic_result(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Int_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_int_assignment;
    this.var_id = null; // LvalueContext
    this.op = null; // Token
    return this;
}

Int_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Int_assignmentContext.prototype.constructor = Int_assignmentContext;

Int_assignmentContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

Int_assignmentContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

Int_assignmentContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

Int_assignmentContext.prototype.PLUS_ASSIGN = function() {
    return this.getToken(RubyParser.PLUS_ASSIGN, 0);
};

Int_assignmentContext.prototype.MINUS_ASSIGN = function() {
    return this.getToken(RubyParser.MINUS_ASSIGN, 0);
};

Int_assignmentContext.prototype.MUL_ASSIGN = function() {
    return this.getToken(RubyParser.MUL_ASSIGN, 0);
};

Int_assignmentContext.prototype.DIV_ASSIGN = function() {
    return this.getToken(RubyParser.DIV_ASSIGN, 0);
};

Int_assignmentContext.prototype.MOD_ASSIGN = function() {
    return this.getToken(RubyParser.MOD_ASSIGN, 0);
};

Int_assignmentContext.prototype.EXP_ASSIGN = function() {
    return this.getToken(RubyParser.EXP_ASSIGN, 0);
};

Int_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterInt_assignment(this);
	}
};

Int_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitInt_assignment(this);
	}
};




RubyParser.Int_assignmentContext = Int_assignmentContext;

RubyParser.prototype.int_assignment = function() {

    var localctx = new Int_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, RubyParser.RULE_int_assignment);
    var _la = 0; // Token type
    try {
        this.state = 488;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 480;
            localctx.var_id = this.lvalue();
            this.state = 481;
            localctx.op = this.match(RubyParser.ASSIGN);
            this.state = 482;
            this.int_result(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 484;
            localctx.var_id = this.lvalue();
            this.state = 485;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (RubyParser.PLUS_ASSIGN - 33)) | (1 << (RubyParser.MINUS_ASSIGN - 33)) | (1 << (RubyParser.MUL_ASSIGN - 33)) | (1 << (RubyParser.DIV_ASSIGN - 33)) | (1 << (RubyParser.MOD_ASSIGN - 33)) | (1 << (RubyParser.EXP_ASSIGN - 33)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 486;
            this.int_result(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Float_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_float_assignment;
    this.var_id = null; // LvalueContext
    this.op = null; // Token
    return this;
}

Float_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Float_assignmentContext.prototype.constructor = Float_assignmentContext;

Float_assignmentContext.prototype.float_result = function() {
    return this.getTypedRuleContext(Float_resultContext,0);
};

Float_assignmentContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

Float_assignmentContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

Float_assignmentContext.prototype.PLUS_ASSIGN = function() {
    return this.getToken(RubyParser.PLUS_ASSIGN, 0);
};

Float_assignmentContext.prototype.MINUS_ASSIGN = function() {
    return this.getToken(RubyParser.MINUS_ASSIGN, 0);
};

Float_assignmentContext.prototype.MUL_ASSIGN = function() {
    return this.getToken(RubyParser.MUL_ASSIGN, 0);
};

Float_assignmentContext.prototype.DIV_ASSIGN = function() {
    return this.getToken(RubyParser.DIV_ASSIGN, 0);
};

Float_assignmentContext.prototype.MOD_ASSIGN = function() {
    return this.getToken(RubyParser.MOD_ASSIGN, 0);
};

Float_assignmentContext.prototype.EXP_ASSIGN = function() {
    return this.getToken(RubyParser.EXP_ASSIGN, 0);
};

Float_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFloat_assignment(this);
	}
};

Float_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFloat_assignment(this);
	}
};




RubyParser.Float_assignmentContext = Float_assignmentContext;

RubyParser.prototype.float_assignment = function() {

    var localctx = new Float_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, RubyParser.RULE_float_assignment);
    var _la = 0; // Token type
    try {
        this.state = 498;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 490;
            localctx.var_id = this.lvalue();
            this.state = 491;
            localctx.op = this.match(RubyParser.ASSIGN);
            this.state = 492;
            this.float_result(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 494;
            localctx.var_id = this.lvalue();
            this.state = 495;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (RubyParser.PLUS_ASSIGN - 33)) | (1 << (RubyParser.MINUS_ASSIGN - 33)) | (1 << (RubyParser.MUL_ASSIGN - 33)) | (1 << (RubyParser.DIV_ASSIGN - 33)) | (1 << (RubyParser.MOD_ASSIGN - 33)) | (1 << (RubyParser.EXP_ASSIGN - 33)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 496;
            this.float_result(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function String_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_string_assignment;
    this.var_id = null; // LvalueContext
    this.op = null; // Token
    return this;
}

String_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_assignmentContext.prototype.constructor = String_assignmentContext;

String_assignmentContext.prototype.string_result = function() {
    return this.getTypedRuleContext(String_resultContext,0);
};

String_assignmentContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

String_assignmentContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

String_assignmentContext.prototype.PLUS_ASSIGN = function() {
    return this.getToken(RubyParser.PLUS_ASSIGN, 0);
};

String_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterString_assignment(this);
	}
};

String_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitString_assignment(this);
	}
};




RubyParser.String_assignmentContext = String_assignmentContext;

RubyParser.prototype.string_assignment = function() {

    var localctx = new String_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, RubyParser.RULE_string_assignment);
    try {
        this.state = 508;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 500;
            localctx.var_id = this.lvalue();
            this.state = 501;
            localctx.op = this.match(RubyParser.ASSIGN);
            this.state = 502;
            this.string_result(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 504;
            localctx.var_id = this.lvalue();
            this.state = 505;
            localctx.op = this.match(RubyParser.PLUS_ASSIGN);
            this.state = 506;
            this.string_result(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initial_array_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_initial_array_assignment;
    this.var_id = null; // LvalueContext
    this.op = null; // Token
    return this;
}

Initial_array_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initial_array_assignmentContext.prototype.constructor = Initial_array_assignmentContext;

Initial_array_assignmentContext.prototype.LEFT_SBRACKET = function() {
    return this.getToken(RubyParser.LEFT_SBRACKET, 0);
};

Initial_array_assignmentContext.prototype.RIGHT_SBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_SBRACKET, 0);
};

Initial_array_assignmentContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

Initial_array_assignmentContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

Initial_array_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterInitial_array_assignment(this);
	}
};

Initial_array_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitInitial_array_assignment(this);
	}
};




RubyParser.Initial_array_assignmentContext = Initial_array_assignmentContext;

RubyParser.prototype.initial_array_assignment = function() {

    var localctx = new Initial_array_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, RubyParser.RULE_initial_array_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 510;
        localctx.var_id = this.lvalue();
        this.state = 511;
        localctx.op = this.match(RubyParser.ASSIGN);
        this.state = 512;
        this.match(RubyParser.LEFT_SBRACKET);
        this.state = 513;
        this.match(RubyParser.RIGHT_SBRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_array_assignment;
    this.arr_def = null; // Array_selectorContext
    this.op = null; // Token
    this.arr_val = null; // All_resultContext
    return this;
}

Array_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_assignmentContext.prototype.constructor = Array_assignmentContext;

Array_assignmentContext.prototype.array_selector = function() {
    return this.getTypedRuleContext(Array_selectorContext,0);
};

Array_assignmentContext.prototype.ASSIGN = function() {
    return this.getToken(RubyParser.ASSIGN, 0);
};

Array_assignmentContext.prototype.all_result = function() {
    return this.getTypedRuleContext(All_resultContext,0);
};

Array_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterArray_assignment(this);
	}
};

Array_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitArray_assignment(this);
	}
};




RubyParser.Array_assignmentContext = Array_assignmentContext;

RubyParser.prototype.array_assignment = function() {

    var localctx = new Array_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, RubyParser.RULE_array_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        localctx.arr_def = this.array_selector();
        this.state = 516;
        localctx.op = this.match(RubyParser.ASSIGN);
        this.state = 517;
        localctx.arr_val = this.all_result();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_array_definition;
    return this;
}

Array_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_definitionContext.prototype.constructor = Array_definitionContext;

Array_definitionContext.prototype.LEFT_SBRACKET = function() {
    return this.getToken(RubyParser.LEFT_SBRACKET, 0);
};

Array_definitionContext.prototype.array_definition_elements = function() {
    return this.getTypedRuleContext(Array_definition_elementsContext,0);
};

Array_definitionContext.prototype.RIGHT_SBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_SBRACKET, 0);
};

Array_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterArray_definition(this);
	}
};

Array_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitArray_definition(this);
	}
};




RubyParser.Array_definitionContext = Array_definitionContext;

RubyParser.prototype.array_definition = function() {

    var localctx = new Array_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, RubyParser.RULE_array_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this.match(RubyParser.LEFT_SBRACKET);
        this.state = 520;
        this.array_definition_elements(0);
        this.state = 521;
        this.match(RubyParser.RIGHT_SBRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_definition_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_array_definition_elements;
    return this;
}

Array_definition_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_definition_elementsContext.prototype.constructor = Array_definition_elementsContext;

Array_definition_elementsContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

Array_definition_elementsContext.prototype.dynamic_result = function() {
    return this.getTypedRuleContext(Dynamic_resultContext,0);
};

Array_definition_elementsContext.prototype.array_definition_elements = function() {
    return this.getTypedRuleContext(Array_definition_elementsContext,0);
};

Array_definition_elementsContext.prototype.COMMA = function() {
    return this.getToken(RubyParser.COMMA, 0);
};

Array_definition_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterArray_definition_elements(this);
	}
};

Array_definition_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitArray_definition_elements(this);
	}
};



RubyParser.prototype.array_definition_elements = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Array_definition_elementsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 96;
    this.enterRecursionRule(localctx, 96, RubyParser.RULE_array_definition_elements, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.state = 524;
            this.int_result(0);
            break;

        case 2:
            this.state = 525;
            this.dynamic_result(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 536;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Array_definition_elementsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_array_definition_elements);
                this.state = 528;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 529;
                this.match(RubyParser.COMMA);
                this.state = 532;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 530;
                    this.int_result(0);
                    break;

                case 2:
                    this.state = 531;
                    this.dynamic_result(0);
                    break;

                } 
            }
            this.state = 538;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Array_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_array_selector;
    return this;
}

Array_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_selectorContext.prototype.constructor = Array_selectorContext;

Array_selectorContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Array_selectorContext.prototype.LEFT_SBRACKET = function() {
    return this.getToken(RubyParser.LEFT_SBRACKET, 0);
};

Array_selectorContext.prototype.RIGHT_SBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_SBRACKET, 0);
};

Array_selectorContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

Array_selectorContext.prototype.dynamic_result = function() {
    return this.getTypedRuleContext(Dynamic_resultContext,0);
};

Array_selectorContext.prototype.id_global = function() {
    return this.getTypedRuleContext(Id_globalContext,0);
};

Array_selectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterArray_selector(this);
	}
};

Array_selectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitArray_selector(this);
	}
};




RubyParser.Array_selectorContext = Array_selectorContext;

RubyParser.prototype.array_selector = function() {

    var localctx = new Array_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, RubyParser.RULE_array_selector);
    try {
        this.state = 555;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case RubyParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 539;
            this.id();
            this.state = 540;
            this.match(RubyParser.LEFT_SBRACKET);
            this.state = 543;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
            switch(la_) {
            case 1:
                this.state = 541;
                this.int_result(0);
                break;

            case 2:
                this.state = 542;
                this.dynamic_result(0);
                break;

            }
            this.state = 545;
            this.match(RubyParser.RIGHT_SBRACKET);
            break;
        case RubyParser.ID_GLOBAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 547;
            this.id_global();
            this.state = 548;
            this.match(RubyParser.LEFT_SBRACKET);
            this.state = 551;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
            switch(la_) {
            case 1:
                this.state = 549;
                this.int_result(0);
                break;

            case 2:
                this.state = 550;
                this.dynamic_result(0);
                break;

            }
            this.state = 553;
            this.match(RubyParser.RIGHT_SBRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dynamic_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_dynamic_result;
    this.op = null; // Token
    return this;
}

Dynamic_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dynamic_resultContext.prototype.constructor = Dynamic_resultContext;

Dynamic_resultContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

Dynamic_resultContext.prototype.dynamic_result = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dynamic_resultContext);
    } else {
        return this.getTypedRuleContext(Dynamic_resultContext,i);
    }
};

Dynamic_resultContext.prototype.MUL = function() {
    return this.getToken(RubyParser.MUL, 0);
};

Dynamic_resultContext.prototype.DIV = function() {
    return this.getToken(RubyParser.DIV, 0);
};

Dynamic_resultContext.prototype.MOD = function() {
    return this.getToken(RubyParser.MOD, 0);
};

Dynamic_resultContext.prototype.float_result = function() {
    return this.getTypedRuleContext(Float_resultContext,0);
};

Dynamic_resultContext.prototype.string_result = function() {
    return this.getTypedRuleContext(String_resultContext,0);
};

Dynamic_resultContext.prototype.PLUS = function() {
    return this.getToken(RubyParser.PLUS, 0);
};

Dynamic_resultContext.prototype.MINUS = function() {
    return this.getToken(RubyParser.MINUS, 0);
};

Dynamic_resultContext.prototype.LEFT_RBRACKET = function() {
    return this.getToken(RubyParser.LEFT_RBRACKET, 0);
};

Dynamic_resultContext.prototype.RIGHT_RBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_RBRACKET, 0);
};

Dynamic_resultContext.prototype.dynamic = function() {
    return this.getTypedRuleContext(DynamicContext,0);
};

Dynamic_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterDynamic_result(this);
	}
};

Dynamic_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitDynamic_result(this);
	}
};



RubyParser.prototype.dynamic_result = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Dynamic_resultContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 100;
    this.enterRecursionRule(localctx, 100, RubyParser.RULE_dynamic_result, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        switch(la_) {
        case 1:
            this.state = 558;
            this.int_result(0);
            this.state = 559;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 560;
            this.dynamic_result(13);
            break;

        case 2:
            this.state = 562;
            this.float_result(0);
            this.state = 563;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 564;
            this.dynamic_result(11);
            break;

        case 3:
            this.state = 566;
            this.string_result(0);
            this.state = 567;
            localctx.op = this.match(RubyParser.MUL);
            this.state = 568;
            this.dynamic_result(8);
            break;

        case 4:
            this.state = 570;
            this.int_result(0);
            this.state = 571;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 572;
            this.dynamic_result(6);
            break;

        case 5:
            this.state = 574;
            this.float_result(0);
            this.state = 575;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 576;
            this.dynamic_result(4);
            break;

        case 6:
            this.state = 578;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 579;
            this.dynamic_result(0);
            this.state = 580;
            this.match(RubyParser.RIGHT_RBRACKET);
            break;

        case 7:
            this.state = 582;
            this.dynamic();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 608;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 606;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Dynamic_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_dynamic_result);
                    this.state = 585;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 586;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 587;
                    this.dynamic_result(11);
                    break;

                case 2:
                    localctx = new Dynamic_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_dynamic_result);
                    this.state = 588;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 589;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 590;
                    this.dynamic_result(4);
                    break;

                case 3:
                    localctx = new Dynamic_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_dynamic_result);
                    this.state = 591;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 592;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 593;
                    this.int_result(0);
                    break;

                case 4:
                    localctx = new Dynamic_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_dynamic_result);
                    this.state = 594;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 595;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 596;
                    this.float_result(0);
                    break;

                case 5:
                    localctx = new Dynamic_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_dynamic_result);
                    this.state = 597;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 598;
                    localctx.op = this.match(RubyParser.MUL);
                    this.state = 599;
                    this.string_result(0);
                    break;

                case 6:
                    localctx = new Dynamic_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_dynamic_result);
                    this.state = 600;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 601;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 602;
                    this.int_result(0);
                    break;

                case 7:
                    localctx = new Dynamic_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_dynamic_result);
                    this.state = 603;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 604;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 605;
                    this.float_result(0);
                    break;

                } 
            }
            this.state = 610;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function DynamicContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_dynamic;
    return this;
}

DynamicContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DynamicContext.prototype.constructor = DynamicContext;

DynamicContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

DynamicContext.prototype.function_call_assignment = function() {
    return this.getTypedRuleContext(Function_call_assignmentContext,0);
};

DynamicContext.prototype.array_selector = function() {
    return this.getTypedRuleContext(Array_selectorContext,0);
};

DynamicContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterDynamic(this);
	}
};

DynamicContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitDynamic(this);
	}
};




RubyParser.DynamicContext = DynamicContext;

RubyParser.prototype.dynamic = function() {

    var localctx = new DynamicContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, RubyParser.RULE_dynamic);
    try {
        this.state = 614;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 611;
            this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 612;
            this.function_call_assignment();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 613;
            this.array_selector();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Int_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_int_result;
    this.op = null; // Token
    return this;
}

Int_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Int_resultContext.prototype.constructor = Int_resultContext;

Int_resultContext.prototype.LEFT_RBRACKET = function() {
    return this.getToken(RubyParser.LEFT_RBRACKET, 0);
};

Int_resultContext.prototype.int_result = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Int_resultContext);
    } else {
        return this.getTypedRuleContext(Int_resultContext,i);
    }
};

Int_resultContext.prototype.RIGHT_RBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_RBRACKET, 0);
};

Int_resultContext.prototype.int_t = function() {
    return this.getTypedRuleContext(Int_tContext,0);
};

Int_resultContext.prototype.MUL = function() {
    return this.getToken(RubyParser.MUL, 0);
};

Int_resultContext.prototype.DIV = function() {
    return this.getToken(RubyParser.DIV, 0);
};

Int_resultContext.prototype.MOD = function() {
    return this.getToken(RubyParser.MOD, 0);
};

Int_resultContext.prototype.PLUS = function() {
    return this.getToken(RubyParser.PLUS, 0);
};

Int_resultContext.prototype.MINUS = function() {
    return this.getToken(RubyParser.MINUS, 0);
};

Int_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterInt_result(this);
	}
};

Int_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitInt_result(this);
	}
};



RubyParser.prototype.int_result = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Int_resultContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 104;
    this.enterRecursionRule(localctx, 104, RubyParser.RULE_int_result, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 622;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case RubyParser.LEFT_RBRACKET:
            this.state = 617;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 618;
            this.int_result(0);
            this.state = 619;
            this.match(RubyParser.RIGHT_RBRACKET);
            break;
        case RubyParser.INT:
            this.state = 621;
            this.int_t();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 632;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 630;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Int_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_int_result);
                    this.state = 624;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 625;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 626;
                    this.int_result(5);
                    break;

                case 2:
                    localctx = new Int_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_int_result);
                    this.state = 627;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 628;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 629;
                    this.int_result(4);
                    break;

                } 
            }
            this.state = 634;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Float_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_float_result;
    this.op = null; // Token
    return this;
}

Float_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Float_resultContext.prototype.constructor = Float_resultContext;

Float_resultContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

Float_resultContext.prototype.float_result = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Float_resultContext);
    } else {
        return this.getTypedRuleContext(Float_resultContext,i);
    }
};

Float_resultContext.prototype.MUL = function() {
    return this.getToken(RubyParser.MUL, 0);
};

Float_resultContext.prototype.DIV = function() {
    return this.getToken(RubyParser.DIV, 0);
};

Float_resultContext.prototype.MOD = function() {
    return this.getToken(RubyParser.MOD, 0);
};

Float_resultContext.prototype.PLUS = function() {
    return this.getToken(RubyParser.PLUS, 0);
};

Float_resultContext.prototype.MINUS = function() {
    return this.getToken(RubyParser.MINUS, 0);
};

Float_resultContext.prototype.LEFT_RBRACKET = function() {
    return this.getToken(RubyParser.LEFT_RBRACKET, 0);
};

Float_resultContext.prototype.RIGHT_RBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_RBRACKET, 0);
};

Float_resultContext.prototype.float_t = function() {
    return this.getTypedRuleContext(Float_tContext,0);
};

Float_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFloat_result(this);
	}
};

Float_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFloat_result(this);
	}
};



RubyParser.prototype.float_result = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Float_resultContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 106;
    this.enterRecursionRule(localctx, 106, RubyParser.RULE_float_result, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 649;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            this.state = 636;
            this.int_result(0);
            this.state = 637;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 638;
            this.float_result(7);
            break;

        case 2:
            this.state = 640;
            this.int_result(0);
            this.state = 641;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 642;
            this.float_result(4);
            break;

        case 3:
            this.state = 644;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 645;
            this.float_result(0);
            this.state = 646;
            this.match(RubyParser.RIGHT_RBRACKET);
            break;

        case 4:
            this.state = 648;
            this.float_t();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 665;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 663;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Float_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_float_result);
                    this.state = 651;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 652;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 653;
                    this.float_result(9);
                    break;

                case 2:
                    localctx = new Float_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_float_result);
                    this.state = 654;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 655;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 656;
                    this.float_result(6);
                    break;

                case 3:
                    localctx = new Float_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_float_result);
                    this.state = 657;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 658;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 659;
                    this.int_result(0);
                    break;

                case 4:
                    localctx = new Float_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_float_result);
                    this.state = 660;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 661;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 662;
                    this.int_result(0);
                    break;

                } 
            }
            this.state = 667;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function String_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_string_result;
    this.op = null; // Token
    return this;
}

String_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_resultContext.prototype.constructor = String_resultContext;

String_resultContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

String_resultContext.prototype.string_result = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(String_resultContext);
    } else {
        return this.getTypedRuleContext(String_resultContext,i);
    }
};

String_resultContext.prototype.MUL = function() {
    return this.getToken(RubyParser.MUL, 0);
};

String_resultContext.prototype.literal_t = function() {
    return this.getTypedRuleContext(Literal_tContext,0);
};

String_resultContext.prototype.PLUS = function() {
    return this.getToken(RubyParser.PLUS, 0);
};

String_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterString_result(this);
	}
};

String_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitString_result(this);
	}
};



RubyParser.prototype.string_result = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new String_resultContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 108;
    this.enterRecursionRule(localctx, 108, RubyParser.RULE_string_result, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case RubyParser.LEFT_RBRACKET:
        case RubyParser.INT:
            this.state = 669;
            this.int_result(0);
            this.state = 670;
            localctx.op = this.match(RubyParser.MUL);
            this.state = 671;
            this.string_result(3);
            break;
        case RubyParser.LITERAL:
            this.state = 673;
            this.literal_t();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 684;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 682;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new String_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_string_result);
                    this.state = 676;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 677;
                    localctx.op = this.match(RubyParser.PLUS);
                    this.state = 678;
                    this.string_result(3);
                    break;

                case 2:
                    localctx = new String_resultContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_string_result);
                    this.state = 679;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 680;
                    localctx.op = this.match(RubyParser.MUL);
                    this.state = 681;
                    this.int_result(0);
                    break;

                } 
            }
            this.state = 686;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Comparison_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_comparison_list;
    this.left = null; // ComparisonContext
    this.op = null; // Token
    this.right = null; // Comparison_listContext
    return this;
}

Comparison_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comparison_listContext.prototype.constructor = Comparison_listContext;

Comparison_listContext.prototype.comparison = function() {
    return this.getTypedRuleContext(ComparisonContext,0);
};

Comparison_listContext.prototype.BIT_AND = function() {
    return this.getToken(RubyParser.BIT_AND, 0);
};

Comparison_listContext.prototype.comparison_list = function() {
    return this.getTypedRuleContext(Comparison_listContext,0);
};

Comparison_listContext.prototype.AND = function() {
    return this.getToken(RubyParser.AND, 0);
};

Comparison_listContext.prototype.BIT_OR = function() {
    return this.getToken(RubyParser.BIT_OR, 0);
};

Comparison_listContext.prototype.OR = function() {
    return this.getToken(RubyParser.OR, 0);
};

Comparison_listContext.prototype.LEFT_RBRACKET = function() {
    return this.getToken(RubyParser.LEFT_RBRACKET, 0);
};

Comparison_listContext.prototype.RIGHT_RBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_RBRACKET, 0);
};

Comparison_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterComparison_list(this);
	}
};

Comparison_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitComparison_list(this);
	}
};




RubyParser.Comparison_listContext = Comparison_listContext;

RubyParser.prototype.comparison_list = function() {

    var localctx = new Comparison_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, RubyParser.RULE_comparison_list);
    try {
        this.state = 708;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 687;
            localctx.left = this.comparison();
            this.state = 688;
            localctx.op = this.match(RubyParser.BIT_AND);
            this.state = 689;
            localctx.right = this.comparison_list();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            localctx.left = this.comparison();
            this.state = 692;
            localctx.op = this.match(RubyParser.AND);
            this.state = 693;
            localctx.right = this.comparison_list();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 695;
            localctx.left = this.comparison();
            this.state = 696;
            localctx.op = this.match(RubyParser.BIT_OR);
            this.state = 697;
            localctx.right = this.comparison_list();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 699;
            localctx.left = this.comparison();
            this.state = 700;
            localctx.op = this.match(RubyParser.OR);
            this.state = 701;
            localctx.right = this.comparison_list();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 703;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 704;
            this.comparison_list();
            this.state = 705;
            this.match(RubyParser.RIGHT_RBRACKET);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 707;
            this.comparison();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_comparison;
    this.left = null; // Comp_varContext
    this.op = null; // Token
    this.right = null; // Comp_varContext
    return this;
}

ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

ComparisonContext.prototype.comp_var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comp_varContext);
    } else {
        return this.getTypedRuleContext(Comp_varContext,i);
    }
};

ComparisonContext.prototype.LESS = function() {
    return this.getToken(RubyParser.LESS, 0);
};

ComparisonContext.prototype.GREATER = function() {
    return this.getToken(RubyParser.GREATER, 0);
};

ComparisonContext.prototype.LESS_EQUAL = function() {
    return this.getToken(RubyParser.LESS_EQUAL, 0);
};

ComparisonContext.prototype.GREATER_EQUAL = function() {
    return this.getToken(RubyParser.GREATER_EQUAL, 0);
};

ComparisonContext.prototype.EQUAL = function() {
    return this.getToken(RubyParser.EQUAL, 0);
};

ComparisonContext.prototype.NOT_EQUAL = function() {
    return this.getToken(RubyParser.NOT_EQUAL, 0);
};

ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitComparison(this);
	}
};




RubyParser.ComparisonContext = ComparisonContext;

RubyParser.prototype.comparison = function() {

    var localctx = new ComparisonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, RubyParser.RULE_comparison);
    var _la = 0; // Token type
    try {
        this.state = 718;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 710;
            localctx.left = this.comp_var();
            this.state = 711;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.GREATER) | (1 << RubyParser.LESS) | (1 << RubyParser.LESS_EQUAL) | (1 << RubyParser.GREATER_EQUAL))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 712;
            localctx.right = this.comp_var();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 714;
            localctx.left = this.comp_var();
            this.state = 715;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===RubyParser.EQUAL || _la===RubyParser.NOT_EQUAL)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 716;
            localctx.right = this.comp_var();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comp_varContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_comp_var;
    return this;
}

Comp_varContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_varContext.prototype.constructor = Comp_varContext;

Comp_varContext.prototype.all_result = function() {
    return this.getTypedRuleContext(All_resultContext,0);
};

Comp_varContext.prototype.array_selector = function() {
    return this.getTypedRuleContext(Array_selectorContext,0);
};

Comp_varContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Comp_varContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterComp_var(this);
	}
};

Comp_varContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitComp_var(this);
	}
};




RubyParser.Comp_varContext = Comp_varContext;

RubyParser.prototype.comp_var = function() {

    var localctx = new Comp_varContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, RubyParser.RULE_comp_var);
    try {
        this.state = 723;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 720;
            this.all_result();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.array_selector();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 722;
            this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LvalueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_lvalue;
    return this;
}

LvalueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LvalueContext.prototype.constructor = LvalueContext;

LvalueContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

LvalueContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterLvalue(this);
	}
};

LvalueContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitLvalue(this);
	}
};




RubyParser.LvalueContext = LvalueContext;

RubyParser.prototype.lvalue = function() {

    var localctx = new LvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, RubyParser.RULE_lvalue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 725;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RvalueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_rvalue;
    return this;
}

RvalueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RvalueContext.prototype.constructor = RvalueContext;

RvalueContext.prototype.lvalue = function() {
    return this.getTypedRuleContext(LvalueContext,0);
};

RvalueContext.prototype.initial_array_assignment = function() {
    return this.getTypedRuleContext(Initial_array_assignmentContext,0);
};

RvalueContext.prototype.array_assignment = function() {
    return this.getTypedRuleContext(Array_assignmentContext,0);
};

RvalueContext.prototype.int_result = function() {
    return this.getTypedRuleContext(Int_resultContext,0);
};

RvalueContext.prototype.float_result = function() {
    return this.getTypedRuleContext(Float_resultContext,0);
};

RvalueContext.prototype.string_result = function() {
    return this.getTypedRuleContext(String_resultContext,0);
};

RvalueContext.prototype.global_set = function() {
    return this.getTypedRuleContext(Global_setContext,0);
};

RvalueContext.prototype.global_get = function() {
    return this.getTypedRuleContext(Global_getContext,0);
};

RvalueContext.prototype.dynamic_assignment = function() {
    return this.getTypedRuleContext(Dynamic_assignmentContext,0);
};

RvalueContext.prototype.string_assignment = function() {
    return this.getTypedRuleContext(String_assignmentContext,0);
};

RvalueContext.prototype.float_assignment = function() {
    return this.getTypedRuleContext(Float_assignmentContext,0);
};

RvalueContext.prototype.int_assignment = function() {
    return this.getTypedRuleContext(Int_assignmentContext,0);
};

RvalueContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

RvalueContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

RvalueContext.prototype.literal_t = function() {
    return this.getTypedRuleContext(Literal_tContext,0);
};

RvalueContext.prototype.bool_t = function() {
    return this.getTypedRuleContext(Bool_tContext,0);
};

RvalueContext.prototype.float_t = function() {
    return this.getTypedRuleContext(Float_tContext,0);
};

RvalueContext.prototype.int_t = function() {
    return this.getTypedRuleContext(Int_tContext,0);
};

RvalueContext.prototype.nil_t = function() {
    return this.getTypedRuleContext(Nil_tContext,0);
};

RvalueContext.prototype.rvalue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RvalueContext);
    } else {
        return this.getTypedRuleContext(RvalueContext,i);
    }
};

RvalueContext.prototype.NOT = function() {
    return this.getToken(RubyParser.NOT, 0);
};

RvalueContext.prototype.BIT_NOT = function() {
    return this.getToken(RubyParser.BIT_NOT, 0);
};

RvalueContext.prototype.LEFT_RBRACKET = function() {
    return this.getToken(RubyParser.LEFT_RBRACKET, 0);
};

RvalueContext.prototype.RIGHT_RBRACKET = function() {
    return this.getToken(RubyParser.RIGHT_RBRACKET, 0);
};

RvalueContext.prototype.EXP = function() {
    return this.getToken(RubyParser.EXP, 0);
};

RvalueContext.prototype.MUL = function() {
    return this.getToken(RubyParser.MUL, 0);
};

RvalueContext.prototype.DIV = function() {
    return this.getToken(RubyParser.DIV, 0);
};

RvalueContext.prototype.MOD = function() {
    return this.getToken(RubyParser.MOD, 0);
};

RvalueContext.prototype.PLUS = function() {
    return this.getToken(RubyParser.PLUS, 0);
};

RvalueContext.prototype.MINUS = function() {
    return this.getToken(RubyParser.MINUS, 0);
};

RvalueContext.prototype.BIT_SHL = function() {
    return this.getToken(RubyParser.BIT_SHL, 0);
};

RvalueContext.prototype.BIT_SHR = function() {
    return this.getToken(RubyParser.BIT_SHR, 0);
};

RvalueContext.prototype.BIT_AND = function() {
    return this.getToken(RubyParser.BIT_AND, 0);
};

RvalueContext.prototype.BIT_OR = function() {
    return this.getToken(RubyParser.BIT_OR, 0);
};

RvalueContext.prototype.BIT_XOR = function() {
    return this.getToken(RubyParser.BIT_XOR, 0);
};

RvalueContext.prototype.LESS = function() {
    return this.getToken(RubyParser.LESS, 0);
};

RvalueContext.prototype.GREATER = function() {
    return this.getToken(RubyParser.GREATER, 0);
};

RvalueContext.prototype.LESS_EQUAL = function() {
    return this.getToken(RubyParser.LESS_EQUAL, 0);
};

RvalueContext.prototype.GREATER_EQUAL = function() {
    return this.getToken(RubyParser.GREATER_EQUAL, 0);
};

RvalueContext.prototype.EQUAL = function() {
    return this.getToken(RubyParser.EQUAL, 0);
};

RvalueContext.prototype.NOT_EQUAL = function() {
    return this.getToken(RubyParser.NOT_EQUAL, 0);
};

RvalueContext.prototype.OR = function() {
    return this.getToken(RubyParser.OR, 0);
};

RvalueContext.prototype.AND = function() {
    return this.getToken(RubyParser.AND, 0);
};

RvalueContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterRvalue(this);
	}
};

RvalueContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitRvalue(this);
	}
};



RubyParser.prototype.rvalue = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RvalueContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 118;
    this.enterRecursionRule(localctx, 118, RubyParser.RULE_rvalue, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 753;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.state = 728;
            this.lvalue();
            break;

        case 2:
            this.state = 729;
            this.initial_array_assignment();
            break;

        case 3:
            this.state = 730;
            this.array_assignment();
            break;

        case 4:
            this.state = 731;
            this.int_result(0);
            break;

        case 5:
            this.state = 732;
            this.float_result(0);
            break;

        case 6:
            this.state = 733;
            this.string_result(0);
            break;

        case 7:
            this.state = 734;
            this.global_set();
            break;

        case 8:
            this.state = 735;
            this.global_get();
            break;

        case 9:
            this.state = 736;
            this.dynamic_assignment();
            break;

        case 10:
            this.state = 737;
            this.string_assignment();
            break;

        case 11:
            this.state = 738;
            this.float_assignment();
            break;

        case 12:
            this.state = 739;
            this.int_assignment();
            break;

        case 13:
            this.state = 740;
            this.assignment();
            break;

        case 14:
            this.state = 741;
            this.function_call();
            break;

        case 15:
            this.state = 742;
            this.literal_t();
            break;

        case 16:
            this.state = 743;
            this.bool_t();
            break;

        case 17:
            this.state = 744;
            this.float_t();
            break;

        case 18:
            this.state = 745;
            this.int_t();
            break;

        case 19:
            this.state = 746;
            this.nil_t();
            break;

        case 20:
            this.state = 747;
            _la = this._input.LA(1);
            if(!(_la===RubyParser.BIT_NOT || _la===RubyParser.NOT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 748;
            this.rvalue(10);
            break;

        case 21:
            this.state = 749;
            this.match(RubyParser.LEFT_RBRACKET);
            this.state = 750;
            this.rvalue(0);
            this.state = 751;
            this.match(RubyParser.RIGHT_RBRACKET);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 784;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 782;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new RvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_rvalue);
                    this.state = 755;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 756;
                    this.match(RubyParser.EXP);
                    this.state = 757;
                    this.rvalue(12);
                    break;

                case 2:
                    localctx = new RvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_rvalue);
                    this.state = 758;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 759;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.MUL) | (1 << RubyParser.DIV) | (1 << RubyParser.MOD))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 760;
                    this.rvalue(10);
                    break;

                case 3:
                    localctx = new RvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_rvalue);
                    this.state = 761;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 762;
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.PLUS || _la===RubyParser.MINUS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 763;
                    this.rvalue(9);
                    break;

                case 4:
                    localctx = new RvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_rvalue);
                    this.state = 764;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 765;
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.BIT_SHL || _la===RubyParser.BIT_SHR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 766;
                    this.rvalue(8);
                    break;

                case 5:
                    localctx = new RvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_rvalue);
                    this.state = 767;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 768;
                    this.match(RubyParser.BIT_AND);
                    this.state = 769;
                    this.rvalue(7);
                    break;

                case 6:
                    localctx = new RvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_rvalue);
                    this.state = 770;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 771;
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.BIT_OR || _la===RubyParser.BIT_XOR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 772;
                    this.rvalue(6);
                    break;

                case 7:
                    localctx = new RvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_rvalue);
                    this.state = 773;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 774;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << RubyParser.GREATER) | (1 << RubyParser.LESS) | (1 << RubyParser.LESS_EQUAL) | (1 << RubyParser.GREATER_EQUAL))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 775;
                    this.rvalue(5);
                    break;

                case 8:
                    localctx = new RvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_rvalue);
                    this.state = 776;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 777;
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.EQUAL || _la===RubyParser.NOT_EQUAL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 778;
                    this.rvalue(4);
                    break;

                case 9:
                    localctx = new RvalueContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_rvalue);
                    this.state = 779;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 780;
                    _la = this._input.LA(1);
                    if(!(_la===RubyParser.AND || _la===RubyParser.OR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 781;
                    this.rvalue(3);
                    break;

                } 
            }
            this.state = 786;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Break_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_break_expression;
    return this;
}

Break_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_expressionContext.prototype.constructor = Break_expressionContext;

Break_expressionContext.prototype.BREAK = function() {
    return this.getToken(RubyParser.BREAK, 0);
};

Break_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterBreak_expression(this);
	}
};

Break_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitBreak_expression(this);
	}
};




RubyParser.Break_expressionContext = Break_expressionContext;

RubyParser.prototype.break_expression = function() {

    var localctx = new Break_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, RubyParser.RULE_break_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 787;
        this.match(RubyParser.BREAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Literal_tContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_literal_t;
    return this;
}

Literal_tContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_tContext.prototype.constructor = Literal_tContext;

Literal_tContext.prototype.LITERAL = function() {
    return this.getToken(RubyParser.LITERAL, 0);
};

Literal_tContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterLiteral_t(this);
	}
};

Literal_tContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitLiteral_t(this);
	}
};




RubyParser.Literal_tContext = Literal_tContext;

RubyParser.prototype.literal_t = function() {

    var localctx = new Literal_tContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, RubyParser.RULE_literal_t);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 789;
        this.match(RubyParser.LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Float_tContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_float_t;
    return this;
}

Float_tContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Float_tContext.prototype.constructor = Float_tContext;

Float_tContext.prototype.FLOAT = function() {
    return this.getToken(RubyParser.FLOAT, 0);
};

Float_tContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterFloat_t(this);
	}
};

Float_tContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitFloat_t(this);
	}
};




RubyParser.Float_tContext = Float_tContext;

RubyParser.prototype.float_t = function() {

    var localctx = new Float_tContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, RubyParser.RULE_float_t);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 791;
        this.match(RubyParser.FLOAT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Int_tContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_int_t;
    return this;
}

Int_tContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Int_tContext.prototype.constructor = Int_tContext;

Int_tContext.prototype.INT = function() {
    return this.getToken(RubyParser.INT, 0);
};

Int_tContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterInt_t(this);
	}
};

Int_tContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitInt_t(this);
	}
};




RubyParser.Int_tContext = Int_tContext;

RubyParser.prototype.int_t = function() {

    var localctx = new Int_tContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, RubyParser.RULE_int_t);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 793;
        this.match(RubyParser.INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Bool_tContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_bool_t;
    return this;
}

Bool_tContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bool_tContext.prototype.constructor = Bool_tContext;

Bool_tContext.prototype.TRUE = function() {
    return this.getToken(RubyParser.TRUE, 0);
};

Bool_tContext.prototype.FALSE = function() {
    return this.getToken(RubyParser.FALSE, 0);
};

Bool_tContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterBool_t(this);
	}
};

Bool_tContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitBool_t(this);
	}
};




RubyParser.Bool_tContext = Bool_tContext;

RubyParser.prototype.bool_t = function() {

    var localctx = new Bool_tContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, RubyParser.RULE_bool_t);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 795;
        _la = this._input.LA(1);
        if(!(_la===RubyParser.TRUE || _la===RubyParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Nil_tContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_nil_t;
    return this;
}

Nil_tContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nil_tContext.prototype.constructor = Nil_tContext;

Nil_tContext.prototype.NIL = function() {
    return this.getToken(RubyParser.NIL, 0);
};

Nil_tContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterNil_t(this);
	}
};

Nil_tContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitNil_t(this);
	}
};




RubyParser.Nil_tContext = Nil_tContext;

RubyParser.prototype.nil_t = function() {

    var localctx = new Nil_tContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, RubyParser.RULE_nil_t);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 797;
        this.match(RubyParser.NIL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_id;
    return this;
}

IdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdContext.prototype.constructor = IdContext;

IdContext.prototype.ID = function() {
    return this.getToken(RubyParser.ID, 0);
};

IdContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterId(this);
	}
};

IdContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitId(this);
	}
};




RubyParser.IdContext = IdContext;

RubyParser.prototype.id = function() {

    var localctx = new IdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, RubyParser.RULE_id);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 799;
        this.match(RubyParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Id_globalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_id_global;
    return this;
}

Id_globalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_globalContext.prototype.constructor = Id_globalContext;

Id_globalContext.prototype.ID_GLOBAL = function() {
    return this.getToken(RubyParser.ID_GLOBAL, 0);
};

Id_globalContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterId_global(this);
	}
};

Id_globalContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitId_global(this);
	}
};




RubyParser.Id_globalContext = Id_globalContext;

RubyParser.prototype.id_global = function() {

    var localctx = new Id_globalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, RubyParser.RULE_id_global);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 801;
        this.match(RubyParser.ID_GLOBAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Id_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_id_function;
    return this;
}

Id_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_functionContext.prototype.constructor = Id_functionContext;

Id_functionContext.prototype.ID_FUNCTION = function() {
    return this.getToken(RubyParser.ID_FUNCTION, 0);
};

Id_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterId_function(this);
	}
};

Id_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitId_function(this);
	}
};




RubyParser.Id_functionContext = Id_functionContext;

RubyParser.prototype.id_function = function() {

    var localctx = new Id_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, RubyParser.RULE_id_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 803;
        this.match(RubyParser.ID_FUNCTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TerminatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_terminator;
    return this;
}

TerminatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TerminatorContext.prototype.constructor = TerminatorContext;

TerminatorContext.prototype.SEMICOLON = function() {
    return this.getToken(RubyParser.SEMICOLON, 0);
};

TerminatorContext.prototype.crlf = function() {
    return this.getTypedRuleContext(CrlfContext,0);
};

TerminatorContext.prototype.terminator = function() {
    return this.getTypedRuleContext(TerminatorContext,0);
};

TerminatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterTerminator(this);
	}
};

TerminatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitTerminator(this);
	}
};



RubyParser.prototype.terminator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TerminatorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 138;
    this.enterRecursionRule(localctx, 138, RubyParser.RULE_terminator, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case RubyParser.SEMICOLON:
            this.state = 806;
            this.match(RubyParser.SEMICOLON);
            break;
        case RubyParser.CRLF:
            this.state = 807;
            this.crlf();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 816;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 814;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new TerminatorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_terminator);
                    this.state = 810;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 811;
                    this.match(RubyParser.SEMICOLON);
                    break;

                case 2:
                    localctx = new TerminatorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, RubyParser.RULE_terminator);
                    this.state = 812;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 813;
                    this.crlf();
                    break;

                } 
            }
            this.state = 818;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Else_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_else_token;
    return this;
}

Else_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_tokenContext.prototype.constructor = Else_tokenContext;

Else_tokenContext.prototype.ELSE = function() {
    return this.getToken(RubyParser.ELSE, 0);
};

Else_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterElse_token(this);
	}
};

Else_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitElse_token(this);
	}
};




RubyParser.Else_tokenContext = Else_tokenContext;

RubyParser.prototype.else_token = function() {

    var localctx = new Else_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, RubyParser.RULE_else_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 819;
        this.match(RubyParser.ELSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CrlfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = RubyParser.RULE_crlf;
    return this;
}

CrlfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CrlfContext.prototype.constructor = CrlfContext;

CrlfContext.prototype.CRLF = function() {
    return this.getToken(RubyParser.CRLF, 0);
};

CrlfContext.prototype.enterRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.enterCrlf(this);
	}
};

CrlfContext.prototype.exitRule = function(listener) {
    if(listener instanceof RubyListener ) {
        listener.exitCrlf(this);
	}
};




RubyParser.CrlfContext = CrlfContext;

RubyParser.prototype.crlf = function() {

    var localctx = new CrlfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, RubyParser.RULE_crlf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.match(RubyParser.CRLF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


RubyParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 1:
			return this.expression_list_sempred(localctx, predIndex);
	case 15:
			return this.function_definition_params_list_sempred(localctx, predIndex);
	case 20:
			return this.function_call_params_sempred(localctx, predIndex);
	case 34:
			return this.for_init_list_sempred(localctx, predIndex);
	case 37:
			return this.for_loop_list_sempred(localctx, predIndex);
	case 39:
			return this.statement_expression_list_sempred(localctx, predIndex);
	case 48:
			return this.array_definition_elements_sempred(localctx, predIndex);
	case 50:
			return this.dynamic_result_sempred(localctx, predIndex);
	case 52:
			return this.int_result_sempred(localctx, predIndex);
	case 53:
			return this.float_result_sempred(localctx, predIndex);
	case 54:
			return this.string_result_sempred(localctx, predIndex);
	case 59:
			return this.rvalue_sempred(localctx, predIndex);
	case 69:
			return this.terminator_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

RubyParser.prototype.expression_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.function_definition_params_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.function_call_params_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.for_init_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.for_loop_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.statement_expression_list_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 3);
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.array_definition_elements_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.dynamic_result_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 10);
		case 10:
			return this.precpred(this._ctx, 3);
		case 11:
			return this.precpred(this._ctx, 14);
		case 12:
			return this.precpred(this._ctx, 12);
		case 13:
			return this.precpred(this._ctx, 9);
		case 14:
			return this.precpred(this._ctx, 7);
		case 15:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.int_result_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 16:
			return this.precpred(this._ctx, 4);
		case 17:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.float_result_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 18:
			return this.precpred(this._ctx, 8);
		case 19:
			return this.precpred(this._ctx, 5);
		case 20:
			return this.precpred(this._ctx, 6);
		case 21:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.string_result_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 22:
			return this.precpred(this._ctx, 2);
		case 23:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.rvalue_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 24:
			return this.precpred(this._ctx, 11);
		case 25:
			return this.precpred(this._ctx, 9);
		case 26:
			return this.precpred(this._ctx, 8);
		case 27:
			return this.precpred(this._ctx, 7);
		case 28:
			return this.precpred(this._ctx, 6);
		case 29:
			return this.precpred(this._ctx, 5);
		case 30:
			return this.precpred(this._ctx, 4);
		case 31:
			return this.precpred(this._ctx, 3);
		case 32:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

RubyParser.prototype.terminator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.precpred(this._ctx, 4);
		case 34:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.RubyParser = RubyParser;
